var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var Phoenix;
(function (Phoenix) {
    var serial;
    (function (serial) {
        var Serial = /** @class */ (function () {
            function Serial() {
                this._eventList = [];
            }
            Serial.prototype.execute = function (proc) {
                this._eventList.push(proc);
                this._execute();
            };
            Serial.prototype._execute = function () {
                var that = this;
                if (that._inExec)
                    return;
                that._inExec = true;
                try {
                    while (true) {
                        if (!that._eventList.length)
                            break;
                        var p = that._eventList.shift();
                        try {
                            p();
                        }
                        catch (e) {
                        }
                    }
                }
                finally {
                    that._inExec = false;
                }
            };
            return Serial;
        }());
        serial.Serial = Serial;
        var BusEvent = /** @class */ (function () {
            function BusEvent(delay, promise, resolve, errorhandler, ondispose) {
                var that = this;
                that.ondispose = ondispose;
                that.promise = promise;
                that.resolve = resolve;
                that.errorhandler = errorhandler;
                that.dataHandler = that.ondata.bind(that);
                if (delay)
                    that.timer = window.setTimeout(that._execute.bind(that), delay);
                else
                    that._execute();
            }
            BusEvent.prototype.ondata = function (data) {
                var that = this;
                var resolver = that.resolve;
                that.destroy();
                if (resolver)
                    resolver(data);
            };
            BusEvent.prototype.onerror = function (error) {
                var that = this;
                var errorhandler = that.errorhandler;
                that.destroy();
                if (errorhandler)
                    errorhandler(error);
            };
            BusEvent.prototype._execute = function () {
                var that = this;
                if (that.promise && that.promise.then)
                    that.promise.then(that.dataHandler, that.onerror.bind(that));
                else if (that.promise && typeof that.promise === 'function')
                    that.dataHandler(that.promise());
                else
                    that.dataHandler(that.promise);
            };
            BusEvent.prototype._cleaTimeout = function () {
                var that = this;
                if (that.timer) {
                    window.clearTimeout(that.timer);
                    that.timer = 0;
                }
            };
            BusEvent.prototype.destroy = function () {
                var that = this;
                that.resolve = null;
                that.errorhandler = null;
                that._cleaTimeout();
                that.promise = null;
                var od = that.ondispose;
                that.ondispose = null;
                if (od)
                    od(that);
            };
            return BusEvent;
        }());
        var SingleEventBus = /** @class */ (function () {
            function SingleEventBus(delay) {
                this.defaultDelay = 0;
                var that = this;
                that.defaultDelay = delay;
                that._error = that._errorHandler.bind(that);
                that._dispose = that._onEventDisposed.bind(that);
            }
            SingleEventBus.prototype._errorHandler = function (error) {
                var that = this;
                if (that.onError)
                    that.onError(error);
            };
            SingleEventBus.prototype.clear = function () {
                var that = this;
                if (that.currentEvent) {
                    that.currentEvent.destroy();
                    that.currentEvent = null;
                }
            };
            SingleEventBus.prototype._onEventDisposed = function (event) {
                var that = this;
                that.currentEvent = null;
            };
            SingleEventBus.prototype.push = function (promise, onsuccess, nodelay) {
                var that = this;
                that.clear();
                var delay = nodelay ? 0 : that.defaultDelay;
                that.currentEvent = new BusEvent(delay, promise, onsuccess, that._error, that._dispose);
            };
            SingleEventBus.prototype.destroy = function () {
                var that = this;
                that.clear();
            };
            return SingleEventBus;
        }());
        serial.SingleEventBus = SingleEventBus;
        serial.GlbSerial = new Serial();
    })(serial = Phoenix.serial || (Phoenix.serial = {}));
})(Phoenix || (Phoenix = {}));
var Phoenix;
(function (Phoenix) {
    var _p = Phoenix;
    var utils;
    (function (utils) {
        var _getPromise = function () {
            return window['Promise'] || (window['ES6Promise'] ? window['ES6Promise'].Promise : null);
        }, _p8 = function (s) {
            var p = (Math.random().toString(16) + "000000000").substr(2, 8);
            return s ? "-" + p.substr(0, 4) + "-" + p.substr(4, 4) : p;
        }, _uuid = function () {
            return _p8(false) + _p8(true) + _p8(true) + _p8(false);
        }, _allocID = function () {
            return "I" + _p8(false) + _p8(false) + _p8(false) + _p8(false);
        }, _format = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            return args[0].replace(/{(\d+)}/g, function (match, num) {
                num = parseInt(num, 10);
                return args[num + 1];
            });
        }, _formatByName = function (value, params) {
            return value.replace(/{([^{]*)}/g, function (match, val) {
                var segments = val.split('.');
                var cv = params;
                while (segments.length) {
                    cv = cv[segments.shift()];
                    if (!cv)
                        break;
                }
                return cv || '';
            });
        }, _isNull = function (value) {
            return value === null;
        }, _isUndefined = function (value) {
            return value === undefined;
        }, _isNullOrUndefined = function (value) {
            return value === null || value === undefined;
        }, _merge = function (src, dst) {
            if (!src)
                return;
            for (var p in src) {
                var pv = src[p];
                var ov = dst[p];
                if (pv !== null && typeof pv === 'object' && !Array.isArray(pv)) {
                    dst[p] = dst[p] || {};
                    _merge(pv, dst[p]);
                }
                else
                    dst[p] = pv;
            }
        }, _cleanUpObject = function (src) {
            Object.keys(src).forEach(function (p) {
                src[p] = null;
            });
        }, _getValue = function (value, path) {
            var a = path.split('.');
            if (a.length === 1)
                return value ? value[path] : undefined;
            var cp = value, cd = null;
            for (var i = 0, len = a.length; i < len; i++) {
                cd = cp[a[i]];
                if (!cd)
                    return cd;
                cp = cd;
            }
            return cd;
        }, _logModules = {
            scope: false,
            destroy: false,
            menu: false,
            proxydata: false
        }, _copy = function (src) {
            var res = {};
            for (var p in src)
                res[p] = src[p];
            return res;
        }, _equals = function (src, dst) {
            if (!src && dst || !dst && src)
                return false;
            if (src === dst)
                return true;
            if (!src && !dst)
                return false;
            if (Array.isArray(src)) {
                if (src.length !== dst.length) {
                    return false;
                }
                for (var j = 0, ll = src.length; j < ll; j++) {
                    if (!_equals(src[j], dst[j]))
                        return false;
                }
                return true;
            }
            else if (typeof src === 'object') {
                if (typeof src !== typeof dst)
                    return false;
                var srcp = Object.keys(src);
                var dstp = Object.keys(dst);
                if (srcp.length !== dstp.length)
                    return false;
                for (var i = 0, len = srcp.length; i < len; i++) {
                    if (!_equals(src[srcp[i]], dst[srcp[i]]))
                        return false;
                }
                return true;
            }
            return false;
        }, _deltaPatch = function (oldValue, newValue, dst) {
            var oldProps = Object.keys(oldValue);
            var newProps = Object.keys(newValue);
            oldProps.forEach(function (pn) {
                var ov = oldValue[pn];
                var i = newProps.indexOf(pn);
                if (i >= 0) {
                    newProps.splice(i, 1);
                    var nv = newValue[pn];
                    if (nv === ov)
                        return;
                    if (nv === null) {
                        dst[pn] = null;
                    }
                    else if (ov === null) {
                        dst[pn] = nv;
                    }
                    else if (Array.isArray(ov)) {
                        if (!_equals(ov, nv))
                            dst[pn] = nv;
                    }
                    else if (typeof ov === 'object') {
                        if (!_equals(ov, nv)) {
                            dst[pn] = {};
                            _deltaPatch(ov, nv, dst[pn]);
                        }
                    }
                    else
                        dst[pn] = nv;
                }
                else {
                    // removed
                    dst[pn] = null;
                }
            });
            newProps.forEach(function (pn) {
                dst[pn] = newValue[pn];
            });
        }, _logModule = function (moduleName, value) {
            if (value !== undefined)
                _logModules[moduleName] = value;
            return _logModules[moduleName];
        }, _log = function (value, moduleName) {
            if (!_logModules)
                return;
            if (_logModules[moduleName])
                console.log(value);
        }, entityMap = {
            "&": "&amp;",
            "<": "&lt;",
            ">": "&gt;",
            '"': '&quot;',
            "'": '&#39;',
            "/": '&#x2F;'
        }, _escapeHtml = function (value) {
            return (value || '').replace(/[&<>"'\/]/g, function (s) {
                return entityMap[s];
            });
        }, _getPath = function () {
            var scripts = document.getElementsByTagName('script');
            for (var i = scripts.length - 1; i >= 0; --i) {
                var s = scripts[i].src.split('?')[0];
                var a = s.split('/'), l = a.length, li = a[l - 1].toLowerCase();
                if (li == "phoenix.js" || li == "phoenix.min.js" || (li == 'core.js' && a[l - 2] == 'core')) {
                    var j = l - 1;
                    if (li == 'core.js')
                        j--;
                    return a.slice(0, j).join('/');
                }
            }
            throw "Invalid script Name";
        }, _showAndLogRules = false, _logRule = function (spaces, rule, trigger, entity) {
            if (_showAndLogRules) {
                spaces = (spaces || 1) - 1;
                var sSpaces = new Array(spaces).join('  ');
                if (typeof rule === 'string')
                    console.log(_format('{0}{1}".', sSpaces, rule));
                else
                    console.log(_format('{0} {4} Rule: "{1} - {2}", triggered by "{3}".', sSpaces, rule.name, rule.description, trigger, entity));
            }
        }, _showRules = function (value) {
            if (value !== undefined) {
                _showAndLogRules = value;
            }
            return _showAndLogRules;
        }, _extractData = function (path, value, keepVariable) {
            if (path.indexOf(".") >= 0) {
                var c = value;
                path.split(".").forEach(function (pn) {
                    if (c)
                        c = c[pn];
                });
                return (c || '') + '';
            }
            else
                return value[path] === undefined ? (keepVariable ? path : '') : value[path];
            ;
        }, _parseVariable = function (path, value) {
            return _extractData(path, value, true);
        }, _hasexp = function (expression) {
            return (expression || '').indexOf('{{') >= 0;
        }, _parseexp = function (expression, context) {
            return expression.replace(/{{([^{]*)}}/g, function (match, p) {
                return _extractData(p, context, false);
            });
        }, _extractAngularValues = function (expression, map) {
            expression.replace(/\{\{([^{]*)\}\}/g, function (match, p) {
                map.push({ name: (p.split('|'))[0].trim() });
                return '';
            });
            return map.length > 0;
        }, _execFilter = function (filter, value) {
            switch (filter) {
                case 'uppercase':
                    return value.toUpperCase();
                case 'lowercase':
                    return value.toLowerCase();
                case 'firstChar':
                    return value && value.length ? value[0] : '';
            }
            return value;
        }, _execAngularExpression = function (expression, context, noExpand) {
            return expression.replace(/\{\{([^{]*)\}\}/g, function (match, p) {
                var ss = p.split('|');
                var prop = (ss[0] || '').trim();
                var val = noExpand ? context[prop] : _extractData(prop, context, false);
                for (var i = 1, ll = ss.length; i < ll; i++) {
                    val = _execFilter((ss[i] || '').trim(), val);
                }
                return val;
            });
        }, _dp = function (propertyName, target) {
            var obj = target || this;
            Object.defineProperty(obj.props, propertyName, {
                get: function () {
                    return obj.data[propertyName];
                },
                set: function (value) {
                    if (value != obj.data[propertyName]) {
                        obj.data[propertyName] = value;
                        obj._notifyChange(propertyName);
                    }
                },
                enumerable: true
            });
        }, _applyMixins = function (derivedCtor, baseCtors) {
            baseCtors.forEach(function (baseCtor) {
                Object.getOwnPropertyNames(baseCtor.prototype).forEach(function (name) {
                    derivedCtor.prototype[name] = baseCtor.prototype[name];
                });
            });
        }, _focusDelay = function () {
            return function (fn) {
                setTimeout(function () {
                    fn();
                }, 30);
            };
        }, _getNextTick = function () {
            var nextTickFn;
            if (window.setImmediate) {
                nextTickFn = function nextTickSetImmediate(fn) {
                    setImmediate(function () {
                        fn();
                    });
                };
            }
            else {
                nextTickFn = function nextTickSetTimeout(fn) {
                    setTimeout(function () {
                        fn();
                    }, 0);
                };
            }
            return nextTickFn;
        }, _extend = function (dst, opts) {
            dst = dst || {};
            if (Object && Object["assign"]) {
                return Object["assign"](dst, opts);
            }
            else {
                Object.keys(opts).forEach(function (pn) {
                    dst[pn] = opts[pn];
                });
            }
            return dst;
        }, _getDataAsPromise = function (localData) {
            var _promise = _getPromise();
            return _promise.resolve(localData);
            //let nt = _getNextTick();
            //return new _promise(function (resolve, reject) {
            //    nt(function () {
            //        resolve(ldata);
            //    })
            //});
        };
        utils.Promise = _getPromise();
        utils.allocUuid = _uuid;
        utils.allocID = _allocID;
        utils.format = _format;
        utils.merge = _merge;
        utils.formatNames = _formatByName;
        utils.extend = _extend;
        utils.logModule = _logModule;
        utils.log = _log;
        utils.equals = _equals;
        utils.copy = _copy;
        utils.deltaPatch = function (oldValue, newValue) {
            var dst = {};
            _deltaPatch(oldValue, newValue, dst);
            if (!Object.keys(dst).length)
                return null;
            return dst;
        };
        utils.isNull = _isNull;
        utils.isUndefined = _isUndefined;
        utils.isNullOrUndefined = _isNullOrUndefined;
        utils.logRule = _logRule;
        utils.showRules = _showRules;
        utils.escapeHtml = _escapeHtml;
        utils.phoenixPath = _getPath;
        utils.parseExpression = _parseexp;
        utils.hasExpression = _hasexp;
        utils.parseVariable = _parseVariable;
        utils.defineProperty = _dp;
        utils.applyMixins = _applyMixins;
        utils.nextTick = _getNextTick();
        utils.focusDelay = _focusDelay();
        utils.dataAsPromise = _getDataAsPromise;
        utils.extractAngularVars = _extractAngularValues;
        utils.execAngularExpression = _execAngularExpression;
        utils.gmapsKey = 'AIzaSyDiKrbrYbAywKceJxGkXMp-g2n0nHKCCQo';
        utils.confirm = function (title, message, success, cancel) {
            if (window.confirm(message))
                success();
            else if (cancel) {
                cancel();
            }
        };
        utils.alert = function (title, message, success) {
            window.alert(message);
        };
        utils.prompt = function (title, defaultValue, success) {
            var value = window.prompt(title, defaultValue);
            success(value);
        };
        utils.cleanUpObject = _cleanUpObject;
        utils.getValue = _getValue;
    })(utils = Phoenix.utils || (Phoenix.utils = {}));
    (function _polyfill() {
        var arrayProto = Array.prototype;
        if (!arrayProto.find) {
            arrayProto.find = function (predicate, thisArg) {
                if (this === null) {
                    throw new TypeError('Array.prototype.find called on null or undefined');
                }
                if (typeof predicate !== 'function') {
                    throw new TypeError('predicate must be a function');
                }
                var list = Object(this);
                var length = list.length >>> 0;
                var thisArg = arguments[1];
                var value;
                for (var i = 0; i < length; i++) {
                    value = list[i];
                    if (predicate.call(thisArg, value, i, list)) {
                        return value;
                    }
                }
                return undefined;
            };
        }
        if (!arrayProto.findIndex) {
            arrayProto.findIndex = function (predicate, thisArg) {
                if (this === null) {
                    throw new TypeError('Array.prototype.find called on null or undefined');
                }
                if (typeof predicate !== 'function') {
                    throw new TypeError('predicate must be a function');
                }
                var list = Object(this);
                var length = list.length >>> 0;
                var thisArg = arguments[1];
                var value;
                for (var i = 0; i < length; i++) {
                    value = list[i];
                    if (predicate.call(thisArg, value, i, list)) {
                        return i;
                    }
                }
                return -1;
            };
        }
    })();
})(Phoenix || (Phoenix = {}));
var Phoenix;
(function (Phoenix) {
    Phoenix.locale = {};
})(Phoenix || (Phoenix = {}));
var Phoenix;
(function (Phoenix) {
    var customData;
    (function (customData) {
        var _userData = {}, _registerData = function (namespace, value) {
            var a = namespace.split('.');
            var cp = _userData;
            for (var i = 0, len = a.length - 1; i < len; i++) {
                var p = a[i];
                cp[p] = cp[p] || {};
                cp = cp[p];
            }
            cp[a[a.length - 1]] = value;
        }, _unregisterData = function (namespace, value) {
            var a = namespace.split('.');
            var cp = _userData;
            for (var i = 0, len = a.length - 1; i < len; i++) {
                var p = a[i];
                if (!cp[p])
                    return;
                cp[p] = cp[p] || {};
                cp = cp[p];
            }
            cp[a[a.length - 1]] = null;
        }, _getRegisteredData = function (namespace) {
            var a = namespace.split('.');
            var cp = _userData, cd = null;
            for (var i = 0, len = a.length; i < len; i++) {
                cd = cp[a[i]];
                if (!cd)
                    return cd;
                cp = cd;
            }
            return cd;
        };
        customData.register = _registerData;
        customData.unregister = _unregisterData;
        customData.get = _getRegisteredData;
    })(customData = Phoenix.customData || (Phoenix.customData = {}));
})(Phoenix || (Phoenix = {}));
var Phoenix;
(function (Phoenix) {
    Phoenix.device = {
        phone: false,
        tablet: false,
        deviceType: ''
    };
    var _load$Mem = function () {
        try {
            if (window.sessionStorage) {
                return JSON.parse(window.sessionStorage.getItem('$mem')) || {};
            }
        }
        catch (ex) {
            return {};
        }
    };
    var _save$Mem = function (value) {
        value = value || {};
        try {
            if (window.sessionStorage) {
                window.sessionStorage.setItem('$mem', JSON.stringify(value));
            }
        }
        catch (ex) {
        }
    };
    Phoenix.$mem = _load$Mem();
    function save$mem() {
        _save$Mem(Phoenix.$mem);
    }
    Phoenix.save$mem = save$mem;
    function sessionPreferences(name, value) {
        var p = null;
        try {
            p = JSON.parse(window.sessionStorage.getItem('preferences'));
        }
        catch (ex) { }
        if (value === undefined) {
            return p ? p[name] : undefined;
        }
        else {
            p = p || {};
            p[name] = value;
            try {
                window.sessionStorage.setItem('preferences', JSON.stringify(p));
            }
            catch (ex) { }
        }
    }
    Phoenix.sessionPreferences = sessionPreferences;
    ;
    function preferences(name, value) {
        var p = null;
        try {
            p = JSON.parse(window.localStorage.getItem('preferences'));
        }
        catch (ex) { }
        if (value === undefined) {
            return p ? p[name] : undefined;
        }
        else {
            p = p || {};
            p[name] = value;
            try {
                window.localStorage.setItem('preferences', JSON.stringify(p));
            }
            catch (ex) { }
        }
    }
    Phoenix.preferences = preferences;
    Phoenix.build = { version: '0.1.0.0', release: false, authMode: 'dev' };
})(Phoenix || (Phoenix = {}));
/// <reference path="./globals.ts" />
var Phoenix;
(function (Phoenix) {
    var _build = Phoenix.build;
    var authentication;
    (function (authentication) {
        var _memdbStorage = {}, _memorydb = {
            setItem: function (name, value) {
                _memdbStorage[name] = value;
            },
            getItem: function (name) {
                return _memdbStorage[name];
            }
        }, _afterLogout = [], _db = function () {
            var db = null;
            try {
                //db = (_build.release ? window.sessionStorage : window.localStorage);
                db = window.localStorage;
            }
            catch (ex) {
                db = null;
            }
            if (!db)
                db = _memorydb;
            return db;
        }, _save = function (credentials, onlyCredentials) {
            if (!onlyCredentials)
                credentials.basic = "Basic " + window.btoa((credentials.login || '') + ':' + (credentials.password || ''));
            _db().setItem("authentication", JSON.stringify(credentials));
        }, _load = function () {
            try {
                return JSON.parse(_db().getItem("authentication"));
            }
            catch (ex) {
                return null;
            }
        }, _registerAfterLogout = function (hnd) {
            _afterLogout.push(hnd);
        }, _clear = function () {
            _db().setItem("authentication", 'null');
            _afterLogout.forEach(function (hnd) {
                hnd();
            });
        };
        authentication.db = _db;
        authentication.save = _save;
        authentication.load = _load;
        authentication.clear = _clear;
        authentication.registerAfterLogout = _registerAfterLogout;
    })(authentication = Phoenix.authentication || (Phoenix.authentication = {}));
})(Phoenix || (Phoenix = {}));
var Phoenix;
(function (Phoenix) {
    var application;
    (function (application) {
        var _cfgdata = {}, _setconfig = function (config, value) {
            _cfgdata[config] = value;
            return value;
        }, _getconfig = function (config) {
            return _cfgdata[config];
        };
        application.core = "phoenix";
        application.name = "";
        application.support = "";
        application.homeName = "home";
        application.title = "";
        application.licences = {};
        application.configuration = null;
        application.useJSONPatch = false;
        function config(appName, cfg) {
            appName = appName || application.name;
            if (cfg == undefined)
                return _getconfig("application_" + appName);
            else
                return _setconfig("application_" + appName, cfg);
        }
        application.config = config;
        ;
        function init(appName, appTitle, config) {
            application.name = appName;
            application.title = appTitle;
            if (config && config.homes && config.homes[appName])
                application.homeName = config.homes[appName];
            application.configuration = config;
            if (angular) {
                var am = config ? config.angularModules || [] : [];
                if (!Array.isArray(am) && (typeof am === 'object'))
                    am = am[appName] || [];
                application.angularApplication = angular.module(appName, am);
            }
        }
        application.init = init;
        ;
        function portailName() {
            return application.configuration && application.configuration.portailName ? application.configuration.portailName : 'portail';
        }
        application.portailName = portailName;
        function isPortail() {
            return application.name === portailName();
        }
        application.isPortail = isPortail;
        function isCustomizable(typeRes, resName) {
            var cfg = config(application.name);
            if (cfg && cfg.customizable) {
                if (resName.indexOf('.json') < 0)
                    resName = resName + '.json';
                return cfg.customizable.indexOf([typeRes, application.name, resName].join('/')) >= 0;
            }
            return false;
        }
        application.isCustomizable = isCustomizable;
    })(application = Phoenix.application || (Phoenix.application = {}));
})(Phoenix || (Phoenix = {}));
/// <reference path="./utils.ts" />
/// <reference path="./locale.ts" />
/// <reference path="./customdata.ts" />
/// <reference path="./authentication.ts" />
/// <reference path="./application.ts" />
var Phoenix;
(function (Phoenix) {
    var ajax;
    (function (ajax) {
        var _utils = Phoenix.utils, _application = Phoenix.application, _customData = Phoenix.customData, _authentication = Phoenix.authentication, _locale = Phoenix.locale;
        var _ajaxInterceptors = {}, _intercept = function (status) {
            var ii = _ajaxInterceptors['s' + status];
            if (ii && !ii.disabled) {
                ii.handlers.forEach(function (v) {
                    v();
                });
                return true;
            }
            return false;
        }, _autologon = function () {
            var appConfig = _application.configuration;
            return (appConfig && appConfig.authentication && appConfig.authentication.autoLogon && appConfig.authentication.autoLogon.force);
        }, _addAjaxInterceptor = function (status, handler) {
            var p = 's' + status;
            if (p === 's401' && _autologon())
                return;
            var a = _ajaxInterceptors[p] || {
                disabled: false,
                handlers: []
            };
            a.handlers.push(handler);
            _ajaxInterceptors[p] = a;
        }, _activateInterceptor = function (status, value) {
            var p = 's' + status;
            var a = _ajaxInterceptors['s' + status];
            if (a)
                a.disabled = !value;
        }, _isFunction = function (obj) {
            return obj && typeof obj === 'function';
        }, _parseError = function (jqXHR) {
            var res = null;
            if (jqXHR.responseText) {
                res = { responseText: jqXHR.responseText };
            }
            if (jqXHR.responseJSON) {
                res = res || {};
                if (typeof jqXHR.responseJSON === 'object') {
                    res.json = jqXHR.responseJSON;
                }
                else {
                    try {
                        res.json = JSON.parse(jqXHR.responseJSON);
                    }
                    catch (e) {
                    }
                }
            }
            return res;
        }, _parseAjaxException = function (ex) {
            var res = { message: '', list: [] };
            if (ex && typeof ex !== 'object')
                ex = { message: ex };
            ex = ex || {};
            res.status = ex.status;
            ex.message = ex.message || _locale.errors.unknownError;
            var cmessage;
            if (ex.detail) {
                if (ex.detail.json && ex.detail.json.error) {
                    var ce = ex.detail.json.error, me = void 0;
                    if (ce.details !== undefined)
                        me = ce;
                    cmessage = ce.message;
                    if (ce.innererror && ce.innererror.message) {
                        if (ce.innererror.type === 'Json') {
                            me = JSON.parse(ce.innererror.message);
                        }
                    }
                    if (me) {
                        res.message = me.message;
                        if (me.details) {
                            me.details.forEach(function (det) {
                                res.list.push({ message: det.message, target: det.target });
                            });
                        }
                        return res;
                    }
                }
                else if (ex.detail.json && ex.detail.json.exceptionMessage) {
                    cmessage = ex.detail.json.exceptionMessage;
                }
                else
                    cmessage = ex.detail.responseText;
            }
            res.message = cmessage || ex.message;
            return res;
        }, _get = function (lurl, options, ondata) {
            if (lurl && lurl.charAt(0) === ':') {
                lurl = location.protocol + '//' + location.hostname + lurl;
            }
            if (!ondata && _isFunction(options)) {
                ondata = options;
                options = null;
            }
            var opts = {
                type: 'GET',
                url: lurl,
                dataType: 'json',
                accept: 'application/json'
            };
            var errors = null;
            if (options) {
                errors = options.$errors;
                delete options.$errors;
                Object.keys(opts).forEach(function (pn) {
                    options[pn] = opts[pn];
                });
                opts = options;
            }
            var _promise = _utils.Promise;
            return new _promise(function (resolve, reject) {
                $.ajax(opts).done(function (data, textStatus, jqXHR) {
                    if (ondata)
                        data = ondata(data);
                    resolve(data);
                }).fail(function (jqXHR, textStatus, errorThrown) {
                    if (options && options.ignore && options.ignore['' + jqXHR.status])
                        return resolve({});
                    if (errors && errors[jqXHR.status + '']) {
                        var errCode = jqXHR.status + '';
                        if (typeof errors[errCode] === 'string') {
                            var hnd = _customData.get(errors[errCode]);
                            if (hnd)
                                resolve(hnd());
                        }
                        else
                            return resolve(errors[errCode]);
                    }
                    if (_intercept(jqXHR.status)) {
                        return resolve({});
                    }
                    if (jqXHR.status >= 500 && _locale && _locale.errors) {
                        textStatus = _locale.errors.error500;
                        errorThrown = null;
                    }
                    var detail = _parseError(jqXHR);
                    if (detail)
                        errorThrown = null;
                    var errorThrownObject = null;
                    if (errorThrown) {
                        if (typeof errorThrown === 'string') {
                            errorThrownObject = { message: errorThrown };
                        }
                        else
                            errorThrownObject = errorThrown;
                    }
                    errorThrownObject = errorThrownObject || {
                        message: textStatus,
                        detail: detail
                    };
                    errorThrownObject.status = jqXHR.status;
                    errorThrownObject._ajax = true;
                    if (errorThrownObject.message === 'error' && errorThrownObject.detail && errorThrownObject.detail.responseText) {
                        errorThrownObject.message = errorThrownObject.detail.responseText;
                    }
                    reject(errorThrownObject);
                });
            });
        }, _sendVerb = function (method, lurl, data, options) {
            var _promise = _utils.Promise;
            if (lurl && lurl.charAt(0) === ':') {
                lurl = location.protocol + '//' + location.hostname + lurl;
            }
            var opts = {
                type: method,
                contentType: 'application/json',
                accept: 'application/json',
                url: lurl,
                data: null
            };
            if (options && options.headers) {
                opts.headers = options.headers;
                if (opts.headers.contentType)
                    opts.contentType = opts.headers.contentType;
            }
            if (data && opts.contentType.indexOf('application/json') >= 0)
                opts.data = JSON.stringify(data);
            else
                opts.data = data;
            return new _promise(function (resolve, reject) {
                $.ajax(opts).done(function (data, textStatus, jqXHR) {
                    resolve(data);
                }).fail(function (jqXHR, textStatus, errorThrown) {
                    if (options && options.ignore && options.ignore['' + jqXHR.status])
                        return resolve({});
                    if (_intercept(jqXHR.status)) {
                        return resolve({});
                    }
                    if (jqXHR.status >= 500 && _locale && _locale.errors) {
                        textStatus = _locale.errors.error500;
                        errorThrown = null;
                    }
                    var detail = _parseError(jqXHR);
                    if (detail)
                        errorThrown = null;
                    var errorThrownObject = null;
                    if (errorThrown) {
                        if (typeof errorThrown === 'string') {
                            errorThrownObject = { message: errorThrown };
                        }
                        else
                            errorThrownObject = errorThrown;
                    }
                    errorThrownObject = errorThrownObject || {
                        message: textStatus,
                        detail: detail
                    };
                    errorThrownObject.status = jqXHR.status;
                    reject(errorThrownObject);
                });
            });
        }, _put = function (lurl, data, options) {
            return _sendVerb('PUT', lurl, data, options);
        }, _patch = function (lurl, data, options) {
            return _sendVerb('PATCH', lurl, data, options);
        }, _post = function (lurl, data, options) {
            return _sendVerb('POST', lurl, data, options);
        }, _delete = function (lurl, options) {
            return _sendVerb('DELETE', lurl, null, options);
        }, _dynscripts = {}, _getOptions = function (odataCfg) {
            if (!odataCfg) {
                var cfg = _application.config(_application.name);
                odataCfg = cfg ? cfg.odata : null;
            }
            var opts = { headers: null };
            if (odataCfg && odataCfg.headers)
                opts.headers = odataCfg.headers;
            opts.headers = opts.headers || {};
            opts.headers.Accept = 'application/json';
            if (odataCfg && odataCfg.authentication) {
                var ui_1 = _authentication.load();
                if (ui_1) {
                    switch (odataCfg.authentication) {
                        case 'basic':
                            opts.headers.Authorization = ui_1.basic;
                            break;
                        case 'header-session':
                            opts.headers.Authorization = 'Bearer ' + ui_1.token;
                            break;
                    }
                }
                else {
                    delete opts.headers.Authorization;
                }
            }
            return opts;
        }, _addAuthToUrl = function (uri) {
            var cfg = _application.config(_application.name);
            if (cfg && cfg.odata && cfg.odata.authentication) {
                var ui = _authentication.load();
                if (ui) {
                    switch (cfg.odata.authentication) {
                        case 'basic':
                            break;
                        case 'header-session':
                            var query = 'token=' + encodeURIComponent(ui.token);
                            if (uri.indexOf('?') > 0)
                                query = '&' + query;
                            else
                                query = '?' + query;
                            uri = uri + query;
                            break;
                    }
                }
            }
            return uri;
        }, _loadScript = function (name, lurl, after, loader) {
            var status = _dynscripts[name];
            if (!status) {
                _dynscripts[name] = { loading: true };
                if (loader) {
                    loader.execute(function (err) {
                        if (err)
                            _dynscripts[name] = { error: err };
                        else
                            _dynscripts[name] = { loaded: true };
                        after(err);
                    });
                }
                else {
                    $.ajax({
                        url: lurl,
                        dataType: 'script',
                        cache: true
                    }).done(function (data, textStatus, jqXHR) {
                        _dynscripts[name] = { loaded: true };
                        after(null);
                    }).fail(function (jqXHR, textStatus, errorThrown) {
                        var err = errorThrown || { message: textStatus };
                        _dynscripts[name] = { error: err };
                        after(err);
                    });
                }
            }
            else {
                if (status.loaded) {
                    return after(null);
                }
                else if (status.error) {
                    return after(status.error, null);
                }
                else {
                    //status.loading == true
                    window.setTimeout(function () {
                        _loadScript(name, lurl, after, loader);
                    }, 20);
                }
            }
        }, _getScript = function (lurl) {
            var _promise = _utils.Promise;
            return new _promise(function (resolve, reject) {
                $.ajax({
                    url: lurl,
                    dataType: 'script',
                    cache: true
                }).done(function (data, textStatus, jqXHR) {
                    resolve(true);
                }).fail(function (jqXHR, textStatus, errorThrown) {
                    reject(errorThrown || {
                        message: textStatus
                    });
                });
            });
        }, _postAndDownload = function (lurl, postData) {
            var _promise = _utils.Promise;
            var opts = _getOptions(null);
            var config = _application.config(_application.name) || {};
            var base = config.rest ? config.rest.base || '' : '';
            if (lurl && lurl.charAt(0) === '/')
                base = '';
            if (base)
                lurl = base + '/' + lurl;
            return new _promise(function (resolve, reject) {
                var _onerror = function (xhr) {
                    var textStatus = xhr.statusText;
                    if (_intercept(xhr.status))
                        return resolve({});
                    if (xhr.status >= 500 && _locale && _locale.errors)
                        textStatus = _locale.errors.error500;
                    var detail = null; // _parseError(xhr);
                    reject({
                        message: textStatus,
                        detail: detail
                    });
                };
                var xhr = new XMLHttpRequest();
                xhr.open('POST', lurl, true);
                xhr.responseType = 'arraybuffer';
                xhr.onload = function () {
                    var that = this;
                    if (that.status === 200 || that.status === 201) {
                        var filename = '';
                        var disposition = xhr.getResponseHeader('Content-Disposition');
                        if (disposition && disposition.indexOf('attachment') !== -1) {
                            var filenameRegex = /filename[^;=\n]*=((['"]).*?\2|[^;\n]*)/;
                            var matches = filenameRegex.exec(disposition);
                            if (matches != null && matches[1])
                                filename = matches[1].replace(/['"]/g, '');
                        }
                        var type = xhr.getResponseHeader('Content-Type');
                        try {
                            var blob = new Blob([that.response], { type: type });
                        }
                        catch (ex) {
                            return reject(ex);
                        }
                        if (typeof window.navigator.msSaveBlob !== 'undefined') {
                            window.navigator.msSaveBlob(blob, filename);
                            resolve({});
                        }
                        else {
                            var URL = window['URL'] || window['webkitURL'];
                            var downloadUrl = URL.createObjectURL(blob);
                            if (filename) {
                                // use HTML5 a[download] attribute to specify filename
                                var a = document.createElement('a');
                                // safari doesn't support this yet
                                if (typeof a['download'] === 'undefined') {
                                    window.location.href = downloadUrl;
                                }
                                else {
                                    a.href = downloadUrl;
                                    a['download'] = filename;
                                    document.body.appendChild(a);
                                    a.click();
                                    document.body.removeChild(a);
                                }
                            }
                            else {
                                window.location.href = downloadUrl;
                            }
                            setTimeout(function () {
                                URL.revokeObjectURL(downloadUrl);
                                resolve({});
                            }, 300);
                        }
                    }
                    else {
                        _onerror(that);
                    }
                };
                xhr.onerror = function () {
                    _onerror(xhr);
                };
                xhr.setRequestHeader('Content-type', 'application/json');
                if (opts && opts.headers) {
                    Object.keys(opts.headers).forEach(function (hn) {
                        xhr.setRequestHeader(hn, opts.headers[hn]);
                    });
                }
                xhr.send(JSON.stringify(postData));
            });
        };
        ajax.extractAjaxErrors = _parseAjaxException;
        ajax.get = _get;
        ajax.getScript = _getScript;
        ajax.getDefaultAjaxOptions = _getOptions;
        ajax.put = _put;
        ajax.patch = _patch;
        ajax.post = _post;
        ajax.remove = _delete;
        ajax.postAndDownload = _postAndDownload;
        ajax.addAuthToUrl = _addAuthToUrl;
        ajax.loadScript = _loadScript;
        ajax.interceptError = _addAjaxInterceptor;
        ajax.activateInterceptError = _activateInterceptor;
    })(ajax = Phoenix.ajax || (Phoenix.ajax = {}));
})(Phoenix || (Phoenix = {}));
/// <reference path="./ajax.ts" />
/// <reference path="./locale.ts" />
var Phoenix;
(function (Phoenix) {
    var _p = Phoenix, _locale = _p.locale, _utils = _p.utils, _ajax = _p.ajax;
    var ulocale;
    (function (ulocale) {
        var _afterTranslate = [], _register = function (hnd) { _afterTranslate.push(hnd); }, _translate = function (ll, lang) {
            $.extend(true, _locale, ll);
            _afterTranslate.forEach(function (hnd) { hnd(lang); });
        }, _tt = function (v, context) {
            context = context || {};
            if (v && v.substring(0, 2) == '{{') {
                return v.replace(/{{(.*)}}/g, function (match, path) {
                    var segments = path.split('.');
                    var c = context;
                    for (var i = 0, len = segments.length; i < len; i++) {
                        if (!c)
                            break;
                        c = c[segments[i]];
                    }
                    if (c === undefined)
                        return '[' + path + ']';
                    else
                        return c;
                });
            }
            return v;
        };
        var _supportedLanguages = ['en', 'fr'], _checkPrecision = function (val, base) {
            val = Math.round(Math.abs(val));
            return isNaN(val) ? base : val;
        }, _toFixed = function (value, precision) {
            precision = _checkPrecision(precision, 2);
            var power = Math.pow(10, precision);
            return (Math.round(value * power) / power).toFixed(precision);
        }, _formatNumber = function (number, precision, thousand, decimal) {
            if (number === null)
                return '';
            var usePrecision = _checkPrecision(precision, 0), negative = number < 0 ? '-' : '', base = parseInt(_toFixed(Math.abs(number || 0), usePrecision), 10) + '', mod = base.length > 3 ? base.length % 3 : 0;
            return negative + (mod ? base.substr(0, mod) + thousand : '') + base.substr(mod).replace(/(\d{3})(?=\d)/g, '$1' + thousand) +
                (usePrecision ? decimal + _toFixed(Math.abs(number), usePrecision).split('.')[1] : '');
        }, _formatMoney = function (number, precision, thousand, decimal, symbol, format) {
            if (number === null)
                return '';
            format = format || '%v %s';
            return format.replace('%s', symbol).replace('%v', _formatNumber(number, precision, thousand, decimal));
        }, _parseDateISO8601 = function (value) {
            if (value instanceof Date)
                return value;
            if (!value)
                return null;
            var d = Date.parse(value);
            if (isNaN(d))
                return null;
            return new Date(d);
        }, _parseDateTimeISO8601 = function (value) {
            if (value instanceof Date)
                return value;
            if (!value)
                return null;
            var d = Date.parse(value);
            if (isNaN(d))
                return null;
            return new Date(d);
        }, _parseISODateAsUTC = function (value) {
            if (!value)
                return 0;
            return Date.UTC(parseInt(value.substr(0, 4), 10), parseInt(value.substr(5, 2), 10) - 1, parseInt(value.substr(8, 2), 10), 0, 0, 0);
        }, 
        /**
        * @param {string} val
        * @param {number || null} len
        */
        _pad = function (val, len) {
            var sval = val + '';
            while (sval.length < len)
                sval = '0' + val;
            return sval;
        }, _formatDate = function (value, format) {
            var token = /d{1,4}|m{1,4}|yy(?:yy)?|([HhMsTtA])\1?|[LloSZ]|"[^"]*"|'[^']*'/g, md = value.getDate(), day = value.getDay(), month = value.getMonth(), year = value.getFullYear(), hours = value.getHours(), minutes = value.getMinutes(), flags = {
                d: md,
                dd: _pad(md, 2),
                ddd: _locale.date.weekdaysShort[day],
                dddd: _locale.date.weekdays[day],
                m: month + 1,
                mm: _pad(month + 1, 2),
                mmm: _locale.date.monthsShort[month],
                mmmm: _locale.date.months[month],
                yy: (year + '').slice(2),
                yyyy: year,
                H: hours + '',
                HH: _pad(hours, 2),
                h: (hours > 12 ? hours - 12 : hours) + '',
                hh: _pad(hours > 12 ? hours - 12 : hours, 2),
                M: minutes + '',
                MM: _pad(minutes, 2),
                A: hours > 12 ? 'PM' : 'AM'
            };
            return format.replace(token, function ($0) {
                return $0 in flags ? flags[$0] : $0.slice(1, $0.length - 1);
            });
        }, 
        /**
        * Date to ISO8601
        * @param {Date} value
        */
        _date2ISO = function (value) {
            var yy = value.getFullYear(), mm = value.getMonth() + 1, dd = value.getDate();
            return _pad(yy, 4) + '-' + _pad(mm, 2) + '-' + _pad(dd, 2);
        }, _parseDateLocalTime = function (value) {
            var f = _locale.date.dateShort.split('/');
            if (f.length !== 3)
                return '';
            var v = (value || '').split(_locale.date.daySep);
            var d = [0, 0, 0];
            var timePart = '';
            f.forEach(function (ff, index) {
                var ii = 0;
                if (ff.charAt(0) === 'm')
                    ii = 1;
                else if (ff.charAt(0) === 'y')
                    ii = 2;
                var cv = v[index] || '';
                if (index === 2) {
                    var spaceIndex = cv.indexOf(' ');
                    if (spaceIndex > 0) {
                        timePart = cv.substr(spaceIndex + 1).trim();
                        cv = cv.substr(0, spaceIndex);
                    }
                }
                d[ii] = parseInt(cv, 10);
                if (ii == 2 && d[ii] < 100 && cv.length < 3)
                    d[ii] += Math.round(new Date().getFullYear() / 100) * 100;
            });
            var res = { d: d[0], m: d[1], y: d[2], H: 0, M: 0, S: 0 };
            if (timePart) {
                var ss = _locale.date.shortTime.split(' ');
                var tp = timePart.split(' ');
                var isPm = false;
                if (ss.length <= 2) {
                    if (tp.length === ss.length) {
                        if (ss.length === 2) {
                            isPm = tp[1] === 'PM';
                        }
                        tp = tp[0].split(':');
                        if (tp.length >= 2) {
                            res.H = parseInt(tp[0], 10);
                            res.M = parseInt(tp[1], 10);
                            if (tp.length > 2)
                                res.S = parseInt(tp[2], 10);
                            if (isPm && res.H < 12)
                                res.H = res.H + 12;
                        }
                    }
                }
            }
            return res;
        }, _shortDate2ISO = function (value) {
            var pt = _parseDateLocalTime(value);
            var sv = _pad(pt.y, 4) + '-' + _pad(pt.m, 2) + '-' + _pad(pt.d, 2);
            var res = Date.parse(sv);
            if (isNaN(res))
                return '';
            return sv;
        }, _shortDateTime2ISO = function (value) {
            var pt = _parseDateLocalTime(value);
            var sv = _pad(pt.y, 4) + '-' + _pad(pt.m, 2) + '-' + _pad(pt.d, 2);
            var res = Date.parse(sv);
            if (isNaN(res))
                return '';
            var d = new Date(sv);
            d.setHours(pt.H);
            d.setMinutes(pt.M);
            d.setSeconds(pt.S);
            d.setMilliseconds(0);
            return d.toISOString();
        }, _shortDateTime = function (date) {
            if (!date)
                return '';
            var d = _parseDateISO8601(date);
            if (!d)
                return '';
            var format = _locale.date.dateShort;
            if (_locale.date.daySep !== '/')
                format = format.replace(/\//g, _locale.date.daySep);
            return _formatDate(d, format + ' ' + _locale.date.shortTime);
        }, _shortDate = function (date) {
            if (!date)
                return '';
            var d = _parseDateISO8601(date);
            if (!d)
                return '';
            var format = _locale.date.dateShort;
            if (_locale.date.daySep != '/')
                format = format.replace(/\//g, _locale.date.daySep);
            return _formatDate(d, format);
        }, _longDate = function (date) {
            if (!date)
                return '';
            var d = _parseDateISO8601(date);
            if (!d)
                return '';
            var format = _locale.date.dateLong;
            if (_locale.date.daySep != '/')
                format = format.replace(/\//g, _locale.date.daySep);
            return _formatDate(d, format);
        }, _monthYear = function (date) {
            if (!date)
                return '';
            var d = _parseDateISO8601(date);
            if (!d)
                return '';
            var format = _locale.date.monthYear;
            if (_locale.date.daySep != '/')
                format = format.replace(/\//g, _locale.date.daySep);
            return _formatDate(d, format);
        }, _truncMoney = function (value) {
            return parseFloat(value.toFixed(_locale.number.decimal));
        }, _money = function (value, useSymbol) {
            value = value || 0;
            if (useSymbol)
                return _formatMoney(value, _locale.number.places, _locale.number.thousand, _locale.number.decimal, _locale.number.symbol, _locale.number.format);
            else
                return _formatNumber(value, _locale.number.places, _locale.number.thousand, _locale.number.decimal);
        }, _integer = function (value) {
            return (value || 0) + '';
        }, _decimal = function (value, decimals, symbol) {
            if (value === null)
                return '';
            value = value || 0;
            var format = symbol ? '%v %s' : '%v';
            return _formatMoney(value, decimals, _locale.number.thousand, _locale.number.decimal, symbol, format);
        }, _formatObject = function (desc, value) {
            if (!desc || !value)
                return value;
            var props = [];
            Object.keys(desc).forEach(function (pn) {
                var d = desc[pn];
                if (d.type === 'date' || d.type === 'money' || d.type === 'decimal' || d.type === 'number') {
                    props.push({
                        name: pn,
                        type: d.type,
                        symbol: d.symbol,
                        longdate: d.longdate,
                        decimals: d.decimals,
                        useSymbol: d.useSymbol === undefined ? true : d.useSymbol
                    });
                }
            });
            if (!props.length)
                return value;
            var o = Array.isArray(value) ? value : [value];
            o.forEach(function (co) {
                props.forEach(function (f) {
                    switch (f.type) {
                        case 'date':
                            co[f.name] = _shortDate(co[f.name]);
                            break;
                        case 'money':
                            co[f.name] = _money(co[f.name], f.useSymbol);
                            break;
                        case 'integer':
                            co[f.name] = _decimal(co[f.name], 0, f.symbol);
                            break;
                        case 'decimal':
                        case 'number':
                            co[f.name] = _decimal(co[f.name], f.decimals, f.symbol);
                            break;
                    }
                });
            });
            return value;
        }, _ISODatePart = function (isoDate) {
            var s = isoDate || '';
            var ii = s.indexOf('T');
            if (ii > 0)
                s = s.substr(0, ii);
            return s;
        }, _string2Float = function (value) {
            var val = value.replace(new RegExp(_locale.number.thousand, 'g'), '');
            if (_locale.number.decimal != '.')
                val = val.replace(new RegExp(_locale.number.decimal, 'g'), '.');
            var res = parseFloat(val);
            if (isNaN(res))
                res = 0.0;
            return res;
        }, _tryParseDateTime = function (value) {
            var pv = _shortDateTime2ISO(value);
            if (pv)
                return _shortDateTime(pv);
            else
                return '';
        }, _tryParseDate = function (value) {
            var result = '';
            // Get separator
            var currentSep = Phoenix.locale.date.daySep;
            // Get vals
            var v = value.split(currentSep);
            if (v.length !== 3)
                return '';
            for (var i = 0; i < 3; i++)
                v[i] = parseInt(v[i], 10);
            // Format and return date
            var splitD = 0, splitM = 0, splitY = 0;
            switch (_locale.date.dateShort) {
                case 'dd/mm/yyyy':
                    splitD = 0;
                    splitM = 1;
                    splitY = 2;
                    break;
                case 'mm/dd/yyyy':
                    splitD = 1;
                    splitM = 0;
                    splitY = 2;
                    break;
                case 'yyyy/mm/dd':
                    splitD = 2;
                    splitM = 1;
                    splitY = 0;
                    break;
            }
            if (v[splitY] < 100)
                v[splitY] += 2000;
            if (!_validDate(v, splitD, splitM, splitY)) {
                return '';
            }
            v[splitD] = _pad(v[splitD], 2);
            v[splitM] = _pad(v[splitM], 2);
            v[splitY] = _pad(v[splitY], 4);
            return v.join(_locale.date.daySep);
        }, _validDate = function (bits, splitD, splitM, splitY) {
            var d = bits[splitD];
            var m = bits[splitM];
            var y = bits[splitY];
            var date = new Date(y, m - 1, d);
            return (date.getFullYear() == y && date.getMonth() + 1 == m && date.getDate() == d);
        };
        ulocale.register = _register;
        ulocale.translate = _translate;
        ulocale.tt = _tt;
        ulocale.currentLang = 'en';
        ulocale.defCountry = 'US';
        ulocale.lang = 'fr'; //(navigator.language || navigator.userLanguage || currentLang).split('-')[0];
        ulocale.country = 'FR';
        ulocale.money = _money;
        ulocale.truncMoney = _truncMoney;
        ulocale.decimal = _decimal;
        ulocale.integer = _integer;
        ulocale.format = _formatObject;
        ulocale.parseISODate = _parseDateISO8601;
        ulocale.parseISODateAsUTC = _parseISODateAsUTC;
        ulocale.parseISODateTime = _parseDateTimeISO8601;
        ulocale.isoDatePart = _ISODatePart;
        ulocale.shortDateTime = _shortDateTime;
        ulocale.shortDate = _shortDate;
        ulocale.longDate = _longDate;
        ulocale.monthYear = _monthYear;
        ulocale.localeDate2ISO = _shortDate2ISO;
        ulocale.localeDateTime2ISO = _shortDateTime2ISO;
        ulocale.date2ISO = _date2ISO;
        ulocale.string2Float = _string2Float;
        ulocale.tryParseDate = _tryParseDate;
        ulocale.tryParseDateTime = _tryParseDateTime;
        ulocale.localeTitle = function (title) {
            if (typeof title === 'object')
                return title[ulocale.currentLang];
            return title;
        };
        function loadLocale(newLang) {
            var pp = _utils.phoenixPath();
            if (newLang != ulocale.currentLang) {
                _ajax.getScript(pp + '/locale/phoenix_' + ulocale.lang + '.min.js').then(function () {
                    ulocale.currentLang = newLang;
                }).catch(function (ex) {
                });
            }
        }
        ulocale.loadLocale = loadLocale;
        ;
        if (_supportedLanguages.indexOf(ulocale.lang) < 0)
            ulocale.lang = ulocale.currentLang;
        loadLocale(ulocale.lang);
    })(ulocale = Phoenix.ulocale || (Phoenix.ulocale = {}));
    var angularjs;
    (function (angularjs) {
        var _registerLocaleFilters = function (app) {
            if (app && app.filter) {
                app.filter('money', [function () {
                        return function (input, useSymbol) {
                            var value = input === null ? null : (input ? parseFloat(input) : 0.0);
                            return ulocale.money(value, useSymbol);
                        };
                    }]);
                app.filter('decimal', [function () {
                        return function (input, decimals, symbol) {
                            var value = input === null ? null : (input ? parseFloat(input) : 0.0);
                            return ulocale.decimal(value, decimals || 0, symbol);
                        };
                    }]);
                app.filter('shortdate', [function () {
                        return function (input) {
                            return ulocale.shortDate(input);
                        };
                    }]);
                app.filter('longdate', [function () {
                        return function (input) {
                            return ulocale.longDate(input);
                        };
                    }]);
                app.filter('monthyear', [function () {
                        return function (input) {
                            return ulocale.monthYear(input);
                        };
                    }]);
            }
        };
        angularjs.registerFilters = _registerLocaleFilters;
    })(angularjs = Phoenix.angularjs || (Phoenix.angularjs = {}));
})(Phoenix || (Phoenix = {}));
/// <reference path="../modules/ulocale.ts" />
var Phoenix;
(function (Phoenix) {
    var en = {
        "layouts": {
            "design": {
                "Save": "Save",
                "New": "New page",
                "Open": { "title": "Open page", "open": "Open", "close": "Close" },
                "PageName": "Page Name",
                "InvalidPageName": "Invalid page name",
                "ConflictedPageName": "A page of that name exists, do you want to give another name ?",
                "Delete": "Delete page",
                "DeletePreferences": "Delete preferences",
                "ConfirmDelete": "Are you sure you want to delete this page ?",
                "ConfirmDeletePrefs": "Are you sure you want to delete preferences for this page ?",
                "Preview": "Preview",
                "AuthoringMode": "Authoring",
                "layouts": "Blocks",
                "widgets": "Widgets",
                "fields": "Fields",
                "actions": "Actions",
                "properties": "Properties",
                "childrenFlow": "Children disposition",
                "childrenFlowVertical": "Vertical Flow",
                "childrenTableCell": "Table cell",
                "childrenAccordionGroup": "Accordion Group",
                "customStyle": "Custom style",
                "nestedLayoutName": "Nested Layout Name",
                "nestedLayoutBind": "Bind for nested layout",
                "nestedFormController": "Controller for nested form",
                "columnSize": "Size",
                "customColumnSize": "Custom Size",
                "appearance": "Appearance",
                "appearanceAccordion": "Accordion",
                "appearanceTabs": "Tabs",
                "appearanceWizard": "None",
                "showTitle": "Show title",
                "bindPagesTitle": "Bind",
                "name": "Name",
                "forceDisplayTable": "Force display(Css) table",
                "title": "Title",
                "actionApply": "Apply",
                "formType": "Form Type",
                "ftVertical": "Vertical Form",
                "ftHorizontal": "Horizontal Form",
                "ftInline": "Inline form",
                "labelSize": "Label width (Bootstrap cols)",
                "blockPosition": "Position",
                "bpStatic": "Static",
                "bpStickyTop": "Sticky Top",
                "bpStickyBottom": "Sticky Bottom",
                "noTitlesForFields": "Don't show field's titles",
                "fieldsTitle": "Children (Fields)"
            },
            "defaultTitle": "No title",
            "NoData": 'No data'
        },
        "schema": {
            "required": "{0} is required.",
            "minNumber": "{0} must be at least {1}",
            "maxNumber": "{0} cannot exceed {1}",
            "minNumberExclusive": "{0} must be greater than {1}",
            "maxNumberExclusive": "{0} must be less than {1}",
            "uniqueColumn": "The column '{0}' must be unique.",
            "uniqueColumns": "Duplicate value for columns '{0}' found.",
            "passwordMismatch": "Password mismatch.",
            "invalidEmail": "Invalid Email Address",
            "minLength": "{0} must be at least {1} characters"
        },
        "ui": {
            "Close": "Close",
            "Abandon": "Abandon",
            "Ok": "Ok",
            "Yes": "Yes",
            "No": "No",
            "false": "False",
            "true": "True",
            "Warning": "Warning",
            "Info": "Information",
            "Disconnect": "Disconnect",
            "Confirm": "Confirm",
            "Validate": "Validate",
            "Create": "create",
            "password": {
                "oldPassword": "Old Password",
                "newPassword": "New Password",
                "change": "Change password"
            },
            "ApplyDetailChanges": "Apply",
            "Selected": "Sel.",
            "Add": "Add",
            "selectedFilters": "Selected filters",
            "OpenNewTab": "Open link in new tab",
            "Search": "Search",
            "Actions": "Actions"
        },
        "errors": {
            "Title": "Oops! An unknown error has occurred.",
            "SendMail": "Send",
            "MailSubject": "Error in JS client",
            "ErrorTitle": "Error:",
            "ErrorUser": "User:",
            "ErrorDate": "Date and time:",
            "Browser": "Browser:",
            "ErrorURI": "Address:",
            "Stack": "Call stack:",
            "Context": "Context:",
            "error500": "Internal server error",
            "unknownError": "An unknown error has occurred.",
            "notAuthorized": "Forbidden"
        },
        "listView": {
            "search": {
                "Search": "Search",
                "Nodata": "Aucun résultat trouvé ..."
            }
        },
        "pagination": {
            "Next": "»",
            "Previous": "«",
            "First": "First",
            "Last": "Last"
        },
        "number": {
            "decimal": ".",
            "thousand": " ",
            "places": 2,
            "symbol": "$",
            "format": "%s %v"
        },
        "charts": {
            "numericSymbols": ["k", "M", "G", "T", "P", "E"],
            "resetZoom": "Reset zoom",
            "resetZoomTitle": "Reset zoom level 1:1",
            "rangeSelectorZoom": "Zoom",
            "rangeSelectorFrom": "From",
            "rangeSelectorTo": "To"
        },
        "date": {
            "weekdaysShort": ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],
            "weekdaysMin": ["Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"],
            "weekdays": ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"],
            "monthsShort": ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"],
            "months": ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"],
            "dateShort": "mm/dd/yyyy",
            "dateLong": "d mmm, yyyy",
            "monthYear": "mmmm yyyy",
            "shortTime": "hh:MM A",
            "daySep": "-",
            "weekStart": 0,
            "today": "Today",
            "clear": "Clear"
        },
        "operators": {
            "in": { "symbol": "=", "title": "equal", "binary": false },
            "nin": { "symbol": "!=", "title": "not equal", "binary": false },
            "gt": { "symbol": ">", "title": "is greater than", "binary": false },
            "ge": { "symbol": ">=", "title": "is greater or equal than", "binary": false },
            "lt": { "symbol": "<", "title": "is less than", "binary": false },
            "le": { "symbol": ">", "title": "is less or equal than", "binary": false },
            "between": { "symbol": "between", "title": "between", "binary": true },
            "nbetween": { "symbol": "not between", "title": "not between", "binary": true },
            "like": { "symbol": "contains", "title": "contains", "binary": false },
            "nlike": { "symbol": "not contains", "title": "not contains", "binary": false },
            "empty": { "symbol": "is null", "title": "is null", "binary": false },
            "nempty": { "symbol": "is not null", "title": "is not null", "binary": false }
        },
        "types": {
            "number": { "title": "Number", "operators": ["in", "nin", "gt", "ge", "lt", "le", "between", "nbetween", "empty", "nempty"] },
            "decimal": { "title": "Decimal", "operators": ["in", "nin", "gt", "ge", "lt", "le", "between", "nbetween", "empty", "nempty"] },
            "money": { "title": "Money", "operators": ["in", "nin", "gt", "ge", "lt", "le", "between", "nbetween", "empty", "nempty"] },
            "integer": { "title": "Integer", "operators": ["in", "nin", "gt", "ge", "lt", "le", "between", "nbetween", "empty", "nempty"] },
            "date": { "title": "Date", "operators": ["in", "nin", "gt", "ge", "lt", "le", "between", "nbetween", "empty", "nempty"] },
            "time": { "title": "Time", "operators": ["in", "nin", "gt", "ge", "lt", "le", "between", "nbetween", "empty", "nempty"] },
            "date-time": { "title": "Date Time", "operators": ["in", "nin", "gt", "ge", "lt", "le", "between", "nbetween", "empty", "nempty"] },
            "string": { "title": "String", "operators": ["in", "nin", "like", "nlike", "empty", "nempty"] },
            "enum": { "title": "Enum", "operators": ["in", "nin", "empty", "nempty"] },
            "lookup": { "title": "Lookup", "operators": ["in", "nin", "empty", "nempty"] },
            "boolean": { "title": "Boolean", "operators": ["in", "nin", "empty", "nempty"] }
        }
    };
    Phoenix.ulocale.translate(en, "en");
})(Phoenix || (Phoenix = {}));
/// <reference path="./utils.ts" />
var Phoenix;
(function (Phoenix) {
    var _p = Phoenix, _utils = _p.utils;
    var external;
    (function (external) {
        var _defPrefsLoader = function (name) {
            var promiseClass = _utils.Promise;
            if (window.localStorage)
                return new promiseClass(function (resolve, reject) {
                    var d = window.localStorage.getItem('preferences.' + name);
                    if (d)
                        resolve(JSON.parse(d));
                    else
                        resolve(null);
                });
            else
                return new promiseClass(function (resolve, reject) {
                    resolve(null);
                });
        }, _defPrefsSaver = function (name, data) {
            var promiseClass = _utils.Promise;
            if (window.localStorage)
                return new promiseClass(function (resolve, reject) {
                    if (data)
                        window.localStorage.setItem('preferences.' + name, JSON.stringify(data));
                    else
                        window.localStorage.setItem('preferences.' + name, '');
                    resolve();
                });
            else
                return new promiseClass(function (resolve, reject) {
                    resolve();
                });
        };
        external.hashHandler = null;
        external.logoutHandler = null;
        external.forbiddenHandler = null;
        external.changePasswordHandler = null;
        external.checkLoggedInHandler = null;
        external.historyChangedHandler = null;
        external.formOpenHandler = null;
        external.preferenceLoadHandler = _defPrefsLoader;
        external.preferenceSaveHandler = _defPrefsSaver;
        external.ruleLoaderHandler = null;
        external.ruleViewer = null;
    })(external = Phoenix.external || (Phoenix.external = {}));
    var history;
    (function (history) {
        var _value = [], _locationPrefix = '!', _removeLast = function () {
            _value.pop();
            if (external.historyChangedHandler)
                external.historyChangedHandler();
        }, _add = function (hash, reset) {
            if (reset) {
                _value = [hash];
                if (external.historyChangedHandler)
                    external.historyChangedHandler();
                return;
            }
            var len = _value.length;
            var last = len ? _value[len - 1] : '';
            if (last != hash) {
                var prev = (len >= 2) ? _value[len - 2] : '';
                if (hash === prev)
                    _value.pop();
                else
                    _value.push(hash);
                if (external.historyChangedHandler)
                    external.historyChangedHandler();
            }
        }, _hasBack = function () {
            return _value.length > 1;
        };
        history.removeLast = _removeLast;
        history.add = _add;
        history.hasBack = _hasBack;
        history.value = _value;
        history.locationPrefix = _locationPrefix;
    })(history = Phoenix.history || (Phoenix.history = {}));
    var render;
    (function (render) {
        var _renders = {}, _registerRender = function (context, name, handler) {
            _renders[context] = _renders[context] || {};
            _renders[context][name] = handler;
        }, _getRender = function (context, name) {
            if (!_renders[context])
                return null;
            return _renders[context][name];
        };
        render.register = _registerRender;
        render.get = _getRender;
    })(render = Phoenix.render || (Phoenix.render = {}));
    var ipc;
    (function (ipc) {
        var _eventListeners = {}, _emitEvent = function (eventName, data) {
            var evname = 'on' + eventName;
            var l = _eventListeners[evname];
            if (l)
                l.forEach(function (item) {
                    var hnd = item.listener ? item.handler.bind(item.listener) : item.handler;
                    hnd(data);
                });
        }, _regListener = function (eventName, handler, listener) {
            _eventListeners[eventName] = _eventListeners[eventName] || [];
            var l = _eventListeners[eventName];
            l.push({
                listener: listener,
                handler: handler
            });
        }, _unregListener = function (listener, eventName) {
            function _rmvlistener(res) {
                if (res) {
                    var i = res.length;
                    while (i--) {
                        var o = res[i];
                        if (o.listener == listener)
                            res.splice(i, 1);
                    }
                }
            }
            if (eventName) {
                _rmvlistener(_eventListeners[eventName]);
            }
            else {
                Object.keys(_eventListeners).forEach(function (evn) {
                    _rmvlistener(_eventListeners[evn]);
                });
            }
        };
        ipc.emit = _emitEvent;
        ipc.listen = _regListener;
        ipc.unlisten = _unregListener;
    })(ipc = Phoenix.ipc || (Phoenix.ipc = {}));
})(Phoenix || (Phoenix = {}));
var Phoenix;
(function (Phoenix) {
    Phoenix.bootstrap4 = true;
    Phoenix.fontawesome = false;
    Phoenix.modalPlugin = 'modal';
    var dom;
    (function (dom) {
        var _mapIcon = {
            'arrow-left': 'arrow-back',
            'arrow-right': 'arrow-forward',
            'arrow-down': 'arrow-downward',
            'arrow-up': 'arrow-upward',
            'backward': 'fast-rewind',
            'bars': 'menu',
            'bolt': 'toys',
            'filter': 'filter-list',
            'wrench': 'build',
            'building': 'add-to-queue',
            'calendar': 'date-range',
            'caret-up': 'arrow-drop-up',
            'caret-down': 'arrow-drop-down',
            'check-square-o': 'check-box',
            'chevron-down': 'expand-more',
            'chevron-left': 'chevron-left',
            'chevron-right': 'chevron-right',
            'clock-o': 'schedule',
            'cloud': 'cloud',
            'cog': 'settings',
            'ellipsis-v': 'more-vert',
            'exclamation-circle': 'error',
            'eye': 'visibility',
            'forward': 'fast-forward',
            'file-o': 'folder',
            'floppy': 'done',
            'info-circle': 'info',
            'lock': 'lock',
            'minus': 'remove',
            'remove': 'clear',
            'minus-circle': 'remove-circle',
            'pencil': 'edit',
            'power-off': 'power-settings-new',
            'plus': 'add',
            'plus-circle': 'add-circle',
            'question-circle': 'info',
            'search': 'search',
            'square-o': 'check-box-outline-blank',
            'th': 'apps',
            'thumb-tack': 'turned-in',
            'times': 'close',
            'times-circle': 'cancel',
            'times-circle-o': 'highlight-off',
            'trash': 'delete',
            'user': 'account-box',
            'window-minimize': 'fullscreen-exit',
            'window-maximize': 'fullscreen' //ok
        };
        var _bootstrapBtnCache = null;
        var _bootstraOutlinepBtnCache = null;
        var _bootstrapBtns = function (useOutline) {
            if (useOutline) {
                if (_bootstraOutlinepBtnCache)
                    return _bootstraOutlinepBtnCache;
                var _bootstrap4 = Phoenix.bootstrap4;
                _bootstraOutlinepBtnCache = {
                    primary: _bootstrap4 ? 'outline-primary' : 'primary',
                    secondary: _bootstrap4 ? 'outline-secondary' : 'default',
                    default: _bootstrap4 ? 'outline-secondary' : 'default',
                    important: _bootstrap4 ? 'outline-important' : 'important',
                    success: _bootstrap4 ? 'outline-success' : 'success',
                    info: _bootstrap4 ? 'outline-info' : 'info',
                    danger: _bootstrap4 ? 'outline-danger' : 'danger',
                    warning: _bootstrap4 ? 'outline-warning' : 'warning',
                    link: _bootstrap4 ? 'outline-link' : 'link',
                    dark: _bootstrap4 ? 'outline-dark' : 'default'
                };
                return _bootstraOutlinepBtnCache;
            }
            else {
                if (_bootstrapBtnCache)
                    return _bootstrapBtnCache;
                var _bootstrap4 = Phoenix.bootstrap4;
                _bootstrapBtnCache = {
                    primary: 'primary',
                    secondary: _bootstrap4 ? 'secondary' : 'default',
                    default: _bootstrap4 ? 'secondary' : 'default',
                    important: 'important',
                    success: 'success',
                    info: 'info',
                    danger: 'danger',
                    warning: 'warning',
                    link: 'link',
                    dark: 'default'
                };
                return _bootstrapBtnCache;
            }
        }, _parseStyle = function (style, css) {
            if (style) {
                var a = style.split(' ');
                a.forEach(function (e, index) {
                    e = e.trim();
                    if (e && (e.charAt(0) === '$'))
                        e = 'bs-style-' + e.substring(1);
                    css.push(e);
                });
            }
        }, _select = function (input) {
            if (!input)
                return;
            input.select();
        }, _addRmvClasses = function (v, add, cn) {
            var c = (v || '').split(' ');
            var i = c.indexOf(cn);
            if (add) {
                if (i < 0)
                    c.push(cn);
            }
            else {
                if (i >= 0)
                    c.splice(i, 1);
            }
            return c.join(' ');
        }, _rootFontSize = 0, _geHtmlFontSize = function () {
            if (!_rootFontSize)
                _rootFontSize = parseFloat(getComputedStyle(document.documentElement).fontSize);
            return _rootFontSize;
        }, _rem2px = function (value) {
            return Math.round(value * _geHtmlFontSize());
        }, _changeModalPlugin = function (value) {
            if (Phoenix.modalPlugin !== value) {
                var old = $.fn[Phoenix.modalPlugin];
                $.fn[value] = old;
                delete $.fn[Phoenix.modalPlugin];
                Phoenix.modalPlugin = value;
                $.fn[Phoenix.modalPlugin] = old;
            }
        }, _iconClass = function (iconName, noPrefix) {
            if (noPrefix === void 0) { noPrefix = false; }
            var icon = Phoenix.fontawesome ? iconName : (_mapIcon[iconName] ? _mapIcon[iconName] : iconName);
            if (noPrefix)
                return (Phoenix.fontawesome ? 'fa-' : 'mdi-') + icon;
            else
                return (Phoenix.fontawesome ? 'fa fa-' : 'mdi mdi-') + icon;
        }, _customIconClass = function (iconName, iconClass) {
            if (iconClass)
                return iconClass + ' ' + iconClass + '-' + iconName;
            else
                return _iconClass(iconName);
        }, _iconPrefix = function () { return (Phoenix.fontawesome ? 'fa' : 'mdi'); }, _createIcon = function (iconName) {
            var icon = document.createElement('span');
            icon.className = _iconClass(iconName, false);
            return icon;
        }, _queryAll = function (parent, selector) {
            if (parent)
                return parent.querySelectorAll(selector);
            return document.querySelectorAll(selector);
        }, _find = function (parent, id) {
            if (parent) {
                if (parent.id == id)
                    return parent;
                return parent.querySelector('#' + id);
            }
            return document.getElementById(id);
        }, _query = function (parent, selector) {
            if (parent) {
                return parent.querySelector(selector);
            }
            else
                return window.document.querySelector(selector);
        }, _addClass = function (element, className) {
            if (element.classList)
                element.classList.add(className);
            else
                element.className = _addRmvClasses(element.className, true, className);
        }, _removeClass = function removeClass(element, className) {
            if (element.classList)
                element.classList.remove(className);
            else
                element.className = _addRmvClasses(element.className, false, className);
        }, _hasClass = function (element, className) {
            if (element.classList)
                return element.classList.contains(className);
            else
                return (element.className || '').split(' ').indexOf(className) >= 0;
        }, _remove = function (element) {
            element.parentNode.removeChild(element);
        }, _detach = function (element) {
            element.parentNode.removeChild(element);
            return element;
        }, _empty = function (element) {
            for (var i = element.childNodes.length - 1; i >= 0; i--)
                element.removeChild(element.childNodes[i]);
        }, _append = function (parent, element) {
            parent.appendChild(element);
        }, _prepend = function (parent, element) {
            if (parent.firstChild)
                parent.insertBefore(element, parent.firstChild);
            else
                parent.appendChild(element);
        }, _before = function (child, element) {
            child.parentNode.insertBefore(element, child);
        }, _documentScroll = function () {
            return {
                left: (document.documentElement.scrollLeft || document.body.scrollLeft),
                top: (document.documentElement.scrollTop || document.body.scrollTop)
            };
        }, _documentClientDim = function () {
            return {
                width: (document.documentElement.clientWidth || document.body.clientWidth),
                height: (document.documentElement.clientHeight || document.body.clientHeight)
            };
        }, _documentViewSize = function () {
            return {
                height: Math.max((document.documentElement.clientHeight || document.body.clientHeight), window.innerHeight || 0),
                width: Math.max((document.documentElement.clientWidth || document.body.clientWidth), window.innerWidth || 0)
            };
        }, _removeStype = function (d, name) {
            if (d.style.removeProperty) {
                d.style.removeProperty(name);
            }
            else {
                if (name === 'border')
                    d.style[name] = 'none';
                else
                    d.style[name] = '';
            }
        }, _addScrolls = function (d) {
            var clientTop = document.documentElement.clientTop || document.body.clientTop || 0, clientLeft = document.documentElement.clientLeft || document.body.clientLeft || 0, scrollTop = window.pageYOffset || document.documentElement.scrollTop || document.body.scrollTop, scrollLeft = window.pageXOffset || document.documentElement.scrollLeft || document.body.scrollLeft;
            d.top = Math.round(d.top + scrollTop - clientTop);
            d.left = Math.round(d.left + scrollLeft - clientLeft);
            return d;
        }, _position = function (element, parent) {
            if (parent) {
                var parentRect = parent.getBoundingClientRect();
                var elementRect = element.getBoundingClientRect();
                return {
                    left: Math.round(elementRect.left - parentRect.left),
                    top: Math.round(elementRect.top - parentRect.top),
                    width: Math.round(elementRect.width),
                    height: Math.round(elementRect.height)
                };
            }
            else {
                var elementRect = element.getBoundingClientRect();
                return _addScrolls({ left: elementRect.left, top: elementRect.top, width: elementRect.width, height: elementRect.height });
            }
        }, _childrenRectsbyAttribute = function (parent, options) {
            var elements = _queryAll(parent, '[data-' + options.attributeName + ']');
            var list = [];
            for (var i = 0, len = elements.length; i < len; i++) {
                var element = elements[i];
                var item = _position(element, parent);
                item.value = _attr(element, 'data-' + options.attributeName);
                list.push(item);
            }
            return list;
        }, _getAttrByPosition = function (x, y, elements) {
            var o = null;
            for (var i = 0; i < elements.length; i++) {
                var pos = elements[i];
                if (x >= pos.left && y >= pos.top && (x <= pos.left + pos.width) && (y <= pos.top + y)) {
                    return pos;
                }
            }
            return null;
        }, _childrenPos = function (parent, list, vertical, zone, options) {
            var let = 0, element = parent;
            var res = new Array(list.length + 1);
            var firstDelta = options.firstDelta || 0;
            var lastDelta = options.lastDelta || 0;
            var delta = options.delta || 0;
            var height = options.height || 0;
            var top = options.top || 0;
            list.forEach(function (child, index) {
                var chtml = _find(parent, child.htmlId);
                var p = _position(chtml, null);
                res[index] = {
                    info: child.info,
                    zone: zone,
                    position: 'before',
                    vertical: vertical,
                    point: { x: 0, y: 0 },
                    left: p.left + (vertical ? 0 : (index === 0 ? firstDelta : delta)), top: top || p.top,
                    width: Math.round(chtml.offsetWidth),
                    height: Math.round(chtml.offsetHeight),
                    htmlId: child.htmlId
                };
            });
            var last = null;
            res.forEach(function (c) {
                var p = c.point;
                p.y = c.top + (c.height >> 1);
                p.x = c.left + (c.width >> 1);
                last = c;
            });
            if (last) {
                var cd = lastDelta - (res.length === 0 ? firstDelta : delta);
                last = {
                    position: 'after',
                    zone: zone,
                    info: last.info,
                    vertical: last.vertical,
                    point: { x: 0, y: 0 },
                    left: last.left + (vertical ? 0 : cd) + (vertical ? 0 : last.width),
                    top: last.top + (vertical ? last.height : 0),
                    width: (last.vertical ? last.width : 0),
                    height: height || (last.vertical ? 0 : last.height),
                    htmlId: last.htmlId
                };
            }
            else {
                var pp = _position(parent, null);
                last = {
                    info: {},
                    position: 'empty',
                    zone: zone,
                    vertical: vertical,
                    point: { x: 0, y: 0 },
                    left: pp.left + (vertical ? 0 : lastDelta),
                    top: top || pp.top,
                    width: Math.round(parent.offsetWidth),
                    height: height || Math.round(parent.offsetHeight),
                    html: parent.id
                };
            }
            last.point.y = last.top + (last.height >> 1);
            last.point.x = last.left + (last.width >> 1);
            res[list.length] = last;
            return res;
        }, _findNearest = function (x, y, elements) {
            var best, deltax, delta = 1000000;
            elements.forEach(function (c) {
                var ctl, ctd = Math.abs(c.point.y - y);
                if (ctd < delta) {
                    delta = ctd;
                    deltax = Math.abs(c.point.x - x);
                    best = c;
                }
                else if (ctd == delta) {
                    ctl = Math.abs(c.point.x - x);
                    if (ctl < deltax) {
                        deltax = ctl;
                        best = c;
                    }
                }
            });
            return best;
        }, _text = function (node, text) {
            if (text === undefined)
                return node.textContent;
            if (node.childNodes.length) {
                var found = false;
                for (var i = 0, len = node.childNodes.length; i < len; i++) {
                    var n = node.childNodes[i];
                    if (n.nodeType == 3) {
                        n.nodeValue = text;
                        found = true;
                        break;
                    }
                }
                if (!found)
                    _append(node, document.createTextNode(text));
            }
            else {
                node.textContent = text;
            }
        }, _showMove = function (res, vertical, pos, cssClass) {
            cssClass = cssClass || 'bs-drag-color-info';
            if (res) {
                if (res['vertical'] !== vertical) {
                    _remove(res);
                    res = null;
                }
                else {
                    var fe = res.firstChild.firstChild;
                    if (!_hasClass(fe, cssClass)) {
                        _remove(res);
                        res = null;
                    }
                }
            }
            if (!res) {
                var html = ['<div class="bs-absolute">'];
                html.push('<div class="bs-absolute" style="left: 0px; top: 0px"><span class="');
                if (vertical) {
                    html.push(_iconClass('arrow-left'));
                }
                else {
                    html.push(_iconClass('arrow-down'));
                }
                if (cssClass)
                    html.push(' ' + cssClass);
                html.push('"></span></div>');
                var css = [];
                html.push('<div class="bs-absolute" style="');
                if (vertical) {
                    css.push('right: 0px;');
                    css.push('bottom: 0px;');
                    html.push(css.join(''));
                    html.push('"><span class="');
                    html.push(_iconClass('arrow-right'));
                }
                else {
                    css.push('left: 0px;');
                    css.push('bottom: 0px;');
                    html.push(css.join(''));
                    html.push('"><span class="');
                    html.push(_iconClass('arrow-up'));
                }
                if (cssClass)
                    html.push(' ' + cssClass);
                html.push('"></span></div>');
                html.push('</div>');
                res = $(html.join('')).get(0);
                res['vertical'] = vertical;
                _append(document.body, res);
            }
            var style = res.style;
            var fc = res.firstElementChild;
            var lc = res.lastElementChild;
            var ww = Math.round(fc.offsetWidth), hh = Math.round(lc.offsetHeight);
            if (vertical) {
                style.height = hh + 'px';
                style.width = pos.width + 2 * ww + 'px';
                style.left = pos.left - ww + 'px';
                style.top = pos.top - (hh >> 2) - 4 + 'px';
            }
            else {
                style.height = pos.height + 2 * hh + 'px';
                style.top = pos.top - hh + 'px';
                style.left = pos.left - (ww >> 2) + 'px';
            }
            style.zIndex = '9002';
            return res;
        }, _elemByAttribute = function (el, root, attr) {
            var t = el;
            while (t) {
                if (!t.getAttribute)
                    return null;
                var val = t.getAttribute(attr);
                if (val)
                    return t;
                t = (t == root) ? null : t.parentNode;
            }
            return null;
        }, _setBodyTheme = function (value) {
            var fc = document.body.firstElementChild;
            if (!fc || !_hasClass(fc, 'bs-content'))
                fc = document.body;
            var old = fc.className || '';
            var nc = value ? ('bs-body-theme-' + value) : '';
            var classes = old.split(' ');
            var changed = false;
            var i = classes.length;
            while (i--) {
                var c = classes[i];
                if (c.indexOf('bs-body-theme-') == 0) {
                    if (c == nc)
                        return false;
                    changed = true;
                    classes.splice(i, 1);
                }
            }
            if (nc) {
                changed = true;
                classes.push(nc);
            }
            if (changed)
                fc.className = classes.join(' ');
        }, _after = function (child, element) {
            var p = child.parentNode;
            child = child.nextSibling;
            if (child)
                p.insertBefore(element, child);
            else
                p.appendChild(element);
        }, _selectRange = function (input, start, end) {
            if (end === undefined)
                end = start;
            input.setSelectionRange(start, end);
            //input.selectionStart = start;
            //input.selectionEnd = end;
        }, _getWindow = function (elem) {
            return (elem != null && elem === elem.window) ? elem : elem.nodeType === 9 && elem.defaultView;
        }, _offset = function (element) {
            var rect;
            if (element.nodeType != 3) {
                rect = element.getBoundingClientRect();
                // Make sure element is not hidden (display: none)
                if (rect.width || rect.height) {
                    var doc = element.ownerDocument;
                    var win = _getWindow(doc);
                    var docElem = doc.documentElement;
                    return {
                        top: rect.top + win.pageYOffset - docElem.clientTop,
                        left: rect.left + win.pageXOffset - docElem.clientLeft,
                        width: rect.width,
                        height: rect.height,
                        bottom: 0,
                        right: 0
                    };
                }
            }
            return rect || { top: 0, left: 0, width: 0, height: 0, bottom: 0, right: 0 };
        }, _parentByTag = function (root, element, tag) {
            tag = tag.toUpperCase();
            while (element) {
                if (element.tagName === tag)
                    return element;
                element = element.parentNode;
                if (element === root)
                    break;
                if (element === document.body)
                    break;
            }
            return null;
        }, _parentByAttr = function (root, element, attr) {
            while (element) {
                var value = _attr(element, attr);
                if (value)
                    return element;
                element = element.parentNode;
                if (element === root)
                    break;
                if (element === document.body)
                    break;
            }
            return null;
        }, _parentByCssClass = function (root, element, className) {
            while (element) {
                if (_hasClass(element, className))
                    return element;
                element = element.parentNode;
                if (element === root)
                    break;
                if (element === document.body)
                    break;
            }
            return null;
        }, _indexOf = function (parent, child) {
            for (var i = 0, len = parent.childNodes.length; i < len; i++) {
                if (parent.childNodes[i] == child)
                    return i;
            }
            return -1;
        }, _isChildOf = function (parent, child) {
            while (child) {
                if (child === parent)
                    return true;
                child = child.parentNode;
            }
            return false;
        }, _attr = function (element, attr, value) {
            if (value === void 0) { value = undefined; }
            if (value === undefined) {
                return element.getAttribute(attr);
            }
            else {
                element.setAttribute(attr, value);
            }
        }, _cssCalc = function () {
            var calculated = false;
            var supportCalc = false;
            return function () {
                if (calculated)
                    return supportCalc;
                var a = document.createElement('a');
                a.style.cssText = 'width: calc(10px);';
                supportCalc = !!a.style.length;
                return supportCalc;
            };
        }, _scrollbarWidth = function () {
            var calculated = false;
            var cw = 0;
            return function () {
                if (calculated)
                    return cw;
                var b, a = document.createElement('div');
                a.style.cssText = 'overflow:scroll; overflow-x:hidden; zoom:1; clear:both';
                a.innerHTML = '&nbsp;';
                document.body.appendChild(a);
                b = a.offsetWidth - a.scrollWidth;
                document.body.removeChild(a);
                calculated = true;
                cw = b;
                return b;
            };
        }, _cover = null, _coverRefCount = 0, _inProcessing = function () {
            return _cover != null;
        }, _inCover = function (element) {
            return _cover && (_isChildOf(_cover, element));
        }, _processing = function (value, delay) {
            if (value) {
                _coverRefCount++;
                if (!_cover) {
                    _coverRefCount = 1;
                    _cover = $('<div class="bs-cover' + (delay ? ' bs-none' : '') + '"></div>').get(0);
                    _cover.style.height = ($(document).height() - 1) + 'px';
                    _append(document.body, _cover);
                    if (delay) {
                        setTimeout(function () {
                            if (_cover)
                                _removeClass(_cover, 'bs-none');
                        }, delay);
                    }
                }
            }
            else {
                _coverRefCount--;
                if (_coverRefCount <= 0)
                    _coverRefCount = 0;
                if (_cover) {
                    if (_coverRefCount === 0) {
                        _remove(_cover);
                        _cover = null;
                    }
                }
            }
        }, _downloadFrame = function () {
            var frame = _find(document.body, 'glb_down_frame');
            if (!frame) {
                frame = document.createElement('iframe');
                frame.style.cssText = "position: absolute; top: -1000px; left -1000px; width: 0px; height: 0px;";
                frame.frameBorder = "0";
                frame.scrolling = "yes";
                frame.id = 'glb_down_frame';
                frame.src = 'about:blank';
                _append(document.body, frame);
            }
            return frame;
        }, _iFrameAsPromise = function (id, uri, message, cb) {
            var _this = this;
            var promiseClass = Phoenix.utils.Promise;
            return new promiseClass(function (resolve, reject) {
                try {
                    var hnd_1 = function (msg) {
                        var that = _this;
                        var iframe = _find(null, id);
                        if (!iframe || !iframe.contentWindow)
                            return;
                        if (msg.source !== iframe.contentWindow)
                            return;
                        if (typeof msg.data === 'object' && msg.data.action === message) {
                            window.removeEventListener('message', hnd_1);
                            document.body.removeChild(iframe);
                            if (cb)
                                cb(msg.data.params);
                            resolve();
                        }
                    };
                    window.setTimeout(function () {
                        var iframe = _find(null, id);
                        if (iframe) {
                            window.removeEventListener('message', hnd_1);
                            document.body.removeChild(iframe);
                            reject({ message: 'Timeout' });
                        }
                    }, 10000);
                    var frame_1 = document.createElement('iframe');
                    frame_1.style.cssText = "position: absolute; top: -1000px; left -1000px; width: 0px; height: 0px;";
                    frame_1.frameBorder = "0";
                    frame_1.scrolling = "yes";
                    frame_1.id = id;
                    frame_1.src = uri;
                    _append(document.body, frame_1);
                    window.addEventListener('message', hnd_1, false);
                }
                catch (e) {
                    reject(e);
                }
            });
        }, _touch = function () {
            var calculated = false, touch = false;
            return function () {
                if (calculated)
                    return touch;
                touch = 'ontouchend' in document;
                calculated = true;
                return touch;
            };
        }, _featureTest = function (property, value, noPrefixes) {
            var prop = property + ':', el = document.createElement('test'), mStyle = el.style;
            if (!noPrefixes)
                mStyle.cssText = prop + ['-webkit-', '-moz-', '-ms-', '-o-', ''].join(value + ';' + prop) + value + ';';
            else
                mStyle.cssText = prop + value;
            return mStyle[property].indexOf(value) !== -1;
        }, _getPx = function (unit) {
            return parseInt(unit, 10) || 0;
        }, _width = function (value) {
            if (typeof value === 'number')
                return value + 'px';
            return value;
        }, _emitResize = function () {
            $(window).trigger('global-phoenix-resize');
        }, _resizeTimeOut = null, _setResizeHnd = function () {
            $(window).on('resize.phoenix', function () {
                if (_resizeTimeOut)
                    clearTimeout(_resizeTimeOut);
                _resizeTimeOut = setTimeout(_emitResize, 50);
            });
        }, _setCookie = function (name, value, path, expireDate) {
            try {
                if (!value)
                    expireDate = new Date();
                document.cookie = name + '=' + value + ((expireDate != null) ? ('; expires=' + expireDate.toUTCString()) : "") + (path ? ('; path=' + path) : '/');
            }
            catch (e) {
                return false;
            }
            return (_getCookie(name) == value);
        }, _getCookie = function (name) {
            var s = (document.cookie || '');
            var a = s.split('; ');
            for (var i = 0, len = a.length; i < len; i++) {
                var c = a[i].split('=');
                if (name == c[0]) {
                    var r = c[1] || '';
                    if (r === '')
                        return null;
                    else
                        return r;
                }
            }
            return null;
        };
        dom.readyHandlers = [_setResizeHnd];
        dom.finalizeHandlers = [];
        dom.keys = {
            VK_TAB: 9, VK_UP: 38, VK_DOWN: 40, VK_INSERT: 45, VK_DELETE: 46, VK_LEFT: 37, VK_RIGHT: 39,
            VK_ENTER: 13, VK_ESCAPE: 27, VK_F1: 112, VK_HOME: 36, VK_END: 35, VK_PGUP: 33, VK_PGDOWN: 34,
            VK_SPACE: 32, VK_F2: 113, VK_F3: 114, VK_F4: 115, VK_BACKSPACE: 8, VK_F10: 121
        };
        dom.queryAll = _queryAll;
        dom.find = _find;
        dom.query = _query;
        dom.addClass = _addClass;
        dom.removeClass = _removeClass;
        dom.hasClass = _hasClass;
        dom.icon = _createIcon;
        dom.iconClass = _iconClass;
        dom.customIconClass = _customIconClass;
        dom.iconPrefix = _iconPrefix;
        dom.bodyTheme = _setBodyTheme;
        dom.offset = _offset;
        dom.before = _before;
        dom.after = _after;
        dom.parentByTag = _parentByTag;
        dom.parentByAttr = _parentByAttr;
        dom.parentByClass = _parentByCssClass;
        dom.indexOf = _indexOf;
        dom.append = _append;
        dom.prepend = _prepend;
        dom.select = _select;
        dom.empty = _empty;
        dom.remove = _remove;
        dom.detach = _detach;
        dom.downloadFrame = _downloadFrame;
        dom.attr = _attr;
        dom.text = _text;
        dom.findByAttribute = _elemByAttribute;
        dom.isChildOf = _isChildOf;
        dom.parseStyle = _parseStyle;
        dom.ignoreKeys = [0, dom.keys.VK_UP, dom.keys.VK_DOWN, dom.keys.VK_HOME, dom.keys.VK_END, dom.keys.VK_PGUP, dom.keys.VK_PGDOWN, dom.keys.VK_ENTER, dom.keys.VK_ESCAPE,
            dom.keys.VK_DELETE, dom.keys.VK_BACKSPACE, dom.keys.VK_INSERT];
        dom.arrowKeys = [dom.keys.VK_LEFT, dom.keys.VK_RIGHT, dom.keys.VK_UP, dom.keys.VK_DOWN];
        dom.processing = _processing;
        dom.inProcessing = _inProcessing;
        dom.inCover = _inCover;
        dom.scrollbar = _scrollbarWidth();
        dom.supportCssCalc = _cssCalc();
        dom.documentScroll = _documentScroll;
        dom.documentClientDim = _documentClientDim;
        dom.documentViewSize = _documentViewSize;
        dom.touch = _touch();
        dom.position = _position;
        dom.childrenPositions = _childrenPos;
        dom.findNearest = _findNearest;
        dom.showMove = _showMove;
        dom.featureTest = _featureTest;
        dom.getPx = _getPx;
        dom.removeStype = _removeStype;
        dom.rem2px = _rem2px;
        dom.checkSize = _width;
        dom.bootstrapStyles = _bootstrapBtns;
        dom.selectRange = _selectRange;
        dom.childrenRectsbyAttribute = _childrenRectsbyAttribute;
        dom.findAttrByPosition = _getAttrByPosition;
        dom.setCookie = _setCookie;
        dom.getCookie = _getCookie;
        dom.iframeAsPromise = _iFrameAsPromise;
    })(dom = Phoenix.dom || (Phoenix.dom = {}));
    $(document).ready(function () {
        if (dom.readyHandlers.length) {
            dom.readyHandlers.forEach(function (hnd) {
                hnd();
            });
        }
    });
    /*
    $(document).unload(function () {
        if (dom.finalizeHandlers.length) {
            dom.finalizeHandlers.forEach((hnd) => {
                hnd();
            });
        }
    });
    */
})(Phoenix || (Phoenix = {}));
/// <reference path="./utils.ts" />
/// <reference path="./dom.ts" />
var Phoenix;
(function (Phoenix) {
    var _dom = Phoenix.dom, _utils = Phoenix.utils;
    var events;
    (function (events) {
        var EventManager = /** @class */ (function () {
            function EventManager() {
            }
            EventManager.prototype.disable = function () {
                this._isDisabled = true;
            };
            EventManager.prototype.enable = function () {
                this._isDisabled = false;
            };
            return EventManager;
        }());
        events.EventManager = EventManager;
        events.mouseEvents = function (eventType) {
            if (_dom.touch()) {
                switch (eventType) {
                    case 'mousedown':
                        return 'touchstart';
                    case 'mouseup':
                        return 'touchend';
                    case 'mousemove':
                        return 'touchmove';
                }
            }
            return eventType;
        };
        function isLeftButton(eventObject) {
            if (_dom.touch())
                return true;
            return eventObject.which < 2;
        }
        events.isLeftButton = isLeftButton;
        function stopEvent(eventObject) {
            eventObject.stopPropagation();
            eventObject.preventDefault();
        }
        events.stopEvent = stopEvent;
        function point(event) {
            var de = document.documentElement;
            var res;
            if (_dom.touch()) {
                var t = event.targetTouches || event.touches;
                if (t)
                    res = {
                        x: t[0].pageX || (t[0].clientX + (de.scrollLeft || document.body.scrollLeft)),
                        y: t[0].pageY || (t[0].clientY + (de.scrollTop || document.body.scrollTop))
                    };
            }
            if (!res)
                res = {
                    x: event.pageX || (event.clientX + (de.scrollLeft || document.body.scrollLeft)),
                    y: event.pageY || (event.clientY + (de.scrollTop || document.body.scrollTop))
                };
            res.x = Math.round(res.x);
            res.y = Math.round(res.y);
            return res;
        }
        events.point = point;
        events.eventManager = new EventManager();
    })(events = Phoenix.events || (Phoenix.events = {}));
})(Phoenix || (Phoenix = {}));
/// <reference path="./utils.ts" />
/// <reference path="./events.ts" />
/// <reference path="./dom.ts" />
/// <reference path="./customdata.ts" />
var Phoenix;
(function (Phoenix) {
    var _dom = Phoenix.dom, _utils = Phoenix.utils, _events = Phoenix.events, _customData = Phoenix.customData;
    var drag;
    (function (drag_1) {
        var DragAndDropManager = /** @class */ (function () {
            function DragAndDropManager() {
                var that = this;
            }
            DragAndDropManager.prototype.initialize = function () {
                var that = this;
                var $doc = $(document);
                that._mu = that.mouseUp.bind(that);
                that._md = that.mouseDownEmpty.bind(that);
                $doc.on(_events.mouseEvents('mouseup'), that._mu);
                $doc.on(_events.mouseEvents('mousedown'), that._md);
            };
            DragAndDropManager.prototype.finalize = function () {
                var that = this;
                var $doc = $(document);
                if (that._mu) {
                    $doc.off(_events.mouseEvents('mouseup'), that._mu);
                    that._mu = null;
                }
                if (that._md) {
                    $doc.off(_events.mouseEvents('mousedown'), that._mu);
                    that._md = null;
                }
                that._listeners = null;
                that._current = null;
            };
            DragAndDropManager.prototype.startMouseMove = function () {
                var that = this;
                if (!that._mm) {
                    that._mm = that.mouseMove.bind(that);
                    $(document).on(_events.mouseEvents('mousemove'), that._mm);
                }
            };
            DragAndDropManager.prototype.stopMouseMove = function () {
                var that = this;
                if (that._mm) {
                    $(document).off(_events.mouseEvents('mousemove'), that._mm);
                    that._mm = null;
                }
            };
            DragAndDropManager.prototype._canExecuteEvent = function (event) {
                return !!this._current;
            };
            DragAndDropManager.prototype.mouseUp = function (eventObject) {
                var that = this;
                var current = that._current;
                if (!current)
                    return true;
                if (current.inDragging)
                    current.notifyDragEnd(false, eventObject);
                that.setCurrent(null);
                current.clear();
                return false;
            };
            DragAndDropManager.prototype.mouseDownEmpty = function (eventObject) {
                return true;
            };
            DragAndDropManager.prototype.mouseMove = function (eventObject) {
                var that = this;
                if (!that._canExecuteEvent(eventObject))
                    return;
                var current = that._current;
                if (!current)
                    return true;
                if (!current.ready(eventObject)) {
                    if (!_events.isLeftButton(eventObject)) {
                        that.setCurrent(null);
                        current.clear();
                    }
                    return true;
                }
                if (!_events.isLeftButton(eventObject)) {
                    that.cancelDrag();
                    return true;
                }
                try {
                    current.notifyDrag(eventObject);
                }
                catch (e) {
                    that.cancelDrag();
                }
                _events.stopEvent(eventObject);
                return true;
            };
            DragAndDropManager.prototype.addDrag = function (listeners) {
                var that = this;
                var cd = new DragElement(listeners);
                that._listeners = that._listeners || [];
                that._listeners.push(cd);
                return cd;
            };
            DragAndDropManager.prototype.rmvDrag = function (drag) {
                var that = this;
                if (that._listeners) {
                    var i = that._listeners.indexOf(drag);
                    if (i >= 0) {
                        that._listeners.splice(i, 1);
                        drag.finalize();
                    }
                }
            };
            DragAndDropManager.prototype.setCurrent = function (dragObject) {
                var that = this;
                if (dragObject && that._current)
                    return false;
                that._current = dragObject;
                if (!that._current)
                    that.stopMouseMove();
                return true;
            };
            DragAndDropManager.prototype.cancelDrag = function () {
                var that = this;
                var current = that._current;
                if (current) {
                    if (current.inDragging)
                        current.notifyDragEnd(true, null);
                    that.setCurrent(null);
                    current.clear();
                }
            };
            DragAndDropManager.prototype.cover = function (value, cursor, zindex) {
                var that = this;
                if (value) {
                    if (!that._coverId) {
                        that._coverId = _utils.allocID();
                        var scroll = _dom.documentScroll();
                        var client = _dom.documentClientDim();
                        client.width += scroll.left;
                        client.height += scroll.top;
                        client.width = Math.round(Math.max(client.width, document.body.offsetWidth));
                        client.height = Math.round(Math.max(client.height, Math.round(document.body.offsetHeight)));
                        var ce = document.createElement('div');
                        ce.id = that._coverId;
                        ce.style.position = 'absolute';
                        ce.style.top = '0px';
                        ce.style.left = '0px';
                        ce.style.backgroundColor = 'white';
                        ce.style.opacity = '0.01';
                        ce.style.width = client.width + 'px';
                        ce.style.height = client.height + 'px';
                        ce.style.zIndex = (zindex || 10000) + '';
                        ce.style.cursor = cursor;
                        _dom.append(document.body, ce);
                    }
                    else {
                        if (cursor !== undefined) {
                            var e = _dom.find(document.body, that._coverId);
                            e.style.cursor = cursor;
                        }
                    }
                }
                else {
                    if (that._coverId) {
                        var e = _dom.find(document.body, that._coverId);
                        that._coverId = null;
                        if (e)
                            _dom.remove(e);
                    }
                }
                //
            };
            return DragAndDropManager;
        }());
        drag_1.DragAndDropManager = DragAndDropManager;
        var DragElement = /** @class */ (function () {
            function DragElement(elements) {
                var that = this;
                that._elements = elements;
                that._mdEvent = that.mousedown.bind(that);
                that.clear();
                that._setEvents();
            }
            DragElement.prototype.clear = function () {
                var that = this;
                //save
                var ose = that.stopEvent;
                //init
                that.mouseMoveCount = 0;
                that._lastDropTarget = null;
                that.minLeft = null;
                that.maxLeft = null;
                that.minTop = null;
                that.maxTop = null;
                that.currentLeft = 0;
                that.currentTop = 0;
                that.moveX = false;
                that.moveY = false;
                that.moveSourceName = null;
                that._targets = null;
                that.inDragging = false;
                that.coverDocument = true;
                that.cursor = 'default';
                that.startPoint = null;
                that.currentPoint = null;
                that.startOffset = null;
                that.stopEvent = false;
                that.data = {};
                that.floatElement = null;
                that.floatParent = null;
                // restore
                that.stopEvent = ose;
            };
            DragElement.prototype._removeEvents = function () {
                var that = this;
                if (that._elements) {
                    that._elements.forEach(function (e) {
                        $(e).off(_events.mouseEvents('mousedown'), that._mdEvent);
                    });
                    that._elements = null;
                }
            };
            DragElement.prototype._setEvents = function () {
                var that = this;
                if (that._elements) {
                    that._elements.forEach(function (e) {
                        $(e).on(_events.mouseEvents('mousedown'), that._mdEvent);
                    });
                }
            };
            DragElement.prototype.mousedown = function (eventObject) {
                var that = this;
                that.mouseMoveCount = 0;
                that.inDragging = false;
                if (!_events.isLeftButton(eventObject))
                    return true;
                if (!that.canStartDrag(eventObject))
                    return true;
                if (!drag_1.dragManager.setCurrent(that))
                    return true;
                that.startPoint = _events.point(eventObject);
                drag_1.dragManager.startMouseMove();
                if (that.stopEvent)
                    _events.stopEvent(eventObject);
                return false;
            };
            DragElement.prototype.finalize = function () {
                var that = this;
                that._removeEvents();
                _utils.cleanUpObject(that);
            };
            DragElement.prototype.ready = function (eventObject) {
                var that = this;
                that.mouseMoveCount++;
                if (that.mouseMoveCount == 2)
                    that.notifyDragStart(eventObject);
                return that.inDragging;
            };
            DragElement.prototype.notifyDrag = function (eventObject) {
                var that = this;
                if (!that.inDragging)
                    return;
                that.currentPoint = _events.point(eventObject);
                var e = that.floatElement;
                if (e && that.moveX) {
                    var cl = that.startOffset.left + that.currentPoint.x - that.startPoint.x;
                    if (that.minLeft !== null) {
                        if (cl < that.minLeft)
                            cl = that.minLeft;
                    }
                    if (that.maxLeft !== null) {
                        if (cl > that.maxLeft)
                            cl = that.maxLeft;
                    }
                    that.currentLeft = cl;
                    e.style.left = cl + 'px';
                }
                if (e && that.moveY) {
                    var ct = that.startOffset.top + that.currentPoint.y - that.startPoint.y;
                    if ((that.minTop !== null) && (ct < that.minTop))
                        ct = that.minTop;
                    if ((that.maxTop !== null) && (ct > that.maxTop))
                        ct = that.maxTop;
                    that.currentTop = ct;
                    e.style.top = ct + 'px';
                }
                if (that.onDrag)
                    that.onDrag(eventObject);
                if (e && that._targets) {
                    var p = _dom.position(e, null);
                    var target = _dom.findAttrByPosition(p.left, p.top, that._targets);
                    that.canDrop(!!target);
                    if (target) {
                        that._lastDropTarget = { value: target.value, x: p.left - target.left, y: p.top - target.top };
                    }
                    else {
                        that._lastDropTarget = null;
                    }
                }
            };
            DragElement.prototype.notifyDragStart = function (eventObject) {
                var that = this;
                that.inDragging = true;
                _events.eventManager.disable();
                if (that.coverDocument)
                    drag_1.dragManager.cover(true, that.cursor);
                try {
                    var dragStarted = true;
                    if (that.onDragStart) {
                        if (!that.onDragStart(eventObject)) {
                            that.notifyDragEnd(true, eventObject);
                            dragStarted = false;
                        }
                        if (that.floatElement)
                            that.startOffset = _dom.position(that.floatElement, that.floatParent);
                    }
                    if (dragStarted && (that.moveX || that.moveY) && that.moveSourceName) {
                        that._targets = _dom.childrenRectsbyAttribute(null, { attributeName: 'drag-' + that.moveSourceName });
                    }
                }
                catch (e) {
                }
            };
            DragElement.prototype.canStartDrag = function (event) {
                var that = this;
                var res = that.canStartDragHandler ? that.canStartDragHandler(event) : true;
                return res;
            };
            DragElement.prototype.canDrop = function (value) {
                var that = this;
                if (that.coverDocument)
                    drag_1.dragManager.cover(true, value ? that.cursor : 'no-drop');
            };
            DragElement.prototype.notifyDragEnd = function (doCancel, event) {
                var that = this;
                that.inDragging = false;
                var uc = that.coverDocument;
                if (that.onDragEnd)
                    that.onDragEnd(doCancel, event);
                if (that._lastDropTarget && !doCancel) {
                    var controller = _customData.get(that._lastDropTarget.value);
                    if (controller && typeof controller === 'object' && controller.dragEnd) {
                        controller.dragEnd(event);
                    }
                }
                _utils.nextTick(function () {
                    _events.eventManager.enable();
                    if (uc)
                        drag_1.dragManager.cover(false);
                });
            };
            return DragElement;
        }());
        drag_1.DragElement = DragElement;
        drag_1.dragManager = new DragAndDropManager();
        _dom.readyHandlers.push(function () {
            drag_1.dragManager.initialize();
        });
        _dom.finalizeHandlers.push(function () {
            drag_1.dragManager.finalize();
        });
        var _dragData, _setDragData = function (data) {
            _dragData = data;
        }, _getDragData = function () {
            return _dragData;
        };
        drag_1.setData = _setDragData;
        drag_1.getData = _getDragData;
    })(drag = Phoenix.drag || (Phoenix.drag = {}));
})(Phoenix || (Phoenix = {}));
/// <reference path="./utils.ts" />
/// <reference path="./dom.ts" />
/// <reference path="./globals.ts" />
/// <reference path="./authentication.ts" />
var Phoenix;
(function (Phoenix) {
    var link;
    (function (link_1) {
        var _p = Phoenix, _utils = _p.utils, _dom = _p.dom, _customData = _p.customData, _device = _p.device, _application = _p.application, _external = _p.external, _authentication = _p.authentication, _history = _p.history;
        var _customLinkExecutor = [], _obj2Search = function (value) {
            if (!value)
                return '';
            var a = [];
            Object.keys(value).forEach(function (name) {
                if (value[name] === null)
                    return;
                a.push(name + '=' + encodeURIComponent(value[name] || ''));
            });
            if (a.length > 0)
                return '?' + a.join('&');
            return '';
        }, _parseUrl = function (value, parseJson) {
            var host = '';
            var search = {};
            var path = value;
            if (value.indexOf('http') === 0) {
                var ii = value.indexOf('//');
                host = value.substr(0, ii + 2);
                path = value.substr(ii + 2);
                ii = path.indexOf('/');
                if (ii > 0) {
                    host = host + path.substr(0, ii);
                    path = path.substr(ii);
                }
            }
            if (path.charAt(0) === '#')
                path = path.substr(1);
            if (_history.locationPrefix && path.charAt(0) === _history.locationPrefix)
                path = path.substr(1);
            var i = path.indexOf('?');
            if (i >= 0) {
                var s = path.substring(i + 1);
                path = path.substring(0, i);
                if (s) {
                    var a = s.split('&');
                    a.forEach(function (v) {
                        if (v) {
                            var h = v.split('=');
                            var val = decodeURIComponent(h[1]);
                            if (parseJson && val) {
                                if (val.charAt(0) === '[' && val.charAt(val.length - 1) === ']') {
                                    try {
                                        val = JSON.parse(val);
                                    }
                                    catch (_a) {
                                    }
                                }
                                else if (val.charAt(0) === '{' && val.charAt(val.length - 1) === '}') {
                                    try {
                                        val = JSON.parse(val);
                                    }
                                    catch (_b) {
                                    }
                                }
                            }
                            search[decodeURIComponent(h[0])] = val;
                        }
                    });
                }
            }
            return {
                path: path,
                search: search,
                host: host
            };
        }, _registerLinkExecutor = function (value) {
            _customLinkExecutor.push(value);
        }, _getLinkExecutor = function (link) {
            for (var i = 0, len = _customLinkExecutor.length; i < len; i++) {
                var rlink = _customLinkExecutor[i];
                if (rlink.test(link)) {
                    return rlink;
                }
            }
            return null;
        }, _urlSearch = function (parseJson) {
            return _parseUrl(window.location.href, parseJson).search;
        }, _extractPage = function (cfg) {
            var page = cfg.$page;
            if (_device.phone && cfg.$pageMobile)
                page = cfg.$pageMobile;
            else if (_device.tablet && cfg.$pageTablet)
                page = cfg.$pageTablet;
            return page;
        }, _context = function (opts) {
            var usr = null;
            try {
                usr = JSON.parse(_authentication.db().getItem('authentication'));
            }
            catch (e) {
            }
            var ctx = {
                $url: _urlSearch(true),
                $mem: _p.$mem,
                $user: {
                    name: usr ? usr.name || usr.nom || usr.login : '',
                    firstName: usr ? usr.firstName || usr.prenom || usr.login : '',
                    lastName: usr ? usr.lastName || usr.nom || '' : ''
                },
                $item: null,
                $cookie: null,
                $target: null
            };
            if (opts && opts.cookie) {
                ctx.$cookie = {};
                var allCookies = document.cookie || '';
                allCookies.split(';').forEach(function (cookie) {
                    var name_value = cookie.split("=");
                    name_value[0] = name_value[0].replace(/^ /, '');
                    ctx.$cookie[decodeURIComponent(name_value[0])] = decodeURIComponent(name_value[1]);
                });
            }
            return ctx;
        }, _hashLink = function (cfg, data, params) {
            if (cfg.$page) {
                var page = _extractPage(cfg);
                var res = '#' + _history.locationPrefix + '/' + page;
                var a = [];
                if (data && cfg.$search && cfg.$search.length) {
                    var dd = _context();
                    Object.keys(data).forEach(function (pn) {
                        dd[pn] = data[pn];
                    });
                    cfg.$search.forEach(function (v) {
                        if (v && v.left)
                            a.push(v.left + '=' + encodeURIComponent(_utils.parseVariable(v.right, dd)));
                    });
                }
                if (params) {
                    Object.keys(params).forEach(function (pn) {
                        a.push(pn + '=' + encodeURIComponent(params[pn]));
                    });
                }
                if (a.length)
                    res = res + '?' + a.join('&');
                return res;
            }
            return '#';
        }, _customProtocols = {}, _isCustomLink = function (href) {
            var i = href.indexOf('://');
            if (i > 0) {
                var p = _customProtocols[href.substring(0, i)];
                if (p)
                    return p.protocol;
            }
            return null;
        }, _execCustomLink = function (clink, context, config, params) {
            var p = _customProtocols[clink.protocol];
            if (p && p.handler)
                p.handler(clink.value, context, config, params);
        }, _registerCustomLink = function (protocol, handler) {
            _customProtocols[protocol] = {
                protocol: protocol,
                handler: handler
            };
        }, _getLink = function (e, event, dontStopPropagation) {
            var target = event.target;
            while (target && target != e) {
                var href = _dom.attr(target, 'data-phoenix-href') || _dom.attr(target, 'href');
                if (href) {
                    if (href === '#') {
                        if (!dontStopPropagation) {
                            event.preventDefault();
                            // event.stopPropagation();
                        }
                        break;
                    }
                    var customLink = _isCustomLink(href);
                    if (customLink) {
                        if (!dontStopPropagation) {
                            event.preventDefault();
                            // event.stopPropagation();
                        }
                        return {
                            protocol: customLink,
                            value: href
                        };
                    }
                }
                target = target.parentNode;
            }
            return null;
        }, _navigateToModule = function (newhash, newModule, oldModule, replace, newWindow) {
            var lpath = location.pathname;
            var lhref;
            var segments = lpath.split('/');
            var addAfter = '';
            if (segments[segments.length - 1].indexOf('.html') > 0)
                addAfter = segments.pop();
            var ls = segments.pop();
            if (!addAfter && ls == '')
                segments.pop();
            segments.push(newModule);
            if (addAfter)
                segments.push(addAfter);
            lhref = segments.join('/');
            if (!newhash || ('' + newhash).charAt(0) !== '#')
                newhash = '#' + newhash;
            if (_history.locationPrefix && newhash.charAt(1) !== _history.locationPrefix)
                newhash = '#' + _history.locationPrefix + newhash.substr(1);
            lhref += newhash;
            if (newWindow) {
                var a = document.createElement('a');
                a.href = lhref;
                a.target = '_blank';
                document.body.appendChild(a);
                a.click();
                document.body.removeChild(a);
                return;
            }
            if (replace)
                location.replace(lhref);
            else
                location.href = lhref;
        }, _parseUrl2Hash = function (value) {
            return '#' + (Phoenix.history.locationPrefix ? Phoenix.history.locationPrefix : '') + value.path + _obj2Search(value.search);
        }, _changeSearch = function (search) {
            var parsedUrl = _parseUrl(window.location.hash, false);
            _utils.merge(search, parsedUrl.search);
            var newHash = _parseUrl2Hash(parsedUrl);
            _setHash(newHash, true, false, true);
        }, _setHash = function (newhash, replace, newWindow, noReload) {
            if (!newhash || ('' + newhash).charAt(0) !== '#')
                newhash = '#' + newhash;
            if (_history.locationPrefix && newhash.charAt(1) !== _history.locationPrefix)
                newhash = newhash = '#' + _history.locationPrefix + newhash.substring(1);
            if (newWindow) {
                var a = document.createElement('a');
                a.href = newhash;
                a.target = '_blank';
                document.body.appendChild(a);
                a.click();
                document.body.removeChild(a);
                return;
            }
            if (window.location.hash === newhash)
                return;
            if (_external.hashHandler) {
                _external.hashHandler(newhash, replace, noReload);
            }
            else {
                _history.removeLast();
                if (replace && 'replaceState' in window.history) {
                    window.history.replaceState(undefined, undefined, newhash);
                }
                else {
                    location.hash = newhash;
                }
            }
        }, _doOpenForm = function (params) {
            if (_external.formOpenHandler)
                _external.formOpenHandler(params);
        }, _doFormAuthoring = function (params) {
            if (!params.name)
                return;
            if (!params.schema)
                return;
            var ch = '/authoring/forms/' + params.name;
            var search = [];
            if (params.schema !== params.name)
                search.push('prototype=' + encodeURIComponent(params.schema));
            if (params.locale)
                search.push('locale=' + encodeURIComponent(params.locale));
            if (params.path)
                search.push('path=' + encodeURIComponent(params.path));
            var ii = window.location.href.lastIndexOf('?');
            if (ii > 0) {
                var os = window.location.href.substr(ii + 1).split('&');
                var ss_1 = [];
                os.forEach(function (ii) {
                    var ci = ii.split('=');
                    if (['prototype', 'path', 'locale'].indexOf(ci[0]) < 0)
                        ss_1.push(ii);
                });
                search.push(ss_1.join('&'));
            }
            if (search.length)
                ch = ch + '?' + search.join('&');
            window.location.hash = '#' + _history.locationPrefix + ch;
        }, _doAuthoring = function (pageName, force) {
            var auth = '/authoring';
            var authform = '/authoring/forms/';
            var ch = window.location.hash;
            if (ch.charAt(0) === '#')
                ch = ch.substring(1);
            if (_history.locationPrefix && ch.charAt(0) === _history.locationPrefix)
                ch = ch.substring(1);
            if (!force && ch.indexOf(auth) === 0) {
                if (ch.indexOf(authform) === 0)
                    window.history.back();
                else
                    window.location.hash = '#' + _history.locationPrefix + ch.substring(auth.length);
            }
            else {
                window.location.hash = '#' + _history.locationPrefix + auth + (pageName ? ('/' + pageName) : ch);
            }
        }, _execLink = function (clink, context, params) {
            var modules = _application.configuration && _application.configuration.application ?
                _application.configuration.application.modules : null;
            if (clink.$page) {
                var module = clink.$module ? clink.$module : _application.name;
                if (modules && modules[module] && _application.licences) {
                    var mlicence = _application.licences[modules[module]];
                    if (mlicence && !mlicence.hasLicence) {
                        if (_external.forbiddenHandler)
                            return _external.forbiddenHandler();
                    }
                }
                var hash = _hashLink(clink, context, params);
                var nw = (context && context.$target === 'blank');
                if (clink.$module) {
                    if (clink.$module !== _application.name)
                        return _navigateToModule(hash, clink.$module, _application.name, clink.$replace, nw);
                }
                _setHash(hash, clink.$replace, nw, false);
                if (clink.$authoring)
                    _doAuthoring();
            }
            else if (clink.$logout) {
                if (_external.logoutHandler)
                    _external.logoutHandler();
            }
            else if (clink.$form) {
                _doOpenForm(clink.$form);
            }
            else if (clink.$action && clink.$action.name) {
                var func = _customData.get(clink.$action.name);
                if (func)
                    func(clink.$action.params);
            }
            else if (clink.$formAuthoring) {
                _doFormAuthoring(clink);
            }
            else if (clink.$authoring) {
                _doAuthoring();
            }
            else if (clink.$back) {
                window.history.back();
            }
            else if (clink.href) {
                var a = document.createElement('a');
                a.href = clink.href;
                if (clink.target)
                    a.target = clink.target;
                document.body.appendChild(a);
                a.click();
                document.body.removeChild(a);
            }
            else {
                var executor = _getLinkExecutor(clink);
                if (executor)
                    executor.hnd(clink);
            }
        };
        link_1.search = _urlSearch;
        link_1.object2search = _obj2Search;
        link_1.parseUrl = _parseUrl;
        link_1.hashLink = _hashLink;
        link_1.pageName = _extractPage;
        link_1.isCustomLink = _getLink;
        link_1.registerLinkExecutor = _registerLinkExecutor;
        link_1.getLinkExecutor = _getLinkExecutor;
        link_1.registerCustomProtocol = _registerCustomLink;
        link_1.execCustomProtocol = _execCustomLink;
        link_1.isCustomProtocol = _isCustomLink;
        link_1.doAuthoring = _doAuthoring;
        link_1.doFormAuthoring = _doFormAuthoring;
        link_1.execLink = _execLink;
        link_1.context = _context;
        link_1.changeSearch = _changeSearch;
    })(link = Phoenix.link || (Phoenix.link = {}));
})(Phoenix || (Phoenix = {}));
/// <reference path="./dom.ts" />
var Phoenix;
(function (Phoenix) {
    var _dom = Phoenix.dom;
    var sticky;
    (function (sticky) {
        sticky.topOffset = 0;
        sticky.bottomOffset = 0;
        var _supportSticky = _dom.featureTest('position', 'sticky', false), _supportFixed = _dom.featureTest('position', 'fixed', true);
        var _classes = {
            active: 'bs-sticky-on',
            inactive: 'bs-sticky-off',
            clone: 'bs-sticky-dummy'
        };
        var _toggle = function (element, turnOn, position) {
            if (turnOn) {
                _dom.addClass(element, _classes.active);
                if (position === 'top')
                    element.style.top = sticky.topOffset + 'px';
                else if (position === 'bottom')
                    element.style.bottom = sticky.bottomOffset + 'px';
                _dom.removeClass(element, _classes.inactive);
            }
            else {
                _dom.addClass(element, _classes.inactive);
                _dom.removeClass(element, _classes.active);
                _dom.removeStype(element, 'width');
                _dom.removeStype(element, 'top');
                _dom.removeStype(element, 'bottom');
            }
        }, _removeItem = function (item, position) {
            var e = item.element;
            var $e = $(e);
            var clone = _dom.find(e.parentNode, item.id + '_sticky_clone');
            _toggle(e, false, position);
            if (clone)
                _dom.remove(clone);
        }, _updateItem = function (item) {
            var e = item.element;
            var $e = $(e), clientrect = _dom.offset(e), height = $e.outerHeight(), initialOffset = 0, scroll = window.pageYOffset || document.documentElement.scrollTop || document.body.scrollTop, isAlreadyOn = _dom.hasClass(e, _classes.active), viewportHeight = $(window).height(), elTop, elBottom, $parent = $e.parent(), parentOffset = $parent.offset().top, parentHeight = $parent.outerHeight(), clone = _dom.find($parent.get(0), item.id + '_sticky_clone');
            if (!clone) {
                // append a clone
                initialOffset = clientrect.top;
                clone = document.createElement('div');
                clone.id = item.id + '_sticky_clone';
                clone.className = _classes.clone;
                clone.style.height = height + 'px';
                _dom.after(e, clone);
            }
            else {
                var cloneRect = _dom.offset(clone);
                clone.style.height = height + 'px';
                initialOffset = cloneRect.width ? cloneRect.top : clientrect.top;
            }
            var position = {
                top: item.position === 'top',
                bottom: item.position === 'bottom'
            };
            function isFixedToTop() {
                var offsetTop = scroll + elTop + sticky.topOffset;
                // Initial Offset Top
                return initialOffset < offsetTop &&
                    // Container Bottom
                    offsetTop + height <= parentOffset + parentHeight;
            }
            function isFixedToBottom() {
                // Initial Offset Top + Height
                return initialOffset + (height || 0) > scroll + viewportHeight - elBottom &&
                    // Container Top
                    scroll + viewportHeight - elBottom >= parentOffset + (height || 0);
            }
            elTop = 0;
            elBottom = 0;
            if (position.top && isFixedToTop() || position.bottom && isFixedToBottom()) {
                if (!isAlreadyOn) {
                    _toggle(e, true, item.position);
                    e.style.width = clientrect.width + 'px';
                }
                else {
                    var cloneRect = _dom.offset(clone);
                    e.style.width = cloneRect.width + 'px';
                }
            }
            else {
                if (isAlreadyOn) {
                    _toggle(e, false, item.position);
                }
            }
        };
        var StickyManager = /** @class */ (function () {
            function StickyManager() {
                this._map = {};
                this._list = [];
                this._scroll = null;
                this._resize = null;
                this._refreshTimer = null;
                this._scrollTimer = null;
            }
            StickyManager.prototype.add = function (element) {
                var that = this;
                if (_supportSticky || !_supportFixed)
                    return;
                that._map[element.id] = element;
                that._list.push(element);
            };
            StickyManager.prototype.remove = function (id) {
                var that = this;
                var e = that._map[id];
                if (e !== undefined) {
                    if (e.element)
                        _removeItem(e, e.position);
                    e.element = null;
                    delete that._map[id];
                    var i = that._list.indexOf(e);
                    if (i >= 0)
                        that._list.splice(i, 1);
                }
            };
            StickyManager.prototype.initialize = function () {
                var that = this;
                if (_supportSticky || !_supportFixed)
                    return;
                that._scroll = that._onscroll.bind(that);
                that._resize = that._onresize.bind(that);
                $(window).on('scroll.sticky', that._scroll);
                $(window).on('global-phoenix-resize', that._resize);
            };
            StickyManager.prototype._updateElements = function (onlyActive) {
                var that = this;
                that._list.forEach(function (item) {
                    var e = item.element;
                    if (onlyActive && !_dom.hasClass(e, _classes.active))
                        return;
                    if (!e.offsetWidth)
                        return;
                    _updateItem(item);
                });
            };
            StickyManager.prototype._onscroll = function () {
                var that = this;
                if (that._scrollTimer) {
                    window.clearTimeout(that._scrollTimer);
                    that._scrollTimer = null;
                }
                that._scrollTimer = window.setTimeout(function () {
                    that._updateElements(false);
                }, 20);
                that._updateElements(false);
            };
            StickyManager.prototype._onresize = function () {
                var that = this;
                that._updateElements(true);
            };
            StickyManager.prototype._refresh = function (scroll) {
                var that = this;
                if (scroll) {
                    that._updateElements(false);
                }
            };
            StickyManager.prototype.refresh = function (scroll) {
                var that = this;
                if (that._refreshTimer) {
                    window.clearTimeout(that._refreshTimer);
                    that._refreshTimer = null;
                }
                that._refreshTimer = window.setTimeout(function () {
                    that._refresh(scroll);
                }, 200);
            };
            StickyManager.prototype.finalize = function () {
                if (_supportSticky || !_supportFixed)
                    return;
                var that = this;
                if (that._refreshTimer) {
                    window.clearTimeout(that._refreshTimer);
                    that._refreshTimer = null;
                }
                if (that._scrollTimer) {
                    window.clearTimeout(that._scrollTimer);
                    that._scrollTimer = null;
                }
                $(window).off('scroll.sticky', that._scroll);
                $(window).off('global-phoenix-resize', that._resize);
                that._scroll = null;
                that._resize = null;
            };
            return StickyManager;
        }());
        sticky.StickyManager = StickyManager;
        _dom.readyHandlers.push(function () {
            sticky.stickyManager.initialize();
        });
        _dom.finalizeHandlers.push(function () {
            sticky.stickyManager.finalize();
        });
        sticky.stickyManager = new sticky.StickyManager();
        sticky.native = _supportSticky || !_supportFixed;
    })(sticky = Phoenix.sticky || (Phoenix.sticky = {}));
})(Phoenix || (Phoenix = {}));
var Phoenix;
(function (Phoenix) {
    var jsonpatch;
    (function (jsonpatch) {
        function compare(tree1, tree2, options) {
            var patches = [];
            options = options || {};
            _generate(tree1, tree2, patches, '', options);
            return patches;
        }
        jsonpatch.compare = compare;
        var _objectKeys = function (obj) {
            if (Array.isArray(obj)) {
                var keys = new Array(obj.length);
                for (var i = 0; i < keys.length; i++)
                    keys[i] = '' + i;
                return keys;
            }
            return Object.keys(obj);
        }, _equals = function (a, b) {
            switch (typeof a) {
                case 'boolean':
                case 'string':
                case 'number':
                    return a === b;
                case 'object':
                    if (a === null)
                        return b === null;
                    if (Array.isArray(a)) {
                        if (!Array.isArray(b) || a.length !== b.length)
                            return false;
                        for (var i = 0, l = a.length; i < l; i++)
                            if (!_equals(a[i], b[i]))
                                return false;
                        return true;
                    }
                    var bKeys = _objectKeys(b);
                    var bLength = bKeys.length;
                    if (_objectKeys(a).length !== bLength)
                        return false;
                    for (var i = 0; i < bLength; i++)
                        if (!_equals(a[i], b[i]))
                            return false;
                    return true;
                default:
                    return false;
            }
        }, _escapePathComponent = function (str) {
            if (str.indexOf('/') === -1 && str.indexOf('~') === -1)
                return str;
            return str.replace(/~/g, '~0').replace(/\//g, '~1');
        }, _deepClone = function (obj) {
            switch (typeof obj) {
                case "object":
                    return JSON.parse(JSON.stringify(obj));
                case "undefined":
                    return null;
                default:
                    return obj;
            }
        }, _generate = function (mirror, obj, patches, path, options) {
            var useId = options.useId;
            var isArray = Array.isArray(obj);
            var newKeys = _objectKeys(obj);
            var oldKeys = _objectKeys(mirror);
            var changed = false;
            var deleted = false;
            for (var t = oldKeys.length - 1; t >= 0; t--) {
                var key = oldKeys[t];
                var oldVal = mirror[key];
                var pathKey = isArray && useId ? (oldVal.id ? (oldVal.id + '') : key) : key;
                if (obj.hasOwnProperty(key) && !(obj[key] === undefined && oldVal !== undefined && Array.isArray(obj) === false)) {
                    var newVal = obj[key];
                    if (typeof oldVal === 'object' && oldVal != null && typeof newVal === 'object' && newVal != null) {
                        _generate(oldVal, newVal, patches, path + "/" + _escapePathComponent(pathKey), options);
                    }
                    else {
                        if (oldVal !== newVal) {
                            changed = true;
                            patches.push({ op: "replace", path: path + "/" + _escapePathComponent(pathKey), value: _deepClone(newVal) });
                        }
                    }
                }
                else {
                    patches.push({ op: "remove", path: path + "/" + _escapePathComponent(pathKey) });
                    deleted = true;
                }
            }
            if (!deleted && newKeys.length == oldKeys.length) {
                return;
            }
            for (var t = 0; t < newKeys.length; t++) {
                var key = newKeys[t];
                if (!mirror.hasOwnProperty(key) && obj[key] !== undefined) {
                    patches.push({ op: "add", path: path + "/" + (isArray && useId ? '-' : _escapePathComponent(key)), value: _deepClone(obj[key]) });
                }
            }
        };
    })(jsonpatch = Phoenix.jsonpatch || (Phoenix.jsonpatch = {}));
})(Phoenix || (Phoenix = {}));
var Phoenix;
(function (Phoenix) {
    var filters;
    (function (filters) {
        filters.OPERATORS = {
            in: 'in',
            nin: 'nin',
            gt: 'gt',
            ge: 'ge',
            lt: 'lt',
            le: 'le',
            between: 'between',
            nbetween: 'nbetween',
            like: 'like',
            nlike: 'nlike',
            empty: 'empty',
            nempty: 'nempty'
        };
        filters.TYPES = {
            number: 'number',
            decimal: 'decimal',
            money: 'money',
            integer: 'integer',
            date: 'date',
            time: 'time',
            'date-time': '"date-time',
            string: 'string',
            enum: 'enum',
            lookup: 'lookup',
            boolean: 'boolean'
        };
    })(filters = Phoenix.filters || (Phoenix.filters = {}));
})(Phoenix || (Phoenix = {}));
/// <reference path="./modules/utils.ts" />
/// <reference path="./modules/core.ts" />
/// <reference path="./modules/ajax.ts" />
/// <reference path="./modules/application.ts" />
/// <reference path="./modules/authentication.ts" />
/// <reference path="./modules/customdata.ts" />
/// <reference path="./modules/dom.ts" />
/// <reference path="./modules/drag.ts" />
/// <reference path="./modules/events.ts" />
/// <reference path="./modules/globals.ts" />
/// <reference path="./modules/links.ts" />
/// <reference path="./modules/locale.ts" />
/// <reference path="./modules/sticky.ts" />
/// <reference path="./modules/ulocale.ts" />
/// <reference path="./modules/jsonpatch.ts" />
/// <reference path="./modules/filters.ts" />
/// <reference path="../core/core-refs.ts" />
var Phoenix;
(function (Phoenix) {
    var _p = Phoenix, _link = _p.link, _utils = _p.utils;
    _link.registerCustomProtocol("page", function (value, context, config, params) {
        if (!context.$url)
            context.$url = _link.search(true);
        if (!context.$mem)
            context.$mem = _p.$mem;
        var i = value.indexOf("://");
        if (i <= 0)
            return;
        var s = value.substring(i + 3), l = _link.parseUrl(s), a = l.path.split('/'), replace;
        if (l.search.$replace) {
            replace = true;
            delete l.search.$replace;
        }
        var cfg = {
            $page: a[0],
            $search: [],
            $replace: replace,
            $menu: null
        };
        if (a.length > 1)
            cfg.$menu = a[1];
        Object.keys(l.search).forEach(function (pn) {
            cfg.$search.push({
                left: pn,
                right: l.search[pn]
            });
        });
        _link.execLink(cfg, context, null);
    });
    _link.registerCustomProtocol("link", function (value, context, config, params) {
        var ln = value.substring(('link://').length);
        var ii = ln.indexOf('/');
        if (ii <= 0)
            ii = ln.indexOf('?');
        if (ii > 0) {
            var u = _link.parseUrl(ln.substring(ii));
            ln = ln.substring(0, ii);
            if (u.search) {
                if (params)
                    _utils.extend(params, u.search);
                else
                    params = u.search;
            }
        }
        if (config.links && config.links[ln]) {
            _link.execLink(config.links[ln], context, params);
        }
    });
    _link.registerCustomProtocol("click", null);
})(Phoenix || (Phoenix = {}));
/// <reference path="../core/core-refs.ts" />
var Phoenix;
(function (Phoenix) {
    var _p = Phoenix, _application = _p.application, _ajax = _p.ajax, _ulocale = _p.ulocale;
    var data;
    (function (data) {
        var _menuProvider = {
            get: function (menu, localization, appName) {
                if (localization && _ulocale.lang) {
                    menu = menu + '_' + _ulocale.lang;
                }
                var config = _application.config(appName);
                if (!config)
                    throw "Application configuration not found.";
                return _ajax.get(config.current.menus + '/' + menu + '.json', { cache: true }, null);
            }
        };
        data.menu = _menuProvider;
    })(data = Phoenix.data || (Phoenix.data = {}));
})(Phoenix || (Phoenix = {}));
/// <reference path="../core/core-refs.ts" />
var Phoenix;
(function (Phoenix) {
    var _p = Phoenix, _ulocale = _p.ulocale, _utils = _p.utils, _ajax = _p.ajax, _application = _p.application;
    var data;
    (function (data_1) {
        var _widgetSchema = {
            get: function (schema, localization, appName) {
                if (localization && _ulocale.lang) {
                    schema = schema + '_' + _ulocale.lang;
                }
                var config = _application.config(appName);
                if (!config)
                    throw "Application configuration not found.";
                return _ajax.get(config.current.locales + '/' + schema + '.json', { cache: true }, function (data) {
                    if (data)
                        data.$name = schema;
                    if (data.$view)
                        data.$view.$name = schema;
                    return data;
                });
            }
        };
        data_1.schema = _widgetSchema;
    })(data = Phoenix.data || (Phoenix.data = {}));
})(Phoenix || (Phoenix = {}));
/// <reference path="../core/core-refs.ts" />
var Phoenix;
(function (Phoenix) {
    var _p = Phoenix, _ajax = _p.ajax, _utils = _p.utils, _dom = Phoenix.dom, _link = _p.link, _application = _p.application;
    var data;
    (function (data) {
        var _waitForCookie = function (cookie, after) {
            if (_dom.getCookie(cookie))
                return after();
            window.setTimeout(_waitForCookie.bind(window, cookie, after), 500);
        }, _execPath = function (path, ldata) {
            if (!path)
                return null;
            if (path === '.')
                return ldata;
            var a = path.split('.'), cd = ldata;
            for (var i = 0, len = a.length; i < len; i++) {
                if (!cd)
                    return null;
                cd = cd[a[i]];
            }
            return cd;
        }, _addTenantId = function (lurl) {
            return lurl;
        }, _rest = {
            get: function (url) {
                return new _utils.Promise(function (resolve, reject) {
                    var params = { $url: url, $method: 'GET' };
                    _rest.getRessources(params, false, function (ldata) {
                        resolve(ldata);
                    });
                });
            },
            put: function (url, cdata) {
                return new _utils.Promise(function (resolve, reject) {
                    var params = { $url: url, $method: 'PUT', $data: cdata };
                    _rest.getRessources(params, false, function (ldata) {
                        resolve(ldata);
                    });
                });
            },
            post: function (url, cdata) {
                return new _utils.Promise(function (resolve, reject) {
                    var params = { $url: url, $data: cdata, $method: 'POST' };
                    _rest.getRessources(params, false, function (ldata) {
                        resolve(ldata);
                    });
                });
            },
            remove: function (url) {
                var params = { $url: url, $method: 'DELETE' };
                return _rest.getRessources(params, false, null);
            },
            getRessources: function (params, isSync, ondata) {
                var _after = ondata ? function (cd) {
                    cd = ondata(cd);
                    return cd;
                } : null;
                var lurl = params.$url, addAuth = false;
                var isDownload = params.$download;
                var waitForCookie = '';
                if (isDownload) {
                    delete params.$download;
                    if (params.$cookie) {
                        waitForCookie = params.$cookie;
                        delete params.$cookie;
                        // Remove cookie
                        _dom.setCookie(waitForCookie, '', '/', null);
                    }
                }
                var config = $.extend(true, {}, _application.config(_application.name) || {});
                config.rest = (params.$type ? config[params.$type] : null) || config.rest || {};
                config.sync = (params.$type ? config[params.$type] : null) || config.sync || {};
                delete params.$type;
                var restCfg = isSync ? config.sync : config.rest;
                var base = restCfg.base || '';
                if (lurl && (lurl.charAt(0) === '/' || (lurl.charAt(0) === '.')))
                    base = '';
                if (base)
                    lurl = base + '/' + lurl;
                else
                    addAuth = true;
                var cfg = _link.context({ cookie: true });
                if (params.$module === undefined && restCfg.$module)
                    params.$module = restCfg.$module;
                if (!params.$module)
                    lurl = lurl.replace('\{\$module\}/', '');
                else
                    cfg.$module = params.$module;
                if (!restCfg.$context)
                    lurl = lurl.replace('\{\$context\}/', '');
                else
                    cfg.$context = restCfg.$context;
                lurl = _utils.formatNames(lurl, cfg);
                if (restCfg.headers && restCfg.headers.Authorization) {
                    restCfg.headers.Authorization = _utils.formatNames(restCfg.headers.Authorization, cfg);
                }
                var opts = _ajax.getDefaultAjaxOptions(restCfg);
                var query = params.$query;
                var listprop = params.$list;
                lurl = lurl + _link.object2search(query);
                lurl = _addTenantId(lurl);
                switch (params.$method) {
                    case 'POST':
                        if (_after) {
                            return new _utils.Promise(function (resolve, reject) {
                                _ajax.post(lurl, params.$data, opts).then(function (rdata) {
                                    rdata = _after(rdata);
                                    resolve(rdata);
                                }).catch(function (err) {
                                    reject(err);
                                });
                            });
                        }
                        else {
                            return _ajax.post(lurl, params.$data, opts);
                        }
                    case 'PUT':
                        return _ajax.put(lurl, params.$data, opts);
                    case 'PATCH':
                        return _ajax.patch(lurl, params.$data, opts);
                    case 'DELETE':
                        return _ajax.remove(lurl, opts);
                    default:
                        if (isDownload) {
                            var frame_2 = _dom.downloadFrame();
                            if (addAuth)
                                lurl = _ajax.addAuthToUrl(lurl);
                            frame_2.src = lurl;
                            if (waitForCookie) {
                                return new _utils.Promise(function (resolve, reject) {
                                    _waitForCookie(waitForCookie, resolve);
                                });
                            }
                            else {
                                return _utils.Promise.resolve();
                            }
                        }
                        else {
                            return _ajax.get(lurl, opts, function (ldata) {
                                return _after ? _after(ldata) : ldata;
                            });
                        }
                }
            }
        };
        data.rest = _rest;
    })(data = Phoenix.data || (Phoenix.data = {}));
})(Phoenix || (Phoenix = {}));
/// <reference path="../core/core-refs.ts" />
var Phoenix;
(function (Phoenix) {
    var _p = Phoenix, _application = _p.application, _ajax = _p.ajax, _link = _p.link;
    var data;
    (function (data) {
        var _local = {
            getRessources: function (params, ondata) {
                var _after = function (cd) {
                    if (ondata)
                        cd = ondata(cd);
                    return cd;
                };
                var config = _application.config(_application.name);
                if (!config)
                    throw "Application configuration not found.";
                var lurl = config.localData + '/' + params.$url;
                var query = params.$query;
                lurl = lurl + _link.object2search(query);
                return _ajax.get(lurl, {}, function (ldata) {
                    return _after(ldata);
                });
            }
        };
        data.local = _local;
    })(data = Phoenix.data || (Phoenix.data = {}));
})(Phoenix || (Phoenix = {}));
/// <reference path="../core/core-refs.ts" />
var Phoenix;
(function (Phoenix) {
    var _p = Phoenix, _application = _p.application, _link = _p.link, _authentication = _p.authentication, _utils = _p.utils, _ajax = _p.ajax;
    var data;
    (function (data_2) {
        var _odatacache = {}, _addTenantId = function (lurl) {
            return lurl;
        }, _addHostName = function (uri) {
            if (uri.indexOf('http') !== 0)
                uri = window.location.origin + uri;
            return uri;
        }, _odata = {
            v4: true,
            transport: {
                doPost: _ajax.post,
                doPut: _ajax.put,
                doDelete: _ajax.remove,
                doGet: function (lurl, options, ondata, params) {
                    return _ajax.get(lurl, options, ondata);
                },
                doPatch: _ajax.patch
            },
            afterLogout: function () {
                //clear cache
                _odatacache = {};
            },
            addImageUrlToken: function (url) {
                var cfg = _application.config(_application.name) || {};
                cfg.odata = cfg.odata || {};
                if (cfg && cfg.odata && cfg.odata.authentication) {
                    var ui = _authentication.load();
                    if (ui) {
                        switch (cfg.odata.authentication) {
                            case 'header-session':
                                url = url + '?token=' + ui.token;
                                break;
                        }
                    }
                }
                return url;
            },
            baseUrl: function (params) {
                var config = _application.config(_application.name) || {};
                config.odata = config.odata || {};
                var base = config.odata.base || '/data';
                var cfg = _link.context({ cookie: true });
                params = params || {};
                if (params.$module === undefined && config.odata.$module)
                    params.$module = config.odata.$module;
                if (!params.$module)
                    base = base.replace('\{\$module\}/', '');
                else
                    cfg.$module = params.$module;
                if (!config.odata.$context)
                    base = base.replace('\{\$context\}/', '');
                else
                    cfg.$context = config.odata.$context;
                return _utils.formatNames(base, cfg);
            },
            configOdata: function (params) {
                var config = $.extend(true, {}, _application.config(_application.name) || {});
                config.odata = (params.$type ? config[params.$type] : null) || config.odata || {};
                var base = config.odata.base || '/data';
                var cfg = _link.context({ cookie: true });
                params = params || {};
                if (params.$module === undefined && config.odata.$module)
                    params.$module = config.odata.$module;
                if (!params.$module)
                    base = base.replace('\{\$module\}/', '');
                else
                    cfg.$module = params.$module;
                if (!config.odata.$context)
                    base = base.replace('\{\$context\}/', '');
                else
                    cfg.$context = config.odata.$context;
                config.odata.base = _utils.formatNames(base, cfg);
                if (config.odata.headers && config.odata.headers.Authorization) {
                    config.odata.base = _utils.formatNames(config.odata.headers.Authorization, cfg);
                }
                return config.odata;
            },
            urlResEntity: function (params, checkId) {
                var base = _odata.baseUrl(params);
                if (!params.$entity)
                    throw 'Invalid odata entity.';
                if (checkId && !params.$entityId)
                    throw 'Invalid odata entity id.';
                var lurl = base + '/' + params.$entity;
                if (params.$entityId)
                    lurl = lurl + '(' + params.$entityId + ')';
                if (params.$propertyName)
                    lurl = lurl + '/' + params.$propertyName;
                return lurl;
            },
            doDelete: function (params, etag) {
                var lurl = _odata.urlResEntity(params, true);
                var opts = _ajax.getDefaultAjaxOptions(_odata.configOdata(params));
                if (etag) {
                    opts.headers['If-Match'] = etag;
                }
                opts.ignore = { '410': true };
                lurl = _addTenantId(lurl);
                return _odata.transport.doDelete(lurl, opts);
            },
            doPost: function (params, data) {
                var opts = _ajax.getDefaultAjaxOptions(_odata.configOdata(params));
                var lurl = _odata.urlResEntity(params, false);
                lurl = _addTenantId(lurl);
                return _odata.transport.doPost(lurl, data, opts);
            },
            doPut: function (params, data, etag, returnRepresentation) {
                var lurl = _odata.urlResEntity(params, true);
                var opts = _ajax.getDefaultAjaxOptions(_odata.configOdata(params));
                opts.headers = opts.headers || {};
                if (etag) {
                    opts.headers['If-Match'] = etag;
                }
                if (returnRepresentation)
                    opts.headers['Prefer'] = 'return=representation';
                lurl = _addTenantId(lurl);
                return _odata.transport.doPut(lurl, data, opts);
            },
            doPatch: function (params, data, etag, returnRepresentation) {
                var lurl = _odata.urlResEntity(params, true);
                var opts = _ajax.getDefaultAjaxOptions(_odata.configOdata(params));
                opts.headers = opts.headers || {};
                if (Phoenix.application.useJSONPatch) {
                    opts.headers["Content-Type"] = 'application/json-patch+json';
                }
                if (etag) {
                    opts.headers['If-Match'] = etag;
                }
                if (returnRepresentation)
                    opts.headers['Prefer'] = 'return=representation';
                lurl = _addTenantId(lurl);
                return _odata.transport.doPatch(lurl, data, opts);
            },
            applyFilters: function (documents, search, serchFields, skip, top, orderBy) {
                var res = [], totalCount = documents.length;
                search = (search || '') + '';
                if (search && serchFields && serchFields.length) {
                    var fl_1 = serchFields.length;
                    var ss_2 = search.toLowerCase();
                    documents.forEach(function (item) {
                        var contains = false;
                        for (var i = 0; i < fl_1; i++) {
                            var ff = serchFields[i].replace(/\//g, '.');
                            var cv = ((_utils.getValue(item, ff) || '') + '').toLowerCase();
                            if (cv.indexOf(ss_2) >= 0) {
                                contains = true;
                                break;
                            }
                        }
                        if (contains)
                            res.push(item);
                    });
                    totalCount = res.length;
                }
                else
                    res = documents;
                skip = skip || 0;
                var ctop = top || res.length;
                if (orderBy) {
                    var orderFields_1 = orderBy.split(',').map(function (field) {
                        field = field.trim();
                        var a = field.split(' ');
                        if (a.length === 2)
                            return { field: a[0], asc: a[1] === 'asc' };
                        return { field: field, asc: true };
                    });
                    res.sort(function (item1, item2) {
                        for (var i = 0; i < orderFields_1.length; i++) {
                            var fo = orderFields_1[i];
                            var val1 = item1[fo.field];
                            var val2 = item2[fo.field];
                            if (val1 === val2)
                                continue;
                            var res_1 = val1 > val2 ? 1 : -1;
                            if (!fo.asc)
                                res_1 = res_1 * (-1);
                            return res_1;
                        }
                        return 0;
                    });
                }
                var docs = res.slice(skip, skip + ctop);
                return { documents: docs, count: totalCount, dataCount: docs.length, skip: skip, pageSize: top, nodata: docs.length === 0, search: search, orderBy: orderBy };
            },
            getRessources: function (params, ondata, errors, context) {
                var _after = function (cd) {
                    if (ondata)
                        cd = ondata(cd);
                    return cd;
                };
                var isRelation = params.$relation;
                if (isRelation)
                    delete params.$relation;
                var hasEntityId = false;
                var cache = params.$cache;
                delete params.$cache;
                var config = $.extend(true, {}, _application.config(_application.name) || {});
                config.odata = (params.$type ? config[params.$type] : null) || config.odata || {};
                delete params.$type;
                if (config.odata.v4 != undefined) {
                    _odata.v4 = config.odata.v4;
                }
                var base = config.odata ? config.odata.base || '/data' : '/data';
                var cfg = _link.context({ cookie: true });
                if (params.$module === undefined && config.odata.$module)
                    params.$module = config.odata.$module;
                if (!params.$module)
                    base = base.replace('\{\$module\}/', '');
                else
                    cfg.$module = params.$module;
                if (!config.odata.$context)
                    base = base.replace('\{\$context\}/', '');
                else
                    cfg.$context = config.odata.$context;
                base = _utils.formatNames(base, cfg);
                if (config.odata.headers && config.odata.headers.Authorization) {
                    config.odata.headers.Authorization = _utils.formatNames(config.odata.headers.Authorization, cfg);
                }
                delete params.$module;
                var entity = params.$entity;
                if (params.$entityId) {
                    entity = entity + '(' + params.$entityId + ')';
                    delete params.$entityId;
                    hasEntityId = true;
                }
                if (params.$propertyName) {
                    entity = entity + '/' + params.$propertyName;
                    delete params.$propertyName;
                    hasEntityId = true;
                }
                var lurl = entity;
                delete params.$entity;
                var search = '';
                var searchFields = [];
                var skip = params.$skip || 0;
                var top, topIncremented = false;
                var orderBy = params.$orderby;
                if (params.$searchByFieldsValue) {
                    search = params.$searchByFieldsValue;
                    searchFields = params.$searchByFieldsFields;
                    delete params.$searchByFieldsValue;
                    delete params.$searchByFieldsFields;
                }
                if (!hasEntityId) {
                    if (params.$top)
                        top = parseInt(params.$top + '', 10);
                    if (_odata.v4) {
                        if (params.$top && !params.nocount)
                            params.$count = true;
                        delete params.nocount;
                    }
                    else {
                        if (params.$top && !params.nocount)
                            params.$inlinecount = 'allpages';
                        delete params.nocount;
                    }
                    if ((config.odata.array || config.odata.nocount) && (params.$count || params.$inlinecount) && params.$top && !params.$allData) {
                        topIncremented = true;
                        top++;
                        params.$top = top;
                        delete params.$count;
                        delete params.$inlinecount;
                    }
                }
                var allData = params.$allData || isRelation;
                if (allData) {
                    delete params.$skip;
                    delete params.$top;
                    delete params.$allData;
                    delete params.$orderby;
                }
                var opts = _ajax.getDefaultAjaxOptions(config.odata);
                opts.$errors = errors;
                lurl = base + '/' + lurl + _link.object2search(params);
                if (cache && _odatacache[entity] && _odatacache[entity].uri === lurl) {
                    return new _utils.Promise(function (resolve, reject) {
                        var cd = _after(hasEntityId ? _odatacache[entity].data : $.extend(true, {}, _odatacache[entity].data));
                        resolve(cd);
                    });
                }
                lurl = _addTenantId(lurl);
                var getHandler = data_2.odata.transport.doGet;
                if (isRelation) {
                    getHandler = function (uri, options, ondata, params) {
                        var rdata = { value: [] };
                        if (context && context.model) {
                            rdata.value = context.model.getValue(params.params.relation).model(false) || [];
                        }
                        if (ondata)
                            rdata = ondata(rdata);
                        return _utils.Promise.resolve(rdata);
                    };
                }
                return getHandler(lurl, opts, function (ldata) {
                    var cd = {};
                    if (_odata.v4 && ldata)
                        delete ldata['@odata.context'];
                    if (!hasEntityId) {
                        cd.documents = config.odata.array ? ldata : (_odata.v4 ? ldata.value : ldata.d.results);
                        if (allData) {
                            cd._origData = [];
                        }
                        cd.documents.forEach(function (v) {
                            delete v.__metadata;
                            if (allData)
                                cd._origData.push($.extend(true, {}, v));
                        });
                        if (config.odata.array || config.odata.nocount) {
                            cd._noPagesCount = true;
                            cd._hasNext = false;
                            cd._hasPrev = skip ? true : false;
                        }
                        if (allData) {
                            var fdata = _odata.applyFilters(cd.documents, search, searchFields, skip, top, orderBy);
                            cd.documents = fdata.documents;
                            cd.count = fdata.count;
                        }
                        else {
                            if (config.odata.array || config.odata.nocount) {
                                if (topIncremented) {
                                    if (cd.documents.length === top) {
                                        cd._hasNext = true;
                                        cd.documents.pop();
                                    }
                                    top--;
                                }
                            }
                            else {
                                cd.count = _odata.v4 ? ldata['@odata.count'] : ldata.d.__count;
                            }
                        }
                        cd.dataCount = cd.documents.length;
                        cd.pageSize = top;
                        cd.skip = skip;
                        cd.nodata = cd.dataCount == 0;
                        cd.uri = _addHostName(lurl);
                        cd.search = search;
                        cd.orderBy = orderBy;
                    }
                    else {
                        cd = ldata;
                    }
                    if (cache) {
                        _odatacache[entity] = {
                            uri: lurl,
                            data: $.extend(true, {}, cd)
                        };
                    }
                    return _after(cd);
                }, { entity: entity, params: params });
            }
        };
        data_2.odata = _odata;
        _authentication.registerAfterLogout(_odata.afterLogout);
    })(data = Phoenix.data || (Phoenix.data = {}));
})(Phoenix || (Phoenix = {}));
/// <reference path="../core/core-refs.ts" />
/// <reference path="./schema-provider.ts" />
/// <reference path="./rest-provider.ts" />
/// <reference path="./local-provider.ts" />
/// <reference path="./menu-provider.ts" />
/// <reference path="./odata-provider.ts" />
var Phoenix;
(function (Phoenix) {
    var _p = Phoenix, _link = _p.link, _utils = _p.utils, _data = _p.data, _customData = _p.customData, _application = _p.application;
    var data;
    (function (data) {
        var _execTransform = function (cfg, localData) {
            if (cfg.$transform) {
                var func = _customData.get("datasets.transform." + cfg.$transform);
                if (func)
                    localData = func(localData);
            }
            return localData;
        }, _execBeforeTransform = function (transform, params, context) {
            if (!transform)
                return params;
            var func = _customData.get("datasets.transform." + transform);
            if (func)
                return func($.extend(true, {}, params, context));
            return params;
        }, _registerDataProvider = function () {
            var _dataProvider = {};
            return {
                register: function (name, provider) {
                    _dataProvider[name] = provider;
                },
                get: function (name) {
                    return _dataProvider[name];
                    ;
                }
            };
        }, _rdp = _registerDataProvider(), _checkDataSetConfig = function (cfg) {
            cfg = cfg || {};
            cfg.$type = cfg.$type || "basic";
            cfg.$triggers = cfg.$triggers || ["$load"];
            return cfg;
        }, _checkValue = function (value, ct, addQuote, output) {
            if (value == null && ct) {
                switch (ct) {
                    case 'number':
                        value = undefined;
                        break;
                    case 'integer':
                        value = undefined;
                        break;
                    case 'boolean':
                        value = undefined;
                        break;
                    case 'string':
                        value = '';
                        break;
                    default:
                        value = null;
                        break;
                }
            }
            if (Array.isArray(value)) {
                if (output)
                    return value;
                else
                    return JSON.stringify(value);
            }
            if (addQuote && ct) {
                if (ct === 'string' || ct === 'date' || ct === 'date-time') {
                    if (value == null)
                        return null;
                    else {
                        if (ct === 'date' || ct === 'date-time') {
                        }
                        else
                            value = '\'' + value.replace(/'/g, '\'\'') + '\'';
                    }
                }
            }
            return value;
        }, _getArrayIndexValue = function (value, s) {
            var i = s.indexOf('[');
            if (i < 0)
                return null;
            value = (i === 0) ? value : value[s.substr(0, i)];
            if (!value)
                return null;
            var sindex = s.substr(i + 1, s.length - i - 2);
            if (sindex == '*' || sindex == '')
                return value;
            var index = parseInt(sindex, 10);
            if (index < value.length)
                return value[index];
            else
                return null;
        }, _getValueArray = function (value, context, addQuote, output) {
            return _getValue(value, context, addQuote, true, false);
        }, _getValue = function (value, context, addQuote, output, isReplaceVar) {
            var cv = value;
            var ctx = ['$url', '$context', '$data', '$item', '$mem', '$local'];
            var vt = typeof cv, ct;
            if (vt === 'object' && cv) {
                ct = value.type;
                cv = value.value;
                if (ct === 'literal')
                    return isReplaceVar ? value : cv;
                vt = typeof cv;
            }
            var isArray = false;
            if (vt === 'string' && cv && cv.charAt(0) === '[' && cv.charAt(cv.length - 1) === ']') {
                isArray = true;
                cv = cv.substr(1, cv.length - 2);
            }
            if (vt === 'string' && cv && cv.charAt(0) === '$') {
                var segments = cv.split('.');
                var i = 0, sv = null;
                while (i < segments.length) {
                    var s = segments[i];
                    if (i == 0) {
                        var s1 = s, sarray;
                        var k = s.indexOf('[');
                        if (k > 0) {
                            sarray = s.substr(k);
                            s1 = s.substr(0, k);
                        }
                        var j = ctx.indexOf(s1);
                        if (j >= 0) {
                            sv = context[ctx[j]];
                            if (sarray)
                                segments.splice(i + 1, 0, sarray);
                        }
                        else {
                            if (!ct)
                                ct = typeof cv;
                            return _checkValue(cv, ct, addQuote, output);
                        }
                    }
                    else {
                        if (!sv)
                            break;
                        if (s.charAt(s.length - 1) == ']')
                            sv = _getArrayIndexValue(sv, s);
                        else {
                            if (Array.isArray(sv)) {
                                sv = sv.map(function (svi) { return svi[s]; });
                            }
                            else
                                sv = sv[s];
                        }
                    }
                    i++;
                }
                if (isArray) {
                    if (!ct)
                        ct = typeof sv;
                    return [_checkValue(sv, ct, addQuote, output)];
                }
                else {
                    if (!ct)
                        ct = typeof sv;
                    return _checkValue(sv, ct, addQuote, output);
                }
            }
            if (!ct)
                ct = typeof cv;
            return _checkValue(cv, ct, addQuote, output);
        }, _getPostValue = function (value, context, addQuote, output) {
            if (typeof value !== 'object')
                return null;
            if (Array.isArray(value))
                return;
            var res = {};
            Object.keys(value).forEach(function (key) {
                res[key] = _getValue(value[key], context, addQuote, output, false);
            });
            return res;
        }, _equals = function (o1, o2, props) {
            var i = props.length;
            while (i--) {
                if (o1[props[i]] != o2[props[i]])
                    return false;
            }
            return true;
        }, _outputData = function (def, context) {
            if (!def)
                return null;
            if (typeof def == "string") {
                return _getValue(def, context, false, true, false);
            }
            var res = {};
            var keys = Object.keys(def);
            keys.forEach(function (name) {
                if (def[name] === '$data.documents') {
                    if (context.$data && context.$data.documents) {
                        res[name] = context.$data.documents;
                        if (res.pageSize === undefined)
                            res.pageSize = context.$data.pageSize;
                        if (res.skip === undefined)
                            res.skip = context.$data.skip;
                        if (res.count === undefined)
                            res.count = context.$data.count;
                        if (res.uri === undefined)
                            res.uri = context.$data.uri;
                    }
                }
                else
                    res[name] = _getValue(def[name], context, false, true, false);
            });
            return res;
        }, _defaultData = function (def, lurl, context, localContext) {
            return _outputData(def, {
                $url: lurl,
                $context: context,
                $data: null,
                $mem: _p.$mem,
                $local: localContext
            });
        }, _addQuote = function (op) {
            if (op === 'and' || op === 'or' || op === '$func')
                return false;
            if (op === '(' || op === ')' || op === 'not')
                return false;
            return true;
        }, _internalExecTree = function (tree, lurl, context, localContext, addQuote, isReplaceVars) {
            if (tree && typeof tree === 'object' && tree.$op) {
                var rtree = {
                    $op: tree.$op,
                    $nulls: tree.$nulls,
                    $left: null,
                    $right: null
                };
                if (tree.$op === '$func' && tree.$arguments) {
                    var setNull_1 = false;
                    var aq_1 = true;
                    tree.$arguments.forEach(function (argument, index) {
                        var checkValue = true;
                        if (typeof argument === 'object') {
                            checkValue = (argument.type !== 'literal');
                        }
                        var v = _getValue(argument, {
                            $url: lurl,
                            $context: context,
                            $data: null,
                            $mem: _p.$mem,
                            $local: localContext
                        }, aq_1, false, isReplaceVars);
                        tree.$arguments[index] = v;
                        if (checkValue && (v === '\'\'' || v === null || v === undefined))
                            setNull_1 = true;
                    });
                    if (setNull_1) {
                        rtree.$right = null;
                        rtree.$left = null;
                        return rtree;
                    }
                    else
                        tree.$right = tree.$arguments.join(', ');
                }
                else if (tree.$op === 'in' && tree.$children) {
                    var aq_2 = addQuote && _addQuote(tree.$op);
                    if (!Array.isArray(tree.$children)) {
                        tree.$children = _getValueArray(tree.$children, {
                            $url: lurl,
                            $context: context,
                            $data: null,
                            $mem: _p.$mem,
                            $local: localContext
                        }, aq_2, false);
                    }
                    if (tree.$children.length) {
                        var res = tree.$children.map(function (item) {
                            return _getValue(item, {
                                $url: lurl,
                                $context: context,
                                $data: null,
                                $mem: _p.$mem,
                                $local: localContext
                            }, aq_2, false, isReplaceVars);
                        });
                        rtree.$right = '(' + res.join(',') + ')';
                        rtree.$left = tree.$left;
                        rtree.nativeIn = true;
                    }
                    return rtree;
                }
                if (tree.$left != null) {
                    if (typeof tree.$left === 'object' && (tree.$left.$op || tree.$left.$op === null)) {
                        rtree.$left = _internalExecTree(tree.$left, lurl, context, localContext, addQuote, isReplaceVars);
                    }
                    else {
                        rtree.$left = _getValue(tree.$left, {
                            $url: lurl,
                            $context: context,
                            $data: null,
                            $mem: _p.$mem,
                            $local: localContext
                        }, false, false, isReplaceVars);
                    }
                }
                if (tree.$right != null) {
                    if (typeof tree.$right === 'object' && (tree.$right.$op || tree.$right.$op === null)) {
                        rtree.$right = _internalExecTree(tree.$right, lurl, context, localContext, addQuote, isReplaceVars);
                    }
                    else {
                        var aq = addQuote && _addQuote(tree.$op);
                        rtree.$right = _getValue(tree.$right, {
                            $url: lurl,
                            $context: context,
                            $data: null,
                            $mem: _p.$mem,
                            $local: localContext
                        }, aq, false, isReplaceVars);
                    }
                }
                return rtree;
            }
            else if (tree && typeof tree === 'object' && tree.$op === null && tree.$right === null && tree.$left) {
                var rtree = {
                    $left: null,
                    $op: null,
                    $right: null
                };
                if (tree.$left != null) {
                    if (typeof tree.$left === 'object' && tree.$left.$op) {
                        rtree.$left = _internalExecTree(tree.$left, lurl, context, localContext, addQuote, isReplaceVars);
                    }
                    else {
                        rtree.$left = _getValue(tree.$left, {
                            $url: lurl,
                            $context: context,
                            $data: null,
                            $mem: _p.$mem,
                            $local: localContext
                        }, false, false, isReplaceVars);
                    }
                }
                return rtree;
            }
            else {
                var aq = addQuote && _addQuote(tree.$op);
                return _getValue(tree, {
                    $url: lurl,
                    $context: context,
                    $data: null,
                    $mem: _p.$mem,
                    $local: localContext
                }, aq, false, isReplaceVars);
            }
        }, _execTree = function (tree, lurl, context, localContext) {
            if (tree && typeof tree === 'string') {
                tree = _getValue(tree, {
                    $url: lurl,
                    $context: context,
                    $data: null,
                    $mem: _p.$mem,
                    $local: localContext
                }, false, false, false);
                return tree;
            }
            return _internalExecTree(tree, lurl, context, localContext, true, false);
        }, _replaceVar = function (filter, context) {
            var ctx = _link.context();
            if (filter && typeof filter === 'string') {
                return _getValue(filter, {
                    $url: ctx.$url,
                    $context: context,
                    $data: null,
                    $mem: _p.$mem,
                    $local: null
                }, false, false, true);
            }
            return _internalExecTree(filter, ctx.$url, context, null, false, true);
        }, _memoryTree = function (tree, lurl, context, localContext) {
            return _internalExecTree(tree, lurl, context, localContext, false, false);
        }, _acceptFilter = function (tree, item) {
            if (tree.$op === "eq") {
                return item[tree.$left] == tree.$right;
            }
            return false;
        }, _tree2filter = function (tree) {
            if (tree && typeof tree == 'object' && tree.$op) {
                var left = _tree2filter(tree.$left);
                var right = _tree2filter(tree.$right);
                if (tree.$nulls === "ignore" && right.value == null) {
                    if (tree.op === 'not') {
                        return { value: null, op: null };
                    }
                    return { value: left.value, op: left.op };
                }
                //unary operators
                if (tree.$op === "not") {
                    return { value: 'not (' + right.value + ')', op: tree.$op };
                }
                else if (tree.$op === 'in' && !tree.nativeIn) {
                    var values = (right.value || '').split(';');
                    var res_2 = [];
                    values.forEach(function (value) {
                        res_2.push(left.value + ' eq ' + value);
                    });
                    return { value: '(' + res_2.join(' or ') + ')', op: "in" };
                }
                else if (tree.$op === "$func")
                    return { value: left.value + '(' + right.value + ')', op: tree.$op };
                else {
                    if (tree.$nulls === "ignore" && (left.value == null || right.value == null)) {
                        if (tree.$op === "and" || tree.$op === "or") {
                            if (right.value == null)
                                return { value: left.value, op: left.op };
                            else
                                return { value: right.value, op: right.op };
                        }
                        else
                            return { value: null, op: null };
                    }
                    else {
                        var lv = left.value;
                        var rv = right.value;
                        if (tree.$op === 'and' || tree.$op === 'or') {
                            if (!lv && !rv)
                                return { value: null, op: null };
                            if (!lv)
                                return { value: rv, op: tree.$op };
                            if (!rv)
                                return { value: lv, op: tree.$op };
                        }
                        if (tree.$op === "and") {
                            if (left.op === "or")
                                lv = '(' + lv + ')';
                            if (right.op === "or")
                                rv = '(' + rv + ')';
                        }
                        else if (rv) {
                            if (tree.$nulls === 'ignore' && rv === '\'\'') {
                                return { value: null, op: null };
                            }
                        }
                        return { value: lv + ' ' + tree.$op + ' ' + rv, op: tree.$op };
                    }
                }
            }
            else if (tree && typeof tree == 'object' && tree.$op === null && tree.$right === null && tree.$left) {
                var cleft = _tree2filter(tree.$left);
                return { value: cleft.value, op: null };
            }
            else
                return { value: tree, op: null };
        }, _parseTree = function (tree, lurl, context, localContext) {
            var rtree = _execTree(tree, lurl, context, localContext);
            return _tree2filter(rtree).value;
        }, _parseRestParams = function (params, lurl, context, localContext, isSync) {
            var res = { $url: null, $list: null, $query: null, $method: "GET" };
            res.$method = (params.$method || 'GET').toUpperCase();
            var transactionId, viewId;
            res.$data = params.$data ? $.extend(true, {}, params.$data) : null;
            if (params.$type)
                res.$type = params.$type;
            if (isSync) {
                if (!params.$entity)
                    throw 'Invalid sync dataset - $params.$entity';
                res.$transactionId = params.$transactionId || 'id';
                if (!res.$transactionId)
                    throw 'Invalid sync dataset -$params.$transactionId';
                res.$viewId = params.$viewId || 'viewId';
                if (!res.$viewId)
                    throw 'Invalid sync dataset -$params.$viewId';
                transactionId = lurl[res.$transactionId];
                viewId = lurl[res.$viewId];
                if (transactionId && viewId)
                    res.$method = params.$method === 'PATCH' ? 'PATCH' : 'GET';
                else
                    res.$method = 'POST';
                if (res.$method !== 'POST')
                    res.$data = null;
            }
            res.$url = params.$url || '';
            res.$url = _utils.execAngularExpression(res.$url, {
                $url: lurl,
                $context: context,
                $data: null,
                $mem: _p.$mem,
                $local: localContext
            });
            var query = params.$query ? $.extend(true, {}, params.$query) : null;
            if (isSync) {
                var curl = res.$url ? res.$url.split('/') : [];
                curl.push(params.$entity);
                if (viewId && transactionId) {
                    curl.push(viewId);
                    query = query || {};
                    query.id = transactionId;
                }
                res.$url = curl.join('/');
            }
            if (params.$download)
                res.$download = params.$download;
            if (params.$cookie)
                res.$cookie = params.$cookie;
            res.$list = params.$list;
            if (query) {
                res.$query = {};
                Object.keys(query).forEach(function (name) {
                    if (name === '$filter' && query.$filter) {
                        res.$query.$filter = _parseTree(query.$filter, lurl, context, localContext);
                        if (!res.$query.$filter)
                            delete res.$query.$filter;
                    }
                    else {
                        res.$query[name] = _getValue(query[name], {
                            $url: lurl,
                            $context: context,
                            $data: null,
                            $mem: _p.$mem,
                            $local: localContext
                        }, false, false, false);
                    }
                });
            }
            if (params.$method !== "GET" && params.$method !== "DELETE") {
                if (res.$data) {
                    if (isSync)
                        res.$data = _getPostValue(res.$data, {
                            $url: lurl,
                            $context: context,
                            $data: null,
                            $mem: _p.$mem,
                            $local: localContext
                        }, false, true);
                    else
                        res.$data = _getValue(res.$data, {
                            $url: lurl,
                            $context: context,
                            $data: null,
                            $mem: _p.$mem,
                            $local: localContext
                        }, false, false, false);
                    _getPostValue;
                }
                else
                    res.$data = context || {};
            }
            return res;
        }, _parseEntityId = function (entityId, ctx) {
            if (!entityId)
                return '';
            var v = typeof entityId;
            if (v === 'object') {
                if (entityId.value && entityId.type)
                    return _getValue(entityId, ctx, false, false, false);
                else {
                    var l = [], hasNulls = false;
                    Object.keys(entityId).forEach(function (name) {
                        if (hasNulls)
                            return;
                        var cv = entityId[name];
                        var p = _parseEntityId(cv, ctx);
                        if (!p)
                            hasNulls = true;
                        l.push(p);
                    });
                    if (hasNulls)
                        return '';
                    return l.join(', ');
                }
            }
            else
                return _getValue(entityId, ctx, false, false, false);
        }, _isEntityIdNull = function (v) {
            return (v === undefined || v === null || v === '' || v === '\'\'');
        }, _getUrlBaseByType = function (type, addHost) {
            var config = _application.config(_application.name) || {};
            var cfg = config ? config[type] : null;
            var res = '';
            if (cfg && cfg.base) {
                res = cfg.base;
            }
            if (res && res.indexOf('{') >= 0) {
                var ctx = _link.context({ cookie: true });
                res = _utils.formatNames(res, ctx);
            }
            addHost = addHost && res.toLowerCase().indexOf('http') !== 0;
            if (addHost) {
                if (res && res.charAt(0) === ':')
                    res = location.protocol + '//' + location.hostname + res;
                else
                    res = location.protocol + '//' + location.host + res;
            }
            return res;
        }, _parseODataParams = function (params, lurl, context, localContext) {
            if (!params)
                return null;
            var res = {};
            var ctx = {
                $url: lurl,
                $context: context,
                $data: null,
                $mem: _p.$mem,
                $local: localContext,
            };
            var $filter = params.$filter ? $.extend(true, {}, params.$filter) : null;
            if (params.$searchByFields && params.$searchByFields.value && params.$searchByFields.fields && params.$searchByFields.fields.length) {
                var searchFilter_1 = null;
                var config = _application.config(_application.name) || {};
                var odataCfg_1 = (params.$type ? config[params.$type] : null) || config.odata || {};
                var caseSensitive_1 = odataCfg_1.caseSensitive || false;
                params.$searchByFields.fields.forEach(function (field) {
                    var cf = field.replace(/\./g, '/');
                    var cv = '\'' + params.$searchByFields.value.replace(/'/g, '\'\'') + '\'';
                    if (caseSensitive_1) {
                        cf = 'tolower(' + cf + ')';
                        cv = 'tolower(' + cv + ')';
                    }
                    var f = {
                        $left: odataCfg_1.contains || 'contains',
                        $op: '$func',
                        $right: cf + ', ' + cv
                    };
                    if (!searchFilter_1) {
                        searchFilter_1 = f;
                    }
                    else {
                        searchFilter_1 = {
                            $left: searchFilter_1,
                            $op: 'or',
                            $right: f
                        };
                    }
                });
                params.$searchByFieldsValue = params.$searchByFields.value;
                params.$searchByFieldsFields = params.$searchByFields.fields;
                if (!params.$allData) {
                    if ($filter)
                        $filter = {
                            $left: $filter,
                            $op: 'and',
                            $right: searchFilter_1
                        };
                    else
                        $filter = searchFilter_1;
                }
            }
            Object.keys(params).forEach(function (name) {
                if (name === '$search') {
                    return;
                }
                else if (name === '$searchByFields') {
                    return;
                }
                else if (name === '$entity')
                    res.$entity = _getValue(params.$entity, ctx, false, false, false);
                else if (name === '$entityId') {
                    var hasKeyNull_1 = false;
                    var v_1 = typeof params.$entityId;
                    if (v_1 === 'object') {
                        if (params.$entityId.value && params.$entityId.type) {
                            var v_2 = _getValue(params.$entityId, ctx, true, false, false);
                            hasKeyNull_1 = _isEntityIdNull(v_2);
                            res[name] = v_2;
                        }
                        else {
                            var l_1 = [];
                            Object.keys(params.$entityId).forEach(function (element) {
                                var v = _getValue(params.$entityId[element], ctx, true, false, false);
                                if (!hasKeyNull_1)
                                    hasKeyNull_1 = _isEntityIdNull(v);
                                l_1.push(element + '=' + v);
                            });
                            res[name] = l_1.join(', ');
                        }
                    }
                    else {
                        var v_3 = _getValue(params[name], ctx, true, false, false);
                        hasKeyNull_1 = _isEntityIdNull(v_3);
                        res[name] = v_3;
                    }
                    if (hasKeyNull_1) {
                        res.$entityIdNull = true;
                    }
                }
                else if (name == 'aggregate' && params.aggregate)
                    res.aggregate = params.aggregate;
                else if (name == 'groupby' && params.groupby)
                    res.groupby = params.groupby;
                else if (name == 'having' && params.having)
                    res.having = params.having;
                else if (name == '$filter' && params.$filter)
                    return;
                else if (name == '$searchByFieldsFields') {
                    res[name] = params[name];
                }
                else {
                    if (params[name])
                        res[name] = _getValue(params[name], ctx, false, false, false);
                }
            });
            if ($filter) {
                res.$filter = _parseTree($filter, lurl, context, localContext);
                if (!res.$filter)
                    delete res.$filter;
            }
            if (params.$search && context && context.$searchText) {
                var v = _checkValue(context.$searchText, 'string', true, false), filter;
                var search = Array.isArray(params.$search) ? params.$search : [params.$search];
                if (search.length === 1) {
                    filter = _utils.format('contains({0},{1})', params.$search.field, v);
                }
                else {
                    var af = ['('];
                    var len = search.length;
                    for (var i = 0; i < len; i++) {
                        af.push(_utils.format('contains({0},{1})', search[i].field, v));
                        if (i < (len - 1))
                            af.push(' or ');
                    }
                    af.push(')');
                    filter = af.join('');
                }
                if (res.$filter)
                    res.$filter = res.$filter + ' and ' + filter;
                else
                    res.$filter = filter;
            }
            return res;
        }, _extractValue = function (value) {
            value = value || '';
            var ctx = _link.context();
            return _getValue(value, ctx, false, false, false);
        }, _execBasic = function (config, lurl, context, callerObject) {
            var local = callerObject && callerObject.getLocalContext ? callerObject.getLocalContext() : null;
            var cd, localData = config.$data;
            if (config.$params && config.$params.dataProvider) {
                var hnd = _customData.get(config.$params.dataProvider);
                if (hnd)
                    context = hnd(context, callerObject);
            }
            if (!config.$main && config.$output) {
                localData = config.$data;
                cd = _outputData(config.$output, {
                    $url: lurl,
                    $context: context,
                    $data: localData,
                    $mem: _p.$mem,
                    $local: local
                });
            }
            else
                cd = localData;
            cd = _execTransform(config, cd);
            return new _utils.Promise(function (resolve, reject) {
                resolve(cd);
            });
        }, _execWSchema = function (config, lurl, context, callerObject) {
            var name = config.$params.name;
            return _data.schema.get(name, config.$params.localization, undefined);
        }, _execMenu = function (config, lurl, context, callerObject) {
            var name = config.$params.name;
            return _data.menu.get(name, config.$params.localization, undefined);
        }, _execOData = function (config, lurl, context, callerObject) {
            var method = config.$method || 'GET';
            var local = callerObject && callerObject.getLocalContext ? callerObject.getLocalContext() : null;
            var tp = _execBeforeTransform(config.$beforeExecute, config.$params, context);
            var params = _parseODataParams(tp, lurl, context, local);
            if (method) {
                method = _getValue(method, context, false, false, false);
                method = method.toUpperCase();
            }
            if (params.$entityIdNull) {
                delete params.$entityIdNull;
                if (method === 'GET' && config.$create) {
                    var rdata = $.extend(true, {}, config.$create);
                    rdata.$create = true;
                    return _utils.Promise.resolve(rdata);
                }
            }
            if (method) {
                switch (method) {
                    case "DELETE":
                        return _data.odata.doDelete(params, context.etag ? context.etag : null);
                    case "POST":
                        return _data.odata.doPost(params, context);
                    case "PUT":
                        var etagput = context["@odata.etag"];
                        delete context["@odata.etag"];
                        var irput = context["@odata.return"] != null;
                        delete context["@odata.return"];
                        return _data.odata.doPut(params, context, etagput, irput);
                    case "PATCH":
                        var etagpatch = context["@odata.etag"];
                        delete context["@odata.etag"];
                        var irpatch = context["@odata.return"] != null;
                        delete context["@odata.return"];
                        return _data.odata.doPatch(params, context, etagpatch, irpatch);
                }
            }
            var defData = _defaultData(config.$data, lurl, context, local);
            var cfg = _application.config(_application.name) || {};
            if (config.$cache === undefined) {
                if (cfg.odata && cfg.odata.cache !== undefined) {
                    cfg.odata.cache = cfg.odata.cache;
                }
                else {
                    cfg.odata = cfg.odata || {};
                    cfg.odata.cache = true;
                }
            }
            if (context) {
                if (context.hasOwnProperty('$skip') && context.$skip)
                    params.$skip = context.$skip;
                if (context.hasOwnProperty('$top') && context.$top)
                    params.$top = context.$top;
            }
            if (config.$type === 'relation')
                params.$relation = true;
            return _data.odata.getRessources(params, function (localData) {
                if (method !== 'POST' && localData)
                    localData.$create = false;
                if ((!localData || !localData.documents || !localData.documents.length) && defData) {
                    localData.documents = localData.documents || [];
                    localData.documents.push(defData);
                }
                if (context) {
                    if (context.hasOwnProperty('$searchText')) {
                        localData.searchText = context.$searchText;
                    }
                }
                var cd = localData;
                if (!config.$main && config.$output)
                    cd = _outputData(config.$output, {
                        $url: lurl,
                        $context: context,
                        $data: localData,
                        $mem: _p.$mem,
                        $local: local
                    });
                cd = _execTransform(config, cd);
                return cd;
            }, config.$errors, context);
        }, _execLocal = function (config, lurl, context, callerObject) {
            var local = callerObject && callerObject.getLocalContext ? callerObject.getLocalContext() : null;
            var params = _parseRestParams(config.$params, lurl, context, local, false);
            return _data.local.getRessources(params, function (localData) {
                var cd = localData;
                if (!config.$main && config.$output)
                    cd = _outputData(config.$output, {
                        $url: lurl,
                        $context: context,
                        $data: localData,
                        $mem: _p.$mem,
                        $local: local
                    });
                return _execTransform(config, cd);
            });
        }, _execRest = function (config, lurl, context, callerObject) {
            var local = callerObject && callerObject.getLocalContext ? callerObject.getLocalContext() : null;
            var tp = _execBeforeTransform(config.$beforeExecute, config.$params, context);
            var params = _parseRestParams(config.$params, lurl, context, local, false);
            if (config.$method)
                params.$method = config.$method;
            return _data.rest.getRessources(params, false, function (localData) {
                var cd = localData;
                if (config.$output)
                    cd = _outputData(config.$output, {
                        $url: lurl,
                        $context: context,
                        $data: localData,
                        $mem: _p.$mem,
                        $local: local
                    });
                return _execTransform(config, cd);
            });
        }, _execSync = function (config, lurl, context, callerObject) {
            var local = callerObject && callerObject.getLocalContext ? callerObject.getLocalContext() : null;
            var tp = _execBeforeTransform(config.$beforeExecute, config.$params, context);
            var params = _parseRestParams(tp, lurl, context, local, true);
            var after = function (localData) {
                var cd = localData;
                if (params.$method === 'GET') {
                    cd.$transactionId = params.$query[params.$transactionId];
                }
                if (params.$method === 'POST') {
                    cd = cd.data;
                    var search_1 = {};
                    search_1[params.$transactionId] = localData.id;
                    search_1[params.$viewId] = cd.id;
                    cd.$transactionId = localData.id;
                    _link.changeSearch(search_1);
                }
                if (config.$output)
                    cd = _outputData(config.$output, {
                        $url: lurl,
                        $context: context,
                        $data: localData,
                        $mem: _p.$mem,
                        $local: local
                    });
                return _execTransform(config, cd);
            };
            if (params.$method === 'DELETE' || params.$method === 'PUT') {
                after = null;
            }
            return _data.rest.getRessources(params, true, after);
        }, _emitList = function (config) {
            var res = [];
            if (config.$emit) {
                if (config.$emit.$loaded || config.$emit.$changed) {
                    if (config.$emit.$loaded)
                        res.push(config.$emit.$loaded.$name);
                    if (config.$emit.$changed)
                        res.push(config.$emit.$changed.$name);
                }
                else
                    res.push(config.$emit);
            }
            return res;
        };
        data.execData = function (config, context, callerObject) {
            var lurl = _link.search(true);
            if (!config)
                return null;
            if (config.$condition) {
                var ctx = _link.context();
                ctx.$context = context;
                var val = _getValue(config.$condition, ctx, false, true, false);
                if (!val || val === "false")
                    return _utils.Promise.resolve(null);
            }
            switch (config.$type) {
                case 'basic':
                    return _execBasic(config, lurl, context, callerObject);
                case 'odata':
                    return _execOData(config, lurl, context, callerObject);
                case 'relation':
                    if (context.model)
                        return _execOData(config, lurl, context, callerObject);
                    else
                        return null;
                case 'sync':
                    return _execSync(config, lurl, context, callerObject);
                case 'rest':
                    return _execRest(config, lurl, context, callerObject);
                case 'local':
                    return _execLocal(config, lurl, context, callerObject);
                default:
                    var provider = _rdp.get(config.$type);
                    if (provider)
                        return provider(config, lurl, context, callerObject);
                    break;
            }
            return null;
        };
        var DataSet = /** @class */ (function () {
            function DataSet(config) {
                var that = this;
                that.config = _checkDataSetConfig(config);
                if (config.$default)
                    that.defaultDataset = true;
                if (that.config.$autoselect)
                    that.autoselect = true;
                that._emitters = _emitList(that.config);
                that.selectedIndex = -1;
            }
            DataSet.prototype.execute = function (context, callerObject) {
                var that = this;
                var lurl = _link.search(true);
                switch (that.config.$type) {
                    case "basic":
                        return _execBasic(that.config, lurl, context, callerObject);
                    case "odata":
                        return _execOData(that.config, lurl, context, callerObject);
                    case "rest":
                        return _execRest(that.config, lurl, context, callerObject);
                    case "local":
                        return _execLocal(that.config, lurl, context, callerObject);
                    case "menu":
                        return _execMenu(that.config, lurl, context, callerObject);
                    case "widget-schema":
                        return _execWSchema(that.config, lurl, context, callerObject);
                    default:
                        var provider = _rdp.get(that.config.$type);
                        if (provider)
                            return provider(that.config, lurl, context, callerObject);
                        break;
                }
                throw "Invalid dataset type";
            };
            DataSet.prototype.enumTriggers = function (addLoad, cb) {
                var that = this;
                if (that.config.$triggers) {
                    that.config.$triggers.forEach(function (tn) {
                        if (addLoad || tn != "$load") {
                            cb(tn);
                        }
                    });
                }
            };
            DataSet.prototype.enumEmitters = function (cb) {
                var that = this;
                that._emitters.forEach(cb);
            };
            DataSet.prototype.hasCustomEvents = function () {
                var that = this;
                if (that.config.$triggers) {
                    var t = that.config.$triggers;
                    if (t.length > 1)
                        return true;
                    return (t[0] != "$load");
                }
                return false;
            };
            DataSet.prototype.canExecute = function (event, context) {
                var that = this;
                if (that.config.$condition) {
                    var val = _getValue(that.config.$condition, context, false, true, false);
                    if (!val || val === "false")
                        return false;
                }
                return that.config.$triggers.indexOf(event) >= 0;
            };
            DataSet.prototype.data2Output = function (def, context) {
                return _outputData(def, context);
            };
            DataSet.prototype.destroy = function () {
                _utils.log("Destroy Dataset", "destroy");
            };
            DataSet.prototype._findSelectedOData = function (ldata) {
                var that = this;
                if (ldata.documents) {
                    var index = -1;
                    var found = null;
                    if (that.config.$autoselect && typeof that.config.$autoselect == 'object') {
                        var context = {
                            $url: _link.search(true),
                            $mem: _p.$mem
                        };
                        var memData = _outputData(that.config.$autoselect, context);
                        var props = Object.keys(memData);
                        for (var i = 0, len = ldata.documents.length; i < len; i++) {
                            var d = ldata.documents[i];
                            if (_equals(d, memData, props)) {
                                found = d;
                                index = i;
                                break;
                            }
                        }
                    }
                    return found ? {
                        item: found,
                        index: index
                    } : (ldata.documents.length ? {
                        item: ldata.documents[0],
                        index: 0
                    } : {
                        item: null,
                        index: -1
                    });
                }
                return {
                    item: null,
                    index: -1
                };
            };
            DataSet.prototype._findSelected = function (ldata) {
                var that = this;
                switch (that.config.$type) {
                    case "odata":
                    case "rest":
                        return that._findSelectedOData(ldata);
                    default:
                        {
                            return {
                                item: ldata,
                                index: 0
                            };
                        }
                }
            };
            DataSet.prototype.doAutoSelect = function (d, select) {
                var that = this;
                that.selectedIndex = -1;
                if (!that.config.$autoselect)
                    return;
                if (!d || d.nodata)
                    return select(null);
                var s = that._findSelected(d);
                that.selectedIndex = s.index;
                select(s.item);
            };
            return DataSet;
        }());
        data.DataSet = DataSet;
        data.getUrlBaseByType = _getUrlBaseByType;
        data.replaceFilterVars = _replaceVar;
        data.registerDataProvider = _rdp.register;
        data.compileFilterTree = _memoryTree;
        data.acceptFilter = _acceptFilter;
        data.extractValue = _extractValue;
        data.execOutputData = function (dataSource, result) {
            if (dataSource.$output) {
                var ctx = _link.context();
                ctx.$data = result[dataSource.name];
                ctx.$context = result;
                result[dataSource.name] = _outputData(dataSource.$output, ctx);
            }
        };
        data.test = { output: _outputData, parseTree: _parseTree };
    })(data = Phoenix.data || (Phoenix.data = {}));
})(Phoenix || (Phoenix = {}));
/// <reference path="../core/core-refs.ts" />
var Phoenix;
(function (Phoenix) {
    var ui;
    (function (ui) {
        var _p = Phoenix, _dom = _p.dom, _utils = _p.utils, _locale = _p.locale;
        var 
        // Create page object used in template
        _makePage = function (ii, text, icon, isActive, isDisabled) {
            return {
                number: ii,
                text: text,
                icon: icon,
                active: isActive,
                disabled: isDisabled
            };
        }, _getPages = function (currentPage, totalPages, options, hasNext, hasPrev) {
            var pages = [];
            if (options.noPagesCount) {
                p = _makePage('prev', null, 'chevron-left', false, !hasPrev);
                pages.unshift(p);
                p = _makePage('next', null, 'chevron-right', false, !hasNext);
                pages.push(p);
                return pages;
            }
            // Default page limits
            var startPage = 1, endPage = totalPages;
            var isMaxSized = (options.maxSize && options.maxSize < totalPages);
            // recompute if maxSize
            if (isMaxSized) {
                if (options.rotate) {
                    // Current page is displayed in the middle of the visible ones
                    startPage = Math.max(currentPage - Math.floor(options.maxSize / 2), 1);
                    endPage = startPage + options.maxSize - 1;
                    // Adjust if limit is exceeded
                    if (endPage > totalPages) {
                        endPage = totalPages;
                        startPage = endPage - options.maxSize + 1;
                    }
                }
                else {
                    // Visible pages are paginated with maxSize
                    startPage = ((Math.ceil(currentPage / options.maxSize) - 1) * options.maxSize) + 1;
                    // Adjust last page if limit is exceeded
                    endPage = Math.min(startPage + options.maxSize - 1, totalPages);
                }
            }
            // Add page number links
            for (var ii = startPage; ii <= endPage; ii++) {
                var page = _makePage(ii, ii, null, ii === currentPage, false);
                pages.push(page);
            }
            // Add links to move between page sets
            if (isMaxSized && !options.rotate) {
                if (startPage > 1) {
                    var previousPageSet = _makePage(startPage - 1, '...', null, false, false);
                    pages.unshift(previousPageSet);
                }
                if (endPage < totalPages) {
                    var nextPageSet = _makePage(endPage + 1, '...', null, false, false);
                    pages.push(nextPageSet);
                }
            }
            var p;
            //Add Previous
            if (options.directionLinks) {
                p = _makePage('prev', null, 'chevron-left', false, currentPage == 1);
                pages.unshift(p);
            }
            //Add First
            if (options.boundaryLinks) {
                p = _makePage('first', null, 'backward', false, currentPage == 1);
                pages.unshift(p);
            }
            //Add Next
            if (options.directionLinks) {
                p = _makePage('next', null, 'chevron-right', false, currentPage == totalPages);
                pages.push(p);
            }
            //Add last
            if (options.boundaryLinks) {
                p = _makePage('last', null, 'forward', false, currentPage == totalPages);
                pages.push(p);
            }
            return pages;
        };
        var Pager = /** @class */ (function () {
            function Pager(options) {
                var that = this, defOptions = {
                    boundaryLinks: false,
                    directionLinks: true,
                    rotate: true,
                    maxSize: 4,
                    size: "lg"
                };
                that._options = $.extend(defOptions, options || {});
                that.pages = [];
                that._updating = false;
                that.visible = false;
                that.props = {};
                that.data = {
                    currentPage: -1,
                    totalPages: 0,
                    hasNext: false,
                    hasPrev: false
                };
                that._defineProps();
            }
            Object.defineProperty(Pager.prototype, "options", {
                get: function () {
                    return this._options;
                },
                enumerable: true,
                configurable: true
            });
            Pager.prototype._defineProps = function () {
                var that = this, _dp = _utils.defineProperty;
                _dp("currentPage", that);
                _dp("totalPages", that);
                _dp("hasPrev", that);
                _dp("hasNext", that);
            };
            Pager.prototype._notifyChange = function (propertyName) {
                var that = this;
                switch (propertyName) {
                    case "currentPage":
                        if (that._options.noPagesCount)
                            return;
                        that._changed = true;
                        that._updatePages();
                        break;
                    case "totalPages":
                        if (that._options.noPagesCount)
                            return;
                        that._changed = true;
                        if (that.data.currentPage >= 0)
                            that._updatePages();
                        break;
                    case "hasNext":
                    case "hasPrev":
                        if (!that._options.noPagesCount)
                            return;
                        that._changed = true;
                        that._updatePages();
                        break;
                }
            };
            Pager.prototype._renderPager = function () {
                var that = this;
                var e = that.$element.get(0);
                if (Phoenix.bootstrap4)
                    e = e.lastChild;
                if (that.visible) {
                    var frag_1 = document.createDocumentFragment();
                    var p_1 = $(Phoenix.bootstrap4 ? '<li class="page-item"><a class="page-link bs-button" href></a><li>' : '<li><a href></a><li>').get(0);
                    var span_1 = document.createElement("span");
                    that.pages.forEach(function (page) {
                        var ii = p_1.cloneNode(true);
                        if (page.icon) {
                            var sp = span_1.cloneNode(true);
                            _dom.attr(sp, "class", _dom.iconClass(page.icon));
                            _dom.attr(sp, "page", page.number);
                            _dom.append(ii.firstChild, sp);
                        }
                        if (page.text)
                            _dom.text(ii.firstChild, page.text);
                        _dom.attr(ii, "page", page.number);
                        _dom.attr(ii.firstChild, "page", page.number);
                        if (page.disabled)
                            _dom.addClass(ii, 'disabled');
                        if (page.active)
                            _dom.addClass(ii, 'active');
                        frag_1.appendChild(ii);
                    });
                    $(e).empty();
                    e.appendChild(frag_1);
                    _dom.removeClass(e, 'bs-none');
                }
                else
                    _dom.addClass(e, 'bs-none');
            };
            Pager.prototype._updatePages = function () {
                var that = this;
                if (that._updating)
                    return;
                that.pages = _getPages(that.data.currentPage, that.data.totalPages, that._options, that.data.hasNext, that.data.hasPrev);
                if (that._options.noPagesCount) {
                    that.visible = that.data.hasNext || that.data.hasPrev;
                }
                else {
                    that.visible = that.data.currentPage > 0 && that.data.totalPages > 1;
                    var t = 5;
                    if (!that._options.boundaryLinks)
                        t = t - 2;
                    if (!that._options.directionLinks)
                        t = t - 2;
                    that.visible = that.pages.length > t;
                }
                if (that.$element) {
                    that._renderPager();
                }
            };
            Pager.prototype._setEvents = function () {
                var that = this;
                if (that.$element) {
                    that.$element.on('click', function (event) {
                        var target = event.target;
                        var page = _dom.attr(target, "page");
                        if (page) {
                            event.preventDefault();
                            event.stopPropagation();
                            if (_dom.hasClass(target, 'disabled') || _dom.hasClass(target.parentNode, 'disabled'))
                                return;
                            if (that._options.selectPage) {
                                var pn = parseInt(page, 10);
                                that._options.selectPage(isNaN(pn) ? page : pn);
                            }
                        }
                    });
                }
            };
            Pager.prototype._removeEvents = function () {
                var that = this;
                if (that.$element)
                    that.$element.off('click');
            };
            Pager.prototype.updating = function (value) {
                var that = this;
                that._updating = value;
                if (value) {
                    that._changed = false;
                }
                else {
                    if (that._changed) {
                        that._changed = false;
                        that._updatePages();
                    }
                }
            };
            Pager.prototype.render = function ($parent) {
                var that = this;
                if (!that.$element) {
                    that.$element = $((Phoenix.bootstrap4 ? '<nav><div class="bs-island"></div>' : '') + '<ul class="no-y-margin d-inline-flex pagination' + (that._options.size != 'default' ? (' pagination-' + that._options.size) : '') + '"></ul>' + (Phoenix.bootstrap4 ? '</nav>' : ''));
                    that._renderPager();
                    that._setEvents();
                }
                if ($parent) {
                    if (that._options.replaceParent)
                        $parent.replaceWith(that.$element);
                    else
                        $parent.append(that.$element);
                }
            };
            Pager.prototype.destroy = function () {
                var that = this;
                that._removeEvents();
                that.$element = null;
                that._options = null;
            };
            return Pager;
        }());
        ui.Pager = Pager;
        ;
    })(ui = Phoenix.ui || (Phoenix.ui = {}));
})(Phoenix || (Phoenix = {}));
/// <reference path="../core/core-refs.ts" />
var Phoenix;
(function (Phoenix) {
    var pagecontrol;
    (function (pagecontrol) {
        var _p = Phoenix, _history = _p.history, _utils = _p.utils, _external = _p.external, _dom = _p.dom, _link = _p.link, _locale = _p.locale, _application = _p.application;
        var _error = [
            '<div role="alert" class="bs-error alert alert-danger alert-dismissible fade show">',
            '<button aria-label="{0}" data-dismiss="alert" class="close" type="button"><span aria-hidden="true">×</span></button>',
            '<h4 >{1}</h4>',
            '<p>{2}</p>',
            '<p>',
            '<a class="bs-button btn btn-' + _dom.bootstrapStyles(false).secondary + '" href="{4}" role="button">{3}</a>',
            '</p>',
            '</div>'
        ];
        var _loading = [
            '<div class="bs-loader"></div>'
        ];
        var _cp = null, _datasetsInfo = function (datasets) {
            var cfg = {
                emit: false,
                listen: true,
                triggers: [],
                emitters: []
            };
            Object.keys(datasets).forEach(function (dsn) {
                if (dsn == "view")
                    return;
                var ds = datasets[dsn];
                if (ds.config.$emit) {
                    ds.enumEmitters(function (event) {
                        cfg.emit = true;
                        cfg.emitters.push(event);
                    });
                }
                ds.enumTriggers(false, function (tn) {
                    cfg.listen = true;
                    if (cfg.triggers.indexOf(tn) < 0)
                        cfg.triggers.push(tn);
                });
            });
            return cfg;
        };
        var PageControl = /** @class */ (function () {
            function PageControl() {
                var that = this;
                that.children = [];
                that.data = {
                    $title: '',
                    $menuleft: false,
                    $menutop: false,
                    $menuright: false,
                    $menubottom: false,
                    $hasBack: _history.hasBack(),
                    $user: {}
                };
                that.errors = [];
                that.props = {};
                that.popup = null;
                that.contextMenu = null;
                that._defineProps();
                that._setEvents();
                _external.historyChangedHandler = that._historyChanged.bind(that);
            }
            PageControl.prototype._defineProps = function () {
                var self = this, _dp = _utils.defineProperty;
                _dp("$title", self);
                _dp("$menuleft", self);
                _dp("$menutop", self);
                _dp("$menuright", self);
                _dp("$menubottom", self);
                _dp("$hasBack", self);
                _dp("$user", self);
            };
            PageControl.prototype.currentPage = function () {
                var that = this;
                var path = _link.parseUrl(window.location.hash).path;
                if (path && path.charAt(0) === '/')
                    path = path.substr(1);
                return path;
            };
            PageControl.prototype.emittersFor = function (events) {
                var that = this, res = [], len = events.length;
                if (that.dataListeners) {
                    that.dataListeners.forEach(function (module) {
                        if (!module.listener.disabled && module.emit) {
                            var emitEvent = false;
                            for (var i = 0; i < len; i++) {
                                if (module.emitters.indexOf(events[i]) >= 0) {
                                    emitEvent = true;
                                }
                            }
                            if (emitEvent) {
                                res.push(module.listener);
                            }
                        }
                    });
                }
                return res;
            };
            PageControl.prototype._historyChanged = function () {
                this.props.$hasBack = _history.hasBack();
            };
            PageControl.prototype._notifyChange = function (propertyName) {
                var that = this;
                that._notifyChildren(propertyName, that.data[propertyName]);
            };
            PageControl.prototype._notifyChildOnAdd = function (child, type) {
                var that = this;
                if (child) {
                    if (type === 'layout') {
                        var header = that.childByType('header');
                        if (header && header.setPage) {
                            var name_1 = child.data.name || '';
                            header.setPage(name_1, child);
                        }
                    }
                    if (child.onPageChange)
                        Object.keys(that.props).forEach(function (pn) {
                            child.onPageChange(pn, that.props[pn]);
                        });
                }
            };
            PageControl.prototype._notifyChildren = function (propName, value) {
                var that = this;
                that.children.forEach(function (cd) {
                    var c = cd.child;
                    if (c && c.onPageChange)
                        c.onPageChange(propName, value);
                });
            };
            PageControl.prototype.registerDataListener = function (value, parent) {
                var that = this;
                that.dataListeners = that.dataListeners || [];
                if (!value.datasets)
                    return;
                var config = _datasetsInfo(value.datasets);
                if (config.emit || config.listen) {
                    that.dataListeners.push({
                        listener: value,
                        parent: parent,
                        triggers: config.triggers,
                        listen: config.listen,
                        emitters: config.emitters,
                        emit: config.emit
                    });
                }
            };
            PageControl.prototype.removeDataListener = function (listener) {
                var that = this;
                if (!that.dataListeners)
                    return;
                var i = that.dataListeners.length;
                while (i--) {
                    var ci = that.dataListeners[i];
                    if (ci.listener == listener) {
                        that.dataListeners.splice(i, 1);
                    }
                }
            };
            PageControl.prototype.removeParentDataListener = function (parent) {
                var that = this;
                if (!that.dataListeners)
                    return;
                var i = that.dataListeners.length;
                while (i--) {
                    var ci = that.dataListeners[i];
                    if (ci.parent == parent) {
                        that.dataListeners.splice(i, 1);
                    }
                }
            };
            PageControl.prototype.emitDataEvent = function (event, value, filter) {
                var that = this;
                if (that.dataListeners) {
                    that.dataListeners.forEach(function (mod) {
                        if (filter && filter.indexOf(mod.listen) < 0)
                            return;
                        if (mod.listen && (mod.triggers.indexOf(event) >= 0) &&
                            mod.listener && mod.listener.dataEvent) {
                            if (mod.listener.ds_storeLastEvent)
                                mod.listener.ds_storeLastEvent(event, value);
                            if (!mod.listener.disabled) {
                                mod.listener.dataEvent(event, value);
                            }
                        }
                    });
                }
            };
            PageControl.prototype.childByType = function (ct) {
                var that = this;
                for (var i = 0, len = that.children.length; i < len; i++) {
                    var c = that.children[i];
                    if (c.type === ct)
                        return c.child;
                }
                return null;
            };
            PageControl.prototype.addChild = function (type, child) {
                var that = this;
                that.children.push({
                    child: child,
                    type: type
                });
                that._notifyChildOnAdd(child, type);
            };
            PageControl.prototype.removeChild = function (child) {
                var that = this;
                var i = that.children.length;
                while (i--) {
                    var ci = that.children[i];
                    if (ci.child == child) {
                        that.children.splice(i, 1);
                        break;
                    }
                }
            };
            PageControl.prototype.destroy = function () {
                var that = this;
                _external.historyChangedHandler = null;
                that._hideErrors(true);
                that._hideLoading();
                if (that.children) {
                    var i = that.children.length;
                    while (i--) {
                        var ci = that.children[i];
                        that.removeDataListener(ci.child);
                    }
                    that.children = null;
                }
                that.dataListeners = null;
                that._removeEvents();
            };
            PageControl.prototype._setEvents = function () {
                var that = this;
                $(document).on("mousedown touchstart", function (event) {
                    if (_dom.inCover(event.target))
                        return;
                    if (!that._inContextMenu(event)) {
                        that._closePopup(event);
                    }
                    that._closeContextMenu(event);
                });
                window.onerror = function (message, filename, lineno, colno, error) {
                    if (!error && filename) {
                        error = { filename: filename, lineno: lineno || 0, colno: colno || 0 };
                    }
                    if (!that.$error) {
                        that.lastError = {
                            message: message,
                            stack: error ? error.stack : null,
                            stackError: error && error.stack ? null : error
                        };
                        that._showErrors();
                    }
                };
            };
            PageControl.prototype._hideErrors = function (remove) {
                var that = this;
                if (that.$error) {
                    that.$error.off('closed.bs.alert');
                    if (remove)
                        that.$error.remove();
                    that.$error = null;
                }
            };
            PageControl.prototype._showErrors = function () {
                var that = this;
                var errorParent = _dom.find(null, "error_box");
                if (!errorParent)
                    return;
                if (!that.$error) {
                    var mailUrl = ["mailto:"];
                    mailUrl.push(_application.support);
                    mailUrl.push("?subject=" + encodeURIComponent(_application.title));
                    mailUrl.push("&body=");
                    var ctx = _link.context();
                    var d = new Date();
                    mailUrl.push(encodeURIComponent(_locale.errors.ErrorTitle + ' '));
                    mailUrl.push(encodeURIComponent(that.lastError.message));
                    mailUrl.push(encodeURIComponent('\n\n' + _locale.errors.ErrorUser + ' '));
                    mailUrl.push(encodeURIComponent(ctx.$user.name));
                    mailUrl.push(encodeURIComponent('\n\n' + _locale.errors.ErrorDate + ' '));
                    mailUrl.push(encodeURIComponent(d.toLocaleString()));
                    mailUrl.push(encodeURIComponent('\n\n' + _locale.errors.Browser + ' '));
                    mailUrl.push(encodeURIComponent(navigator.userAgent));
                    mailUrl.push(encodeURIComponent('\n\n' + _locale.errors.ErrorURI + ' '));
                    mailUrl.push(encodeURIComponent(window.location.href));
                    if (that.lastError.stack || that.lastError.stackError) {
                        mailUrl.push(encodeURIComponent('\n\n' + _locale.errors.Stack + '\n'));
                        if (that.lastError.stack)
                            mailUrl.push(encodeURIComponent(that.lastError.stack));
                        else
                            mailUrl.push(encodeURIComponent(JSON.stringify(that.lastError.stackError)));
                    }
                    mailUrl.push(encodeURIComponent('\n\n' + _locale.errors.Context + ' '));
                    mailUrl.push(encodeURIComponent(JSON.stringify(ctx)));
                    that.$error = $(_utils.format(_error.join(''), _locale.ui.Close, _locale.errors.Title, that.lastError.message, _locale.errors.SendMail, mailUrl.join('')));
                    that.$error.on('closed.bs.alert', function () {
                        that._hideErrors(false);
                    });
                    errorParent.appendChild(that.$error.get(0));
                }
            };
            PageControl.prototype._hideLoading = function () {
                var that = this;
                if (that.$loading) {
                    that.$loading.remove();
                    that.$loading = null;
                }
            };
            PageControl.prototype._showLoading = function () {
                var that = this;
                var errorParent = document.body;
                if (!errorParent)
                    return;
                if (!that.$loading) {
                    that.$loading = $(_loading.join(''));
                    errorParent.appendChild(that.$loading.get(0));
                }
            };
            PageControl.prototype.loading = function (show) {
                var that = this;
                if (show)
                    that._showLoading();
                else
                    that._hideLoading();
            };
            PageControl.prototype._removeEvents = function () {
                $(document).off("mousedown touchstart");
            };
            PageControl.prototype._closePopup = function (event) {
                var that = this;
                if (that.popup && (!that.popup.stayOnTop || event === null)) {
                    if (!event || (that.popup.inPopup && !that.popup.inPopup(event.originalEvent ? event.originalEvent.target : event.target))) {
                        if (that.popup.hide)
                            that.popup.hide(event ? (event.originalEvent ? event.originalEvent.target : event.target) : null);
                        that.popup = null;
                    }
                }
            };
            PageControl.prototype._inContextMenu = function (event) {
                var that = this;
                if (that.contextMenu) {
                    if (event && (that.contextMenu.inPopup && that.contextMenu.inPopup(event.originalEvent ? event.originalEvent.target : event.target))) {
                        return true;
                    }
                }
                return false;
            };
            PageControl.prototype._closeContextMenu = function (event) {
                var that = this;
                if (that.contextMenu) {
                    if (!event || (that.contextMenu.inPopup && !that.contextMenu.inPopup(event.originalEvent ? event.originalEvent.target : event.target))) {
                        if (that.contextMenu.hide)
                            that.contextMenu.hide(event ? (event.originalEvent ? event.originalEvent.target : event.target) : null);
                        that.contextMenu = null;
                    }
                }
            };
            PageControl.prototype.setPopup = function (popup) {
                var that = this;
                that._closePopup(null);
                that.popup = popup;
            };
            PageControl.prototype.setContextMenu = function (popup) {
                var that = this;
                that._closeContextMenu(null);
                that.contextMenu = popup;
            };
            PageControl.prototype.activePage = function () {
                var that = this;
                return {
                    $module: _application.name,
                    $page: that.currentPage()
                };
            };
            return PageControl;
        }());
        pagecontrol.PageControl = PageControl;
        function Page() {
            if (!_cp)
                _cp = new PageControl();
            return _cp;
        }
        pagecontrol.Page = Page;
    })(pagecontrol = Phoenix.pagecontrol || (Phoenix.pagecontrol = {}));
})(Phoenix || (Phoenix = {}));
/// <reference path="../core/core-refs.ts" />
var Phoenix;
(function (Phoenix) {
    var _p = Phoenix, _utils = _p.utils, _ulocale = _p.ulocale, _locale = _p.locale, _ui = _p.ui, _link = _p.link, _pagecontrol = _p.pagecontrol, _dom = _p.dom;
    var contextmenu;
    (function (contextmenu) {
        var _createConextMenu = function (html, data) {
            var _bootstrap4 = _p.bootstrap4;
            if (_bootstrap4)
                html.push('<div class="dropdown-menu bs-block bs-conntext-menu">');
            else
                html.push('<ul class="dropdown-menu bs-block bs-conntext-menu">');
            data.forEach(function (item) {
                item.id = item.id || _utils.allocID();
                if (_bootstrap4) {
                    if (item.separator) {
                        html.push('<div class="dropdown-divider bs-cursor-d"></div>');
                    }
                    else {
                        html.push('<a class="dropdown-item' + (item.disabled ? ' disabled' : ' bs-cursor-p') + '" data-phoenix-href="click://' + item.id + '">');
                        html.push(_utils.escapeHtml(item.title));
                        html.push('</a>');
                    }
                }
                else {
                    if (item.separator) {
                        html.push('<li role="separator" class="divider bs-cursor-d"></li>');
                    }
                    else {
                        html.push('<li' + (item.disabled ? ' class="disabled"' : ' class="bs-cursor-p"') + '><a data-phoenix-href="click://' + item.id + '">');
                        html.push(_utils.escapeHtml(item.title));
                        html.push('</a></li>');
                    }
                }
            });
            if (_bootstrap4)
                html.push('</div>');
            else
                html.push('</ul>');
        };
        var ContextMenu = /** @class */ (function () {
            function ContextMenu(data, parent) {
                var that = this;
                that._data = data;
                that._parent = parent;
            }
            ContextMenu.prototype.destroy = function () {
                var that = this;
                if (that.$element) {
                    that.$element.off('click');
                    var e = that.$element.get(0);
                    _dom.remove(e);
                    that.$element = null;
                }
                that._parent = null;
                that._data = null;
            };
            ContextMenu.prototype.open = function (cevent) {
                var that = this;
                var html = [];
                _createConextMenu(html, that._data);
                that.$element = $(html.join(''));
                that.$element.on('click', function (event) {
                    var c = _link.isCustomLink(that.$element.get(0), event, true);
                    if (c && c.protocol === 'click') {
                        var id_1 = c.value.substring(('click://').length);
                        var cd = that._data;
                        var item = cd.find(function (ii) { return ii.id === id_1; });
                        if (item && that._parent && that._parent.contextMenu) {
                            that._parent.contextMenu(item);
                        }
                    }
                    _pagecontrol.Page().setContextMenu(null);
                });
                var e = that.$element.get(0);
                e.style.left = cevent.pageX + 'px';
                e.style.top = cevent.pageY + 'px';
                _dom.append(document.body, that.$element.get(0));
            };
            ContextMenu.prototype.hide = function (event) {
                this.destroy();
            };
            ContextMenu.prototype.inPopup = function (element) {
                var that = this;
                return that.$element && _dom.isChildOf(that.$element.get(0), element);
            };
            return ContextMenu;
        }());
        function openContextMenu(event, parent, data) {
            var ctx = new ContextMenu(data, parent);
            ctx.open(event);
            _pagecontrol.Page().setContextMenu(ctx);
        }
        contextmenu.openContextMenu = openContextMenu;
    })(contextmenu = Phoenix.contextmenu || (Phoenix.contextmenu = {}));
})(Phoenix || (Phoenix = {}));
/// <reference path="../core/core-refs.ts" />
var Phoenix;
(function (Phoenix) {
    var _p = Phoenix, _utils = _p.utils, _ulocale = _p.ulocale, _locale = _p.locale, _ui = _p.ui, _dom = _p.dom;
    var modal;
    (function (modal) {
        var _patternButton = function (options) {
            if (options.pattern === "close") {
                var closeOpt = { "close": true, "type": "default", name: "close", "title": _locale.ui.Close };
                return $.extend({}, closeOpt, options);
            }
            else if (options.pattern === "validate") {
                var validateOpt = { "close": false, "type": "success", name: "validate", "title": _locale.ui.Validate };
                return $.extend({}, validateOpt, options);
            }
            else if (options.pattern === "create") {
                var createOpt = { "close": false, "type": "success", name: "create", "title": _locale.ui.Create };
                return $.extend({}, createOpt, options);
            }
            else if (options.pattern === "abandon") {
                var closeOpt = { "close": true, "type": "default", name: "abandon", "title": _locale.ui.Abandon };
                return $.extend({}, closeOpt, options);
            }
            return options;
        };
        var _renderButton = function (options, html, locale) {
            //options name, type, icon, title, cancel
            options = _patternButton(options);
            html.push('<button data-action="' + options.name + '" type="button"');
            html.push(' class="bs-btn-inline float-right bs-button btn btn-' + _dom.bootstrapStyles(false)[options.type || 'default']);
            html.push('"');
            if (options.close)
                html.push(' data-dismiss="modal"');
            html.push('>');
            if (options.icon) {
                html.push('<span class="' + _dom.iconClass(options.icon) + '"></span>');
                if (options.title)
                    html.push('&nbsp;');
            }
            html.push(_ulocale.tt(options.title || '', locale));
            html.push('</button>');
        };
        var _createModal = function (options, locale) {
            var _bootstrap4 = Phoenix.bootstrap4;
            var html = [
                '<div class="modal fade" data-backdrop="static"  id="{0}" role="dialog" aria-labelledby="{0}_label">',
                '	<div class="modal-dialog' + (options.size ? (' modal-' + options.size) : '') + '" role="document">',
                '		<div class="modal-content">',
                '		<div class="modal-header">',
                _bootstrap4 ? '			<h5 class="modal-title" id="{0}_label">{1}</h5>' : '',
                options.noClose ? '' : '			<button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>',
                _bootstrap4 ? '' : '			<h4 class="modal-title" id="{0}_label">{1}</h4>',
                '		</div>',
                '		<div class="modal-body" id="{0}_body">',
                '		</div>',
                '		<div class="modal-footer"  id="{0}_footer">'
            ];
            if (options.buttons)
                options.buttons.forEach(function (btn) {
                    _renderButton(btn, html, locale);
                });
            html.push('		</div>');
            html.push('		</div>');
            html.push('	</div>');
            html.push('</div>');
            return _utils.format(html.join(''), options.id, _ulocale.tt(options.title, locale));
        };
        var Modal = /** @class */ (function () {
            function Modal(options, locale) {
                this.options = options || {};
                ;
                this.$id = _utils.allocID();
                this.$locale = locale;
            }
            Modal.prototype._removeEvents = function () {
                var that = this;
                that.$element.off('click');
                that.$element.off('hidden.bs.modal');
            };
            Modal.prototype._execAction = function (name) {
                var that = this;
                if (that._clickHnd) {
                    that._clickHnd(name);
                }
            };
            Modal.prototype._addEvents = function () {
                var that = this;
                that.$element.on('hide.bs.modal', function (e) {
                    if (that._inProcessing) {
                        e.preventDefault();
                        e.stopPropagation();
                    }
                });
                that.$element.on('hidden.bs.modal', function (e) {
                    that._clear();
                });
                that.$element.on('click', function (e) {
                    if (!that.$element)
                        return;
                    var t = e.target, root = that.$element.get(0);
                    while (t) {
                        var action = t.getAttribute('data-action');
                        if (action) {
                            return _utils.focusDelay(function () {
                                return that._execAction(action);
                            });
                        }
                        t = (t == root) ? null : t.parentNode;
                    }
                });
            };
            Modal.prototype._clear = function () {
                var that = this;
                if (that.$element) {
                    that._removeEvents();
                    if (that.render)
                        that.render.destroy();
                    that.$element.remove();
                    that.$element = null;
                }
                that.render = null;
            };
            Modal.prototype.processing = function (value) {
                var that = this;
                that._inProcessing = value;
                _dom.processing(value);
                if (that.render && that.render.processing)
                    that.render.processing(value);
            };
            Modal.prototype.on = function (hnd) {
                this._clickHnd = hnd;
            };
            Modal.prototype.close = function () {
                var that = this;
                var modalPluginName = Phoenix.modalPlugin;
                if (that.$element)
                    that.$element[modalPluginName]('hide');
            };
            Modal.prototype.open = function () {
                var that = this;
                var opts = { id: that.$id, title: that.options.title || '', buttons: that.options.buttons || [], size: 0, noClose: false };
                if (that.options.size)
                    opts.size = that.options.size;
                if (that.options.noClose)
                    opts.noClose = that.options.noClose;
                if (!that.$element) {
                    that.$element = $(_createModal(opts, that.$locale));
                    if (that.render)
                        that.render.render($(_dom.find(that.$element.get(0), that.$id + '_body')));
                    _dom.append(document.body, that.$element.get(0));
                    var modalPluginName = Phoenix.modalPlugin;
                    if (that.$element[modalPluginName]) {
                        that.$element[modalPluginName]({});
                        that._addEvents();
                    }
                }
            };
            Modal.prototype.destroy = function () {
                var that = this;
                that._clear();
            };
            return Modal;
        }());
        modal.Modal = Modal;
    })(modal = Phoenix.modal || (Phoenix.modal = {}));
})(Phoenix || (Phoenix = {}));
/// <reference path="../core/core-refs.ts" />
/// <reference path="../data/datasets.ts" />
var Phoenix;
(function (Phoenix) {
    var DatasetPlugin;
    (function (DatasetPlugin) {
        var _p = Phoenix, _data = _p.data, _link = _p.link, _mem = _p.$mem, _utils = _p.utils;
        var _updateMem = function (that, ds, value, prop) {
            if (ds.config.$emit[prop].$updateMem) {
                var patchMem = ds.data2Output(ds.config.$emit[prop].$updateMem, {
                    $item: value
                });
                _mem = $.extend(_mem, patchMem);
            }
            if (ds.config.$emit[prop].$updateLocal) {
                var local = that.getLocalContextHandler ? that.getLocalContextHandler() : null;
                if (local) {
                    var patchLocal = ds.data2Output(ds.config.$emit[prop].$updateLocal, {
                        $item: value
                    });
                    local = $.extend(local, patchLocal);
                }
            }
        }, _ds_exec = function (thisObject, event, context, dst, after, datasets, notify, contextByDs) {
            var _ctxByName = function (name) {
                return contextByDs ? (context ? context[name] : null) : context;
            };
            var that = thisObject;
            var list = [], names = [], res = dst || {}, isLoad = event == "$load", indexDefault = -1;
            var _pushDataset = function (dsName, dsnames, ctx) {
                if (!that || !that.datasets)
                    return;
                var ds = that.datasets[dsName];
                if (ds) {
                    list.push(ds.execute(ctx, that));
                    names.push(dsName);
                    if (ds.defaultDataset)
                        indexDefault = dsnames.length - 1;
                }
            };
            if (datasets) {
                if (datasets && Array.isArray(datasets)) {
                    datasets.forEach(function (dataset) {
                        if (typeof dataset === "object") {
                            if (dataset.name) {
                                list.push(_data.execData(dataset, _ctxByName(dataset.name), that));
                                names.push(dataset.name);
                            }
                        }
                        else
                            _pushDataset(dataset, names, _ctxByName(dataset));
                    });
                }
                else {
                    _pushDataset(datasets, names, _ctxByName(datasets));
                }
            }
            else if (that && that.datasets) {
                Object.keys(that.datasets).forEach(function (dataset) {
                    var ds = that.datasets[dataset];
                    var lurl = _link.search(true);
                    var ctx = that.ds_context();
                    if (ds && ds.canExecute(event, ctx))
                        _pushDataset(dataset, names, _ctxByName(dataset));
                });
            }
            if (list.length) {
                if (that && that.loadingHandler)
                    that.loadingHandler(true);
                _utils.Promise.all(list).then(function (resdata) {
                    var menus = [];
                    names.forEach(function (name, index) {
                        var d = resdata[index];
                        if (index == indexDefault) {
                            if (that && that.noDataHandler)
                                that.noDataHandler(!d || d.nodata, null, true);
                        }
                        res[name] = d;
                        if (that) {
                            var ds = that.datasets && that.datasets[name];
                            if (isLoad && ds && ds.$menu && that.updateMenuHandler) {
                                var a = name.split('_');
                                menus.push({ name: a[a.length - 1], data: d });
                            }
                            if (ds) {
                                that.ds_loaded(name, d);
                                if (ds.autoselect) {
                                    return ds.doAutoSelect(d, function (item) {
                                        that.ds_select(name, item);
                                    });
                                }
                            }
                        }
                    });
                    if (that && that.loadingHandler)
                        that.loadingHandler(false);
                    menus.forEach(function (menu) {
                        that.updateMenuHandler(menu.name, menu.data);
                    });
                    after(true);
                    if (that && that.watchersHandler)
                        that.watchersHandler(names);
                    if (!isLoad && notify && that && that.dataChangedHandler)
                        that.dataChangedHandler(names);
                }).catch(function (ex) {
                    if (ex)
                        console.log(ex);
                    if (that && that.loadingHandler)
                        that.loadingHandler(false);
                    if (that && that.errorHandler)
                        that.errorHandler(ex);
                    after(false, ex);
                    if (!isLoad && notify && that && that.dataChangedHandler)
                        that.dataChangedHandler(names);
                });
            }
            else
                after(true);
        };
        var DatasetMethods = /** @class */ (function () {
            function DatasetMethods() {
            }
            DatasetMethods.prototype.ds_init = function (config) {
                var that = this;
                var register = false;
                that.props = that.props || {};
                that.props.data = that.props.data || {};
                that.props.data.ds = {};
                if (config.datasets || config.$resources || config.$schema || config.$menus) {
                    if (that.datasets)
                        that.ds_destroy();
                    var resName = config.$resources || config.$schema;
                    if (resName) {
                        that.props.data.ds.view = null;
                        that.datasets = that.datasets || {};
                        that.datasets.view = new _data.DataSet({
                            $type: "widget-schema",
                            $params: {
                                name: resName,
                                localization: config.$localization
                            }
                        });
                        that.datasets.view.$schema = true;
                    }
                    if (config.$menus) {
                        Object.keys(config.$menus).forEach(function (menuName) {
                            var dn = '$menu_' + menuName;
                            that.props.data.ds[dn] = null;
                            that.datasets = that.datasets || {};
                            that.datasets[dn] = new _data.DataSet({
                                $type: "menu",
                                $params: {
                                    name: config.$menus[menuName] + '-' + menuName
                                }
                            });
                            that.datasets[dn].$menu = true;
                        });
                    }
                    if (config.datasets) {
                        Object.keys(config.datasets).forEach(function (dataset) {
                            that.props.data.ds[dataset] = null;
                            that.datasets = that.datasets || {};
                            var cds = new _data.DataSet(config.datasets[dataset]);
                            that.datasets[dataset] = cds;
                            if (!register) {
                                register = cds.hasCustomEvents() || cds.config.$emit;
                            }
                        });
                    }
                }
                return register;
            };
            DatasetMethods.prototype.ds_storeLastEvent = function (event, value) {
                var that = this;
                that._lastEvent = { event: event, value: value };
            };
            DatasetMethods.prototype.ds_LastEvent = function () {
                var that = this;
                if (that._lastEvent) {
                    var res = that._lastEvent;
                    that._lastEvent = null;
                    return res;
                }
                return null;
            };
            DatasetMethods.prototype.ds_destroy = function () {
                _utils.log("Destroy Dataset Part", "destroy");
                var that = this;
                that._lastEvent = null;
                if (that.datasets) {
                    Object.keys(that.datasets).forEach(function (dataset) {
                        var ds = that.datasets[dataset];
                        ds.destroy();
                    });
                    that.datasets = null;
                }
            };
            DatasetMethods.prototype.ds_context = function () {
                var that = this;
                var map = {
                    $url: _link.search(true),
                    $mem: _mem,
                    $local: that.getLocalContextHandler ? that.getLocalContextHandler() : null,
                };
                var datasets = that.props.data.ds;
                if (datasets) {
                    Object.keys(datasets).forEach(function (pn) {
                        map[pn] = datasets[pn];
                    });
                }
                return map;
            };
            DatasetMethods.prototype.ds_reemit = function (listeners, after) {
                var that = this;
                if (that.datasets) {
                    var names = Object.keys(that.datasets);
                    names.forEach(function (name) {
                        var d = that.props.data.ds[name];
                        var ds = that.datasets[name];
                        if (ds.defaultDataset) {
                            if (that.noDataHandler)
                                that.noDataHandler(!d || d.nodata, null, true);
                        }
                        that.ds_loaded(name, d);
                        if (ds.autoselect) {
                            ds.doAutoSelect(d, function (item) {
                                that.ds_select(name, item);
                            });
                        }
                    });
                }
                return after();
            };
            DatasetMethods.prototype.ds_select = function (datasetName, value) {
                var that = this;
                if (that.datasets && that.datasets[datasetName]) {
                    var ds = that.datasets[datasetName];
                    if (ds.config.$emit && that.emitHandler) {
                        if (ds.config.$emit.$changed) {
                            _updateMem(that, ds, value, '$changed');
                        }
                        that.emitHandler(ds.config.$emit.$changed ? ds.config.$emit.$changed.$name : ds.config.$emit, value);
                    }
                }
            };
            DatasetMethods.prototype.ds_loaded = function (datasetName, value) {
                var that = this;
                if (that.datasets && that.datasets[datasetName]) {
                    var ds = that.datasets[datasetName];
                    if (ds.config.$emit && ds.config.$emit.$loaded) {
                        _updateMem(that, ds, value, '$loaded');
                        that.emitHandler(ds.config.$emit.$loaded.$name, value);
                    }
                }
            };
            DatasetMethods.prototype.ds_exec = function (event, context, dst, after, datasets, notify) {
                _ds_exec(this, event, context, dst, after, datasets, notify);
            };
            return DatasetMethods;
        }());
        DatasetPlugin.DatasetMethods = DatasetMethods;
        DatasetPlugin.executeDatasets = function (datasets, context, result, handlers, after, contextByDs) {
            var thisObj = {
                loadingHandler: handlers && handlers.loading ? handlers.loading : null,
                errorHandler: handlers && handlers.error ? handlers.error : null
            };
            _ds_exec(thisObj, '', context, result, after, datasets, false, contextByDs);
        };
    })(DatasetPlugin = Phoenix.DatasetPlugin || (Phoenix.DatasetPlugin = {}));
})(Phoenix || (Phoenix = {}));
// <reference path="../core/core-refs.ts" />
var Phoenix;
(function (Phoenix) {
    var WidgetUtils;
    (function (WidgetUtils) {
        //Widget data
        // {$config: {$title, $titleIsHidden, $border, $style, $height, data}}
        var _p = Phoenix, _dom = _p.dom, _utils = _p.utils, _locale = _p.locale, _ulocale = _p.ulocale;
        var _widgetClass = function (cfg, options, selected) {
            var css = ["bs-island bs-widget"];
            _dom.parseStyle(cfg.$style, css);
            if (cfg.$border)
                css.push("border");
            if (options.design)
                css.push("design");
            if (selected)
                css.push("selected");
            return css.join(' ');
        }, _heightText = function (height) {
            if (!height)
                return "";
            var h = ((height + '').indexOf('%') > 0) ? height : (parseInt(height, 10) + 'px');
            return 'height:' + h + ';';
        }, _beforeWidget = function (html, data, options, llocale) {
            html.push('<div class="');
            html.push(_widgetClass(data.$config, options, data.$selected));
            html.push('"');
            if (options.design)
                html.push(' draggable="true"');
            html.push(' data-render="' + data.$id + '"');
            html.push(' id="' + data.$id + '"');
            html.push('>');
            _addTitle(html, data.$id, data.$config, llocale, false);
            html.push('<div class="bs-widget-content bs-widget-content-id"');
            var ht = _heightText(data.$config.$height);
            if (ht)
                html.push(' style="' + ht + '"');
            html.push('>');
        }, _addTitle = function (html, id, data, llocale, forceShowTitle) {
            html.push('<div class="bs-widget-title' + (forceShowTitle ? ' bs-widget-content-inv-x' : '') + (data.$titleIsHidden && !forceShowTitle ? ' bs-none' : '') + '" id="' + id + '_title">');
            var title = _ulocale.localeTitle(data.$title) || '';
            if (llocale)
                title = _ulocale.tt(data.$title || '', llocale);
            html.push(_utils.escapeHtml(title + ' '));
            if (data.icons && data.icons.length && data.links) {
                data.icons.forEach(function (icon) {
                    var l = data.links[icon.link];
                    if (l && l.$icon) {
                        html.push('<a class="bs-widget-title-icon" data-phoenix-href="link://' + icon.link + '">');
                        html.push('<span class="' + _dom.iconClass(l.$icon) + '"></span>');
                        html.push('</a>');
                    }
                });
            }
            html.push('</div>');
        }, _afterWidget = function (html, options) {
            html.push('</div></div>');
        }, _renderWiget = function (html, data, parent, model, options, llocale) {
            _beforeWidget(html, data, options, llocale);
            _afterWidget(html, options);
        }, _toHtml = function (data, options, parent, model, llocale) {
            var html = [];
            _renderWiget(html, data, parent, model, options, llocale);
            return html.join('');
        }, _loader = function () {
            return $('<div class="bs-loader"></div>');
        }, _error = function () {
            return $('<div class="alert alert-danger" role="alert"><span class="' + _dom.iconClass('exclamation-circle') + '" aria-hidden="true"></span><span></span></div>');
        }, _settings = function () {
            return $('<span class="bs-module-settings ' + _dom.iconClass('cog') + '" ></span>');
        }, _warning = function () {
            return $('<div class="alert alert-warning" role="alert"></div>');
        }, _noData = function (message, icon) {
            var html = [];
            var addIcon = icon !== false;
            icon = (icon && icon !== true) || 'cloud';
            html.push('<div class="bs-widget-content nodata">');
            html.push('<div class="bs-no-data-inside">');
            if (addIcon)
                html.push('<center class="nodata-image"><i class="' + _dom.iconClass(icon) + ' nodata-icon"></i></center>');
            html.push('<center><h4 class="nodata-text">');
            html.push(message ? message : _locale.layouts.NoData);
            html.push('</h4></center>');
            html.push('</div>');
            html.push('</div>');
            return $(html.join(''));
        };
        WidgetUtils.toHtml = _toHtml;
        WidgetUtils.cssClass = _widgetClass;
        WidgetUtils.heightText = _heightText;
        WidgetUtils.loader = _loader;
        WidgetUtils.error = _error;
        WidgetUtils.widgetTitle = _addTitle;
        WidgetUtils.settings = _settings;
        WidgetUtils.warning = _warning;
        WidgetUtils.noData = _noData;
    })(WidgetUtils = Phoenix.WidgetUtils || (Phoenix.WidgetUtils = {}));
})(Phoenix || (Phoenix = {}));
/// <reference path="../core/core-refs.ts" />
/// <reference path="./module.ts" />
/// <reference path="./datasets-plugin.ts" />
var Phoenix;
(function (Phoenix) {
    var ui;
    (function (ui) {
        var _p = Phoenix, _dom = _p.dom, _utils = _p.utils, _locale = _p.locale, _wutils = _p.WidgetUtils, _dsPlugin = _p.DatasetPlugin, _link = _p.link, _render = _p.render;
        var Widget = /** @class */ (function () {
            function Widget(localData, options, layout) {
                var that = this;
                that.item = localData || {};
                if (!that.item.$id)
                    that.item.$id = _utils.allocID();
                localData.$config = localData.$config || {};
                localData.$config.data = localData.$config.data || {};
                that.data = localData.$config;
                that.props = {};
                that.item.$render = that.props;
                that.props.data = localData.$config.data;
                that.options = options || {};
                that.contentRender = null;
                that.links = localData.$config.links;
                that._defineProps();
                that.layout = layout;
                that.$local = {};
                //datasets
                that.loadingHandler = that.loading.bind(that);
                that.noDataHandler = that.noData.bind(that);
                that.errorHandler = that.error.bind(that);
                that.emitHandler = that.emit.bind(that);
                that.getLocalContextHandler = that.getLocalContext.bind(that);
                that.dataChangedHandler = that.dataChanged.bind(that);
                that.updateMenuHandler = null;
                that._watchers = {};
                if (that.props.data.localContext) {
                    $.extend(that.$local, that.props.data.localContext);
                }
                if (that.ds_init(that.data))
                    that._listen();
            }
            //implements DatasetMethods
            Widget.prototype.ds_init = function (config) { return false; };
            Widget.prototype.ds_storeLastEvent = function (event, value) { };
            Widget.prototype.ds_LastEvent = function () { return null; };
            Widget.prototype.ds_destroy = function () { };
            Widget.prototype.ds_context = function () { return null; };
            Widget.prototype.ds_reemit = function (listeners, after) { return null; };
            Widget.prototype.ds_select = function (datasetName, value) { };
            Widget.prototype.ds_loaded = function (datasetName, value) { };
            Widget.prototype.ds_exec = function (event, context, dst, after, datasets, notify) { };
            Widget.prototype._defineProps = function () {
                var self = this, _dp = _utils.defineProperty;
                _dp("$title", self);
                _dp("$border", self);
                _dp("$height", self);
                _dp("$titleIsHidden", self);
                _dp("$settings", self);
            };
            Widget.prototype._notifyChange = function (propertyName) {
                var self = this;
                switch (propertyName) {
                    case "$title":
                        self._updateTitle();
                        break;
                    case "$border":
                    case "$titleIsHidden":
                        self._updateCssClass();
                        break;
                    case "$height":
                        self._updateHeight();
                        break;
                }
            };
            Widget.prototype._listen = function () {
                var that = this;
                if (that.layout) {
                    that.layout.registerDataListener(that);
                }
            };
            Widget.prototype._unlisten = function () {
                var that = this;
                if (that.layout) {
                    that.layout.removeDataListener(that);
                }
            };
            Widget.prototype.on = function (event, hnd) {
                var that = this;
                that.handlers = that.handlers || {};
                that.handlers[event] = hnd;
            };
            Widget.prototype._exec = function (event) {
                var that = this;
                that.handlers && that.handlers[event] && that.handlers[event]();
            };
            Widget.prototype._setEvents = function () {
                var that = this;
                var e = that.$element.get(0);
                that.$element.on('click', function (event) {
                    var target = event.target;
                    if (that.$settings && target === that.$settings.get(0)) {
                        that._exec('settings');
                    }
                    var c = _link.isCustomLink(e, event);
                    if (c)
                        _link.execCustomProtocol(c, that.ds_context(), {
                            links: that.links
                        }, null);
                });
            };
            Widget.prototype.executeLink = function (href, params) {
                var that = this;
                var c = _link.isCustomProtocol(href);
                if (c)
                    _link.execCustomProtocol({ protocol: c, value: href }, that.ds_context(), {
                        links: that.links
                    }, params);
            };
            Widget.prototype._removeEvents = function () {
                var that = this;
                that.$element.off('click');
            };
            //Called by execdataset
            Widget.prototype.dataChanged = function (datasetNames) {
                var that = this;
                if (that.onDSChanged)
                    that.onDSChanged(datasetNames);
                if (that.contentRender && that.contentRender.dataChanged)
                    that.contentRender.dataChanged();
                else if (that.options.onDataChanged)
                    that.options.onDataChanged();
            };
            Widget.prototype.execDataSet = function (datasets, context, callBack, res, notify) {
                var that = this;
                res = res || that.props.data.ds;
                that.ds_exec(null, context, res, callBack || function () { }, datasets, notify);
            };
            Widget.prototype._loadData = function (after) {
                var that = this;
                if (!that.datasets) {
                    return after(false);
                }
                that.ds_exec("$load", null, that.props.data.ds, after, null, true);
            };
            Widget.prototype._updateTitle = function () {
                var that = this;
                if (that.$element) {
                    var t = _dom.find(that.$element.get(0), that.item.$id + "_title");
                    if (t)
                        _dom.text(t, this.data.$title || '');
                }
            };
            Widget.prototype._cleanErrors = function (endLoading) {
                var that = this;
                if (that.$loader) {
                    that.$loader.remove();
                    that.$loader = null;
                }
                if (!endLoading) {
                    if (that.$settings) {
                        _dom.addClass(that.$settings.get(0), 'bs-none');
                    }
                    if (that.$noData) {
                        that.$noData.remove();
                        that.$noData = null;
                    }
                    if (that.$error) {
                        that.$error.remove();
                        that.$error = null;
                    }
                    if (that.$warning) {
                        that.$warning.remove();
                        that.$warning = null;
                    }
                }
            };
            Widget.prototype.loading = function (show) {
                var that = this;
                that._cleanErrors(!show);
                var e = that.$element ? that.$element.get(0) : null;
                if (e) {
                    if (show) {
                        _dom.addClass(e, "loading");
                        if (!that.$loader) {
                            that.$loader = _wutils.loader();
                            that.$element.append(that.$loader);
                        }
                    }
                    else {
                        _dom.removeClass(e, "loading");
                    }
                }
                if (!show) {
                    that.settings();
                }
            };
            Widget.prototype._linksState = function (show) {
                var that = this;
                if (that.$element) {
                    var e = that.$element.get(0);
                    var t = _dom.find(e, that.item.$id + "_title");
                    if (t) {
                        var matches = _dom.queryAll(t, '.bs-widget-title-icon');
                        [].forEach.call(matches, function (item) {
                            if (show)
                                _dom.removeClass(item, "bs-none");
                            else
                                _dom.addClass(item, "bs-none");
                        });
                    }
                }
            };
            Widget.prototype.noData = function (value, message, icon) {
                var that = this;
                if (!message && that.props.data.$noDataMessage)
                    message = that.props.data.$noDataMessage;
                this._cleanErrors(false);
                if (that.$element) {
                    var e = that.$element.get(0);
                    var cont = _dom.query(e, '.bs-widget-content-id');
                    if (cont) {
                        if (value)
                            _dom.addClass(cont, "bs-none");
                        else
                            _dom.removeClass(cont, "bs-none");
                        that._linksState(!value);
                    }
                    if (value) {
                        that.$noData = _wutils.noData(message, icon);
                        var hasHeight = that._updateHeight(that.$noData);
                        if (hasHeight) {
                            var inside = _dom.query(that.$noData.get(0), '.bs-no-data-inside');
                            _dom.addClass(inside, 'centred');
                        }
                        var t = _dom.find(e, that.item.$id + "_title");
                        if (t)
                            _dom.after(t, that.$noData.get(0));
                    }
                }
            };
            Widget.prototype.getLocalContext = function () {
                return this.$local;
            };
            Widget.prototype.settings = function () {
                var that = this;
                var show = (that.data.$settings && !that.$error && !that.$warning && !that.$noData);
                if (that.$settings) {
                    if (show)
                        _dom.removeClass(that.$settings.get(0), 'bs-none');
                    else
                        _dom.addClass(that.$settings.get(0), 'bs-none');
                    return;
                }
                if (!show)
                    return;
                that.$settings = _wutils.settings();
                var t = _dom.find(that.$element.get(0), that.item.$id + "_title");
                if (t)
                    _dom.after(t, that.$settings.get(0));
            };
            Widget.prototype.error = function (ex) {
                var message = ex;
                if (ex && ex.message) {
                    message = ex.message;
                }
                var that = this;
                this._cleanErrors(false);
                var e = that.$element ? that.$element.get(0) : null;
                if (e) {
                    that.$error = _wutils.error();
                    var ee = that.$error.get(0);
                    _dom.text(ee.lastChild, " " + message);
                    var t = _dom.find(e, that.item.$id + "_title");
                    if (t)
                        _dom.after(t, ee);
                }
            };
            Widget.prototype.warning = function (message) {
                var that = this;
                this._cleanErrors(false);
                var e = that.$element ? that.$element.get(0) : null;
                if (e) {
                    that.$warning = _wutils.warning();
                    var ee = that.$warning.get(0);
                    _dom.text(ee, message);
                    var t = _dom.find(e, that.item.$id + "_title");
                    if (t)
                        _dom.after(t, ee);
                }
            };
            Widget.prototype._updateHeight = function ($e) {
                var that = this;
                $e = $e || that.$element;
                var e = $e ? $e.get(0) : null;
                if (e)
                    e.style.cssText = _wutils.heightText(that.props.$height);
                return (that.props.$height ? true : false);
            };
            Widget.prototype._updateCssClass = function () {
                var that = this;
                var e = that.$element ? that.$element.get(0) : null;
                if (e)
                    e.className = _wutils.cssClass(that.data, that.options);
            };
            Widget.prototype._internalRenderContent = function ($content, append, async) {
                var that = this, Cr = _render.get(that.options.context, "widget.content.control." + that.data.$type);
                if (!that.$element)
                    return;
                if (Cr) {
                    that.contentRender = new Cr(that.props, {
                        context: that.options.context,
                        replaceParent: false,
                    }, this);
                }
                else {
                    var htmlRender = _render.get(that.options.context, "widget.content");
                    if (htmlRender) {
                        var html = [];
                        htmlRender(html, that.data, that.options);
                        $content.append($(html.join('')));
                    }
                }
                if (that.options.beforeAdd)
                    that.options.beforeAdd($content, async);
                if (that.contentRender)
                    that.contentRender.render($content);
                if (append)
                    that.$element.append($content);
            };
            Widget.prototype.watchersHandler = function (names) {
                var that = this;
                if (names)
                    names.forEach(function (name) {
                        var wbyds = that._watchers[name];
                        if (wbyds) {
                            wbyds.forEach(function (watcher) {
                                watcher(that.props.data.ds[that.props.data.ds[name]]);
                            });
                        }
                        //console.log(name + ' data changed');
                    });
            };
            Widget.prototype.render = function ($parent) {
                var that = this;
                that.$loader = null;
                that.$error = null;
                if (!that.$element) {
                    that.layout.controls[that.item.$id] = this;
                    that.$element = $(_wutils.toHtml(that.item, that.options, null, null, null));
                    that._setEvents();
                    var e = that.$element.get(0);
                    var cont = _dom.query(e, '.bs-widget-content-id');
                    that._loadData(function (async) {
                        that._internalRenderContent($(cont), false, async);
                        that.settings();
                    });
                    if ($parent) {
                        if (that.options.replaceParent)
                            $parent.replaceWith(that.$element);
                        else
                            $parent.append(that.$element);
                    }
                }
            };
            /* Start datasets methods*/
            Widget.prototype.emit = function (eventName, value, filter) {
                var that = this;
                if (that.layout) {
                    that.layout.emitDataEvent(eventName, value, filter);
                }
            };
            /* End datasets methods*/
            Widget.prototype.dataEvent = function (eventName, value) {
                var that = this;
                that.ds_exec(eventName, value, that.props.data.ds, function () { }, null, true);
            };
            Widget.prototype.destroy = function () {
                _utils.log("Destroy Module", "destroy");
                var that = this;
                if (that.contentRender) {
                    that.contentRender.destroy();
                    that.contentRender = null;
                }
                that._unlisten();
                that.ds_destroy();
                that._cleanErrors(false);
                that.item.$render = null;
                if (that.$settings)
                    that.$settings = null;
                if (that.$element) {
                    that._removeEvents();
                    that.$element = null;
                }
                that.layout = null;
                that.ondatasets = null;
            };
            Widget.prototype.watch = function (dsName, cb) {
                var that = this;
                if (that._watchers) {
                    var wbyds = that._watchers[dsName] = that._watchers[dsName] || [];
                    wbyds.push(cb);
                    if (that.props && that.props.data.ds) {
                        _utils.nextTick(function () {
                            cb(that.props.data.ds[dsName]);
                        });
                    }
                }
            };
            Widget.prototype.unwatch = function (dsName, cb) {
                var that = this;
                if (that._watchers) {
                    var wbyds = that._watchers[dsName];
                    if (wbyds) {
                        var ii = wbyds.indexOf(cb);
                        if (ii >= 0)
                            wbyds.splice(ii, 1);
                    }
                }
            };
            return Widget;
        }());
        ui.Widget = Widget;
        _utils.applyMixins(Widget, [_dsPlugin.DatasetMethods]);
    })(ui = Phoenix.ui || (Phoenix.ui = {}));
})(Phoenix || (Phoenix = {}));
/// <reference path="../core/core-refs.ts" />
/// <reference path="./datasets-plugin.ts" />
/// <reference path="./page.control.ts" />
var Phoenix;
(function (Phoenix) {
    var menubase;
    (function (menubase) {
        var _p = Phoenix, _pagecontrol = _p.pagecontrol, _utils = _p.utils, _ulocale = _p.ulocale, _link = _p.link, _mem = _p.$mem, _dsPlugin = _p.DatasetPlugin, _dom = _p.dom;
        var _expandItems = function (options, items, list, parent, level) {
            items && items.forEach(function (item) {
                if (item.$level === undefined)
                    item.$level = level;
                item.$id = _utils.allocID();
                if (parent)
                    item.$parentId = parent.$id;
                list.push(item);
                if (item.$items && item.$items.length) {
                    if (item.collapsed === undefined) {
                        item.collapsed = (options.canExpandItems ? true : false);
                    }
                    _expandItems(options, item.$items, list, item, level + 1);
                }
                else
                    item.collapsed = false;
            });
        };
        var MenuBase = /** @class */ (function () {
            function MenuBase(data, options) {
                this._initOptions(options);
                this.init(data, options);
            }
            //implements DatasetMethods
            MenuBase.prototype.ds_init = function (config) { return false; };
            MenuBase.prototype.ds_storeLastEvent = function (event, value) { };
            MenuBase.prototype.ds_LastEvent = function () { return null; };
            MenuBase.prototype.ds_destroy = function () { };
            MenuBase.prototype.ds_context = function () { return null; };
            MenuBase.prototype.ds_reemit = function (listeners, after) { return null; };
            MenuBase.prototype.ds_select = function (datasetName, value) { };
            MenuBase.prototype.ds_loaded = function (datasetName, value) { };
            MenuBase.prototype.ds_exec = function (event, context, dst, after, datasets, notify) { };
            MenuBase.prototype._initOptions = function (options) { };
            /* Start datasets methods*/
            MenuBase.prototype.emit = function (eventName, value, filter) {
                this.emitDataEvent(eventName, value, filter);
            };
            /* End datasets methods*/
            MenuBase.prototype.init = function (data, options) {
                _utils.log('Create Menu', 'menu');
                var that = this;
                //datasets
                that.loadingHandler = this.loading.bind(that);
                that.noDataHandler = null;
                that.errorHandler = null;
                that.emitHandler = this.emit.bind(that);
                that.getLocalContextHandler = null;
                that.dataChangedHandler = null;
                that.updateMenuHandler = null;
                that.$element = null;
                that.$items = null;
                that.options = options || {};
                that.options.typeMenu = that.options.type || 'left';
                that.data = {
                    name: 'none'
                };
                that.page = _pagecontrol.Page();
                that.page.addChild('menu-' + that.options.typeMenu, that);
                that.setMenu(data);
            };
            MenuBase.prototype.loading = function (show) {
                this.page.loading(show);
            };
            MenuBase.prototype.registerDataListener = function (value) {
                var that = this;
                if (that.page)
                    that.page.registerDataListener(value, that);
            };
            MenuBase.prototype.removeDataListener = function (listener) {
                var that = this;
                if (that.page) {
                    that.page.removeDataListener(listener);
                }
            };
            MenuBase.prototype.emitDataEvent = function (event, value, filter) {
                var that = this;
                if (that.page)
                    that.page.emitDataEvent(event, value, filter);
            };
            MenuBase.prototype.onPageChange = function (propName, value) {
                var that = this;
                if (propName === '$user' && that.items) {
                    if (that.options.auth && !that.options.autoClose) {
                        var show = that.page.props.$user && that.page.props.$user.connected;
                        if (show) {
                            var pp = _dom.find(null, that.options.parentId);
                            if (pp) {
                                that.show($(pp));
                            }
                            else {
                                that._showContent();
                            }
                        }
                        else if (that.$content && !show) {
                            that._hideContent();
                        }
                    }
                }
                if (propName === '$title')
                    that._onPageChanged();
            };
            MenuBase.prototype.setMenu = function (data) {
                _utils.log('Set Menu', 'menu');
                var that = this, hasMenu = data != null;
                data = data || {
                    name: 'none'
                };
                if (!data.$groups) {
                    data.$groups = [{
                            $items: data.$items
                        }];
                }
                if (that.data.name !== data.name || data.name === undefined) {
                    _utils.log('Menu create && execute datasets', 'menu');
                    that.data = data;
                    that.items = null;
                    that._map = {};
                    that._recreateDatasets();
                    that.ds_exec('$load', null, that.props.data.ds, function () {
                        var doShow = !that.options.autoClose && that.options.parentId && hasMenu;
                        if (doShow && that.options.auth) {
                            doShow = that.page.props.$user && that.page.props.$user.connected;
                        }
                        that._prepareItems();
                        if (that.$content) {
                            that._removeContent();
                            if (hasMenu) {
                                if (doShow) {
                                    var parent = _dom.find(null, that.options.parentId);
                                    if (parent) {
                                        that.render();
                                        that.show($(parent));
                                    }
                                }
                                else
                                    that.render();
                            }
                            else
                                that._hideContent();
                        }
                        else {
                            if (doShow) {
                                var pp = _dom.find(null, that.options.parentId);
                                if (pp) {
                                    that.show($(pp));
                                }
                            }
                        }
                        that.page.props['$menu' + that.options.typeMenu] = hasMenu && that.options.autoClose;
                    }, null, true);
                    that._onPageChanged();
                }
                else {
                    _utils.log('Menu reexecute datasets', 'menu');
                    that.ds_reemit(null, function () {
                        that._onPageChanged();
                        that.page.props['$menu' + that.options.typeMenu] = hasMenu && that.options.autoClose;
                    });
                }
            };
            MenuBase.prototype._onPageChanged = function () { };
            MenuBase.prototype._doCloseClick = function () { };
            MenuBase.prototype._menuShowed = function () { };
            MenuBase.prototype._executeLink = function (item, link) { };
            MenuBase.prototype._executeContextMenu = function (event, item, link) { return false; };
            MenuBase.prototype._setEvents = function () {
                var that = this;
                var e = that.$content.get(0);
                that.$content.on('click', function (event) {
                    var c = _link.isCustomLink(e, event, true);
                    if (c && c.protocol === 'click') {
                        var cs = c.value.substring(('click://').length);
                        if (cs === 'close') {
                            if (that._doCloseClick)
                                return that._doCloseClick();
                        }
                        else if (cs.indexOf('collapse/') === 0) {
                            cs = cs.substring(('collapse/').length);
                            var j = cs.split('/');
                            var item = that.items[parseInt(j[0], 10)];
                            if (item) {
                                that.colapse(item, !item.collapsed, false);
                                that.updateItemsAfterCollapse();
                            }
                            return;
                        }
                        else {
                            var ii = cs.split('/');
                            that._executeLink(that.items[parseInt(ii[0], 10)], ii.length > 1 ? ii[1] : null);
                        }
                    }
                    if (that.options.autoClose) {
                        that.hide();
                    }
                });
                that.$content.contextmenu(function (event) {
                    if (that.options.noContextMenu) {
                        event.preventDefault();
                        return false;
                    }
                    var c = _link.isCustomLink(e, event, true);
                    if (c && c.protocol === 'click') {
                        var cs = c.value.substring(('click://').length);
                        if (cs === 'close') {
                        }
                        else if (cs.indexOf('collapse/') === 0) {
                        }
                        else {
                            var ii = cs.split('/');
                            if (that._executeContextMenu(event, that.items[parseInt(ii[0], 10)], ii.length > 1 ? ii[1] : null)) {
                                event.preventDefault();
                                return false;
                            }
                        }
                    }
                });
            };
            MenuBase.prototype.updateItemsAfterCollapse = function () {
            };
            MenuBase.prototype.renderItems = function ($content) {
                return null;
            };
            MenuBase.prototype._removeEvents = function () {
                var that = this;
                that.$content.off('click');
                that.$content.off('contextmenu');
            };
            MenuBase.prototype._loadData = function (after) {
                var that = this;
                if (!that.datasets) {
                    return after(false);
                }
                that.ds_exec('$load', null, that.props.data.ds, after, null, true);
            };
            MenuBase.prototype._expandItem = function (item, url, mem, itemtitle, link, index) {
                var ii = { $title: '', $item: item, $index: index, $link: link };
                ii.$title = _utils.parseVariable(itemtitle, {
                    $item: item,
                    $url: url,
                    $mem: mem
                });
                return ii;
            };
            MenuBase.prototype._expandDatasetItems = function (dataset, itemtitle, link) {
                var that = this;
                var data = that.props.data.ds[dataset];
                if (data) {
                    var items = [];
                    var url = _link.search(true);
                    var mem = _mem;
                    if (data.documents) {
                        if (data.documents.length) {
                            data.documents.forEach(function (item, index) {
                                items.push(that._expandItem(item, url, mem, itemtitle, link, index));
                            });
                        }
                        else
                            return null;
                    }
                    else {
                        items.push(that._expandItem(data, url, mem, itemtitle, link, -1));
                    }
                    return items;
                }
                return null;
            };
            MenuBase.prototype.copyMenuItemData = function (dst, src) { };
            MenuBase.prototype.isVisible = function (item) {
                var that = this;
                if (item.$parentId && that.options.canExpandItems) {
                    var visible = true;
                    var p = item;
                    while (p) {
                        if (!p.$parentId)
                            break;
                        p = that._map[p.$parentId];
                        if (p && p.collapsed) {
                            visible = false;
                            break;
                        }
                    }
                    return visible;
                }
                return true;
            };
            MenuBase.prototype.colapseAll = function (value) {
                var that = this;
                that.items.forEach(function (item) {
                    item.collapsed = value;
                });
            };
            MenuBase.prototype.colapse = function (item, value, recursive) {
                var that = this;
                item.collapsed = value;
                if (item.$items)
                    item.$items.forEach(function (citem) {
                        citem.collapsed = value;
                        if (recursive && citem.$items) {
                            that.colapse(citem, value, true);
                        }
                    });
            };
            Object.defineProperty(MenuBase.prototype, "search", {
                get: function () {
                    var that = this;
                    return that._search;
                },
                set: function (value) {
                    var that = this;
                    if (that._search !== value) {
                        that._search = value;
                        that._updateSearch();
                    }
                    that._search = value;
                },
                enumerable: true,
                configurable: true
            });
            MenuBase.prototype._updateSearch = function () {
            };
            MenuBase.prototype._prepareItems = function () {
                var that = this;
                that._searchList = [];
                that.items = [];
                if (that.data.$groups) {
                    var first_1 = true;
                    that.data.$groups.forEach(function (group, groupIndex) {
                        var items = null;
                        if (groupIndex === 0) {
                            group.$title = group.$title || String.fromCharCode(160);
                        }
                        if (group.$dataset) {
                            if (!group.$link) {
                                throw 'Invalid link definition. (no link)';
                            }
                            if (!group.$itemtitle) {
                                throw 'Invalid link definition. (no itemtitle)';
                            }
                            items = that._expandDatasetItems(group.$dataset, group.$itemtitle, group.$link);
                        }
                        else
                            items = group.$items;
                        if (items && items.length) {
                            var list = [];
                            _expandItems(that.options, items, list, null, 0);
                            items = list;
                            if (!first_1 || (group.$title || (groupIndex === 0)) || group.$dataset) {
                                var d = {
                                    $id: _utils.allocID(),
                                    divider: true,
                                    $title: null,
                                    $firstGroup: (groupIndex === 0),
                                    dataset: '',
                                    isHidden: false,
                                    collapsed: false
                                };
                                d.$title = group.$title;
                                if (group.dataset) {
                                    d.dataset = group.$dataset;
                                    if (first_1)
                                        d.isHidden = true;
                                }
                                that._map[d.$id] = d;
                                that.items.push(d);
                                // Don't adds groups
                                // that._searchList.push({ id: d.$id, title: d.$title });
                                first_1 = false;
                            }
                        }
                        if (items) {
                            var ds_1 = group.$dataset ? that.datasets[group.$dataset] : null;
                            items.forEach(function (item, index) {
                                var mitem = {
                                    $id: item.$id,
                                    $parentId: item.$parentId,
                                    $title: item.$title ? _utils.parseExpression(item.$title, _link.context()) : null,
                                    $dataset: null,
                                    dataset: null,
                                    $index: 0,
                                    $item: null,
                                    $link: null,
                                    $level: item.$level,
                                    selected: false,
                                    collapsed: item.collapsed,
                                    $items: item.$items
                                };
                                if (group.dataset) {
                                    mitem.dataset = group.$dataset;
                                }
                                if (item.$link)
                                    mitem.$link = item.$link;
                                if (ds_1 && ds_1.autoselect)
                                    mitem.selected = ds_1.selectedIndex == index;
                                that.copyMenuItemData(mitem, item);
                                if (ds_1) {
                                    mitem.$dataset = group.$dataset;
                                    mitem.$index = item.$index;
                                    mitem.$item = item.$item;
                                }
                                that._map[mitem.$id] = mitem;
                                that.items.push(mitem);
                                if (mitem.$title)
                                    that._searchList.push({ id: mitem.$id, title: mitem.$title });
                                first_1 = false;
                            });
                        }
                    });
                }
            };
            MenuBase.prototype._removeContent = function () {
                if (this.$element) {
                    this.$element.remove();
                    this.$element = null;
                }
            };
            MenuBase.prototype.renderContent = function () {
                return $('<aside></aside>');
            };
            MenuBase.prototype.show = function ($parent) {
                var that = this;
                if (!$parent && that.options.parentId) {
                    var pp = _dom.find(null, that.options.parentId);
                    if (pp)
                        $parent = $(pp);
                }
                if (that.$content) {
                    that._showContent();
                }
                else {
                    that.render($parent);
                    if (that.options.autoClose)
                        _utils.nextTick(function () {
                            that._showContent();
                        });
                    else
                        that._showContent();
                }
                if (that.options.autoClose) {
                    that.page.setPopup(that);
                }
            };
            MenuBase.prototype.hide = function (autoCloseChanged) {
                var that = this;
                if (!that.$content)
                    return;
                that._hideContent(autoCloseChanged);
            };
            MenuBase.prototype._hideContent = function (autoCloseChanged) {
                var that = this;
                var c = that.$content.get(0);
                _dom.addClass(c, 'bs-none');
            };
            MenuBase.prototype._showContent = function () {
                var that = this;
                var c = that.$content.get(0);
                _dom.removeClass(c, 'bs-none');
                that._menuShowed();
            };
            MenuBase.prototype.render = function ($parent) {
                var that = this;
                var $content = that.$content;
                //
                if (!$content) {
                    $content = that.renderContent();
                }
                if (!that.$element) {
                    that.$element = that.renderItems($content);
                    $content.append(this.$element);
                }
                if ($parent && !that.$content) {
                    that.$content = $content;
                    if (that.options.replaceParent) {
                        var p = $parent.get(0);
                        if (p && p.id) {
                            var c = that.$content.get(0);
                            if (c)
                                c.id = p.id;
                        }
                        $parent.replaceWith(that.$content);
                    }
                    else
                        $parent.append(that.$content);
                    that._setEvents();
                }
            };
            MenuBase.prototype._recreateDatasets = function () {
                var that = this;
                that.ds_destroy();
                that.removeDataListener(that);
                if (that.ds_init(that.data)) {
                    that.registerDataListener(that);
                }
            };
            MenuBase.prototype.destroy = function () {
                var that = this;
                _utils.log('Destroy Menu', 'destroy');
                that.ds_destroy();
                that.removeDataListener(that);
                if (that.$content) {
                    that._removeEvents();
                    this.$content = null;
                }
                this.$element = null;
                if (that.page) {
                    that.page.removeChild(that);
                    that.page = null;
                }
            };
            MenuBase.prototype.inPopup = function (element) {
                var that = this;
                if (!that.options.autoClose)
                    return true;
                if (!element)
                    return true;
                if (that.$content) {
                    var p = that.$content.get(0);
                    var e = element;
                    while (e) {
                        if (e == p)
                            return true;
                        e = e.parentNode;
                    }
                }
                return false;
            };
            return MenuBase;
        }());
        menubase.MenuBase = MenuBase;
        _utils.applyMixins(MenuBase, [_dsPlugin.DatasetMethods]);
    })(menubase = Phoenix.menubase || (Phoenix.menubase = {}));
})(Phoenix || (Phoenix = {}));
/// <reference path="../../core/core-refs.ts" />
/// <reference path="../../data/datasets.ts" />
/// <reference path="../datasets-plugin.ts" />
var Phoenix;
(function (Phoenix) {
    var Observable;
    (function (Observable) {
        var DEF_LINK = '#/definitions/';
        var DEF_LINK_LEN = DEF_LINK.length;
        Observable.INDEX_FIELD_NAME = '$index';
        Observable.SELECTED_FIELD_NAME = '$select';
        Observable.EXPANDED_FIELD_NAME = '$expand';
        var _ulocale = Phoenix.ulocale, _external = Phoenix.external, _application = Phoenix.application, _ajax = Phoenix.ajax, _dom = Phoenix.dom, _link = Phoenix.link, _data = Phoenix.data, _utils = Phoenix.utils, _ulocale = Phoenix.ulocale, _locale = Phoenix.locale, _customData = Phoenix.customData, _localeSchema = Phoenix.locale.schema, _dsPlugin = Phoenix.DatasetPlugin, _fwFields = [Observable.INDEX_FIELD_NAME, Observable.SELECTED_FIELD_NAME, Observable.EXPANDED_FIELD_NAME], _isFwField = function (fieldName) {
            if (fieldName.indexOf(Observable.EXPANDED_FIELD_NAME) >= 0)
                return true;
            return _fwFields.indexOf(fieldName) >= 0;
        }, _registerEnumManager = function () {
            var _enumsManager = {};
            return {
                register: function (name, manager) {
                    _enumsManager[name] = manager;
                },
                get: function (name) {
                    return _enumsManager[name];
                    ;
                }
            };
        }, _registerValidator = function () {
            var _validators = {};
            return {
                register: function (name, handler) {
                    _validators[name] = handler;
                },
                get: function (name) {
                    return _validators[name];
                    ;
                }
            };
        }, _parseCapabilities = function (schema) {
            if (!schema.features) {
                schema.features = {};
                var cp = (schema.capabilities === undefined) ? 'filtrable,sortable' : schema.capabilities;
                if (cp)
                    cp.split(',').forEach(function (capability) {
                        schema.features[capability] = true;
                    });
            }
        }, _expandRefProp = function (cs, rootSchema) {
            if (cs.$ref) {
                var refEntity = cs.$ref.substr(DEF_LINK_LEN);
                var refSchema = rootSchema.definitions ? rootSchema.definitions[refEntity] : null;
                if (!refSchema)
                    throw 'Schema $ref not found : ' + cs.$ref;
                return refSchema;
            }
            return cs;
        }, _rv = _registerValidator(), _em = _registerEnumManager();
        function _enumCompositions(schema, rootSchema, path, isArray, value, cb, opts) {
            opts = opts || {};
            if (!cb(path, schema, rootSchema, value, isArray, opts))
                return;
            Object.keys(schema.properties).forEach(function (name) {
                var prop = schema.properties[name];
                if (!prop.$reference || (opts && opts.$references)) {
                    if (!prop.type && prop.$ref)
                        prop = _expandRefProp(prop, rootSchema);
                    if (prop.type === 'object') {
                        var cp = path ? path + '.' + name : name;
                        _enumCompositions(prop, rootSchema, cp, false, value ? value[name] : null, cb, opts);
                    }
                    else if (prop.type === 'array') {
                        var pitems = _expandRefProp(prop.items, rootSchema);
                        if (pitems.type === 'object') {
                            var cp = path ? path + '.' + name : name;
                            opts.currentRef = prop.items.$ref;
                            _enumCompositions(pitems, rootSchema, cp, true, value ? value[name] : null, cb, opts);
                        }
                    }
                }
            });
        }
        function _copyObject(schema, rootSchema, src, dst, copyUX, copyStates) {
            var op = Object.keys(src);
            op.forEach(function (propertyName) {
                var srcValue = src[propertyName];
                if (srcValue === undefined)
                    return;
                var ps = null;
                if (schema && !copyUX) {
                    ps = schema.properties[propertyName];
                    if (ps && (ps.$reference || ps.$ux || ps.ux))
                        return;
                }
                if (!ps && propertyName.charAt(0) === '$' || propertyName.charAt(0) === '_') {
                    if (copyStates && propertyName === '$states') {
                        dst[propertyName] = $.extend(true, {}, srcValue);
                    }
                    return;
                }
                var doDefAction = false;
                if (ps) {
                    if (!ps.type && ps.$ref)
                        ps = _expandRefProp(ps, rootSchema);
                    if (ps.type === 'object') {
                        if (srcValue === null) {
                            dst[propertyName] = null;
                        }
                        else {
                            dst[propertyName] = {};
                            _copyObject(ps, rootSchema, srcValue, dst[propertyName], copyUX);
                        }
                    }
                    else if (ps.type === 'array') {
                        var pitems_1 = _expandRefProp(ps.items, rootSchema);
                        if (srcValue === null) {
                            dst[propertyName] = null;
                            return;
                        }
                        else if (pitems_1.type === 'object') {
                            if (srcValue === undefined) {
                            }
                            else if (srcValue === null) {
                                dst[propertyName] = null;
                            }
                            else {
                                dst[propertyName] = new Array(srcValue.length);
                                srcValue.forEach(function (item, index) {
                                    var dv = {};
                                    dst[propertyName][index] = dv;
                                    _copyObject(pitems_1, rootSchema, item, dv, copyUX);
                                });
                            }
                        }
                        else
                            dst[propertyName] = srcValue.slice(0);
                        return;
                    }
                    else
                        dst[propertyName] = srcValue;
                }
                else {
                    if (srcValue === null)
                        dst[propertyName] = null;
                    else if (Array.isArray(srcValue)) {
                        dst[propertyName] = new Array(srcValue.length);
                        srcValue.forEach(function (item, index) {
                            if (item === null || item === undefined || typeof item !== 'object')
                                dst[propertyName][index] = item;
                            else {
                                var dv = {};
                                dst[propertyName][index] = dv;
                                _copyObject(null, rootSchema, item, dv, copyUX);
                            }
                        });
                    }
                    else if (typeof srcValue === 'object') {
                        dst[propertyName] = {};
                        _copyObject(null, rootSchema, srcValue, dst[propertyName], copyUX);
                    }
                    else
                        dst[propertyName] = srcValue;
                }
            });
        }
        function _enumProps(payload, schema, rootSchema, cb) {
            _enumCompositions(schema, rootSchema, '', false, payload, function (prefix, cs, cv, array) {
                if (cv === null || cv === undefined)
                    return false;
                if (cs && cs.properties) {
                    // enum all properties
                    Object.keys(cs.properties).forEach(function (pn) {
                        var cps = cs.properties[pn];
                        if (array) {
                            cv.forEach(function (elementitem) {
                                cb(pn, cps, elementitem, { prefix: prefix });
                            });
                        }
                        else
                            cb(pn, cps, cv, { prefix: prefix });
                    });
                }
                return true;
            });
        }
        function _load$ref(refName, config) {
            if (!config.definitions)
                throw new Error('schema.definitions is null');
            var reference = refName;
            var ii = reference.indexOf(DEF_LINK);
            if (ii < 0)
                throw new Error(_utils.format('Invalid $ref. ({0})', reference));
            var path = reference.substring(ii + DEF_LINK_LEN);
            return config.definitions[path];
        }
        function _toMerge(item, cs, config) {
            var toMerge = null;
            if (item.allOf) {
                toMerge = item.allOf;
                delete item.allOf;
            }
            else if (item.$ref) {
                if (cs.indexOf(item.$ref) < 0) {
                    toMerge = [{ $ref: item.$ref }];
                    if (item.ux)
                        toMerge[0].ux = true;
                    delete item.$ref;
                }
            }
            if (toMerge) {
                toMerge.forEach(function (ci) {
                    var ncs = cs.slice(0);
                    if (ci.$ref) {
                        var ref_1 = _load$ref(ci.$ref, config);
                        if (ci.ux) {
                            ref_1.properties && Object.keys(ref_1.properties).forEach(function (propertyName) {
                                var propSchema = ref_1.properties[propertyName];
                                if (propSchema.ux === undefined)
                                    propSchema.ux = true;
                            });
                            ref_1.links && Object.keys(ref_1.links).forEach(function (propertyName) {
                                var propSchema = ref_1.links[propertyName];
                                if (propSchema.ux === undefined)
                                    propSchema.ux = true;
                            });
                        }
                        if (ci.type !== 'array' && ref_1.type !== 'array')
                            ncs.push(ci.$ref);
                        delete ci.$ref;
                        _utils.merge(ref_1, ci);
                    }
                    _expand$Ref(ci, ncs, config);
                    _utils.merge(ci, item);
                });
            }
            return toMerge;
        }
        function _expand$Ref(item, cs, config) {
            var ccs = cs.slice(0);
            var toMerge = _toMerge(item, ccs, config);
            var toExpand = null;
            if (item.properties) {
                toExpand = item;
            }
            else if (item.type === 'array' && item.items) {
                toExpand = item.items;
            }
            if (toExpand && toExpand.properties) {
                Object.keys(toExpand.properties).forEach(function (name) {
                    var prop = toExpand.properties[name];
                    if (prop.allOf || prop.$ref) {
                        _toMerge(prop, cs, config);
                    }
                    if (prop.type === 'array' && prop.items) {
                        if (prop.items.allOf || prop.items.$ref) {
                            _toMerge(prop.items, cs, config);
                        }
                    }
                });
            }
        }
        function _pathOfProp(propName) {
            var segments = propName.split('.');
            var ns = [];
            segments.forEach(function (segment) {
                if (segment.charAt(0) !== '$')
                    ns.push(segment);
            });
            return ns.join('.');
        }
        var _sutils = {
            RATE_DECIMALS: 2,
            RATE_MAXIMUM: 1000,
            RATE_SYMBOL: '%',
            expandSchema$Ref: function (schema) {
                if (schema.definitions) {
                    Object.keys(schema.definitions).forEach(function (defName) {
                        var def = schema.definitions[defName];
                        if (def.allOf) {
                            var allOf = def.allOf;
                            delete def.allOf;
                            allOf.forEach(function (item) {
                                if (item.$ref) {
                                    var ref_2 = $.extend(true, {}, _load$ref(item.$ref, schema));
                                    delete item.$ref;
                                    if (item.ux) {
                                        ref_2.properties && Object.keys(ref_2.properties).forEach(function (propertyName) {
                                            var propSchema = ref_2.properties[propertyName];
                                            if (propSchema.ux === undefined)
                                                propSchema.ux = true;
                                        });
                                        ref_2.links && Object.keys(ref_2.links).forEach(function (propertyName) {
                                            var propSchema = ref_2.links[propertyName];
                                            if (propSchema.ux === undefined)
                                                propSchema.ux = true;
                                        });
                                    }
                                    _utils.merge(ref_2, item);
                                }
                                Phoenix.utils.merge(item, def);
                            });
                        }
                    });
                }
                return _expand$Ref(schema, [], schema);
            },
            path2RulePath: _pathOfProp,
            _getDefault: function (value) {
                if (value === '@date')
                    return _ulocale.date2ISO(new Date());
                return value;
            },
            checkLookup: function (lookup) {
                if (!lookup)
                    return null;
                lookup = $.extend({}, lookup);
                if (!lookup.data || lookup.data.$type != 'odata') {
                    lookup.pagination = false;
                    lookup.cache = true;
                }
                if (lookup.pagination !== false)
                    lookup.pagination = true;
                if (lookup.pagination)
                    lookup.cache = false;
                return lookup;
            },
            schema2Authoring: function (schema, rootSchema, locale) {
                var res = [];
                _enumCompositions(schema, rootSchema, '', false, null, function (prefix, cs, rs, value, array) {
                    if (array)
                        return false;
                    Object.keys(cs.properties).forEach(function (name) {
                        var ps = cs.properties[name];
                        if (!_sutils.inModel(ps, rs))
                            return;
                        //if (_sutils.isCompositionRef(ps) || _sutils.isCompositionList(ps)) return;
                        if (_sutils.isCompositionRef(ps, rs))
                            return;
                        var cp = prefix ? prefix + '.' + name : name;
                        var v = { $type: 'field', $bind: cp, $title: _ulocale.tt(ps.title, locale) || cp, $widget: ps.$widget, options: ps.$widgetOptions };
                        res.push(v);
                    });
                    if (cs.links)
                        Object.keys(cs.links).forEach(function (name) {
                            var ps = cs.links[name];
                            var cp = '$links.' + name;
                            cp = prefix ? prefix + '.' + cp : cp;
                            var v = { $type: "action", $bind: cp, $title: _ulocale.tt(ps.title, locale) || cp, $widget: ps.widget, options: ps.$widgetOptions };
                            res.push(v);
                        });
                    return true;
                });
                return res;
            },
            extractClassNames: function (schema, rootSchema) {
                var res = {};
                var refs = {};
                _enumCompositions(schema, rootSchema, '', false, null, function (prefix, cs, rs, value, array, co) {
                    if (co.currentRef) {
                        if (refs[co.currentRef])
                            return false;
                        refs[co.currentRef] = true;
                    }
                    if (cs.name) {
                        if (res[cs.name])
                            return false;
                        res[cs.name] = true;
                    }
                    return true;
                }, { $references: true });
                return Object.keys(res).length ? res : null;
            },
            expandRules: function (rules, names) {
                var res = { rulesbyClass: {}, rulesById: {} };
                rules.forEach(function (rule) {
                    if (!rule.ruleType)
                        return;
                    rule.triggers = rule.triggers.split(',').map(function (trigger) { return trigger.trim(); });
                    rule.id = _utils.allocID();
                    res.rulesById[rule.id] = rule;
                    rule.entities && rule.entities.forEach(function (entity) {
                        if (names[entity.entity]) {
                            rule.triggers.forEach(function (trigger) {
                                var ct = rule.ruleType;
                                if (trigger === '$events.created')
                                    ct = 'created';
                                else if (trigger === '$events.loaded')
                                    ct = 'loaded';
                                else if (trigger === '$events.saving')
                                    ct = 'saving';
                                res.rulesbyClass[ct] = res.rulesbyClass[ct] || {};
                                if (ct === 'created' || ct === 'loaded' || ct === 'saving') {
                                    res.rulesbyClass[ct][entity.entity] = res.rulesbyClass[ct][entity.entity] || [];
                                    res.rulesbyClass[ct][entity.entity].push(rule.id);
                                }
                                else {
                                    var rbe = res.rulesbyClass[ct][entity.entity] = res.rulesbyClass[ct][entity.entity] || {};
                                    rbe[trigger] = rbe[trigger] || [];
                                    rbe[trigger].push(rule.id);
                                }
                            });
                        }
                    });
                });
                return res;
            },
            filtrableFields: function (schema, rootSchema, locale) {
                var res = [];
                _enumCompositions(schema, rootSchema, '', false, null, function (prefix, cs, rs, value, array) {
                    if (array)
                        return false;
                    Object.keys(cs.properties).forEach(function (name) {
                        var ps = cs.properties[name];
                        if (!_sutils.inModel(ps, rs))
                            return;
                        if (_sutils.isCompositionRef(ps, rs) || _sutils.isCompositionList(ps, rs, true))
                            return;
                        var cp = prefix ? prefix + '.' + name : name;
                        if (_sutils.canFilter(ps)) {
                            var v = { name: cp, schema: _utils.copy(ps) };
                            v.schema.title = _ulocale.tt(v.schema.title || '', locale);
                            res.push(v);
                        }
                    });
                    return true;
                });
                return res;
            },
            searchableFields: function (schema, rootSchema, locale) {
                var res = [];
                _enumCompositions(schema, rootSchema, '', false, null, function (prefix, cs, rs, value, array) {
                    if (array)
                        return false;
                    Object.keys(cs.properties).forEach(function (name) {
                        var ps = cs.properties[name];
                        if (!_sutils.inModel(ps, rs))
                            return;
                        if (_sutils.isCompositionList(ps, rs, true))
                            return;
                        var cp = prefix ? prefix + '.' + name : name;
                        if (_sutils.canSearch(ps)) {
                            var v = { name: cp, schema: _utils.copy(ps) };
                            v.schema.title = _ulocale.tt(v.schema.title || '', locale);
                            res.push(v);
                        }
                    });
                    return true;
                });
                return res;
            },
            isFwField: _isFwField,
            // copy only schema properties
            copyModel: function (schema, model, rootSchema, copyUX, copyStates) {
                var res = {};
                rootSchema = rootSchema || schema;
                _copyObject(schema, rootSchema, model, res, copyUX, copyStates);
                return res;
            },
            columns: function (schema, rootSchema, locale) {
                var res = [];
                _enumCompositions(schema, rootSchema, '', false, null, function (prefix, cs, rs, value, array) {
                    if (array)
                        return false;
                    Object.keys(cs.properties).forEach(function (name) {
                        var ps = cs.properties[name];
                        if (!_sutils.inModel(ps, rs))
                            return;
                        if (_sutils.isCompositionRef(ps, rs) || _sutils.isCompositionList(ps, rs, true))
                            return;
                        var cp = prefix ? prefix + '.' + name : name;
                        if (_sutils.canShowField(ps)) {
                            var v = { name: cp, schema: _utils.copy(ps) };
                            v.schema.title = _ulocale.tt(v.schema.title || '', locale);
                            res.push(v);
                        }
                    });
                    return true;
                });
                return res;
            },
            allData: function (lookup) {
                return !lookup.pagination || lookup.data.$type === 'relation';
            },
            pkFields: function (pk) {
                if (Array.isArray(pk))
                    return pk;
                else
                    return pk.split(',').map(function (v) { return v.trim(); });
            },
            entityId: function (pkValue) {
                if (typeof pkValue === 'object') {
                    var res = [];
                    return Object.keys(pkValue).map(function (pn) {
                        var v = pkValue[pn];
                        if (typeof v === 'string') {
                            return pn + '=\'' + v + '\'';
                        }
                        else {
                            return pn + '=' + v;
                        }
                    }).join(',');
                }
                else if (typeof pkValue === 'string') {
                    return '\'' + pkValue + '\'';
                }
                else {
                    return pkValue;
                }
            },
            extractPkValue: function (item, map) {
                if (map.length == 1)
                    return item[map[0]];
                var o = {};
                map.forEach(function (p) { o[p] = item[p]; });
                return o;
            },
            odataId: function (keys, item) {
                if (keys.length == 1) {
                    return item[keys[0]];
                }
                else {
                    var a_1 = [];
                    keys.forEach(function (key) {
                        a_1.push(key + '=' + encodeURIComponent(item[key] + ''));
                    });
                    return a_1.join(',');
                }
            },
            pk2Id: function (pk, keys) {
                if (keys.length === 1)
                    return pk;
                return JSON.stringify(pk);
            },
            id2Pk: function (id, keys) {
                if (keys.length === 1)
                    return id;
                return JSON.parse(id);
            },
            equals: function (primaryItem, item, keys) {
                if (keys.length === 1)
                    return primaryItem === item[keys[0]];
                for (var i = 0, len = keys.length; i < len; i++) {
                    var p = keys[i];
                    if (primaryItem[p] !== item[p])
                        return false;
                }
                return true;
            },
            extractBase: function (path) {
                var segments = path.split('.');
                segments.pop();
                if (segments.length)
                    return segments.join('.') + '.';
                else
                    return '';
            },
            parentPath: function (path) {
                var segments = path.split('.');
                segments.pop();
                if (segments.length)
                    return segments.join('.');
                else
                    return '';
            },
            findByPk: function (primaryItem, keys, list) {
                if (list && primaryItem) {
                    for (var i = 0, len = list.length; i < len; i++) {
                        var ii = list[i];
                        if (_sutils.equals(primaryItem, ii, keys))
                            return ii;
                    }
                }
                return null;
            },
            supportPagination: function (lookup) {
                if (lookup.data && (lookup.data.$type === 'odata' || lookup.data.$type === 'relation'))
                    return true;
                return false;
            },
            executeLookup: function (lookup, data, options, ondata) {
                var ds = lookup.data;
                if (ds.$params && options.containerId)
                    ds.$params.containerId = options.containerId;
                if (ds.$params && options.viewId)
                    ds.$params.viewId = options.viewId;
                if (ds.$params && options.selected)
                    ds.$params.selected = options.selected;
                if (options.paginated && (options.findFirst || options.find)) {
                    ds = $.extend(true, {}, lookup.data);
                    options.search = (options.search || '') + '';
                    var alldata = ds.$params.$allData || (ds.$type == 'relation');
                    var ff = null;
                    var config = _application.config(_application.name) || {};
                    var odataCfg = (ds.$params.$type ? config[ds.$params.$type] : null) || config.odata || {};
                    var startswith_1 = odataCfg.startswith || 'startswith';
                    var caseSensitive_2 = odataCfg.caseSensitive || false;
                    if (!alldata) {
                        if (ds.$params.$searchByFields && ds.$params.$searchByFields.fields && ds.$params.$searchByFields.fields.length) {
                            var flist_1 = [];
                            ds.$params.$searchByFields.fields.forEach(function (fieldName) {
                                var cf = fieldName.replace(/\./g, '/');
                                var cv = '\'' + options.search.replace(/'/g, '\'\'') + '\'';
                                if (caseSensitive_2) {
                                    cf = 'tolower(' + cf + ')';
                                    cv = 'tolower(' + cv + ')';
                                }
                                flist_1.push({
                                    $left: startswith_1,
                                    $op: "$func",
                                    $right: cf + ', ' + cv
                                });
                            });
                            while (flist_1.length) {
                                var ce = flist_1.shift();
                                if (!ff) {
                                    ff = ce;
                                }
                                else {
                                    ff = {
                                        $op: 'or',
                                        $left: ce,
                                        $right: ff
                                    };
                                }
                            }
                        }
                        else {
                            var cf = options.fieldName.replace(/\./g, '/');
                            var cv = '\'' + options.search.replace(/'/g, '\'\'') + '\'';
                            if (caseSensitive_2) {
                                cf = 'tolower(' + cf + ')';
                                cv = 'tolower(' + cv + ')';
                            }
                            ff = {
                                $left: startswith_1,
                                $op: "$func",
                                $right: cf + ', ' + cv
                            };
                        }
                    }
                    if (alldata)
                        ff = null;
                    if (ff) {
                        if (ds.$params.$filter) {
                            var ofilter = ds.$params.$filter;
                            ds.$params.$filter = {
                                $left: ff,
                                $op: 'and',
                                $right: ofilter
                            };
                        }
                        else
                            ds.$params.$filter = ff;
                    }
                    if (options.findFirst) {
                        if (!alldata)
                            ds.$params.$top = 1;
                        ds.$params.nocount = true;
                    }
                }
                var promise = null;
                if (ds.$type === 'relation') {
                    data = { documents: data.getValue(ds.$params.relation).model(false) || [] };
                    promise = _utils.Promise.resolve(data);
                }
                else
                    promise = _data.execData(ds, data, null);
                if (ondata) {
                    if (promise)
                        promise.then(ondata);
                    else
                        ondata(null);
                }
                else
                    return promise;
            },
            remoteSearch: function (localSearch, lookup) {
                return lookup.mapping ? lookup.mapping[localSearch] : localSearch;
            },
            lastSegment: function (bind, display) {
                var segments = bind.split('.');
                var ls = segments.pop();
                if (display && display !== bind) {
                    ls = display.substring(segments.join('.').length);
                }
                return ls;
            },
            hasProperty: function (propertyName, schema, rootSchema) {
                var segments = propertyName.split('.');
                var cs = schema;
                for (var _i = 0, segments_1 = segments; _i < segments_1.length; _i++) {
                    var segment = segments_1[_i];
                    if (segment.charAt(0) === '$')
                        continue;
                    if (!cs.properties)
                        return false;
                    cs = cs.properties[segment];
                    if (!cs)
                        return false;
                    if (!cs.type && cs.$ref)
                        cs = _expandRefProp(cs, rootSchema);
                    if (cs.type === 'array') {
                        cs = _expandRefProp(cs.items, rootSchema);
                    }
                }
                return true;
            },
            findFirst: function (value, searchField, ldata) {
                if (!value || !ldata)
                    return null;
                var sv = value.toLocaleLowerCase();
                var vlen = sv.length;
                var firstContains = null;
                for (var i = 0, len = ldata.length; i < len; i++) {
                    var val = (ldata[i][searchField] || '').toLowerCase();
                    if (val.substr(0, vlen) === sv) {
                        return { item: ldata[i], index: i };
                    }
                    if (!firstContains && val.indexOf(sv) >= 0) {
                        firstContains = { item: ldata[i], index: i };
                    }
                }
                return firstContains;
            },
            _states: ['$states', '$links'],
            isMetaProp: function (pn) {
                return (pn.substr(0, 2) === "$$");
            },
            isMeta: function (bind) {
                var len = '$$meta-'.length;
                if (bind.substr(0, '$$meta-'.length) === '$$meta-') {
                    return { widget: bind.substr(len) };
                }
                else
                    return null;
            },
            getLookup: function (path, lookupName, schema, rootSchema) {
                var segments = path.split('.');
                segments.pop();
                var cs = schema;
                for (var i = 0, len = segments.length; i < len; i++) {
                    if (!cs)
                        break;
                    var s = segments[i];
                    if (_sutils.arrayProps.indexOf(s) >= 0)
                        continue;
                    cs = cs.properties ? cs.properties[s] : null;
                    if (cs && !cs.type && cs.$ref)
                        cs = _expandRefProp(cs, rootSchema);
                    if (cs && cs.type === "array")
                        cs = _expandRefProp(cs.items, rootSchema);
                }
                if (cs && cs.lookups)
                    return _sutils.checkLookup(cs.lookups[lookupName]);
                return null;
            },
            getSchema: function (path, schema, rootSchema, expandArray) {
                if (!path)
                    return schema;
                var segments = path.split('.');
                var cs = schema, link = false;
                for (var i = 0, len = segments.length; i < len; i++) {
                    if (!cs)
                        break;
                    var s = segments[i];
                    if (!cs.type && cs.$ref)
                        cs = _expandRefProp(cs, rootSchema);
                    if ((cs.type == "array") && (_sutils.arrayProps.indexOf(s) >= 0)) {
                        // $item, $new 
                        cs = _expandRefProp(cs.items, rootSchema);
                    }
                    else {
                        if (s === "$links") {
                            cs = cs.links;
                            link = true;
                        }
                        else {
                            if (link) {
                                link = false;
                                cs = cs[s];
                                cs.isLink = true;
                                break;
                            }
                            else {
                                cs = cs.properties ? cs.properties[s] : null;
                                if (!cs && i === (len - 1)) {
                                    if (s === Observable.INDEX_FIELD_NAME) {
                                        return { type: 'integer', title: "#", capabilities: null };
                                    }
                                    else if (s === Observable.SELECTED_FIELD_NAME) {
                                        return { type: 'boolean', title: _locale.ui.Selected, capabilities: null };
                                    }
                                    else if (s === Observable.EXPANDED_FIELD_NAME) {
                                        return { type: 'integer', title: '', capabilities: null };
                                    }
                                }
                            }
                        }
                    }
                }
                if (expandArray && cs && cs.type === 'array' && cs.items)
                    cs = _expandRefProp(cs.items, rootSchema);
                return cs;
            },
            states: ['isHidden', 'isDisabled', 'isReadOnly', 'isMandatory', 'style'],
            statesAndErrors: ['isHidden', 'isDisabled', 'isReadOnly', 'isMandatory', 'errors', 'filter', 'symbol', 'decimals', 'style', 'search', 'selected', 'columns', 'orderBy', 'filter'],
            linksStates: ['isHidden', 'isDisabled'],
            isLink: function (path) {
                return (path.split('.').indexOf('$links') >= 0);
            },
            _isMoney: function (schema) {
                return _sutils.isNumber(schema) && schema.format == "money";
            },
            _internalExtractEnums: function (schema, rootSchema, enums, names) {
                if (schema.name) {
                    if (names.indexOf(schema.name) >= 0)
                        return;
                    names.push(schema.name);
                }
                var _addEnum = function (enumref, parentSchema) {
                    parentSchema = parentSchema || schema;
                    if (parentSchema.enums && parentSchema.enums[enumref]) {
                        var ec = parentSchema.enums[enumref].type || "default";
                        enums[ec] = enums[ec] || {};
                        enums[ec][enumref] = parentSchema.enums[enumref];
                    }
                    else {
                        //$enumref = "Satut.codif"
                        var et = enumref.split('.');
                        if (et.length === 2) {
                            enums[et[1]] = enums[et[1]] || {};
                            enums[et[1]][et[0]] = { type: et[1] };
                        }
                    }
                };
                if (schema.lookups)
                    Object.keys(schema.lookups).forEach(function (pn) {
                        var ll = schema.lookups[pn];
                        if (ll.data.$type === "enum" && ll.data.$enumref) {
                            _addEnum(ll.data.$enumref);
                        }
                    });
                Object.keys(schema.properties).forEach(function (pn) {
                    var cs = schema.properties[pn];
                    if (!cs.type && cs.$ref)
                        cs = _expandRefProp(cs, rootSchema);
                    if (!_sutils.inModel(cs, rootSchema))
                        return;
                    if (_sutils.isCompositionRef(cs, rootSchema)) {
                        _sutils._internalExtractEnums(cs, rootSchema, enums, names);
                    }
                    else if (_sutils.isCompositionList(cs, rootSchema, true)) {
                        if (cs.items.$ref) {
                            if (names.indexOf(cs.items.$ref) >= 0)
                                return;
                            names.push(cs.items.$ref);
                        }
                        _sutils._internalExtractEnums(_expandRefProp(cs.items, rootSchema), rootSchema, enums, names);
                    }
                    else {
                        var ps = schema;
                        if (_sutils.isSimpleList(cs, rootSchema)) {
                            cs = _expandRefProp(cs.items, rootSchema);
                            ps = cs;
                        }
                        if (cs.$enumref) {
                            _addEnum(cs.$enumref, ps);
                        }
                    }
                });
            },
            _extractEnums: function (schema, enums) {
                return _sutils._internalExtractEnums(schema, schema, enums, []);
            },
            _fillEnumsFromData: function (schema, rootSchema, data, names) {
                schema._id = schema._id || _utils.allocID();
                if (names.indexOf(schema._id) >= 0)
                    return;
                names.push(schema._id);
                Object.keys(schema.properties || {}).forEach(function (pn) {
                    var cs = schema.properties[pn];
                    if (cs.$ref && !cs.type)
                        cs = _expandRefProp(cs, rootSchema);
                    if (!_sutils.inModel(cs, rootSchema))
                        return;
                    if (_sutils.isCompositionRef(cs, rootSchema)) {
                        _sutils._fillEnumsFromData(cs, rootSchema, data, names);
                    }
                    else if (_sutils.isCompositionList(cs, rootSchema, true)) {
                        _sutils._fillEnumsFromData(_expandRefProp(cs.items, rootSchema), rootSchema, data, names);
                    }
                    else {
                        var parentSchema = schema;
                        if (_sutils.isSimpleList(cs, rootSchema)) {
                            cs = _expandRefProp(cs.items, rootSchema);
                            parentSchema = cs;
                        }
                        if (cs.enum && !Array.isArray(cs.enum) && cs.enum.arrayProperty && cs.enum.code && cs.enum.title) {
                            var cd = _utils.getValue(data, cs.enum.arrayProperty);
                            var enums_1 = [];
                            var enumsNames_1 = [];
                            if (Array.isArray(cd)) {
                                cd.forEach(function (item) {
                                    enums_1.push(item[cs.enum.code]);
                                    enumsNames_1.push(item[cs.enum.title]);
                                });
                            }
                            cs.enum = enums_1;
                            cs.enumNames = enumsNames_1;
                        }
                    }
                });
            },
            fillEnumsFromData: function (schema, data) {
                _sutils._fillEnumsFromData(schema, schema, data, []);
            },
            _fillEnums: function (schema, enums) {
                _sutils._internalFillEnums(schema, schema, enums, []);
            },
            _internalFillEnums: function (schema, rootSchema, enums, names) {
                if (schema.name) {
                    if (names.indexOf(schema.name) >= 0)
                        return;
                    names.push(schema.name);
                }
                if (schema.lookups)
                    Object.keys(schema.lookups).forEach(function (pn) {
                        var ll = schema.lookups[pn];
                        if (ll.data.$type == 'enum' && ll.data.$enumref) {
                            var ear = ll.data.$enumref.split('.');
                            var el = ear.length === 2 ? enums[ear[1]] : (enums[schema.enums[ll.data.$enumref].type || "default"]);
                            var en = ear.length === 2 ? ear[0] : ll.data.$enumref;
                            if (el) {
                                ll.data.$value = [];
                                var enumValues_1 = el[en];
                                enumValues_1.enum.forEach(function (ec, index) {
                                    var item = { code: ec, title: enumValues_1.enumNames[index] };
                                    if (enumValues_1.fields)
                                        _utils.extend(item, enumValues_1.fields[index]);
                                    ll.data.$value.push(item);
                                });
                            }
                        }
                    });
                Object.keys(schema.properties).forEach(function (pn) {
                    var cs = schema.properties[pn];
                    if (cs.$ref && !cs.type)
                        cs = _expandRefProp(cs.items, rootSchema);
                    if (!_sutils.inModel(cs, rootSchema))
                        return;
                    if (_sutils.isCompositionRef(cs, rootSchema)) {
                        _sutils._internalFillEnums(cs, rootSchema, enums, names);
                    }
                    else if (_sutils.isCompositionList(cs, rootSchema, true)) {
                        _sutils._internalFillEnums(_expandRefProp(cs.items, rootSchema), rootSchema, enums, names);
                    }
                    else {
                        var parentSchema = schema;
                        if (_sutils.isSimpleList(cs, rootSchema)) {
                            cs = _expandRefProp(cs.items, rootSchema);
                            parentSchema = cs;
                        }
                        if (cs.$enumref) {
                            var ear = cs.$enumref.split('.');
                            if ((parentSchema.enums && parentSchema.enums[cs.$enumref]) || ear.length === 2) {
                                var el = ear.length === 2 ? enums[ear[1]] : enums[parentSchema.enums[cs.$enumref].type || "default"];
                                var en = ear.length === 2 ? ear[0] : cs.$enumref;
                                if (el) {
                                    var enumValues = el[en];
                                    if (enumValues) {
                                        cs.enum = enumValues.enum;
                                        cs.enumNames = enumValues.enumNames;
                                        cs.filters = enumValues.filters;
                                    }
                                }
                            }
                        }
                    }
                });
            },
            loadEnums: function (schema) {
                var allEnums = {}, hasEnums = false;
                _sutils._extractEnums(schema, allEnums);
                var res = Object.keys(allEnums).map(function (enumType) {
                    var cem = _em.get(enumType);
                    if (!cem)
                        throw "Invalid enum type: " + enumType;
                    return cem.promise(allEnums[enumType], enumType);
                });
                if (!res.length)
                    return null;
                return res;
            },
            arrayProps: ['$item', '$new', '$selected'],
            init: function (schema, rootSchema, context, value, iCreate, opts) {
                if (value === null)
                    return value;
                var a = value || {};
                if (a._schema_initialized)
                    return a;
                a._schema_initialized = true;
                a.$create = iCreate;
                a.$states = a.$states || {};
                Object.keys(schema.properties).forEach(function (pn) {
                    var cs = schema.properties[pn];
                    if (!cs.type && cs.$ref)
                        cs = _expandRefProp(cs, rootSchema);
                    if (!_sutils.inModel(cs, rootSchema))
                        return;
                    var isMeta = _sutils.isMetaProp(pn);
                    var state = schema.states ? schema.states[pn] : null;
                    var ns = a.$states[pn] = (a.$states[pn] || {});
                    if (!isMeta) {
                        if (state) {
                            Object.keys(state).forEach(function (sn) {
                                if (ns[sn] === undefined) {
                                    ns[sn] = state[sn];
                                }
                            });
                        }
                    }
                    if (_sutils.isCompositionRef(cs, rootSchema)) {
                        a[pn] = _sutils.init(cs, rootSchema, context, a[pn] === null ? null : a[pn] || {}, iCreate, { children: opts.children, select: opts.select });
                    }
                    else if (_sutils.isCompositionList(cs, rootSchema, false)) {
                        a[pn] = a[pn] || [];
                        var doSelect_1 = opts.select && (!cs.children || cs.children !== opts.children);
                        var co_1 = { children: cs.children, select: opts.select };
                        var pitems_2 = _expandRefProp(cs.items, rootSchema);
                        var firstItem_1 = null;
                        var listStates = a.$states ? a.$states[pn] : null;
                        var selectedItems_1 = null;
                        if (listStates && listStates.selected)
                            selectedItems_1 = JSON.parse('[' + listStates.selected + ']');
                        a[pn].forEach(function (item, index) {
                            if (item.id && selectedItems_1 && selectedItems_1.indexOf(item.id) >= 0) {
                                item.$select = true;
                            }
                            if (doSelect_1 && index === 0 && item.$select === undefined) {
                                firstItem_1 = item;
                            }
                            if (item.$select) {
                                firstItem_1 = null;
                            }
                            _sutils.init(pitems_2, rootSchema, context, item, iCreate, co_1);
                        });
                        if (firstItem_1 && !cs.syncSelected && cs.autoSelect !== false) {
                            firstItem_1.$select = true;
                        }
                        if (listStates) {
                            delete listStates.selected;
                        }
                    }
                    else if (_sutils.isSimpleList(cs, rootSchema)) {
                        //a[pn] = a[pn] || [];
                    }
                    else if (_sutils.isList(cs, rootSchema)) {
                        //a[pn] = a[pn] || [];
                    }
                    else {
                        if (iCreate) {
                            if (a[pn] === undefined) {
                                if (cs.default !== undefined && cs.default !== null)
                                    a[pn] = _sutils._getDefault(cs.default);
                                else if (cs.enum)
                                    a[pn] = cs.enum[0];
                                else {
                                    switch (cs.type) {
                                        case "number":
                                        case "integer":
                                            if (cs.default !== undefined) {
                                                a[pn] = cs.default;
                                            }
                                            //if (cs.default !== null)
                                            //    a[pn] = 0;
                                            break;
                                    }
                                }
                            }
                        }
                    }
                });
                return a;
            },
            //
            isCompositionRef: function (prop, rootSchema) {
                if (!prop.type && prop.$ref)
                    prop = _expandRefProp(prop, rootSchema);
                return prop.type === "object" && !prop.$reference;
            },
            isRef: function (prop, rootSchema) {
                return prop.type === "object" && prop.$reference;
            },
            isList: function (prop, rootSchema) {
                if (!prop.type && prop.$ref)
                    prop = _expandRefProp(prop, rootSchema);
                return prop.type === "array" && prop.$reference;
            },
            isCompositionList: function (prop, rootSchema, followRefs) {
                if (!prop.type && prop.$ref)
                    prop = _expandRefProp(prop, rootSchema);
                if (prop.type === "array" && prop.items) {
                    var pitems = _expandRefProp(prop.items, rootSchema);
                    return (pitems.type === "object" || pitems.type === "array") && (!prop.$reference || (followRefs && prop.$reference));
                }
                else
                    return false;
            },
            isSimpleList: function (prop, rootSchema) {
                if (!prop.type && prop.$ref)
                    prop = _expandRefProp(prop, rootSchema);
                if (prop.type === "array" && prop.items) {
                    var pitems = _expandRefProp(prop.items, rootSchema);
                    return (pitems.type !== "object" || pitems.type === "array") && !prop.$reference;
                }
                else
                    return false;
            },
            inModel: function (prop, rootSchema) {
                if (_sutils.isRef(prop, rootSchema))
                    return false;
                return true;
            },
            formatNumber: function (schema, value) {
                if (schema.format == "money")
                    return _ulocale.money(value, false);
                return _ulocale.decimal(value, schema.decimals || 0, null);
            },
            _title: function (title, locale) {
                if (locale)
                    return _ulocale.tt(title, locale);
                return title;
            },
            canSort: function (schema) {
                if (schema) {
                    if (schema.isLink)
                        return false;
                    if (schema.hidden)
                        return false;
                    _parseCapabilities(schema);
                    return schema.features.sortable;
                }
                return false;
            },
            canShowField: function (schema) {
                if (schema.hidden)
                    return false;
                return true;
            },
            canFilter: function (schema) {
                if (schema) {
                    if (schema.hidden)
                        return false;
                    _parseCapabilities(schema);
                    return schema.features.filtrable;
                }
                return false;
            },
            canSearch: function (schema) {
                if (schema) {
                    if (schema.hidden)
                        return false;
                    _parseCapabilities(schema);
                    return schema.features.searchable;
                }
                return false;
            },
            checkNumber: function (value, schema, locale, errors) {
                var res = true;
                value = value || 0;
                if (schema.exclusiveMinimum) {
                    if (schema.minimum != undefined && value <= schema.minimum) {
                        errors.push({ message: _utils.format(_localeSchema.minNumberExclusive, _sutils._title(schema.title, locale), _sutils.formatNumber(schema, schema.minimum)) });
                        res = false;
                    }
                }
                else {
                    if (schema.minimum != undefined && value < schema.minimum) {
                        errors.push({ message: _utils.format(_localeSchema.minNumber, _sutils._title(schema.title, locale), _sutils.formatNumber(schema, schema.minimum)) });
                        res = false;
                    }
                }
                if (schema.exclusiveMaximum) {
                    if (schema.maximum != undefined && value >= schema.maximum) {
                        errors.push({ message: _utils.format(_localeSchema.maxNumberExclusive, _sutils._title(schema.title, locale), _sutils.formatNumber(schema, schema.maximum)) });
                        res = false;
                    }
                }
                else {
                    if (schema.maximum != undefined && value > schema.maximum) {
                        errors.push({ message: _utils.format(_localeSchema.maxNumber, _sutils._title(schema.title, locale), _sutils.formatNumber(schema, schema.maximum)) });
                        res = false;
                    }
                }
                return res;
            },
            _validateEmail: function (email, error) {
                var re = /^([\w-]+(?:\.[\w-]+)*)@((?:[\w-]+\.)*\w[\w-]{0,66})\.([a-z]{2,6}(?:\.[a-z]{2})?)$/i;
                return re.test(email);
            },
            _validateJson: function (value, error) {
                try {
                    JSON.parse(value);
                }
                catch (ex) {
                    error.ex = ex;
                    return false;
                }
                return true;
            },
            checkString: function (value, state, schema, locale, errors) {
                var res = true;
                var v = (value || '');
                if (schema.minLength && v.length < schema.minLength) {
                    errors.push({ message: _utils.format(_localeSchema.minLength, _sutils._title(schema.title, locale), schema.minLength) });
                    res = false;
                }
                if (state.isMandatory) {
                    if (v === '') {
                        errors.push({ message: _utils.format(_localeSchema.required, _sutils._title(schema.title, locale)) });
                        res = false;
                    }
                }
                if (schema.format) {
                    if (schema.format === "email") {
                        if (value && !_sutils._validateEmail(value, {})) {
                            errors.push({ message: _localeSchema.invalidEmail });
                            res = false;
                        }
                    }
                    else if (schema.format === "json") {
                        var error = {};
                        if (value && !_sutils._validateJson(value, error)) {
                            errors.push({ message: error.ex.message });
                            res = false;
                        }
                    }
                }
                return res;
            },
            validatePassword: function (orig, value, schema, state, locale, errors) {
                var res = true;
                if (state.isHidden || state.isDisabled)
                    return res;
                if (orig !== value) {
                    errors.push({ message: _localeSchema.passwordMismatch });
                    res = false;
                }
                return res;
            },
            validateSchema: function (value, schema, state, locale, errors, glbErrors) {
                var res = true;
                if (!schema)
                    return;
                if (state) {
                    if (state.isHidden || state.isDisabled)
                        return res;
                }
                switch (schema.type) {
                    case "number":
                    case "integer":
                        res = _sutils.checkNumber(value, schema, locale, errors);
                        break;
                    case "string":
                        res = _sutils.checkString(value, state, schema, locale, errors);
                        break;
                }
                return res;
            },
            loadEnumsPromise: function (schema) {
                var enums = _sutils.loadEnums(schema);
                if (!enums) {
                    return new _utils.Promise(function (resolve, reject) {
                        resolve(schema);
                    });
                }
                return _utils.Promise.all(enums).then(function (values) {
                    var allEnums = {};
                    values.forEach(function (ev) {
                        allEnums[ev.type] = ev.enums;
                    });
                    _sutils._fillEnums(schema, allEnums);
                    return schema;
                });
            },
            loadSchemaRefs: function (schema, ldata, layout, parentContext, after) {
                if (!schema)
                    return after(null, null);
                var exec = function () {
                    try {
                        _sutils.expandSchema$Ref(schema);
                        // console.log(JSON.stringify(schema, null, 2))
                        var rulesCount_1 = -1;
                        var enums = _sutils.loadEnums(schema);
                        var promises = enums ? enums : [];
                        var enumsCount_1 = enums ? enums.length : 0;
                        var ctx = ldata;
                        if (parentContext) {
                            ctx = ctx || {};
                            ctx.model = parentContext;
                        }
                        var mainData = _dutils.loadMainData({ datasets: layout.datasets, transform: layout.transform, context: ctx }, true);
                        if (mainData)
                            promises.push(mainData);
                        var dataCount_1 = mainData ? enumsCount_1 + 1 : 0;
                        var names_1 = _sutils.extractClassNames(schema, schema);
                        if (names_1) {
                            if (schema.loadRules && Phoenix.external.ruleLoaderHandler) {
                                promises.push(_external.ruleLoaderHandler(Object.keys(names_1)));
                                rulesCount_1 = promises.length - 1;
                            }
                        }
                        if (!promises.length)
                            return after(null, ldata);
                        _dom.processing(true);
                        _utils.Promise.all(promises).then(function (values) {
                            _dom.processing(false);
                            var allEnums = {};
                            var serverRules = null;
                            values.forEach(function (ev, index) {
                                if (index < enumsCount_1) {
                                    allEnums[ev.type] = ev.enums;
                                }
                                else if (index < dataCount_1) {
                                    $.extend(ldata, ev);
                                }
                                if (index === rulesCount_1)
                                    serverRules = values[rulesCount_1];
                            });
                            if (schema.rules) {
                                if (serverRules)
                                    serverRules = serverRules.concat(schema.rules);
                                else
                                    serverRules = schema.rules;
                            }
                            if (serverRules && serverRules.length) {
                                var rulesCfg = _sutils.expandRules(serverRules, names_1);
                                schema.rules = rulesCfg.rulesbyClass;
                                schema.rulesMap = rulesCfg.rulesById;
                            }
                            else
                                delete schema.rules;
                            if (enumsCount_1) {
                                _sutils._fillEnums(schema, allEnums);
                            }
                            after(null, ldata);
                        }).catch(function (ex) {
                            _dom.processing(false);
                            after(ex, null);
                        });
                    }
                    catch (ex) {
                        after(ex, null);
                    }
                };
                var before = layout.before ? _customData.get(layout.before) : null;
                if (before) {
                    before().then(function () {
                        exec();
                    }).catch(function (e) {
                        after(e, null);
                    });
                }
                else
                    exec();
            },
            stateProps: function (schema) {
                if (schema.enum && schema.filters) {
                    return ['filter'];
                }
                else if (schema.items && schema.items.enum && schema.items.filters) {
                    return ['filter'];
                }
                else if (_sutils.isNumber(schema)) {
                    return ['symbol', 'decimals'];
                }
                else if (schema.type === 'array' && schema.items && schema.items.type === 'object' && !schema.items.$reference) {
                    return ['orderBy', 'selected', 'filter', 'search', 'columns'];
                }
            },
            isPassword: function (schema) {
                return schema.type === "string" && schema.format === "password";
            },
            isDate: function (schema) {
                return schema.type === "string" && schema.format === "date";
            },
            isDateTime: function (schema) {
                return schema.type === "string" && schema.format === "date-time";
            },
            isBoolean: function (schema) {
                return schema.type === "boolean";
            },
            isSelectField: function (fieldName) {
                return fieldName === Observable.SELECTED_FIELD_NAME;
            },
            isExpandField: function (fieldName) {
                return fieldName === Observable.EXPANDED_FIELD_NAME;
            },
            isNumber: function (schema) {
                return (schema.type === 'number' || schema.type === 'integer');
            },
            isText: function (schema) {
                return schema.type === 'string' && (schema.format === 'json' || schema.format === 'memo');
            },
            isMoney: function (schema) {
                return _sutils.isNumber(schema) && schema.format === "money";
            },
            hasSymbol: function (schema) {
                return _sutils.isNumber(schema) && (schema.format === "money" || schema.format === 'rate' || schema.symbol);
            },
            text2Value: function (textValue, schema, state) {
                if (_sutils.isNumber(schema)) {
                    var dec = state.decimals;
                    var float = typeof textValue === 'number' ? textValue : _ulocale.string2Float((textValue || ''));
                    float = parseFloat(float.toFixed(dec));
                    return float;
                }
                else if (schema.type === 'string') {
                    if (textValue === '' || textValue === null)
                        return undefined;
                }
                return textValue;
            },
            value2Text: function (value, schema, state) {
                var that = this;
                if (_sutils.isNumber(schema)) {
                    return _ulocale.decimal(value, state.decimals, null);
                }
                else
                    return value || '';
            },
            expand$Ref: function (cs, rootSchema) {
                return _expandRefProp(cs, rootSchema);
            },
            parsePath: function (base, propName, expandingProperty) {
                var s = propName.substr(base.length + 1);
                var a = s.split('.');
                var start = a.shift();
                if (!expandingProperty)
                    return base + '.' + start;
                s = a.join('.');
                var res = [base, start];
                var search = expandingProperty + '.$item.';
                var sl = search.length;
                var searchSelected = expandingProperty + '.$selected.';
                var ssl = search.length;
                while (true) {
                    if (s.substr(0, sl) === search) {
                        res.push(expandingProperty + '.$item');
                        s = s.substr(sl);
                    }
                    else if (s.substr(0, ssl) === searchSelected) {
                        res.push(expandingProperty + '.$selected');
                        s = s.substr(ssl);
                    }
                    else
                        break;
                }
                if (s === expandingProperty)
                    res.push(s);
                return res.join('.');
            },
            registerValidator: _rv.register,
            getValidator: _rv.get,
            registerEnumManager: _em.register,
            getEnumManager: _em.get
        };
        var _dutils = {
            extractDatasets: function (config, onlyAutoOpen) {
                if (config.datasets) {
                    var datasets = Object.keys(config.datasets);
                    if (datasets.length) {
                        var res_3 = [];
                        datasets.forEach(function (dsName) {
                            var ds = config.datasets[dsName];
                            if (onlyAutoOpen && ds.$autoOpen === false)
                                return;
                            var dc = $.extend({}, ds, true);
                            dc.name = dsName;
                            res_3.push(dc);
                        });
                        return res_3;
                    }
                }
                return null;
            },
            isQuery: function (ds) {
                return ((ds.$type === 'odata' || ds.$type === 'relation') && (!ds.$method || ds.$method.toUpperCase() === 'GET') && !ds.$params.hasOwnProperty('$entityId'));
            },
            isCreateOrUpdate: function (ds) {
                return ds.$type === "odata" && ds.$params.hasOwnProperty('$entityId');
            },
            extractMainDataSource: function (config) {
                var main = null;
                if (config.datasets) {
                    var datasets = Object.keys(config.datasets);
                    if (datasets.length) {
                        datasets.forEach(function (dsName) {
                            if (config.datasets[dsName].$main) {
                                main = $.extend({}, config.datasets[dsName], true);
                                main.name = dsName;
                            }
                        });
                        if (!main) {
                            main = $.extend({}, config.datasets[datasets[0]], true);
                            main.name = datasets[0];
                        }
                    }
                }
                return main;
            },
            datasetsAsPromise: function (ds, transform, context) {
                return new _utils.Promise(function (resolve, reject) {
                    var result = {};
                    _dom.processing(true);
                    var main = null;
                    var children = [];
                    ds.forEach(function (ce) {
                        if (ce.$main)
                            main = ce;
                    });
                    if (!main) {
                        main = ds[0];
                        main.$main = true;
                    }
                    if (main.children) {
                        Object.keys(main.children).forEach(function (name) {
                            main.children[name].name = name;
                            children.push(main.children[name]);
                        });
                    }
                    if (_dutils.isCreateOrUpdate(main)) {
                        main.$create = main.$create || {};
                    }
                    _dsPlugin.executeDatasets(ds, context || {}, result, {}, function (sended, ex) {
                        _dom.processing(false);
                        if (!ex) {
                            var mainData_1 = $.extend({}, result[main.name] || {});
                            mainData_1.$datasets = result;
                            if (children && children.length) {
                                _dom.processing(true);
                                var cresult_1 = {};
                                return _dsPlugin.executeDatasets(children, mainData_1, cresult_1, {}, function (sended, ex) {
                                    delete mainData_1.$datasets;
                                    mainData_1 = undefined;
                                    _dom.processing(false);
                                    Object.keys(cresult_1).forEach(function (name) {
                                        result[name] = cresult_1[name];
                                    });
                                    _data.execOutputData(main, result);
                                    if (transform) {
                                        var hnd = _customData.get('datasets.transform.' + transform);
                                        if (hnd)
                                            hnd(result);
                                    }
                                    resolve(result[main.name]);
                                }, false);
                            }
                            else {
                                _data.execOutputData(main, result);
                                if (transform) {
                                    var hnd = _customData.get('datasets.transform.' + transform);
                                    if (hnd)
                                        hnd(result);
                                }
                                resolve(result[main.name]);
                            }
                        }
                        else {
                            reject(ex);
                        }
                    });
                });
            },
            datasetAsPromise: function (ds, ldata) {
                return new _utils.Promise(function (resolve, reject) {
                    var result = {};
                    ds.name = ds.name || 'data';
                    _dom.processing(true);
                    _dsPlugin.executeDatasets([ds], ldata || {}, result, {}, function (sended, ex) {
                        _dom.processing(false);
                        if (!ex) {
                            resolve(result[ds.name]);
                        }
                        else {
                            reject(ex);
                        }
                    });
                });
            },
            loadMainData: function (config, onlyAutoOpen) {
                var ds = _dutils.extractDatasets(config, onlyAutoOpen);
                if (ds && ds.length)
                    return _dutils.datasetsAsPromise(ds, config.transform, config.context);
                return _utils.Promise.resolve(null);
            },
            dsConfig: function (datasets, prop, isQuery) {
                var dsName = prop.$reference;
                if (datasets && dsName) {
                    var keys = Object.keys(datasets);
                    if (keys.length === 1) {
                        var ds = datasets[keys[0]];
                        ;
                        ds.$main = true;
                        ds.name = keys[0];
                        return ds;
                    }
                    if (typeof dsName === 'string') {
                        var res = datasets[dsName];
                        res.name = dsName;
                        return res;
                    }
                }
                return null;
            },
        };
        var _defEnumManager = {
            _enums: {},
            promise: function (enums, enumType) {
                var res = {};
                Object.keys(enums).forEach(function (enumName) {
                    var ce = enums[enumName];
                    if (!_defEnumManager._enums[enumName]) {
                        _defEnumManager._enums[enumName] = {
                            enum: ce.enum,
                            enumNames: ce.enumNames,
                            filters: ce.filters
                        };
                    }
                    res[enumName] = _defEnumManager._enums[enumName];
                });
                return new _utils.Promise(function (resolve, reject) {
                    resolve({ type: enumType, enums: res });
                });
            }
        };
        _sutils.registerEnumManager("default", _defEnumManager);
        Observable.SchemaUtils = _sutils;
        Observable.DataUtils = _dutils;
    })(Observable = Phoenix.Observable || (Phoenix.Observable = {}));
})(Phoenix || (Phoenix = {}));
/// <reference path="../../../core/core-refs.ts" />
/// <reference path="../../page.control.ts" />
/// <reference path="../schema.data.ts" />
var Phoenix;
(function (Phoenix) {
    var _p = Phoenix, _pagecontrol = _p.pagecontrol, _sutils = _p.Observable.SchemaUtils, _utils = _p.utils, _dom = _p.dom;
    var formdropitems;
    (function (formdropitems) {
        var DropItems = /** @class */ (function () {
            function DropItems($parent, $input, options) {
                this.opened = false;
                var that = this;
                that.page = _pagecontrol.Page();
                that.opened = false;
                that.currentList = null;
                that.$parent = $parent;
                that._checkOptions(options);
                that.options = options;
                that.$input = $input;
                that.keys = _sutils.pkFields(that.options.primaryKey);
            }
            DropItems.prototype.click = function (event) {
                var that = this, _bootstrap4 = _p.bootstrap4;
                var li = _dom.parentByTag(that.$element.get(0), event.target, _bootstrap4 ? 'a' : 'li');
                if (li) {
                    var pk = li['pk'];
                    if (pk) {
                        var map = that._map();
                        var sel = that._selectByPk(pk, map);
                        if (sel)
                            that._doSelect(sel, true);
                    }
                }
            };
            DropItems.prototype.inMenu = function (target) {
                var that = this;
                if (target && that.$element) {
                    return _dom.isChildOf(that.$element.get(0), target);
                }
                return false;
            };
            DropItems._itemHeight = function () {
                var that = this;
                if (!that.itemHeight) {
                    var _bootstrap4 = _p.bootstrap4;
                    var p = void 0;
                    if (_bootstrap4)
                        p = $('<div class="dropdown-menu bs-block" tabindex="0" style="visibility:hidden;"><a tabindex="-1" class="dropdown-item" href="#">A</a></div>').get(0);
                    else
                        p = $('<ul class="dropdown-menu bs-block" tabindex="0" style="visibility:hidden;"><li tabindex="-1"><a tabindex="-1" href="#">A</a></li></ul>').get(0);
                    document.body.appendChild(p);
                    var li = p.firstChild;
                    ;
                    that.itemHeight = li.offsetHeight;
                    that.deltaHeight = p.offsetHeight - that.itemHeight;
                    document.body.removeChild(p);
                }
                return this.itemHeight;
            };
            DropItems.prototype._checkOptions = function (options) {
                var that = this;
                if (!options.primaryKey)
                    throw new Error('Invalid options no primaryKey.');
                if (!options.search)
                    throw new Error('Invalid options search field.');
                options.display = options.display || options.search;
                options.maxItems = options.maxItems || 8;
            };
            DropItems.prototype._renderContent = function () {
                var that = this, _bootstrap4 = _p.bootstrap4;
                if (!that.$element) {
                    //XXxxxx
                    that.$element = _bootstrap4 ? $('<div class="dropdown-menu"></div>') : $('<ul class="dropdown-menu"></ul>');
                    that.$parent.get(0).appendChild(that.$element.get(0));
                }
            };
            DropItems.prototype._renderElements = function () {
                var that = this, _bootstrap4 = _p.bootstrap4;
                if (!that.$element)
                    that._renderContent();
                if (that.currentList) {
                    var frag_2 = document.createDocumentFragment();
                    var e = that.$element.get(0);
                    that.currentList.forEach(function (item) {
                        var dId = _sutils.pk2Id(_sutils.extractPkValue(item, that.keys), that.keys);
                        var li;
                        if (_bootstrap4)
                            li = $('<a tabindex="-1" class="dropdown-item" href="#">' + _utils.escapeHtml(item[that.options.display]) + '</a>').get(0);
                        else
                            li = $('<li class="dropdown-item" tabindex="-1"><a tabindex="-1" href="#">' + _utils.escapeHtml(item[that.options.display]) + '</a></li>').get(0);
                        li['pk'] = dId;
                        _dom.append(frag_2, li);
                    });
                    _dom.empty(e);
                    _dom.append(e, frag_2);
                }
            };
            DropItems.prototype._afterHide = function (doFocus) {
                var that = this;
                that.opened = false;
                if (that.page)
                    that.page.setPopup(null);
                if (that.$input)
                    that.$input.get(0).focus();
            };
            DropItems.prototype.hide = function (target) {
                var that = this;
                if (!that.opened)
                    return;
                if (that.$element) {
                    var e = that.$element.get(0);
                    _dom.removeClass(e, 'bs-block');
                    that.opened = false;
                    if (that.page)
                        that.page.setPopup(null);
                }
            };
            DropItems.prototype._selectByListIndex = function (map, li) {
                for (var i = 0, len = map.length; i < len; i++) {
                    var m = map[i];
                    if (m.listIndex === li)
                        return m;
                }
                return null;
            };
            DropItems.prototype._emptyHtmlList = function () {
                var that = this;
                if (that.$element) {
                    _dom.empty(that.$element.get(0));
                }
            };
            DropItems.prototype._show = function (selectedIndex) {
                var that = this;
                if (that.$element) {
                    var e = that.$element.get(0);
                    if (e.childNodes.length) {
                        var cs = -1;
                        var map = that._map();
                        var sel = that._findSeleted(map);
                        if (sel)
                            cs = sel.listIndex;
                        var parentWidth = that.$parent.get(0).offsetWidth;
                        e.style.minWidth = parentWidth + 'px';
                        e.style.maxHeight = (that.options.maxItems * DropItems._itemHeight() + DropItems.deltaHeight) + 'px';
                        e.style.overflowY = 'auto';
                        _dom.addClass(e, 'bs-block');
                        if (cs != selectedIndex) {
                            if (sel) {
                                var c = e.childNodes[sel.index];
                                _dom.removeClass(c, 'active');
                                sel.selected = false;
                            }
                            if (selectedIndex >= 0) {
                                sel = that._selectByListIndex(map, selectedIndex);
                                var ns = e.childNodes[sel.index];
                                _dom.addClass(ns, 'active');
                                sel.selected = true;
                                if (!that._isInView(ns, e))
                                    ns.scrollIntoView(true);
                            }
                            else {
                                e.scrollTop = 0;
                            }
                        }
                        if (that.page && that.page.popup != that)
                            that.page.setPopup(that);
                        _dom.addClass(e, 'bs-block');
                        that.opened = true;
                    }
                    else {
                        _dom.removeClass(e, 'bs-block');
                        that._afterHide(true);
                    }
                }
            };
            DropItems.prototype.triggerBlurred = function (event) {
                var that = this;
                that.hide(null);
            };
            DropItems.prototype.show = function (ldata, selectedIndex, ignoreNegativeSSelectedIndex) {
                var that = this;
                if (!ldata || !ldata.value || !ldata.value.length) {
                    that.currentList = null;
                    that.hide(null);
                    that._emptyHtmlList();
                    return;
                }
                else {
                    if (that.currentList == ldata.value) {
                        that._show(selectedIndex);
                    }
                    else {
                        that.currentList = ldata.value;
                        that._renderElements();
                        that._show(selectedIndex);
                    }
                }
            };
            DropItems.prototype._map = function () {
                var that = this, map = [], selectedFound = false;
                var e = that.$element.get(0);
                var li = 0;
                for (var i = 0, len = e.childNodes.length; i < len; i++) {
                    var c = e.childNodes[i];
                    if (c['pk']) {
                        var sel = selectedFound ? false : _dom.hasClass(c, 'active');
                        if (sel)
                            selectedFound = true;
                        map.push({ id: c['pk'], index: i, selected: sel, listIndex: li });
                        li++;
                    }
                }
                return map;
            };
            DropItems.prototype._selectByPk = function (id, map) {
                var that = this, res = null;
                var e = that.$element.get(0);
                map = map || that._map();
                for (var i = 0, len = map.length; i < len; i++) {
                    var m = map[i];
                    if (m.id === id) {
                        res = m;
                        if (m.selected)
                            break;
                        _dom.addClass(e.childNodes[m.index], 'active');
                        m.selected = true;
                    }
                    else if (m.selected) {
                        _dom.removeClass(e.childNodes[m.index], 'active');
                        m.selected = false;
                        if (res)
                            break;
                    }
                }
                return res;
            };
            DropItems.prototype._findSeleted = function (map) {
                var that = this;
                map = map || that._map();
                for (var i = 0, len = map.length; i < len; i++) {
                    var m = map[i];
                    if (m.selected)
                        return m;
                }
                return null;
            };
            DropItems.prototype._isInView = function (e, parent) {
                var that = this;
                var et = e.offsetTop, eh = e.offsetHeight;
                var st = parent.scrollTop, viewHeight = that.options.maxItems * DropItems._itemHeight();
                return et >= st && (st + viewHeight) >= (et + eh);
            };
            DropItems.prototype.move = function (value) {
                var that = this;
                if (that.$element && that.opened) {
                    var map = that._map(), e = that.$element.get(0);
                    var s = that._findSeleted(map);
                    var forward = value > 0, ii = void 0;
                    if (forward) {
                        if (s) {
                            ii = (value === 1000) ? (map.length - 1) : (map.indexOf(s) + value);
                            if (ii >= map.length) {
                                ii = map.length - 1;
                                if (map[ii].selected)
                                    return;
                            }
                        }
                        else
                            ii = 0;
                        if (ii < map.length) {
                            if (s) {
                                _dom.removeClass(e.childNodes[s.index], 'active');
                                s.selected = false;
                            }
                            var ns = e.childNodes[map[ii].index];
                            _dom.addClass(ns, 'active');
                            map[ii].selected = true;
                            if (ii == (map.length - 1)) {
                                e.scrollTop = ns.offsetTop + DropItems._itemHeight() + 1;
                            }
                            else {
                                if (!that._isInView(ns, e))
                                    ns.scrollIntoView(false);
                            }
                            that._doSelect(map[ii], false);
                        }
                    }
                    else {
                        if (s) {
                            ii = (value === -1000) ? 0 : (map.indexOf(s) + value);
                            if (ii < 0) {
                                ii = 0;
                                if (map[ii].selected)
                                    return;
                            }
                        }
                        else
                            ii = map.length - 1;
                        if (ii >= 0) {
                            if (s) {
                                _dom.removeClass(e.childNodes[s.index], 'active');
                                s.selected = false;
                            }
                            var ns = e.childNodes[map[ii].index];
                            _dom.addClass(ns, 'active');
                            map[ii].selected = true;
                            if (ii == 0)
                                e.scrollTop = 0;
                            else {
                                if (!that._isInView(ns, e))
                                    ns.scrollIntoView(true);
                            }
                            that._doSelect(map[ii], false);
                        }
                    }
                }
            };
            DropItems.prototype.select = function () {
                var that = this;
                if (that.$element && that.opened) {
                    var s = that._findSeleted();
                    if (s)
                        that._doSelect(s, true);
                }
            };
            DropItems.prototype._doSelect = function (selected, close) {
                var that = this;
                if (close) {
                    if (that.options.onselect) {
                        that.options.onselect(_sutils.findByPk(_sutils.id2Pk(selected.id, that.keys), that.keys, that.currentList));
                    }
                    that.hide(null);
                }
            };
            DropItems.prototype.inPopup = function (target) {
                var that = this;
                if (that.$element) {
                    var e = that.$element.get(0).parentNode;
                    return _dom.isChildOf(e, target);
                }
                return false;
            };
            DropItems.prototype.destroy = function () {
                var that = this;
                that.options = null;
                that.currentList = null;
                that.$input = null;
                that.$parent = null;
                that.$element = null;
            };
            DropItems.itemHeight = 0;
            DropItems.deltaHeight = 0;
            return DropItems;
        }());
        formdropitems.DropItems = DropItems;
    })(formdropitems = Phoenix.formdropitems || (Phoenix.formdropitems = {}));
})(Phoenix || (Phoenix = {}));
/// <reference path="../core/core-refs.ts" />
/// <reference path="./datasets-plugin.ts" />
/// <reference path="./menu-base.ts" />
/// <reference path="./form/controls/dropitems.control.ts" />
/// <reference path="contextmenu.ts" />
var Phoenix;
(function (Phoenix) {
    var _p = Phoenix, _link = _p.link, _menubase = _p.menubase, _preferences = _p.preferences, _application = _p.application, _device = _p.device, _utils = _p.utils, _locale = _p.locale, _contextmenu = Phoenix.contextmenu, _dom = _p.dom;
    var menu;
    (function (menu) {
        var _classCollapsed = function (item) {
            var css = ['bs-menu-right-icon normal'];
            if (item.collapsed)
                css.push(_dom.iconClass('plus'));
            else
                css.push(_dom.iconClass('minus'));
            return css.join(' ');
        };
        var Menu = /** @class */ (function (_super) {
            __extends(Menu, _super);
            function Menu(ldata, options) {
                var _this = _super.call(this, ldata, options) || this;
                _this.id = _utils.allocID();
                return _this;
            }
            Menu.prototype._checkSearchPopupMenu = function () {
                var that = this;
                if (!that._menu) {
                    var input = that._searchInput();
                    if (!input)
                        return;
                    var $parent = $(input.parentNode);
                    that._menu = new Phoenix.formdropitems.DropItems($parent, input, {
                        primaryKey: 'id',
                        search: 'title'
                        //,
                        // onselect: that.onselectItemHandler
                    });
                }
            };
            Menu.prototype._searchInput = function () {
                var that = this;
                return that.$element ? _dom.find(that.$element.get(0), that.id + '_search') : null;
            };
            Menu.prototype._initOptions = function (options) {
                _application.configuration = _application.configuration || {};
                var headerConfig = _application.configuration.header || {};
                options = options || {};
                options.typeMenu = options.typeMenu || 'left';
                options.replaceParent = true;
                options.canStayInPage = options.inline ? true : (_device.phone || _device.tablet ? false : true);
                options.autoClose = options.inline ? false : (options.canStayInPage ? _preferences("menu_" + options.type + "_autoClose") : true);
                if (options.autoClose === undefined)
                    options.autoClose = true;
                options.auth = (headerConfig.authLeftMenu === undefined) ? true : headerConfig.authLeftMenu;
                if (headerConfig['menu' + options.typeMenu]) {
                    _utils.merge(headerConfig['menu' + options.typeMenu], options);
                }
                options.styles = options.styles || { root: '$upper', parent: '', leaf: '' };
                options.canExpandItems = true;
            };
            Menu.prototype._updateSearch = function () {
                var that = this;
            };
            Menu.prototype._hideContent = function (autoCloseChanged) {
                var that = this;
                var c = that.$content.get(0);
                if (that.options.bodyId) {
                    var body = _dom.find(null, that.options.bodyId);
                    if (body)
                        _dom.removeClass(body, "bs-pc-body-" + that.options.typeMenu);
                }
                _dom.removeClass(c, 'bs-menu-opened');
                _dom.addClass(c, 'bs-menu-closed');
                if (that.options.bodyId && (!that.options.autoClose || (autoCloseChanged && that.options.autoClose))) {
                    _utils.nextTick(function () {
                        $(window).trigger('phoenix-resize');
                        $(window).trigger('gobal-phoenix-resize');
                    });
                }
            };
            Menu.prototype._showContent = function () {
                var that = this;
                var c = that.$content.get(0);
                var doresize = false;
                if (that.options.bodyId && !that.options.autoClose) {
                    doresize = true;
                    var body = _dom.find(null, that.options.bodyId);
                    if (body)
                        _dom.addClass(body, "bs-pc-body-" + that.options.typeMenu);
                }
                _dom.removeClass(c, 'bs-menu-closed');
                _dom.addClass(c, 'bs-menu-opened');
                if (that.options.canStayInPage) {
                    _dom.addClass(c, "large");
                }
                else {
                    _dom.addClass(c, "phone");
                }
                if (doresize)
                    _utils.nextTick(function () {
                        $(window).trigger('phoenix-resize');
                        $(window).trigger('gobal-phoenix-resize');
                    });
            };
            Menu.prototype._switchAutoClose = function () {
                var that = this;
                var nv = !!!_preferences("menu_" + that.options.type + "_autoClose");
                _preferences("menu_" + that.options.type + "_autoClose", nv);
                that.options.autoClose = nv;
                if (!that.options.autoClose) {
                    that.page.popup = null;
                }
                else {
                    that.page.setPopup(that);
                }
                return that._updateCloseButton(that.$content);
            };
            Menu.prototype._doCloseClick = function () {
                var that = this;
                if (!that.options.canStayInPage) {
                    that.hide();
                    return;
                }
                if (that._switchAutoClose()) {
                    that.hide(true);
                }
                else {
                    that._showContent();
                }
                that.page.props["$menu" + that.options.typeMenu] = that.options.autoClose;
            };
            Menu.prototype.copyMenuItemData = function (dst, src) {
                dst.$icon = src.$icon;
            };
            Menu.prototype._updateCloseButton = function ($content) {
                var that = this;
                var doclose = false;
                var c = $content.get(0);
                var btn = _dom.query(c, '.bs-menu-button');
                if (!btn)
                    return;
                if (that.options.canStayInPage) {
                    _dom.removeClass(btn, _dom.iconClass('times', true));
                    if (that.options.autoClose) {
                        _dom.removeClass(btn, _dom.iconClass('times-circle-o', true));
                        _dom.addClass(btn, 'small');
                        _dom.addClass(btn, _dom.iconClass('thumb-tack', true));
                        doclose = true;
                    }
                    else {
                        _dom.removeClass(btn, _dom.iconClass('thumb-tack', true));
                        _dom.removeClass(btn, 'small');
                        _dom.addClass(btn, _dom.iconClass('times-circle-o', true));
                    }
                    _dom.removeClass(btn, "bs-none");
                }
                else {
                    _dom.removeClass(btn, _dom.iconClass('thumb-tack', true));
                    _dom.removeClass(btn, _dom.iconClass('times-circle-o', true));
                    _dom.addClass(btn, _dom.iconClass('times', true));
                    _dom.removeClass(btn, "bs-none");
                }
                return doclose;
            };
            Menu.prototype.renderContent = function () {
                var that = this;
                var opts = that.options;
                var $content = $('<div class="bs-menu-wrap bs-scrollbar bs-menu-closed bs-menu-' + opts.typeMenu + '-wrap"></div>');
                var c = $content.get(0);
                if (opts.inline)
                    _dom.addClass(c, 'parent');
                var header = that.page.childByType('header');
                if (header && header.$element) {
                    var offset = _dom.offset(header.$element.get(0));
                    if (_device.phone || _device.tablet) {
                    }
                    else {
                        if (_dom.supportCssCalc()) {
                            c.style.top = offset.height + 'px';
                            c.style.height = 'calc(100% -  ' + offset.height + 'px)';
                        }
                        else {
                            c.style.paddingTop = offset.height + 'px';
                        }
                        c.style.zIndex = '1000';
                    }
                }
                return $content;
            };
            Menu.prototype._changeSelected = function (item) {
                var that = this;
                if (that.$element) {
                    var p = item;
                    while (p) {
                        var e = _dom.find(that.$element.get(0), p.$id);
                        if (e) {
                            if (item.selected) {
                                _dom.addClass(e, 'active');
                            }
                            else {
                                _dom.removeClass(e, 'active');
                            }
                        }
                        p = that._map[p.$parentId];
                    }
                }
            };
            Menu.prototype._selectDatasetItem = function (dataset, item) {
                var that = this;
                var selctedItem = null;
                that.items.forEach(function (ii) {
                    if (ii.$dataset === dataset) {
                        if (ii === item) {
                            if (!ii.selected) {
                                ii.selected = true;
                                that._changeSelected(ii);
                            }
                        }
                        else if (ii.selected) {
                            ii.selected = false;
                            that._changeSelected(ii);
                            selctedItem = ii;
                        }
                    }
                });
                that._expandSelected(selctedItem);
            };
            Menu.prototype._expandSelected = function (item) {
                var that = this;
                var active = [];
                var activeMap = {};
                var p = item;
                while (p) {
                    active.push(p);
                    activeMap[p.$id] = true;
                    p.collapsed = false;
                    p = that._map[p.$parentId];
                }
                that.items.forEach(function (ci) {
                    if (!ci.collapsed && !activeMap[ci.$id])
                        ci.collapsed = true;
                });
                that.updateItemsAfterCollapse();
                var navTitleList = active.reverse().map(function (ci) { return ci.$title; });
                if (that.data && that.data.$moduleTitle)
                    navTitleList.unshift(that.data.$moduleTitle);
                var header = that.page.childByType('header');
                if (header)
                    header.setLocation(navTitleList.join(' - '), false);
            };
            Menu.prototype._canClick = function (item) {
                return item.$link;
            };
            Menu.prototype.render = function ($parent) {
                _super.prototype.render.call(this, $parent);
                this._onPageChanged();
            };
            Menu.prototype.renderItems = function () {
                var that = this;
                var $element = $('<ul class="bs-item-list"></ul>');
                var e = $element.get(0);
                var ci = $('<li class="link"><a><span class="title"></span></a></li>').get(0);
                var cp = $('<li class="parent"><span class="title"></span></li>').get(0);
                var coll = $('<li class="parent"><span class="title"></span></li>').get(0);
                var ch = $('<li class="divider"><span class="title"></span></li>').get(0);
                if (that.items) {
                    var len_1 = that.items.length;
                    that.items.forEach(function (item, index) {
                        if (item.isHidden)
                            return;
                        var tmp;
                        if (item.divider) {
                            tmp = ch.cloneNode(true);
                            _dom.text(tmp.firstChild, item.$title || String.fromCharCode(160));
                        }
                        else {
                            var isCollapsable = that.options.canExpandItems && item.$items && item.$items.length;
                            var isParent = false;
                            var cl = '';
                            if (index < len_1 - 1) {
                                var nc = that.items[index + 1];
                                isParent = ((nc.$level || 0) > (item.$level || 0)) && !nc.$parentId;
                            }
                            var isLink = !!item.$link;
                            tmp = (isLink || isCollapsable) ? ci.cloneNode(true) : cp.cloneNode(true);
                            if (item.$items) {
                                if (!item.$parentId)
                                    cl = 'root';
                                else
                                    cl = 'parent';
                                _dom.addClass(tmp, 'bs-menu-item-parent');
                            }
                            else {
                                if (item.$parentId)
                                    cl = 'leaf';
                            }
                            if (item.$level) {
                                if (!item.$parentId)
                                    _dom.addClass(tmp, 'level');
                                _dom.addClass(tmp, "level-" + item.$level);
                            }
                            else if (isParent) {
                                _dom.addClass(tmp, 'level');
                            }
                            if (cl) {
                                var style = null;
                                if (that.options.styles && that.options.styles[cl]) {
                                    style = that.options.styles[cl];
                                }
                                if (style) {
                                    var css = [];
                                    _dom.parseStyle(style, css);
                                    if (css.length) {
                                        tmp.className = tmp.className + ' ' + css.join(' ');
                                    }
                                }
                            }
                            var aa = tmp.firstChild;
                            var ii = isLink || isCollapsable ? aa.firstChild : aa;
                            if (item.$title) {
                                var ct = (item.$icon ? ' ' + item.$title : item.$title);
                                _dom.text(ii, ct);
                            }
                            if (item.selected) {
                                _dom.addClass(tmp, "active");
                            }
                            if (isLink) {
                                _dom.attr(aa, "data-phoenix-href", "click://" + index);
                                if (!that._canClick(item)) {
                                    _dom.removeClass(aa, "link");
                                }
                            }
                            if (that.options.canExpandItems) {
                                if (isCollapsable) {
                                    _dom.attr(tmp, "data-phoenix-href", "click://collapse/" + index);
                                    var icon_1 = document.createElement('span');
                                    icon_1.id = item.$id + '_collapse';
                                    icon_1.className = _classCollapsed(item);
                                    _dom.append(tmp, icon_1);
                                }
                                if (!that.isVisible(item)) {
                                    _dom.addClass(tmp, 'closed');
                                    tmp.style.height = '0px';
                                }
                            }
                            if (item.$icon) {
                                var icon = _dom.icon(item.$icon);
                                _dom.addClass(icon, 'bs-icon-menu');
                                aa.insertBefore(icon, aa.firstChild);
                            }
                        }
                        if (item.$firstGroup) {
                            if (!that.options.inline) {
                                var icon_2 = document.createElement('span');
                                icon_2.className = 'bs-menu-button bs-menu-right-icon bs-none ' + _dom.iconPrefix();
                                _dom.attr(icon_2, 'data-phoenix-href', 'click://close');
                                _dom.append(tmp, icon_2);
                            }
                        }
                        tmp.id = item.$id;
                        e.appendChild(tmp);
                    });
                }
                that._updateCloseButton($element);
                return $element;
            };
            Menu.prototype.updateItemsAfterCollapse = function () {
                var that = this;
                if (!that.$element)
                    return;
                if (!that.items)
                    return;
                if (!that.options.canExpandItems)
                    return;
                that.items.forEach(function (item, index) {
                    if (item.isHidden)
                        return;
                    var isCollapsable = item.$items && item.$items.length;
                    var isVisible = that.isVisible(item);
                    var e = _dom.find(that.$element.get(0), item.$id);
                    if (e) {
                        var eIsVisible = !_dom.hasClass(e, 'closed');
                        if (isVisible !== eIsVisible) {
                            if (isVisible) {
                                var lh = window.getComputedStyle(e, null).getPropertyValue("line-height");
                                _dom.removeClass(e, 'closed');
                                e.style.height = lh;
                            }
                            else {
                                _dom.addClass(e, 'closed');
                                e.style.height = '0px';
                            }
                        }
                        if (isCollapsable) {
                            var ce = _dom.find(that.$element.get(0), item.$id + '_collapse');
                            if (ce) {
                                var ncn = _classCollapsed(item);
                                if (ce.className !== ncn)
                                    ce.className = ncn;
                            }
                        }
                    }
                });
            };
            Menu.prototype._executeLink = function (item, link) {
                var that = this;
                var ctx = _link.context(), ds;
                if (item.$dataset) {
                    ds = that.datasets[item.$dataset];
                    ctx.$item = item.$item;
                }
                if (ds && item.$link && item.$link.$datasetSelect) {
                    if (ds.selectedIndex != item.$index) {
                        ds.selectedIndex = item.$index;
                        that.ds_select(item.$dataset, item.$item);
                        that._selectDatasetItem(item.$dataset, item);
                    }
                }
                else if (item.$link)
                    return _link.execLink(item.$link, ctx, null);
            };
            Menu.prototype._executeContextMenu = function (event, item, link) {
                var that = this;
                if (item.$link && item.$link.$page) {
                    var ll = $.extend(true, {}, item.$link);
                    var data_3 = [{ link: ll, title: _locale.ui.OpenNewTab }];
                    _contextmenu.openContextMenu(event, that, data_3);
                    return true;
                }
                return false;
            };
            Menu.prototype.contextMenu = function (item) {
                var that = this;
                if (item.link) {
                    var ctx = _link.context();
                    ctx.$target = 'blank';
                    _link.execLink(item.link, ctx, null);
                }
            };
            Menu.prototype._onPageChanged = function () {
                var that = this;
                var cp = {
                    page: that.page.currentPage(),
                    module: _application.name
                };
                that.search = '';
                that.selectItem(cp);
            };
            Menu.prototype.selectItem = function (value) {
                var that = this;
                var testPages = value && typeof value === 'object' && value.page;
                if (that.items) {
                    var selctedItem_1 = null;
                    that.items.forEach(function (item, index) {
                        if (item.$link) {
                            var selected = false;
                            if (testPages && item.$link.$page) {
                                var page = _link.pageName(item.$link);
                                selected = page === value.page;
                                if (selected && item.$link.$module)
                                    selected = item.$link.$module === value.module;
                            }
                            else {
                                var ce = _link.getLinkExecutor(item.$link);
                                if (ce) {
                                    selected = ce.equal(value, item.$link);
                                }
                            }
                            if (item.selected !== selected) {
                                item.selected = selected;
                                if (!item.selected)
                                    that._changeSelected(item);
                            }
                            if (selected) {
                                selctedItem_1 = item;
                            }
                        }
                    });
                    if (selctedItem_1) {
                        that._changeSelected(selctedItem_1);
                        that._expandSelected(selctedItem_1);
                    }
                }
            };
            return Menu;
        }(Phoenix.menubase.MenuBase));
        menu.Menu = Menu;
        menu.Menuleft = Menu;
        menu.Menuright = Menu;
    })(menu = Phoenix.menu || (Phoenix.menu = {}));
})(Phoenix || (Phoenix = {}));
/// <reference path="../core/core-refs.ts" />
/// <reference path="../ui/page.control.ts" />
var Phoenix;
(function (Phoenix) {
    var ui;
    (function (ui) {
        var _p = Phoenix, _pagecontrol = _p.pagecontrol, _external = _p.external, _ulocale = _p.ulocale, _utils = _p.utils, _locale = _p.locale, _ajax = _p.ajax, _dom = _p.dom, _sticky = _p.sticky, _ui = _p.ui, _build = _p.build, _application = _p.application, _render = _p.render, _link = _p.link;
        var _defaultHeader = function (options) {
            var html = [];
            var _bootstrap4 = _p.bootstrap4;
            var css = ['no-y-margin no-x-margin'];
            if (_bootstrap4)
                css.push('fixed-top');
            else
                css.push('navbar-fixed-top');
            html.push('<div class="' + css.join(' ') + '">');
            css = ['bs-header-bar no-y-margin no-x-margin no-x-padding no-y-padding'];
            if (!_bootstrap4)
                css.push('navbar navbar-inverse');
            else
                css.push('bg-dark');
            html.push('<nav class="' + css.join(' ') + '">');
            html.push('    <div class="container-fluid no-x-padding">');
            html.push('        <div class="bs-title bs-title-nav-pos header_title"></div>');
            html.push('        <ul class="' + (_bootstrap4 ? '' : 'nav navbar-nav ') + 'no-x-margin no-y-margin bs-nav-button bs-left-nav header_left_buttons">');
            html.push('        </ul>');
            html.push('        <ul class="' + (_bootstrap4 ? '' : 'nav navbar-nav ') + 'no-x-margin no-y-margin bs-nav-button bs-right-nav header_right_buttons">');
            html.push('        </ul>');
            html.push('    </div>');
            html.push('</nav>');
            if (options.showLocation) {
                html.push('<div class="bs-header-location"><span class="bs-location-buttons"></span><span class="bs-header-location-title">&nbsp;</span></div>');
            }
            html.push('</div>');
            return $(html.join(''));
        }, _expandPattern = function (item) {
            if (item.$pattern === 'logout') {
                item.icon = 'lock';
                item.title = _locale.ui.Disconnect;
                item.link = { $logout: true };
                delete item.$pattern;
            }
            return item;
        }, _addButton = function (item, index) {
            var html = [];
            var _bootstrap4 = _p.bootstrap4;
            var hiddenXs = _bootstrap4 ? 'd-none d-sm-inline-block' : 'hidden-xs';
            item.id = _utils.allocID();
            var ct = item.title;
            if (ct && typeof ct === 'object') {
                ct = ct[_ulocale.currentLang];
            }
            if (item.$location) {
                html.push('<span id="{1}" class="bs-loc-link bs-style-icon-lg {2}" href="#" data-phoenix-href="click://{0}"><span>');
            }
            else {
                html.push('<li id="{1}">');
                if (item.$type === "logo") {
                    if (!item.$location)
                        html.push('<a tabindex="-1" class="' + hiddenXs + ' bs-nav-logo ' + item.$className + '" href="#" data-phoenix-href="click://{0}"></a>');
                }
                else {
                    var css = [];
                    if (item.iconStyle) {
                        _dom.parseStyle(item.iconStyle, css);
                    }
                    else {
                        css.push('bs-style-icon-lg');
                    }
                    if (item.title || item.expression) {
                        html.push('<a class="bs-nav-link"');
                        html.push('  href="#" data-phoenix-href="click://{0}"');
                        html.push('>');
                        css.push('{2}');
                        html.push('<span class="' + css.join(' ') + '"></span>');
                        css = ['bs-icon-header-title'];
                        if (_bootstrap4)
                            css.push('dropdown-toggle');
                        html.push('<span class="' + css.join(' ') + '"><span class="' + hiddenXs + '">{3}</span>');
                        if (_bootstrap4)
                            css.push('dropdown-toggle');
                        if (item.menu)
                            html.push(' <span class="caret"></span>');
                        html.push('</span>');
                        html.push('</a>');
                        if (item.menu && item.menu.items) {
                            if (_bootstrap4) {
                                html.push('<div class="dropdown-menu bs-right-menu">');
                                html.push('</div>');
                            }
                            else {
                                html.push('<ul class="dropdown-menu bs-right-menu">');
                                html.push('</ul>');
                            }
                        }
                    }
                    else {
                        html.push('<a class="bs-nav-link" href="#" data-phoenix-href="click://{0}">');
                        css.push('{2}');
                        html.push('<span class="' + css.join(' ') + '"></span>');
                        html.push('</a>');
                    }
                }
                html.push('</li>');
            }
            if (item.link && item.link.$form)
                item.link.$form.alignElementId = item.id;
            return $(_utils.format(html.join(''), index, item.id, _dom.customIconClass(item.$icon, item.$iconClass), ct || item.expression || ''));
        }, _createMenuItems = function (item, ul) {
            var frag = document.createDocumentFragment();
            var _bootstrap4 = _p.bootstrap4;
            var p = $(_bootstrap4 ? '<a class="dropdown-item" href="#"></a>' : '<li><a href="#"></a><li>').get(0);
            item.menu.items.forEach(function (si, ii) {
                if (si.$pattern) {
                    item.menu.items[ii] = _expandPattern(si);
                    si = item.menu.items[ii];
                }
                var li = p.cloneNode(true);
                var a = (_bootstrap4 ? li : li.firstChild);
                _dom.attr(a, 'data-phoenix-href', 'click://' + item.$index + '/' + ii);
                if (si.icon) {
                    var icon = document.createElement('span');
                    icon.className = _dom.iconClass(si.icon);
                    _dom.append(a, icon);
                }
                var ct = si.title;
                if (typeof si.title === 'object') {
                    ct = si.title[_ulocale.currentLang];
                }
                _dom.text(a, ' ' + (ct || 'Error: title not defined'));
                _dom.append(frag, li);
            });
            _dom.append(ul, frag);
        };
        var Header = /** @class */ (function () {
            function Header(data, options) {
                this._init(data, options);
            }
            Header.prototype.setLocation = function (value, add) {
                var that = this;
                if (!that.options.showLocation)
                    return;
                if (that._locationTimeOut)
                    window.clearTimeout(that._locationTimeOut);
                that._locationTimeOut = window.setTimeout(function () {
                    that._locationTimeOut = 0;
                    if (that._location !== value) {
                        that._location = value || '';
                        if (that.$location) {
                            _dom.text(that.$location.get(0).lastChild, that._location);
                        }
                    }
                }, 100);
            };
            Header.prototype._init = function (data, options) {
                var that = this;
                that.title = '';
                that._ctx = _link.context();
                that._ignoreClick = false;
                that.leftButtonsSpace = 0;
                that.rightButtonsSpace = 0;
                that.$location = null;
                that.$element = null;
                that.$buttons = [];
                that.options = options || {};
                that.page = _pagecontrol.Page();
                that.title = _application.title || '';
                var config = _application.configuration;
                var headerCfg = config && config.header ? config.header : {};
                if (that.options.showOnDisconnected !== undefined)
                    that.options.showOnDisconnected = that.options.showOnDisconnected;
                else
                    that.options.showOnDisconnected = headerCfg.alwaysShow;
                if (headerCfg.showLocation !== undefined)
                    that.options.showLocation = headerCfg.showLocation;
                if (headerCfg.leftMenuButtonInLocation !== undefined)
                    that.options.leftMenuButtonInLocation = headerCfg.leftMenuButtonInLocation;
                if (that.options.backButton === undefined)
                    that.options.backButton = true;
                if (that.options.leftMenuButton === undefined)
                    that.options.leftMenuButton = true;
                if (that.options.topMenuButton === undefined)
                    that.options.topMenuButton = true;
                if (that.options.disconnectButton === undefined)
                    that.options.disconnectButton = true;
                if (headerCfg.logo) {
                    var btn = {
                        $isHidden: false,
                        $type: 'logo'
                    };
                    var logoClassName = '';
                    if (typeof headerCfg.logo === 'string') {
                        logoClassName = headerCfg.logo;
                    }
                    else {
                        logoClassName = headerCfg.logo.style;
                        btn.link = headerCfg.logo.link;
                    }
                    btn.$className = logoClassName;
                    that.$buttons.push(btn);
                }
                if (headerCfg.buttons && headerCfg.buttons.before) {
                    headerCfg.buttons.before.forEach(function (button) {
                        that.$buttons.push({
                            $icon: button.icon,
                            right: button.right,
                            auth: button.auth,
                            link: button.link,
                            title: button.title
                        });
                    });
                }
                if (that.options.backButton) {
                    that.$buttons.push({
                        $icon: 'chevron-left',
                        $isHidden: !that.page.props.$hasBack && !that.options._alwaysShowBack,
                        $type: 'back',
                        link: {
                            $back: true
                        }
                    });
                }
                if (that.options.leftMenuButton) {
                    that.$buttons.push({
                        auth: headerCfg.authLeftMenu,
                        $isHidden: true,
                        $icon: 'bars',
                        $type: 'menuleft',
                        $parent: that.options.leftMenuPlace,
                        $location: that.options.showLocation && that.options.leftMenuButtonInLocation
                    });
                }
                if (that.options.disconnectButton) {
                    if (headerCfg.userMenu) {
                        that.$buttons.push({
                            $icon: 'user',
                            iconStyle: '$icon-normal',
                            right: true,
                            auth: true,
                            menu: $.extend(true, {}, headerCfg.userMenu),
                            expression: headerCfg.userMenu.expression || 'John Doe',
                            $type: 'user'
                        });
                    }
                    else {
                        that.$buttons.push({
                            $icon: 'power-off',
                            right: true,
                            auth: true,
                            $type: 'disconnect',
                            link: {
                                $logout: true
                            }
                        });
                    }
                }
                that.$buttons.push({
                    $icon: 'pencil',
                    right: true,
                    auth: true,
                    $isHidden: _build.release,
                    $type: 'authoring',
                    link: {
                        $authoring: true
                    }
                });
                if (!_build.release) {
                    that.$buttons.push({
                        $icon: 'cog',
                        title: "Utils",
                        right: true,
                        auth: true,
                        menu: {
                            items: [
                                {
                                    title: 'Create a new form',
                                    icon: 'building',
                                    link: {
                                        $action: {
                                            name: "phoenix.action.createform"
                                        }
                                    }
                                },
                                {
                                    title: 'Modify form schema',
                                    icon: 'pencil',
                                    link: {
                                        $action: {
                                            name: "phoenix.action.updschema"
                                        }
                                    }
                                }
                            ]
                        }
                    });
                }
                if (that.options.rightMenuButton) {
                    that.$buttons.push({
                        auth: true,
                        $isHidden: true,
                        $icon: 'ellipsis-v',
                        $type: 'menuright',
                        $parent: that.options.rightMenuPlace
                    });
                }
                if (that.options.topMenuButton) {
                    that.$buttons.push({
                        auth: true,
                        $isHidden: true,
                        $icon: 'chevron-down',
                        $type: 'menutop',
                        right: true,
                        $parent: that.options.topMenuPlace
                    });
                }
                if (headerCfg.buttons && headerCfg.buttons.after) {
                    headerCfg.buttons.after.forEach(function (button) {
                        that.$buttons.push({
                            $icon: button.icon,
                            right: button.right,
                            auth: button.auth,
                            link: button.link,
                            title: button.title
                        });
                    });
                }
                that.page.addChild('header', that);
                that.setData(data);
            };
            Header.prototype._show = function () {
                var that = this;
                var prefInline = _p.sessionPreferences('headerisHidden');
                if (that._ctx.$url.$inline || prefInline) {
                    if (!prefInline)
                        _p.sessionPreferences('headerisHidden', true);
                    return false;
                }
                return true;
            };
            Header.prototype.setData = function (data) {
                //var that = this;
                data = data || {};
            };
            Header.prototype.buttonByType = function (value) {
                var that = this;
                for (var i = 0, len = that.$buttons.length; i < len; i++) {
                    var btn = that.$buttons[i];
                    if (btn.$type == value)
                        return btn;
                }
                return null;
            };
            Header.prototype._createButtons = function () {
                var that = this;
                if (!that.$element)
                    return;
                var e = that.$element.get(0);
                var l = _dom.query(e, '.header_left_buttons');
                var r = _dom.query(e, '.header_right_buttons');
                var loc = that.$location ? _dom.query(that.$location.get(0), '.bs-location-buttons') : null;
                that.$buttons.forEach(function (button, index) {
                    button.$index = index;
                    var $btn = _addButton(button, index);
                    var p = button.$location ? loc : (button.right ? r : l);
                    for (var i = 0, len = $btn.length; i < len; i++)
                        _dom.append(p, $btn.get(i));
                });
            };
            Header.prototype._updateButtons = function () {
                var that = this;
                var _bootstrap4 = _p.bootstrap4;
                var startSpace = 12; //px
                if (_bootstrap4)
                    startSpace = _dom.rem2px(0.8571);
                if (!that.$element)
                    return;
                var isConnected = that.page.props.$user && that.page.props.$user.connected;
                var lvdim = startSpace, rvdim = startSpace;
                var e = that.$element.get(0);
                that.$buttons.forEach(function (button) {
                    var btn = _dom.find(e, button.id);
                    if (button.$isHidden || (!isConnected && button.auth))
                        _dom.addClass(btn, 'bs-none');
                    else {
                        if (button.$type === 'user') {
                            var nt = _utils.execAngularExpression(button.expression, that.page.props.$user.credentials);
                            if (nt !== button.title) {
                                button.title = nt;
                                var p = _dom.query(btn, '.bs-icon-header-title');
                                if (p)
                                    _dom.text(p.firstChild, nt);
                            }
                        }
                        _dom.removeClass(btn, 'bs-none');
                        if (!button.$location) {
                            if (button.right) {
                                rvdim += _dom.offset(btn).width;
                            }
                            else {
                                lvdim += _dom.offset(btn).width;
                            }
                        }
                    }
                });
                if (that.leftButtonsSpace !== lvdim || that.rightButtonsSpace !== rvdim) {
                    that.leftButtonsSpace = lvdim;
                    that.rightButtonsSpace = rvdim;
                    that._updateTitleSpaceMargins();
                }
            };
            Header.prototype._updateTitleSpaceMargins = function () {
                var that = this;
                if (that.$element) {
                    var e = that.$element.get(0);
                    var tp = _dom.query(e, '.header_title');
                    tp.style.marginLeft = that.leftButtonsSpace + 'px';
                    tp.style.marginRight = that.rightButtonsSpace + 'px';
                }
            };
            Header.prototype.inPopup = function (target) {
                var that = this;
                if (that._ob) {
                    var b = _dom.find(that.$element.get(0), that._ob.id);
                    return _dom.isChildOf(b, target);
                }
                return false;
            };
            Header.prototype.hide = function (target) {
                var that = this;
                if (that._ob) {
                    var b = _dom.find(that.$element.get(0), that._ob.id);
                    _dom.removeClass(b.lastChild, 'bs-block');
                    that._ob = null;
                }
            };
            Header.prototype._openPopup = function (button) {
                var that = this;
                that.page.setPopup(that);
                that._ob = button;
                var b = _dom.find(that.$element.get(0), button.id);
                _dom.addClass(b.lastChild, 'bs-block');
            };
            Header.prototype._executeLink = function (button, si) {
                var that = this;
                if (button.menu) {
                    var b = _dom.find(that.$element.get(0), button.id);
                    if (b && b.lastChild) {
                        if (!b.lastChild.childNodes.length)
                            _createMenuItems(button, b.lastChild);
                    }
                    if (si >= 0) {
                        var b_1 = button.menu.items[si];
                        if (b_1.link) {
                            _link.execLink(b_1.link, _link.context(), null);
                        }
                        that.page.setPopup(null);
                    }
                    else {
                        if (that._ob) {
                            if (that._ob === button) {
                                that.page.setPopup(null);
                                return;
                            }
                            that.page.setPopup(null);
                        }
                        if (b && b.lastChild) {
                            var ul = b.lastChild;
                            ul.style.minWidth = Math.max(_dom.offset(b).width, 160) + 'px';
                        }
                        return that._openPopup(button);
                    }
                }
                else if (button.link) {
                    if (button.link.$form)
                        button.link.$form.opener = button.id;
                    return _link.execLink(button.link, _link.context(), null);
                }
                if (['menuleft', 'menuright', 'menutop', 'menubottom'].indexOf(button.$type) >= 0) {
                    if (button.$parent && that.page) {
                        var c = that.page.childByType('menu-' + button.$type.substring(4));
                        if (c)
                            c.show($(_dom.find(null, button.$parent)));
                    }
                }
            };
            Header.prototype._onresize = function () {
                var that = this;
                if (that.$element) {
                    that._updateButtons();
                }
            };
            Header.prototype._setEvents = function () {
                var that = this;
                var e = that.$element.get(0);
                that.$element.on('mousedown', function (event) {
                    var c = _link.isCustomLink(e, event, true);
                    if (c && c.protocol === 'click') {
                        var cs = c.value.substring(('click://').length).split('/');
                        var di = cs.length > 1 ? parseInt(cs[1], 10) : -1;
                        var btn = that.$buttons[parseInt(cs[0], 10)];
                        if (btn) {
                            if (['menuleft', 'menuright', 'menutop', 'menubottom'].indexOf(btn.$type) >= 0) {
                                if (btn.$parent && that.page) {
                                    var child = that.page.childByType('menu-' + btn.$type.substring(4));
                                    if (that.page.popup === child)
                                        that._ignoreClick = true;
                                }
                            }
                            else if (btn.link && btn.link.$form && !btn.link.$form.modal) {
                                //autoclose form
                                if (that.page.popup && that.page.popup.opener && that.page.popup.opener === btn.id)
                                    that._ignoreClick = true;
                            }
                        }
                    }
                });
                that.$element.on('click', function (event) {
                    var c = _link.isCustomLink(e, event);
                    if (that._ignoreClick) {
                        that._ignoreClick = false;
                        return;
                    }
                    if (c && c.protocol === 'click') {
                        var cs = c.value.substring(('click://').length).split('/');
                        var di = cs.length > 1 ? parseInt(cs[1], 10) : -1;
                        var btn = that.$buttons[parseInt(cs[0], 10)];
                        that._executeLink(btn, di);
                        if (btn && btn.$type === 'logo') {
                            var el = (document.activeElement);
                            if (el)
                                el.blur();
                        }
                    }
                });
                $(window).on('resize.header', function () {
                    clearTimeout(that._doResize);
                    that._doResize = setTimeout(that._onresize.bind(that), 100);
                });
            };
            Header.prototype.setPage = function (pageName, value) {
                var that = this;
                if (_build.release) {
                    var canModify = _application.isCustomizable('pages', pageName);
                    var btn = that.buttonByType('authoring');
                    if (btn && btn.$isHidden != !canModify) {
                        btn.$isHidden = !canModify;
                        that._updateButtons();
                    }
                }
            };
            Header.prototype.onPageChange = function (propName, value) {
                var that = this, btn;
                switch (propName) {
                    case '$title':
                        that.title = value || _application.title || '';
                        that._renderTitle();
                        break;
                    case '$hasBack':
                        if (that.options._alwaysShowBack)
                            value = true;
                        if (that.options.backButton) {
                            btn = that.buttonByType('back');
                            if (btn) {
                                if (btn.$isHidden !== !value) {
                                    btn.$isHidden = !value;
                                    that._updateButtons();
                                }
                            }
                        }
                        break;
                    case '$user':
                        that._auth(false);
                        that._updateButtons();
                        break;
                    case '$menuleft':
                        if (that.options.leftMenuButton) {
                            btn = that.buttonByType('menuleft');
                            if (btn && btn.$isHidden == value) {
                                btn.$isHidden = !value;
                                that._updateButtons();
                            }
                        }
                        break;
                    case '$menutop':
                        if (that.options.topMenuButton) {
                            btn = that.buttonByType('menutop');
                            if (btn && btn.$isHidden == value) {
                                btn.$isHidden = !value;
                                that._updateButtons();
                            }
                        }
                        break;
                }
            };
            Header.prototype._removeEvents = function () {
                var that = this;
                that.$element.off('mousedown');
                that.$element.off('click');
                $(window).off('resize.header');
            };
            Header.prototype.renderButtons = function () {
                var that = this;
                that._createButtons();
                that._updateButtons();
                _utils.nextTick(function () {
                });
            };
            Header.prototype._renderTitle = function () {
                var that = this;
                if (that.$element) {
                    var e = that.$element.get(0);
                    var tp = _dom.query(e, '.header_title');
                    _dom.text(tp, that.title || '');
                }
            };
            Header.prototype._auth = function (inRender) {
                var that = this;
                if (that.$parent && that._show()) {
                    var p = that.$parent.get(0);
                    var e = that.$element.get(0);
                    var isConnected = that.page.props.$user && that.page.props.$user.connected;
                    var show = false;
                    if (isConnected) {
                        show = true;
                        _dom.removeClass(e, 'bs-none');
                    }
                    else {
                        if (that.options.showOnDisconnected) {
                            show = true;
                            _dom.removeClass(e, 'bs-none');
                        }
                        else {
                            _dom.addClass(e, 'bs-none');
                        }
                    }
                    if (!inRender) {
                        var offset = _dom.offset(that.$element.get(0));
                        _sticky.topOffset = show ? offset.height : 0;
                        p.style.paddingTop = show ? offset.height + 'px' : '0px';
                    }
                }
            };
            Header.prototype.render = function ($parent) {
                var that = this;
                if (that._show() && $parent && !this.$element) {
                    that.$element = _defaultHeader(that.options);
                    var e = that.$element.get(0);
                    if (that.options.showLocation)
                        that.$location = $(e.lastChild);
                    var config = _application.configuration;
                    var headerCfg = config && config.header ? config.header : {};
                    var tp = _dom.query(e, '.header_title');
                    if (headerCfg.uppercase) {
                        _dom.addClass(tp, 'bs-transform-uppercase');
                    }
                    if (headerCfg.align) {
                        _dom.addClass(tp, 'align-' + headerCfg.align);
                    }
                    that._renderTitle();
                    that.renderButtons();
                    var p = $parent.get(0);
                    if (that.options.replaceParent)
                        p = p.parentNode;
                    that.$parent = $(p);
                    that._auth(true);
                    if (that.options.replaceParent)
                        $parent.replaceWith(that.$element);
                    else
                        $parent.append(that.$element);
                    that._setEvents();
                    var offset = _dom.offset(that.$element.get(0));
                    _sticky.topOffset = offset.height;
                    p.style.paddingTop = offset.height + 'px';
                    _utils.nextTick(function () {
                        that._onresize();
                    });
                }
            };
            Header.prototype.destroy = function () {
                var that = this;
                _utils.log('Header Destroy', 'destroy');
                this.$parent = null;
                if (that.$element) {
                    that._removeEvents();
                    this.$element = null;
                }
                if (that.page) {
                    that.page.removeChild(that);
                    that.page = null;
                }
            };
            return Header;
        }());
        ui.Header = Header;
        ;
    })(ui = Phoenix.ui || (Phoenix.ui = {}));
})(Phoenix || (Phoenix = {}));
/// <reference path="../core/core-refs.ts" />
/// <reference path="./page.control.ts" />
var Phoenix;
(function (Phoenix) {
    var tabs;
    (function (tabs_1) {
        var _p = Phoenix, _pagecontrol = _p.pagecontrol, _dom = _p.dom, _link = _p.link, _utils = _p.utils, _application = _p.application, _ulocale = _p.ulocale, _locale = _p.locale;
        var Tabs = /** @class */ (function () {
            function Tabs(options, tabs) {
                var that = this, defOptions = {
                    justified: false,
                    pills: false
                };
                that._page = _pagecontrol.Page();
                that._options = $.extend(defOptions, options || {});
                that._tabs = tabs || [];
            }
            Tabs.prototype._renderTabs = function () {
                var that = this;
                var e = that.$element.get(0);
                var ul = e.firstChild;
                var frag = document.createDocumentFragment();
                var p = $('<li><a href="#"></a><li>').get(0);
                var cp = that._page.currentPage();
                that._tabs.forEach(function (tab, index) {
                    var ii = p.cloneNode(true);
                    var aa = ii.firstChild;
                    _dom.text(aa, _ulocale.localeTitle(tab.$title));
                    var isDisabled = false;
                    if (tab.enabled !== undefined) {
                        if (typeof tab.enabled == "string") {
                            var sval = _utils.execAngularExpression(tab.enabled, _link.context());
                            if (!sval || sval === "undefined" || sval === "false")
                                isDisabled = true;
                        }
                        else {
                            isDisabled = !tab.enabled;
                        }
                    }
                    if (isDisabled) {
                        _dom.addClass(ii, 'disabled');
                    }
                    else
                        _dom.attr(aa, "data-phoenix-href", "click://" + index);
                    if (tab.$page) {
                        var page = _link.pageName(tab);
                        var selected = page == cp;
                        if (selected && tab.$module)
                            selected = tab.$module === _application.name;
                        if (selected)
                            tab.active = true;
                        else
                            tab.active = false;
                    }
                    if (tab.active)
                        _dom.addClass(ii, Phoenix.bootstrap4 ? 'show active' : 'active');
                    frag.appendChild(ii);
                });
                _dom.empty(ul);
                _dom.append(ul, frag);
            };
            Tabs.prototype._setEvents = function () {
                var that = this;
                if (that.$element) {
                    var e = that.$element.get(0);
                    that.$element.on('click', function (event) {
                        var c = _link.isCustomLink(e, event);
                        if (c && c.protocol === "click") {
                            var cs = c.value.substring(('click://').length);
                            var ii = cs.split('/');
                            var ctx = _link.context();
                            var ctab = that._tabs[parseInt(ii[0], 0)];
                            if (ctab && ctab.$page && !ctab.disabled) {
                                _link.execLink(ctab, ctx, null);
                            }
                        }
                    });
                }
            };
            Tabs.prototype._removeEvents = function () {
                var that = this;
                if (that.$element)
                    that.$element.off('click');
            };
            Tabs.prototype.render = function ($parent) {
                var that = this;
                if (!that.$element) {
                    that.$element = $('<div class="bs-widget-content-inv bs-tabs"><ul class="nav nav-tabs"><ul></div>');
                    that._renderTabs();
                    that._setEvents();
                }
                if ($parent) {
                    if (that._options.replaceParent)
                        $parent.replaceWith(that.$element);
                    else
                        $parent.append(that.$element);
                }
            };
            Tabs.prototype.destroy = function () {
                var that = this;
                that._removeEvents();
                that.$element = null;
                that._options = null;
                that._page = null;
            };
            return Tabs;
        }());
        tabs_1.Tabs = Tabs;
        ;
    })(tabs = Phoenix.tabs || (Phoenix.tabs = {}));
})(Phoenix || (Phoenix = {}));
/// <reference path="../core/core-refs.ts" />
var Phoenix;
(function (Phoenix) {
    var layoutUtils;
    (function (layoutUtils) {
        layoutUtils.LAYOUT_BLOCK = 'block';
        layoutUtils.LAYOUT_ROW = 'row';
        layoutUtils.LAYOUT_COLUMN = 'column';
        layoutUtils.LAYOUT_HTML = 'html';
        layoutUtils.LAYOUT_ACCORDION = 'accordion';
        layoutUtils.LAYOUT_ACCORDION_GROUP = 'accordion-group';
        var _p = Phoenix, _dom = _p.dom, _utils = _p.utils, _locale = _p.locale.layouts, _ulocale = _p.ulocale, _render = _p.render, _sticky = _p.sticky;
        var page_prefix = 'page';
        var _checkAccordionChildName = function (name, index) {
            name = name || '';
            if (!name)
                return page_prefix + index;
            if (name.indexOf(page_prefix) === 0) {
                var p = name.substring(page_prefix.length);
                if ((parseInt(p, 10) + '') === p)
                    return page_prefix + index;
            }
            return name;
        }, _markEmptyRowAsBlock = function (layout) {
            if (!layout.$items.length) {
                layout.$type = layoutUtils.LAYOUT_BLOCK;
                layout.$origin = layoutUtils.LAYOUT_ROW;
            }
        }, _checkLayout = function (layout, parent, map, namedMap) {
            if (!layout.$id)
                layout.$id = _utils.allocID();
            if (parent)
                layout.$parentId = parent.$id;
            layout.$idDesign = layout.$id;
            layout.$idDrag = layout.$id;
            layout.$type = layout.$type || layoutUtils.LAYOUT_BLOCK;
            layout.$items = layout.$items || [];
            if (layout.$title) {
                if (!layout.$title.style && layout.$title.style != undefined)
                    delete layout.$title.style;
            }
            if (!_onlyFields(layout)) {
                delete layout.$inline;
                delete layout.$fieldsOptions;
            }
            else if (layout.$fieldsOptions && !Object.keys(layout.$fieldsOptions))
                delete layout.$fieldsOptions;
            if (map)
                map[layout.$id] = layout;
            if (namedMap && layout.$name) {
                var old = namedMap[layout.$name];
                if (old) {
                    if (Array.isArray(old))
                        old.push(layout);
                    else
                        namedMap[layout.$name] = [namedMap[layout.$name], layout];
                }
                else
                    namedMap[layout.$name] = layout;
            }
            if (layout.$type === layoutUtils.LAYOUT_HTML && !layout.$html) {
                layout.$html = _locale.Html;
            }
            switch (layout.$type) {
                case layoutUtils.LAYOUT_ROW:
                    _markEmptyRowAsBlock(layout);
                    break;
                default:
                    delete layout.$forceTable;
                    break;
            }
            if (layout.$origin && layout.$origin === layout.$type)
                delete layout.$origin;
            if (layout.$type !== layoutUtils.LAYOUT_ACCORDION_GROUP && layout.$title && layout.$title.value === _locale.defaultTitle)
                delete layout.$title;
        }, _layoutIsVisible = function (layout) {
            if (layout.$type === layoutUtils.LAYOUT_ACCORDION_GROUP) {
                return layout.opened;
            }
            return true;
        }, _checkField = function (field, parent, map, namedMap) {
            if (!field.$id)
                field.$id = _utils.allocID();
            if (parent)
                field.$parentId = parent.$id;
            field.$idDrag = field.$id;
            if (map)
                map[field.$id] = field;
            if (namedMap && field.$name)
                namedMap[field.$name] = field;
        }, _checkRowChildren = function (layout) {
            _markEmptyRowAsBlock(layout);
            var setCol = false;
            layout.$items.forEach(function (item) {
                item.$type = layoutUtils.LAYOUT_COLUMN;
                if (!item.$colSize)
                    setCol = true;
            });
            if (setCol) {
                var value = Math.max(1, Math.floor(12 / layout.$items.length));
                var li = layout.$items.length - 1;
                var all = 0;
                layout.$items.forEach(function (item, index) {
                    if (index === li) {
                        value = 12 - all;
                    }
                    item.$colSize = value;
                    all += value;
                });
            }
        }, _checkAccordionChildren = function (layout) {
            if (!layout.$items.length) {
                layout.$items.push({
                    $type: layoutUtils.LAYOUT_ACCORDION_GROUP
                });
            }
            layout.$items.forEach(function (item, index) {
                item.$type = layoutUtils.LAYOUT_ACCORDION_GROUP;
                item.$title = item.$title || {};
                item.$name = _checkAccordionChildName(item.$name, index);
                item.$title.value = item.$title.value || _locale.defaultTitle;
            });
        }, _canAddLayouts = function (layout) {
            if (layout.$type === layoutUtils.LAYOUT_HTML)
                return false;
            if (layout.$items.length > 0) {
                var l = layout.$items[0];
                if (!l.$items)
                    return false;
            }
            return true;
        }, 
        /*
        _hasBorder = function(layout) {
        },
        */
        _needParentPadding = function (layout, parent) {
            return (layout.$type === layoutUtils.LAYOUT_ACCORDION && !layout.$widget);
        }, _noPadding = function (layout, parent) {
            var res = true, _bootstrap4 = _p.bootstrap4;
            if (!layout.$items.length)
                return res;
            if (layout.$type === layoutUtils.LAYOUT_ACCORDION_GROUP && (!layout.$widget && !_bootstrap4))
                return false;
            layout.$items.forEach(function (item) {
                if (res)
                    res = !_needParentPadding(item, layout);
            });
            return res;
        }, _canAddFields = function (layout) {
            if (layout.$type && !layout.$items)
                layout.$items = [];
            if ((layout.$type === layoutUtils.LAYOUT_ROW) || (layout.$type === layoutUtils.LAYOUT_ACCORDION) || (layout.$type === layoutUtils.LAYOUT_HTML))
                return false;
            if (layout.$items.length > 0) {
                var l = layout.$items[0];
                if (l.$type || l.$items)
                    return false;
            }
            return true;
        }, _allFieldsRight = function (layout) {
            if (layout.$items && layout.$items.length) {
                var res_4 = true;
                layout.$items.forEach(function (field) {
                    res_4 = res_4 && field && field.options && field.options.right;
                });
                return res_4;
                ;
            }
            return false;
        }, _addStdThemes = function (layout, css, options) {
            var s = layout.$style;
            if (!s && layout.$sticky)
                s = '$white';
            _dom.parseStyle(s, css);
            if (!options.design && layout.$isHidden) {
                css.push('bs-none');
            }
        }, _onlyFields = function (layout) {
            return !layout.$items || !layout.$items.length || layout.$items[0].$bind;
        }, _css = function (layout, parent, options, css, style) {
            var _bootstrap4 = _p.bootstrap4, canAddLayouts, addpaddingclass;
            switch (layout.$type) {
                case layoutUtils.LAYOUT_BLOCK:
                    addpaddingclass = true;
                    if (options.design && layout.selected) {
                        css.push('selected');
                    }
                    canAddLayouts = _canAddLayouts(layout);
                    if (canAddLayouts) {
                        if (options.design || _noPadding(layout, parent)) {
                            addpaddingclass = false;
                            if (parent)
                                css.push('no-x-padding');
                        }
                        if (options.design) {
                            css.push('drop-layouts-zone');
                            if (layout.$origin === layoutUtils.LAYOUT_ROW) {
                                css.push('row-color');
                            }
                        }
                    }
                    if (_canAddFields(layout)) {
                        if (layout.$inline && (options.design || !layout.$html)) {
                            if (Phoenix.bootstrap4 && _allFieldsRight(layout))
                                css.push('form-inline d-flex flex-row-reverse bs-inline-container');
                            else
                                css.push('form-inline bs-inline-container');
                        }
                        if (options.design) {
                            css.push('drop-fields-zone');
                            if (!canAddLayouts) {
                                addpaddingclass = false;
                                if (parent)
                                    css.push('no-x-padding');
                            }
                        }
                    }
                    if (addpaddingclass) {
                        css.push('field-container');
                    }
                    if (!parent) {
                        css.push('bs-root-container');
                        if (options.design)
                            css.push('bs-scroll-container');
                        if (!layout.form)
                            css.push('page');
                    }
                    if (options.design) {
                        css.push('design');
                        if (layout.selected)
                            css.push('selected');
                    }
                    _addStdThemes(layout, css, options);
                    if (!options.design && layout.$sticky && _sticky && _sticky.native) {
                        css.push('bs-sticky');
                        if (layout.$sticky === 'top')
                            style.push('top:' + _sticky.topOffset + 'px;');
                        else if (layout.$sticky === 'bottom')
                            style.push('bottom:' + _sticky.bottomOffset + 'px;');
                    }
                    break;
                case layoutUtils.LAYOUT_ACCORDION:
                    if (options.step === 1) {
                        css.push('panel-group bs-island');
                        if (options.design) {
                            css.push('design');
                            css.push('drop-layouts-zone');
                            if (layout.selected)
                                css.push('selected');
                        }
                        _addStdThemes(layout, css, options);
                    }
                    break;
                case layoutUtils.LAYOUT_ROW:
                    if (options.step === 1) {
                        css.push('container-fluid');
                        if (!options.design && layout.$forceTable)
                            css.push('no-x-padding');
                        if (options.design) {
                            css.push('design');
                            css.push('no-x-padding');
                            if (layout.selected)
                                css.push('selected');
                        }
                        _addStdThemes(layout, css, options);
                    }
                    else if (options.step === 2) {
                        css.push('row');
                        if (layout.$forceTable)
                            css.push('bs-row-table');
                        if (options.design) {
                            css.push('design-table');
                            css.push('row-color');
                            canAddLayouts = _canAddLayouts(layout);
                            if (canAddLayouts)
                                css.push('drop-layouts-zone');
                        }
                    }
                    break;
                case layoutUtils.LAYOUT_ACCORDION_GROUP:
                    if (options.step === 1) {
                        if (_bootstrap4)
                            css.push('card');
                        else
                            css.push('panel panel-default');
                        if (options.design) {
                            css.push('design');
                            if (layout.selected)
                                css.push('selected');
                        }
                    }
                    else if (options.step === 2) {
                        if (_bootstrap4) {
                            css.push('collapse');
                            if (layout.opened)
                                css.push('show');
                        }
                        else {
                            css.push('panel-collapse collapse');
                            if (layout.opened)
                                css.push('in');
                        }
                    }
                    else if (options.step === 3) {
                        if (_bootstrap4)
                            css.push('card-body');
                        canAddLayouts = _canAddLayouts(layout);
                        if (canAddLayouts) {
                            if (options.design || _noPadding(layout, parent)) {
                                css.push('no-x-padding');
                                css.push('no-y-padding');
                            }
                            if (options.design)
                                css.push('drop-layouts-zone');
                        }
                        if (_canAddFields(layout)) {
                            if (layout.$inline && (options.design || !layout.$html)) {
                                if (Phoenix.bootstrap4 && _allFieldsRight(layout))
                                    css.push('form-inline d-flex flex-row-reverse bs-inline-container');
                                else
                                    css.push('form-inline bs-inline-container');
                            }
                            if (options.design) {
                                css.push('drop-fields-zone');
                                if (!canAddLayouts)
                                    css.push('no-x-padding');
                            }
                        }
                        _addStdThemes(layout, css, options);
                    }
                    break;
                case layoutUtils.LAYOUT_COLUMN:
                    if (options.step === 1) {
                        if (options.design)
                            css.push('col-design col' + (_bootstrap4 ? '' : '-xs') + '-' + layout.$colSize);
                        else {
                            if (layout.$customColSize) {
                                css.push(layout.$customColSize);
                            }
                            else
                                css.push('col-' + (layout.$colType || 'sm') + '-' + layout.$colSize);
                        }
                        css.push('no-x-padding');
                    }
                    else if (options.step === 2) {
                        addpaddingclass = true;
                        css.push('container-fluid');
                        canAddLayouts = _canAddLayouts(layout);
                        if (canAddLayouts) {
                            if (options.design || _noPadding(layout, parent)) {
                                addpaddingclass = false;
                                css.push('no-x-padding');
                            }
                            if (options.design && !layout.$auto)
                                css.push('drop-layouts-zone');
                        }
                        if (_canAddFields(layout)) {
                            if (layout.$inline && (options.design || !layout.$html)) {
                                if (Phoenix.bootstrap4 && _allFieldsRight(layout))
                                    css.push('form-inline d-flex flex-row-reverse bs-inline-container');
                                else
                                    css.push('form-inline bs-inline-container');
                            }
                            if (options.design) {
                                css.push('drop-fields-zone');
                                if (!canAddLayouts) {
                                    css.push('no-x-padding');
                                    addpaddingclass = false;
                                }
                            }
                        }
                        if (addpaddingclass)
                            css.push('field-container');
                        if (options.design) {
                            css.push('design col');
                            if (layout.$auto)
                                css.push('auto');
                            if (layout.selected)
                                css.push('selected');
                        }
                        _addStdThemes(layout, css, options);
                    }
                    break;
                case layoutUtils.LAYOUT_HTML:
                    if (options.design) {
                        css.push('design');
                        if (layout.selected)
                            css.push('selected');
                    }
                    _addStdThemes(layout, css, options);
                    break;
            }
        }, _setLayoutCss = function (e, layout, parent, options) {
            var css = [], style = [], t;
            _css(layout, parent, options, css, style);
            e.className = css.join(' ');
            if (style.length)
                e.style = style.join(' ');
            if (layout.$type === layoutUtils.LAYOUT_ACCORDION_GROUP && options.step === 1) {
                t = _dom.find(e, layout.$id + '_title');
                if (t)
                    _dom.text(t, (layout.$title && layout.$title.value) ? layout.$title.value : '');
            }
            else if (layout.$type === layoutUtils.LAYOUT_HTML && options.step === 1) {
                e.innerHTML = layout.$html || '';
            }
        }, _addLayoutCss = function (html, layout, parent, options) {
            var css = [], style = [];
            _css(layout, parent, options, css, style);
            if (css.length) {
                html.push(' class="');
                html.push(css.join(' '));
                html.push('"');
            }
            if (style.length) {
                html.push(' style="');
                html.push(style.join(' '));
                html.push('"');
            }
        }, _addId = function (html, layout, prefix) {
            html.push(' id="');
            html.push(prefix ? (prefix + '_' + layout.$id) : layout.$id);
            html.push('"');
        }, _addDataStep = function (html, step, design) {
            if (design) {
                html.push(' data-level="');
                html.push(step);
                html.push('"');
            }
        }, _addLayoutId = function (html, step, layout, design, force) {
            if (force || design) {
                html.push(' data-layout="');
                html.push(layout.$id);
                html.push('"');
                layout.$idSelect = null;
            }
            if (force || (design && step > 1)) {
                var id = layout['$idStep' + step];
                if (id) {
                    html.push(' id="');
                    html.push(id);
                    html.push('"');
                }
            }
        }, _updateLayoutTitle = function (titleElement, layout, formData, llocale) {
            if (layout.$title.value) {
                var tt = _ulocale.tt(layout.$title.value, llocale);
                if (layout.$fields) {
                    tt = _utils.execAngularExpression(tt, formData || {});
                }
                _dom.text(titleElement, tt);
            }
        }, _addTitle = function (html, layout, llocale, isForm, formData) {
            if (layout.$title && layout.$title.value === _locale.defaultTitle) {
                delete layout.$title;
                return;
            }
            if (isForm && layout.$title) {
                if (!layout.$title.isHidden) {
                    var size = layout.$title.size || (_p.bootstrap4 ? 5 : 4);
                    html.push('<h' + size);
                    var css = ['bs-block-title'];
                    if (layout.$title.$style)
                        _dom.parseStyle(layout.$title.$style, css);
                    html.push(' data-ignore="true" class="' + css.join(' ') + '" id="' + layout.$id + '_title">');
                    if (layout.$title.value) {
                        var tt = _ulocale.tt(layout.$title.value, llocale);
                        if (layout.$fields) {
                            tt = _utils.execAngularExpression(tt, formData || {});
                        }
                        html.push(_utils.escapeHtml(tt));
                    }
                    html.push('</h' + size + '>');
                }
            }
        }, _blockBefore = function (html, layout, parent, model, llocale, design, isForm, refBlock) {
            html.push('<div');
            if (design)
                html.push(' draggable="true"');
            _addLayoutCss(html, layout, parent, {
                design: design,
                step: 1
            });
            _addLayoutId(html, 1, layout, design);
            _addId(html, layout);
            _addDataStep(html, 1, design);
            html.push('>');
            _addTitle(html, layout, llocale, isForm, model);
        }, _blockAfter = function (html, layout, parent, model, llocale, design) {
            html.push('</div>');
        }, _addLinkSublayout = function (html, layout, parent, model, llocale, design) {
            html.push(_utils.format('<div id="{0}_settings" class="bs-cursor-p bs-layout-detail" data-layout-detail="true"><span class="' + _dom.iconClass('cog') + '"></span></div>', layout.$id));
        }, _htmlBefore = function (html, layout, parent, model, llocale, design, refBlock) {
            html.push('<div');
            if (design)
                html.push(' draggable="true"');
            _addLayoutCss(html, layout, parent, {
                design: design,
                step: 1
            });
            _addLayoutId(html, 1, layout, design);
            _addId(html, layout);
            _addDataStep(html, 1, design);
            html.push('>');
            if (layout.$html)
                html.push(layout.$html);
        }, _htmlAfter = function (html, layout, model, llocale, design) {
            html.push('</div>');
        }, _tabBuilder = function (html, layout, parent, model, llocale, design, isForm, formData, refBlock) {
            var _bootstrap4 = _p.bootstrap4;
            if (_bootstrap4) {
                html.push('<li class="nav-item">');
                var css = ['nav-link'];
                if (layout.opened)
                    css.push('active');
                html.push(_utils.format('<a class="' + css.join(' ') + '" id="{0}_title" href="#{0}" data-layout="{0}" aria-expanded="' + (layout.opened ? 'true' : 'false') + '" role="tab" data-toggle="tab">', layout.$id));
                var tt = _ulocale.tt(layout.$title.value, llocale);
                if (layout.$fields) {
                    tt = _utils.execAngularExpression(tt, formData || {});
                }
                html.push(_utils.escapeHtml(tt));
                html.push('</a></li>');
            }
            else {
                html.push('<li role="presentation"');
                if (layout.opened)
                    html.push(' class="active"');
                html.push('>');
                html.push(_utils.format('<a href="#{0}" id="{0}_title" aria-controls="{0}"  data-layout="{0}" role="tab" data-toggle="tab">', layout.$id));
                var tt = _ulocale.tt(layout.$title.value, llocale);
                if (layout.$fields) {
                    tt = _utils.execAngularExpression(tt, formData || {});
                }
                html.push(_utils.escapeHtml(tt));
                html.push('</a></li>');
            }
        }, _accordionBefore = function (html, layout, parent, model, llocale, design, isForm, refBlock) {
            _checkAccordionChildren(layout);
            if (design || !layout.$widget) {
                html.push('<div role="tablist"');
                if (!Phoenix.bootstrap4)
                    html.push(' aria-multiselectable="true"');
                if (design)
                    html.push(' draggable="true"');
                _addLayoutCss(html, layout, parent, {
                    design: design,
                    step: 1
                });
                _addLayoutId(html, 1, layout, design);
                _addId(html, layout);
                _addDataStep(html, 1, design);
                html.push(' id="' + layout.$id + '_parent"');
                html.push('>');
            }
            else if (layout.$widget === 'tabs' || layout.$widget === 'none') {
                // design is allways false
                var isWizard = layout.$widget === 'none';
                html.push('<div');
                _addLayoutCss(html, layout, parent, {
                    design: design,
                    step: 1
                });
                _addLayoutId(html, 1, layout, design);
                _addId(html, layout);
                _addDataStep(html, 1, design);
                html.push('>');
                html.push('<ul  id="' + layout.$id + '_tab" class="nav nav-tabs bs-tabs' + (isWizard && !layout.showTabs ? ' bs-none' : '') + '" role="tablist">');
                layout.$items.forEach(function (item) { return _tabBuilder(html, item, layout, model, llocale, design, isForm, model, refBlock); });
                html.push('</ul>');
                html.push('<div class="tab-content">');
            }
            else
                throw 'Invalid accordion $widget.';
        }, _accordionAfter = function (html, layout, parent, model, llocale, design) {
            if (design || !layout.$widget) {
                html.push('</div>');
            }
            else if (layout.$widget === 'tabs' || layout.$widget === 'none') {
                html.push('</div>'); //tab-content"
                html.push('</div>');
            }
        }, _accordionGroupBefore = function (html, layout, parent, model, llocale, design, isForm, refBlock) {
            var _bootstrap4 = _p.bootstrap4;
            if (design || !parent.$widget) {
                html.push('<div');
                _addLayoutCss(html, layout, parent, {
                    design: design,
                    step: 1
                });
                _addLayoutId(html, 1, layout, design);
                _addId(html, layout);
                _addDataStep(html, 1, design);
                //_addId(html, layout);
                layout.$idStep2 = layout.$id + '_s2';
                layout.$idStep3 = layout.$id + '_s3';
                layout.$idDesign = layout.$idStep3;
                if (design)
                    html.push(' draggable="true"');
                html.push('>');
                if (_bootstrap4)
                    html.push('<div class="card-header" role="tab"');
                else
                    html.push('<div class="panel-heading" role="tab"');
                _addId(html, layout, "heading");
                html.push('>');
                if (_bootstrap4)
                    html.push('<h5 class="mb-0">');
                else {
                    html.push('<h4 class="panel-title bs-pointer collapsed" data-toggle="collapse" data-parent="#' + parent.$id + '"');
                    if (layout.opened)
                        html.push(' aria-expanded="true"');
                    else
                        html.push(' aria-expanded="false"');
                    html.push(' data-target="#' + layout.$idStep2 + '" aria-controls="' + layout.$idStep2 + '"');
                    html.push(' id="' + layout.$id + '_title">');
                }
                if (_bootstrap4) {
                    html.push('<a');
                    html.push(' data-toggle="collapse"'); //OK
                    html.push(' href="#' + layout.$idStep2 + '"'); //OK
                    html.push(' aria-controls="' + layout.$idStep2 + '"'); //OK
                    if (layout.opened)
                        html.push(' aria-expanded="true"');
                    else {
                        html.push(' aria-expanded="false"');
                        html.push(' class="collapsed"');
                    }
                    html.push('>');
                }
                html.push(_utils.escapeHtml(layout.$title ? layout.$title.value : ''));
                if (_bootstrap4)
                    html.push('</a></h5>');
                else
                    html.push('</h4>');
                html.push('</div>');
                html.push('<div role="tabpanel" aria-labelledby="heading_' + layout.$id + '"');
                if (_bootstrap4)
                    html.push(' data-parent="#' + parent.$id + '"');
                _addLayoutCss(html, layout, parent, {
                    design: design,
                    step: 2
                });
                _addLayoutId(html, 2, layout, design, true);
                _addDataStep(html, 2, design);
                html.push('>');
                html.push('<div');
                _addLayoutCss(html, layout, parent, {
                    design: design,
                    step: 3
                });
                _addLayoutId(html, 3, layout, design, true);
                html.push('>');
            }
            else if (parent.$widget === 'tabs' || parent.$widget === 'none') {
                var css = ['tab-pane fade'];
                if (layout.opened)
                    css.push('in ' + (_bootstrap4 ? 'show active' : 'active'));
                html.push('<div role="tabpanel"');
                html.push(' class="' + css.join(' ') + '"');
                layout.$idDesign = layout.$id;
                _addId(html, layout);
                html.push('>');
            }
        }, _accordionGroupAfter = function (html, layout, parent, model, llocale, design) {
            if (design || !parent.$widget) {
                html.push('</div></div></div>');
            }
            else if (parent.$widget === 'tabs' || parent.$widget === 'none') {
                html.push('</div>');
            }
        }, _rowBefore = function (html, layout, parent, model, llocale, design, isForm, refBlock) {
            html.push('<div');
            if (design)
                html.push(' draggable="true"');
            _addLayoutCss(html, layout, parent, {
                design: design,
                step: 1
            });
            _addId(html, layout);
            _addLayoutId(html, 1, layout, design);
            _addDataStep(html, 1, design);
            html.push('>');
            layout.$idStep2 = layout.$id + "_s2";
            layout.$idDesign = layout.$idStep2;
            html.push('<div');
            _addLayoutCss(html, layout, parent, {
                design: design,
                step: 2
            });
            _addLayoutId(html, 2, layout, design);
            _addDataStep(html, 2, design);
            html.push('>');
            _checkRowChildren(layout);
        }, _rowAfter = function (html, layout, parent, model, llocale, design) {
            html.push('</div></div>');
        }, _columnBefore = function (html, layout, parent, model, llocale, design, isForm, refBlock) {
            html.push('<div');
            _addLayoutCss(html, layout, parent, {
                design: design,
                step: 1
            });
            _addLayoutId(html, 1, layout, design);
            _addId(html, layout);
            _addDataStep(html, 1, design);
            html.push('>');
            html.push('<div');
            _addLayoutCss(html, layout, parent, {
                design: design,
                step: 2
            });
            if (design)
                html.push(' draggable="true"');
            layout.$idDesign = layout.$id + "_design";
            layout.$idDrag = layout.$id;
            layout.$idStep2 = layout.$idDesign;
            _addLayoutId(html, 2, layout, design);
            _addDataStep(html, 2, design);
            layout.$idSelect = layout.$idDesign;
            html.push('>');
            _addTitle(html, layout, llocale, isForm, model);
        }, _columnAfter = function (html, layout, parent, model, llocale, design) {
            html.push('</div></div>');
        }, _enumElements = function (layout, parent, onElement, root, param) {
            if (layout) {
                if (root && !layout.$type && !layout.$items) {
                    onElement(layout, parent, false, true, param);
                    return;
                }
                onElement(layout, parent, true, true, param);
                if (param && param.stop) {
                }
                else {
                    if (_canAddFields(layout)) {
                        if (layout.$items)
                            layout.$items.forEach(function (item) {
                                onElement(item, layout, false, true, param);
                            });
                    }
                    else {
                        if (layout.$items)
                            layout.$items.forEach(function (item) {
                                _enumElements(item, layout, onElement, false, param);
                            });
                    }
                }
                onElement(layout, parent, true, false, param);
            }
        }, _nullHtmlFieldRender = function (html, item, layout, model, options) {
            html.push('<div class="bs-island' + (options.design ? ' design' : '') + (item.$config ? ' bs-widget' : ' bs-field') + (item.selected ? ' selected"' : '"'));
            if (options.design)
                html.push(' draggable="true"');
            html.push(' data-render="' + item.$id + '"');
            html.push(' id="' + item.$id + '"');
            html.push('></div>');
        }, _nullWidgetRender = function (html, item, layout, model, options) {
            html.push('<div id="' + item.$id + '"></div>');
        }, _renderLayout = function (layout, model, html, llocale, options, cb) {
            var wHtmlFieldRender = _render.get(options.context, 'widget') || _nullWidgetRender;
            var fHtmlFieldRender = _render.get(options.context, 'field') || _nullHtmlFieldRender;
            var isForm = layout.form;
            var p = {
                html: html
            };
            _enumElements(layout, null, function (item, parent, isLayout, before, param) {
                if (isLayout) {
                    var rb = _blockBefore;
                    var ra = _blockAfter;
                    switch (item.$type) {
                        case layoutUtils.LAYOUT_ROW:
                            rb = _rowBefore;
                            ra = _rowAfter;
                            break;
                        case layoutUtils.LAYOUT_COLUMN:
                            rb = _columnBefore;
                            ra = _columnAfter;
                            break;
                        case layoutUtils.LAYOUT_ACCORDION:
                            rb = _accordionBefore;
                            ra = _accordionAfter;
                            break;
                        case layoutUtils.LAYOUT_ACCORDION_GROUP:
                            rb = _accordionGroupBefore;
                            ra = _accordionGroupAfter;
                            break;
                        case layoutUtils.LAYOUT_HTML:
                            rb = _htmlBefore;
                            ra = _htmlAfter;
                            break;
                    }
                    if (before) {
                        if (item.$ref && options.design) {
                            param.stop = true;
                        }
                        rb(param.html, item, parent, model, llocale, options.design, isForm, param.stop);
                        if (param.stop)
                            _addLinkSublayout(param.html, item, parent, model, llocale, options.design);
                        //if (!_layoutIsVisible(item)) {
                        //	item.oldHtml = param.html;
                        //		param.html = [];
                        //}
                        if (cb)
                            cb(item);
                    }
                    else {
                        //if (!_layoutIsVisible(item)) {
                        //	item.$content = param.html;
                        //	param.html = item.oldHtml;
                        //	delete item.oldHtml;
                        //}
                        if (!options.design && item.$html && item.$items && item.$items.length && _canAddFields(item)) {
                            param.html.push(_utils.format(item.$html.replace(/id="/g, 'id="{0}_'), item.$id));
                        }
                        ra(param.html, item, parent, model, llocale, options.design);
                        if (item.$ref && options.design) {
                            param.stop = false;
                        }
                    }
                }
                else {
                    if (item.$config)
                        wHtmlFieldRender(param.html, item, parent, model, options);
                    else
                        fHtmlFieldRender(param.html, item, parent, model, options);
                }
            }, true, p);
        }, _canSelectLayout = function (layout, level) {
            if (layout.$auto)
                return false;
            if (layout.$type === layoutUtils.LAYOUT_COLUMN && level === 1)
                return false;
            return true;
        }, _check = function (layout, parentLayout, map, mapFields, namedMap, namedFieldMap) {
            _enumElements(layout, parentLayout, function (item, parent, isLayout, before) {
                if (before) {
                    if (isLayout)
                        _checkLayout(item, parent, map, namedMap);
                    else {
                        _checkField(item, parent, mapFields, namedFieldMap);
                    }
                }
            }, true);
        }, _names = function (layout) {
            var names = [];
            _enumElements(layout, null, function (item, parent, isLayout, before, param) {
                if (isLayout && before) {
                    if (item.$name) {
                        names.push({ name: item.$name, title: item.$title && item.$title.value ? item.$title.value : item.$name });
                    }
                }
            }, true);
            return names;
        }, _clearMeta = function (layout, clearIds) {
            _enumElements(layout, null, function (item, parent, isLayout, before) {
                if (before) {
                    if (isLayout) {
                        if (clearIds)
                            delete item.$id;
                        delete item.$fields;
                        delete item.$render;
                        delete item.$idDesign;
                        delete item.$idDrag;
                        delete item.$idSelect;
                        delete item.$parentId;
                        delete item.$idStep2;
                        delete item.$idStep3;
                        delete item.$content;
                        delete item.selected;
                        delete item.showTabs;
                        if (item.$type !== layoutUtils.LAYOUT_BLOCK) {
                            delete item.$sticky;
                            if (item.$type === layoutUtils.LAYOUT_COLUMN)
                                delete item.$type;
                            else if (layout.$type === layoutUtils.LAYOUT_HTML) {
                                if (layout.$html === _locale.Html)
                                    delete layout.$html;
                            }
                        }
                        if (item.$type !== layoutUtils.LAYOUT_ROW || layout.$forceTable === false)
                            delete layout.$forceTable;
                        if (!item.$name && item.$name !== undefined)
                            delete item.$name;
                        if (item.$inline === false)
                            delete item.$inline;
                        if (item.$fieldsOptions) {
                            if (item.$fieldsOptions.columns === false)
                                delete item.$fieldsOptions.columns;
                            if (item.$fieldsOptions.titleIsHidden === false)
                                delete item.$fieldsOptions.titleIsHidden;
                            if (Object.keys(item.$fieldsOptions).length === 0)
                                delete item.$fieldsOptions;
                        }
                        if (item.datasets && Object.keys(item.datasets).length === 0)
                            delete item.datasets;
                    }
                    else {
                        delete item.$render;
                        if (clearIds)
                            delete item.$id;
                        delete item.$parentId;
                        delete item.$idDrag;
                        delete item.selected;
                        if (item.$config) {
                            if (item.$config.data) {
                                delete item.$config.data.ds;
                                if (!Object.keys(item.$config.data).length)
                                    delete item.$config.data;
                            }
                            if (item.$config.$titleIsHidden || item.$config.$dontSaveTitle) {
                                delete item.$config.$title;
                            }
                        }
                    }
                }
            }, true);
        }, _enumSubLayouts = function (layout, cb) {
            _enumElements(layout, null, function (item, parent, isLayout, before) {
                if (before && isLayout)
                    cb(item);
            }, false);
        }, _clearMaps = function (layout, map, mapFields, namedMap, namedMapFields) {
            _enumElements(layout, null, function (item, parent, isLayout, before) {
                if (before) {
                    if (isLayout) {
                        delete map[item.$id];
                        if (item.$name) {
                            var d = namedMap[item.$name];
                            if (Array.isArray(d)) {
                                var ii = d.indexOf(item);
                                if (ii >= 0)
                                    d.splice(ii, 1);
                                if (!d.length)
                                    delete namedMap[item.$name];
                            }
                            else
                                delete namedMap[item.$name];
                        }
                    }
                    else {
                        delete mapFields[item.$id];
                        if (item.$name)
                            delete namedMapFields[item.$name];
                    }
                }
            }, true);
        }, _afterRemoveChild = function (layout, map, mapFields, namedMap, namedMapFields) {
            if (layout.$type === layoutUtils.LAYOUT_ROW) {
                layout.$items.forEach(function (item) {
                    item.$type = layoutUtils.LAYOUT_COLUMN;
                    delete item.$colSize;
                });
                _checkRowChildren(layout);
                layout.$items.forEach(function (item) {
                    _check(item, layout, map, mapFields, namedMap, namedMapFields);
                });
            }
            else if (layout.$type === layoutUtils.LAYOUT_ACCORDION) {
                _checkAccordionChildren(layout);
                layout.$items.forEach(function (item) {
                    _check(item, layout, map, mapFields, namedMap, namedMapFields);
                });
            }
        }, _toHtml = function (layout, model, llocale, options, cb) {
            var html = [];
            _renderLayout(layout, model, html, llocale, options, cb);
            return html.join('');
        };
        layoutUtils.check = _check;
        layoutUtils.layoutVisible = _layoutIsVisible;
        layoutUtils.clearMeta = _clearMeta;
        layoutUtils.namesOfLayout = _names;
        layoutUtils.clearMaps = _clearMaps;
        layoutUtils.afterRemoveChild = _afterRemoveChild;
        layoutUtils.canSelect = _canSelectLayout;
        layoutUtils.updateCssClass = _setLayoutCss;
        layoutUtils.toHtml = _toHtml;
        layoutUtils.updateLayoutTitle = _updateLayoutTitle;
        layoutUtils.enumSubLayouts = _enumSubLayouts;
    })(layoutUtils = Phoenix.layoutUtils || (Phoenix.layoutUtils = {}));
})(Phoenix || (Phoenix = {}));
/// <reference path="../core/core-refs.ts" />
/// <reference path="./module.ts" />
/// <reference path="./datasets-plugin.ts" />
/// <reference path="./page.control.ts" />
/// <reference path="./layout.ts" />
/// <reference path="./menu.ts" />
var Phoenix;
(function (Phoenix) {
    var _p = Phoenix, _pagecontrol = _p.pagecontrol, _menu = _p.menu, _dom = _p.dom, _utils = _p.utils, _locale = _p.locale, _wutils = _p.WidgetUtils, _link = _p.link, _render = _p.render, _ipc = _p.ipc, _sticky = _p.sticky, _layoutUtils = _p.layoutUtils;
    var ui;
    (function (ui) {
        var _findSelected = function (maps) {
            var j = maps.length;
            while (j--) {
                var map = maps[j];
                var ids = Object.keys(map);
                var i = ids.length;
                while (i--) {
                    var o = map[ids[i]];
                    if (o.selected) {
                        return o;
                    }
                }
            }
            return null;
        };
        var BaseLayout = /** @class */ (function () {
            function BaseLayout(ldata, options, fdata, schema, locale, preferences) {
                options = this.initOptions(options);
                this.$locale = null;
                this._init(ldata, options);
            }
            BaseLayout.prototype._afterCreate = function () {
            };
            BaseLayout.prototype.initOptions = function (options) {
                return options;
            };
            BaseLayout.prototype._init = function (ldata, options) {
                // Layout
                var that = this;
                that.$element = null;
                that.$content = null;
                that.options = options || {};
                that.options.context = that.options.context || "javascript";
                that.map = {};
                that.mapFields = {};
                that.namedMap = {};
                that.namedMapFields = {};
                ldata = ldata || {};
                _layoutUtils.check(ldata, null, that.map, that.mapFields, that.namedMap, that.namedMapFields);
                that.data = ldata;
                that.data.form = that.options.form;
                ldata.map = that.map;
                ldata.fields = that.mapFields;
                that.children = {}; // Is used only in javascript mode to cleanup children
                that.controls = {}; // list of instanced modules or controls   
                that.expressionTitle = false;
                var isForm = that.options.form;
                if (!isForm) {
                    that.page = _pagecontrol.Page();
                    that.page.setPopup(null);
                    that.page.addChild("layout", that);
                    if (!that.options.design) {
                        that.expressionTitle = _utils.hasExpression(ldata.$title);
                        that.page.props.$title = ldata.$title ? _utils.parseExpression(ldata.$title, _link.context()) : null;
                    }
                }
                that._setDesignListeners();
                that.pageLayoutInit();
            };
            BaseLayout.prototype.pageLayoutInit = function () { };
            BaseLayout.prototype.getSchema = function (path) { return null; };
            BaseLayout.prototype.getLookupForSchema = function (path, lookupName) { return null; };
            BaseLayout.prototype._setDesignListeners = function () { };
            BaseLayout.prototype._removeEvents = function () {
                var that = this;
                that._removeBaseEvents();
            };
            BaseLayout.prototype._addEvents = function () {
                var that = this;
                that._addBaseEvents();
            };
            BaseLayout.prototype._removeBaseEvents = function () {
                var that = this;
                that._removeAccordionEvents();
            };
            BaseLayout.prototype._addBaseEvents = function () {
                var that = this;
                that._setAccordionEvents();
            };
            BaseLayout.prototype._onSelectedChanged = function (element, data, notify) { };
            BaseLayout.prototype._showSelected = function ($element, layout) { };
            BaseLayout.prototype._setAccordionEvents = function () {
                var that = this;
                that.$element.on('shown.bs.collapse hide.bs.collapse shown.bs.tab hide.bs.tab', function (event) {
                    var ee = event.target;
                    if (!ee || !ee.hasAttribute('data-layout'))
                        return;
                    var id = ee.getAttribute('data-layout');
                    var l = that.getLayoutById(id);
                    if (l) {
                        var nv = event.type === 'shown';
                        if (l.opened === nv)
                            return;
                        if (nv) {
                            that._openTab(id);
                        }
                        else {
                            that._activateLayout(l, false);
                        }
                    }
                });
            };
            BaseLayout.prototype._activatePageLayout = function (item) {
                var that = this;
                var tab = that.$element ? _dom.find(that.$element.get(0), item.$id + '_title') : null;
                if (tab) {
                    var $tab = $(tab);
                    $tab.tab('show');
                }
            };
            BaseLayout.prototype.activatePage = function (name) {
                var that = this;
                var layouts = that.getLayoutsByName(name);
                if (layouts)
                    layouts.forEach(function (item) { return that._activatePageLayout(item); });
            };
            BaseLayout.prototype._openTab = function (id) {
                var that = this;
                var l = that.getLayoutById(id);
                if (l.opened)
                    return;
                var parentLayout = that.getLayoutById(l.$parentId);
                if (parentLayout) {
                    for (var i = 0, len = parentLayout.$items.length; i < len; i++) {
                        var ci = parentLayout.$items[i];
                        if (ci.opened) {
                            ci.opened = false;
                            that._activateLayout(ci, false);
                            break;
                        }
                    }
                }
                l.opened = true;
                that._updateLayoutContent(l);
                that._activateLayout(l, true);
                /*
                if (l.$content) {
                    that._renderLayoutContent(l);
                    that._afterVisibilityChanged({ inDom: true, resize: false });
                } else
                    that._activateLayout(l, true);
                */
            };
            BaseLayout.prototype._doDatasetEventAfterEnabled = function (child) { };
            BaseLayout.prototype._activateLayout = function (layout, value) {
                var that = this, children;
                if (value) {
                    children = that._getVisibleChildren(layout);
                    children.forEach(function (child) {
                        child.disabled = false;
                        that._doDatasetEventAfterEnabled(child);
                    });
                }
                else {
                    // disable all childrens
                    children = that._getChildrenOf(layout);
                    children.forEach(function (child) {
                        child.disabled = true;
                    });
                }
                that._afterVisibilityChanged({ inDom: true, resize: value });
            };
            BaseLayout.prototype._removeAccordionEvents = function () {
                var that = this;
                that.$element.off('show.bs.collapse hide.bs.collapse');
            };
            BaseLayout.prototype.toString = function (layout) {
                return null;
            };
            /* Start datasets methods */
            BaseLayout.prototype.emit = function (eventName, value, filter) {
                this.emitDataEvent(eventName, value, filter);
            };
            /* End datasets methods */
            BaseLayout.prototype.openErrors = function () {
                var that = this;
                if (that.$element) {
                    var eerr = _dom.find(that.$element.get(0), that.data.$id + '_error');
                    if (eerr && eerr.firstChild) {
                        _dom.removeClass(eerr.firstChild, 'bs-none');
                    }
                }
            };
            BaseLayout.prototype._getFormLData = function () {
                return null;
            };
            BaseLayout.prototype._renderLayout = function (layout) {
                var that = this;
                that.stickies = null;
                var $e = $(_layoutUtils.toHtml(layout, that._getFormLData(), that.$locale, {
                    design: that.options.design,
                    context: that.options.context
                }, function (item) {
                    if (!that.options.design && !_sticky.native && item.$sticky) {
                        that.stickies = that.stickies || {};
                        that.stickies[item.$id] = item;
                    }
                }));
                that.$element = $e;
                that.afterRender($e);
                that._renderChildren($e);
                that.afterRenderChildren($e);
                return $e;
            };
            BaseLayout.prototype.afterRenderChildren = function ($e) {
            };
            BaseLayout.prototype.isChildOf = function (child, layout) {
                var that = this;
                var cl = that.map[child];
                while (cl) {
                    if (cl == layout)
                        return true;
                    ;
                    cl = that.map[cl.$parentId];
                }
                return false;
            };
            BaseLayout.prototype._isChildVisibleOf = function (child, layout) {
                var that = this;
                var cl = that.map[child];
                while (cl) {
                    if (!_layoutUtils.layoutVisible(cl))
                        return false;
                    if (cl == layout)
                        return true;
                    cl = that.map[cl.$parentId];
                }
                return false;
            };
            BaseLayout.prototype._getVisibleChildren = function (layout) {
                var that = this;
                var res = [];
                Object.keys(that.controls).forEach(function (cn) {
                    var c = that.controls[cn];
                    if (that.controls[cn].item)
                        if (that._isChildVisibleOf(that.controls[cn].item.$parentId, layout))
                            res.push(c);
                });
                return res;
            };
            BaseLayout.prototype._getChildrenOf = function (layout) {
                var that = this;
                var res = [];
                Object.keys(that.controls).forEach(function (cn) {
                    var c = that.controls[cn];
                    if (that.controls[cn].item)
                        if (that.isChildOf(that.controls[cn].item.$parentId, layout))
                            res.push(c);
                });
                return res;
            };
            BaseLayout.prototype._getEventListFor = function (list) {
                //var that = this;
                var res = [];
                list.forEach(function (ci) {
                    if (ci.datasets) {
                        Object.keys(ci.datasets).forEach(function (dsn) {
                            var ds = ci.datasets[dsn];
                            if (ds.enumTriggers) {
                                ds.enumTriggers(false, function (tn) {
                                    if (res.indexOf(tn) < 0)
                                        res.push(tn);
                                });
                            }
                        });
                    }
                });
                return res;
            };
            BaseLayout.prototype._refreshDataSets = function (children) { };
            BaseLayout.prototype._afterLayoutAdded = function (layout) { };
            BaseLayout.prototype._updateLayoutContent = function (layout) {
                var that = this;
                var cc = _dom.find(that.$element.get(0), layout.$idDesign);
                var $p = $(cc);
                that._renderChildren($p);
                that.afterAddedInDom();
            };
            BaseLayout.prototype._renderLayoutContent = function (layout) {
                var that = this;
                var cc = _dom.find(that.$element.get(0), layout.$idDesign);
                if (!cc)
                    return;
                var $p = $(cc);
                var $e = $(layout.$content.join(''));
                var parent = cc.parentNode, cb = cc.nextSibling;
                $p.detach();
                $p.append($e);
                delete layout.$content;
                if (that.options.beforeAdd)
                    that.options.beforeAdd($p, true);
                parent.insertBefore(cc, cb);
                that._afterLayoutAdded(layout);
                that._renderChildren($p);
                var vc = that._getVisibleChildren(layout);
                that._refreshDataSets(vc);
                that.afterAddedInDom();
                if (that.options.design) {
                    that._removeEvents();
                    that._addEvents();
                }
            };
            BaseLayout.prototype._isVisible = function (id) {
                var that = this;
                while (true) {
                    if (!id)
                        return true;
                    var layout = that.map[id];
                    if (!layout)
                        return true;
                    if (!_layoutUtils.layoutVisible(layout))
                        return false;
                    id = layout.$parentId;
                }
            };
            BaseLayout.prototype._renderChildren = function ($e) {
                var that = this;
                var res = [];
                var e = $e.get(0);
                var wc = _render.get(that.options.context, 'widget.control');
                var fc = _render.get(that.options.context, 'field.control');
                var metaCtrls = [];
                var ctrlsByBind = {};
                var toRender = [];
                that._autofocus = null;
                if (wc || fc) {
                    // only on javascript mode
                    Object.keys(that.mapFields).forEach(function (fn) {
                        if (that.children[fn])
                            return;
                        var fd = that.mapFields[fn];
                        if (!that._isVisible(fd.$parentId))
                            return;
                        var _constructor = fd.$config ? wc : fc;
                        var isField = _constructor === fc;
                        if (isField) {
                            var isMeta = (fd.$bind || '').indexOf('$$') === 0;
                            var schema = that.getSchema(fd.$bind), lookup = void 0;
                            if (!schema && !isMeta)
                                console.log('Schema not found for field "' + fd.$bind + '".');
                            if (fd && fd.$lookup) {
                                lookup = that.getLookupForSchema(fd.$bind, fd.$lookup);
                            }
                            _constructor = _constructor ? _constructor(fd, schema, lookup) : null;
                        }
                        if (_constructor) {
                            var p_2, opt = { context: that.options.context, design: that.options.design, replaceParent: true, readOnly: fd.$readOnly };
                            if (isField) {
                                p_2 = new _constructor(fd, opt, that);
                                if (p_2.isMeta()) {
                                    metaCtrls.push(p_2);
                                }
                                else {
                                    if (fd.$bind)
                                        ctrlsByBind[fd.$bind] = p_2;
                                }
                                if (fd.options && fd.options.autofocus)
                                    that._autofocus = p_2;
                                if (p_2.getSubControls && p_2.addSubControls) {
                                    var subctrls = p_2.getSubControls();
                                    subctrls && subctrls.forEach(function (ctrl) {
                                        var scIsMeta = (ctrl.$bind || '').indexOf('$$') === 0;
                                        var scSchema = that.getSchema(ctrl.$bind), scLookup;
                                        if (!scSchema && !scIsMeta)
                                            console.log('Schema not found for field "' + ctrl.$bind + '".');
                                        if (ctrl && ctrl.$lookup) {
                                            scLookup = that.getLookupForSchema(ctrl.$bind, ctrl.$lookup);
                                        }
                                        var _scConstructor = fc ? fc(ctrl, scSchema, scLookup) : null;
                                        var scOpt = { context: that.options.context, design: that.options.design, replaceParent: false, readOnly: ctrl.$readOnly };
                                        var scp = new _scConstructor(ctrl, scOpt, that);
                                        if (scp.isMeta()) {
                                            metaCtrls.push(scp);
                                        }
                                        else {
                                            if (ctrl.$bind)
                                                ctrlsByBind[ctrl.$bind] = scp;
                                        }
                                        p_2.addSubControls(scp);
                                    });
                                }
                            }
                            else
                                p_2 = new _constructor(fd, opt, that);
                            var hparent = void 0;
                            if (that.options.design || !fd.$htmlParent) {
                                hparent = _dom.find(e, fd.$id);
                            }
                            else {
                                hparent = _dom.find(e, fd.$parentId + "_" + fd.$htmlParent);
                                if (hparent) {
                                    opt.replaceParent = false;
                                    var op = _dom.find(e, fd.$id);
                                    if (op)
                                        _dom.remove(op);
                                }
                                else
                                    hparent = _dom.find(e, fd.$id);
                            }
                            toRender.push({ parent: hparent, control: p_2 });
                            //p.render($(hparent));
                            that.children[fn] = p_2;
                            that.controls[fn] = p_2;
                            if (p_2.resize) {
                                that.resizeList = that.resizeList || [];
                                that.resizeList.push(p_2);
                            }
                            res.push(p_2);
                            if (isField) {
                                if (p_2.getChildren) {
                                    var subControls = p_2.getChildren();
                                    if (subControls) {
                                        subControls.forEach(function (child) {
                                            toRender.push({ parent: child.parent, control: child.control });
                                            child.control.id = child.control.id || _utils.allocID();
                                            that.children[child.control.id] = child.control;
                                            that.controls[child.control.id] = child.control;
                                            if (child.control.resize) {
                                                that.resizeList = that.resizeList || [];
                                                that.resizeList.push(child.control);
                                            }
                                        });
                                    }
                                }
                            }
                        }
                    });
                    metaCtrls.forEach(function (metaControl) {
                        var bind = metaControl.getCustomBind();
                        if (bind) {
                            var parent_1 = ctrlsByBind[bind];
                            if (parent_1)
                                metaControl.setParentId(parent_1.id);
                        }
                    });
                    toRender.forEach(function (item) {
                        if (typeof item.parent === 'string') {
                            item.parent = _dom.find(e, item.parent);
                        }
                        item.control.render($(item.parent));
                        if (item.control.afterAddedInDom) {
                            that.afterRenderList = that.afterRenderList || [];
                            that.afterRenderList.push(item.control);
                        }
                    });
                }
                return res;
            };
            BaseLayout.prototype.addControl = function (layout, controlName, control) {
                //
            };
            BaseLayout.prototype._afterVisibilityChanged = function (options) {
                var that = this;
                that._refreshCurrentResizeList();
                that._refreshStickies(options.resize);
            };
            BaseLayout.prototype._refreshStickies = function (refresh) {
                var that = this;
                if (!that.stickies)
                    return;
                if (!that.$element)
                    return;
                var ns = {}, hs = false;
                Object.keys(that.stickies).forEach(function (sId) {
                    var item = that.stickies[sId];
                    if (that._isVisible(item.$parentId)) {
                        ns[item.$id] = item;
                        hs = true;
                    }
                });
                var toRemove = [];
                if (that.activeStickies) {
                    Object.keys(that.activeStickies).forEach(function (sid) {
                        if (ns[sid])
                            delete ns[sid];
                        else
                            toRemove.push(that.activeStickies[sid]);
                    });
                }
                that.activeStickies = that.activeStickies || {};
                toRemove.forEach(function (item) {
                    delete that.activeStickies[item.id];
                    _sticky.stickyManager.remove(item.id);
                });
                Object.keys(ns).forEach(function (sid) {
                    var item = ns[sid];
                    if (item.$type === _layoutUtils.LAYOUT_BLOCK) {
                        var element = _dom.find(that.$element.get(0), item.$id);
                        if (element) {
                            that.activeStickies[item.$id] = { id: item.$id, element: element, position: item.$sticky };
                            _sticky.stickyManager.add(that.activeStickies[item.$id]);
                        }
                    }
                });
                if (refresh) {
                    _sticky.stickyManager.refresh(true);
                }
            };
            BaseLayout.prototype._refreshCurrentResizeList = function () {
                var that = this;
                if (!that.resizeList)
                    that.currentResizeList = null;
                else if (!that.currentResizeList)
                    that.currentResizeList = that.resizeList.map(function (item) { return item; });
                else {
                    that.currentResizeList = [];
                    that.resizeList.forEach(function (item) {
                        if (that._isVisible(item.config.$parentId))
                            that.currentResizeList.push(item);
                    });
                }
            };
            BaseLayout.prototype._clearSticks = function () {
                var that = this;
                that.stickies = null;
                if (that.activeStickies) {
                    Object.keys(that.activeStickies).forEach(function (itemId) { _sticky.stickyManager.remove(itemId); });
                    that.activeStickies = null;
                }
            };
            BaseLayout.prototype._clearChildren = function () {
                var that = this;
                var children = that.children;
                that.children = {};
                that.controls = {};
                that._clearSticks();
                that.resizeList = null;
                that.currentResizeList = null;
                that.afterRenderList = null;
                Object.keys(children).forEach(function (v) {
                    var c = children[v];
                    c.destroy();
                });
            };
            BaseLayout.prototype._refreshSelected = function () {
                var that = this;
                if (that.options.design) {
                    var o = _findSelected([that.map, that.mapFields]);
                    that._onSelectedChanged(that.$element.get(0), o, true);
                }
            };
            BaseLayout.prototype.registerDataListener = function (value) {
                var that = this;
                if (that.page)
                    that.page.registerDataListener(value, that);
            };
            BaseLayout.prototype.removeDataListener = function (listener) {
                var that = this;
                if (that.page) {
                    if (listener == that)
                        that.page.removeParentDataListener(that);
                    else
                        that.page.removeDataListener(listener);
                }
            };
            BaseLayout.prototype.emitDataEvent = function (event, value, filter) {
                var that = this;
                if (that.page)
                    that.page.emitDataEvent(event, value, filter);
            };
            BaseLayout.prototype.afterRender = function ($e) { };
            BaseLayout.prototype._internalRender = function ($parent, refresh) {
                var that = this;
                if (!that.$element) {
                    that.$element = that._renderLayout(that.data);
                    if (that.options.beforeAdd)
                        that.options.beforeAdd(that.$element, refresh);
                    that.$content.append(that.$element);
                    that._addEvents();
                    that._refreshSelected();
                    if ($parent) {
                        if (!that.options.form)
                            _dom.bodyTheme(that.data.$theme);
                        if (that.options.replaceParent)
                            $parent.replaceWith(that.$content);
                        else
                            $parent.append(that.$content);
                        that._afterVisibilityChanged({ inDom: false, resize: true });
                        that.afterAddedInDom();
                    }
                }
                return that.$content;
            };
            BaseLayout.prototype.afterAddedInDom = function () {
                var that = this;
                var ctx = _link.context();
                if (ctx.$url.$scroll)
                    that.scrollTo(ctx.$url.$scroll);
            };
            BaseLayout.prototype._callInternalRender = function ($parent, refresh) {
                var that = this;
                that._internalRender($parent, refresh);
            };
            BaseLayout.prototype.render = function ($parent) {
                var that = this, refresh;
                if (that.$content) {
                    if (that.$element) {
                        refresh = true;
                        that._clearChildren();
                        that._removeEvents();
                        if (that.options.beforeRemove)
                            that.options.beforeRemove(that.$element);
                        that.$element.remove();
                        that.$element = null;
                    }
                }
                else
                    that.$content = $('<div></div>');
                that._callInternalRender($parent, refresh);
                return that.$content;
            };
            BaseLayout.prototype._destroyDataSets = function () { };
            BaseLayout.prototype.destroy = function () {
                var that = this;
                _utils.log("Destroy Layout", "destroy");
                that._destroyDataSets();
                _ipc.unlisten(that);
                that.removeDataListener(that);
                that._clearChildren();
                if (that.page) {
                    that.page.removeChild(that);
                    that.page = null;
                }
                if (that.$element) {
                    that._removeEvents();
                    that.$element = null;
                }
                that._autofocus = null;
                that.map = null;
                that.mapFields = null;
                that.namedMap = null;
                that.namedMapFields = null;
                that.autoClose = null;
                _layoutUtils.clearMeta(that.data, false);
            };
            BaseLayout.prototype.check = function (layout, parent) {
                var that = this;
                var restoreMap = false;
                if (!layout) {
                    that.map = {};
                    that.mapFields = {};
                    that.namedMap = {};
                    that.namedMapFields = {};
                    parent = null;
                    layout = that.data;
                    restoreMap = true;
                }
                _layoutUtils.check(layout, parent, that.map, that.mapFields, that.namedMap, that.namedMapFields);
                if (restoreMap) {
                    layout.fields = that.mapFields;
                    layout.map = that.map;
                }
            };
            BaseLayout.prototype._afterStructureChanged = function (layout) {
                var that = this;
                that.render();
            };
            BaseLayout.prototype._afterPropsChanged = function (item) {
                var that = this;
                if (!this.$element)
                    return;
                var element = this.$element.get(0);
                if (!element)
                    return;
                var l1 = _dom.find(element, item.$id);
                var l2 = (item.$id != item.$idStep2) ? _dom.find(element, item.$idStep2) : null;
                var l3 = (item.$idStep3) ? _dom.find(element, item.idStep3) : null;
                if (l1)
                    _layoutUtils.updateCssClass(l1, item, that.getLayoutById(item.$parentId), {
                        design: that.options.design,
                        step: 1
                    });
                if (l2)
                    _layoutUtils.updateCssClass(l2, item, that.getLayoutById(item.$parentId), {
                        design: that.options.design,
                        step: 2
                    });
                if (l3)
                    _layoutUtils.updateCssClass(l3, item, that.getLayoutById(item.$parentId), {
                        design: that.options.design,
                        step: 3
                    });
                if (item.selected)
                    that._refreshSelected();
            };
            BaseLayout.prototype.removeChild = function (id) {
                var that = this;
                if (!id || !that.options.design)
                    return;
                var d = that.map[id] || that.mapFields[id];
                if (!d)
                    return;
                var p = that.map[d.$parentId];
                if (!p)
                    return;
                if (p.$auto) {
                    d = p;
                    p = that.map[d.$parentId];
                    if (!p)
                        return;
                }
                var i = p.$items.indexOf(d);
                p.$items.splice(i, 1);
                _layoutUtils.clearMaps(d, this.map, this.mapFields, that.namedMap, that.namedMapFields);
                _layoutUtils.afterRemoveChild(p, that.map, that.mapFields, that.namedMap, that.namedMapFields);
                that._afterStructureChanged(p);
            };
            BaseLayout.prototype.setDesignMode = function (value) {
                var that = this;
                if (that.options.design != value) {
                    that.options.design = value;
                    that.render();
                }
            };
            BaseLayout.prototype.getLayoutById = function (id) {
                if (!id)
                    return null;
                var that = this;
                return that.map[id];
            };
            BaseLayout.prototype.getLayoutElementByName = function (name) {
                if (!name)
                    return null;
                var that = this;
                var layout = that.namedMap[name];
                return layout && that.$element ? _dom.find(that.$element.get(0), layout.$id) : null;
            };
            BaseLayout.prototype.getLayoutByName = function (name) {
                if (!name)
                    return null;
                var that = this;
                var l = that.namedMap[name];
                if (l && Array.isArray(l))
                    return l[0];
                return l;
            };
            BaseLayout.prototype.getLayoutsByName = function (name) {
                if (!name)
                    return null;
                var that = this;
                var l = that.namedMap[name];
                if (l) {
                    if (Array.isArray(l))
                        return l;
                    else
                        return [l];
                }
                return null;
            };
            BaseLayout.prototype.scrollTo = function (name) {
                var that = this;
                var layout = that.getLayoutByName(name);
                if (layout && that.$element) {
                    var p = _dom.find(that.$element.get(0), layout.$id);
                    if (p) {
                        p.scrollIntoView({
                            behavior: 'smooth',
                            block: 'start'
                        });
                    }
                }
            };
            BaseLayout.prototype.getNamedLayouts = function () {
                var that = this;
                return _layoutUtils.namesOfLayout(that.data);
            };
            BaseLayout.prototype.getFieldById = function (id) {
                if (!id)
                    return null;
                var that = this;
                return that.mapFields[id];
            };
            BaseLayout.prototype.select = function (id) {
                var that = this;
                var $e = that.$element;
                if (!that.options.design)
                    return;
                var o = _findSelected([that.map, that.mapFields]);
                if (o) {
                    o.selected = false;
                    that._showSelected($e, o);
                    that._onSelectedChanged($e.get(0), o, false);
                    if (o.$id == id) {
                        that._onSelectedChanged($e.get(0), null, true);
                        return;
                    }
                }
                if (!id)
                    return;
                var d = (that.map[id] ? that.map[id] : that.mapFields[id]);
                if (d) {
                    d.selected = true;
                    that._showSelected($e, d);
                    that._onSelectedChanged($e.get(0), d, true);
                }
            };
            BaseLayout.prototype.updateField = function (id, data) {
                var that = this;
                var dst = that.mapFields[id];
                if (!dst)
                    return;
                if (dst.$render && dst.$config) {
                    Object.keys(data.$config).forEach(function (pn) {
                        if (pn === "form" || pn === "data" || pn === "datasets")
                            return;
                        if (dst.$render[pn] != data.$config[pn]) {
                            dst.$render[pn] = data.$config[pn];
                        }
                    });
                    if (dst.$config.hasOwnProperty('form') || data.$config.hasOwnProperty('form'))
                        dst.$config.form = data.$config.form;
                    dst.$config.datasets = data.$config.datasets;
                    dst.$config.data = data.$config.data;
                    that._afterStructureChanged(null);
                }
                else {
                    if (_utils.equals(dst, data))
                        return;
                    var nkeys_1 = Object.keys(data);
                    var okeys = Object.keys(dst);
                    nkeys_1.forEach(function (pn) {
                        dst[pn] = data[pn];
                    });
                    nkeys_1.push('$id');
                    nkeys_1.push('$parentId');
                    nkeys_1.push('$idDrag');
                    okeys.forEach(function (pn) {
                        if (nkeys_1.indexOf(pn) < 0)
                            delete dst[pn];
                    });
                    var control = that.children[id];
                    if (control) {
                        delete that.controls[id];
                        delete that.children[id];
                        control.destroy();
                    }
                    that._afterStructureChanged(null);
                }
            };
            BaseLayout.prototype._cleanIds = function (item) {
                item.$idDesign = null;
                item.$idDrag = null;
                item.$idSelect = null;
                item.$idStep2 = null;
                item.$idStep3 = null;
            };
            //convert blocks to columns
            BaseLayout.prototype._blockToCols = function (layout) {
                var that = this;
                if (layout.$items)
                    layout.$items.forEach(function (item, index) {
                        var tt = item.$origin || item.$type;
                        if (tt === _layoutUtils.LAYOUT_BLOCK || tt === _layoutUtils.LAYOUT_COLUMN) {
                            item.$type = _layoutUtils.LAYOUT_COLUMN;
                            that._cleanIds(layout);
                        }
                        else {
                            var ni = { $items: [item], $auto: true, $type: _layoutUtils.LAYOUT_COLUMN, $colSize: item.$colSize, $customColSize: item.$customColSize };
                            //item = ni;  ???
                        }
                    });
            };
            BaseLayout.prototype._changeType = function (layout, newtype) {
                var that = this;
                var parent = that.map[layout.$parentId];
                var pp = parent && parent.$auto ? that.map[parent.$parentId] : null;
                var ot = layout.$origin || layout.$type;
                switch (ot) {
                    case _layoutUtils.LAYOUT_BLOCK:
                        if (newtype === _layoutUtils.LAYOUT_ROW) {
                            layout.$type = newtype;
                            that._blockToCols(layout);
                            that._cleanIds(layout);
                            that.check(layout, parent);
                        }
                        break;
                    case _layoutUtils.LAYOUT_COLUMN:
                        if (newtype === _layoutUtils.LAYOUT_ROW) {
                            var ni = { $items: layout.$items, $type: newtype, selected: false };
                            layout.$auto = true;
                            layout.$type = _layoutUtils.LAYOUT_COLUMN;
                            layout.$items = [ni];
                            if (layout.selected) {
                                layout.selected = false;
                                ni.selected = true;
                            }
                            that._blockToCols(ni);
                            that._cleanIds(layout);
                            that.check(layout, parent);
                        }
                        break;
                    case _layoutUtils.LAYOUT_ROW:
                        if (newtype === _layoutUtils.LAYOUT_BLOCK) {
                            if (pp) {
                                var ii = pp.$items.indexOf(parent);
                                pp.$items[ii] = layout;
                                layout.$type = parent.$type;
                                layout.$parentId = pp.$id;
                                if (parent.$type == _layoutUtils.LAYOUT_COLUMN) {
                                    layout.$colSize = parent.$colSize;
                                    layout.$customColSize = parent.$customColSize;
                                }
                                parent = pp;
                            }
                            else
                                layout.$type = newtype;
                            if (layout.$origin)
                                delete layout.$origin;
                            if (layout.$items) {
                                layout.$items.forEach(function (item, index) {
                                    if (item.$type) {
                                        if (item.$auto) {
                                            var ni = item.$items[0];
                                            ni.$colSize = item.$colSize;
                                            ni.$customColSize = item.$customColSize;
                                            ni.$parentId = layout;
                                            layout.$items[index] = ni;
                                            that._cleanIds(item);
                                        }
                                        else {
                                            item.$type = _layoutUtils.LAYOUT_BLOCK;
                                            that._cleanIds(item);
                                        }
                                    }
                                });
                            }
                            that._cleanIds(layout);
                            that.check(layout, parent);
                        }
                        break;
                    case _layoutUtils.LAYOUT_ACCORDION:
                        break;
                }
            };
            BaseLayout.prototype.updateIsHidden = function (layout, isHidden) {
                var that = this;
                if (layout.$isHidden !== isHidden) {
                    layout.$isHidden = isHidden;
                    that._afterPropsChanged(layout);
                    if (!isHidden) {
                        that._activateLayout(layout, true);
                        //
                    }
                }
            };
            BaseLayout.prototype.updateLayout = function (id, data) {
                var that = this;
                var dst = that.map[id];
                var structChanged = false;
                var propsChanged = false;
                var reloadChildrens = false;
                if (dst) {
                    delete data.onlyFields;
                    if (data.$type) {
                        var ov = dst.$origin || dst.$type;
                        if (data.$type !== ov) {
                            that._changeType(dst, data.$type);
                            delete data.$type;
                            structChanged = true;
                        }
                    }
                    if (data.parent) {
                        var pdst = that.map[dst.$parentId];
                        that._disableRules = true;
                        Object.keys(data.parent).forEach(function (pn) {
                            if (data.parent[pn] !== pdst[pn]) {
                                pdst[pn] = data.parent[pn];
                                structChanged = true;
                            }
                        });
                        that._disableRules = false;
                        delete data.parent;
                    }
                    delete data.selected;
                    that._disableRules = true;
                    if (dst.$title && !data.$title) {
                        delete dst.$title;
                        structChanged = true;
                    }
                    else if (!dst.$title && data.$title) {
                        delete dst.$title;
                        dst.$title = data.$title;
                        delete data.$title;
                        structChanged = true;
                    }
                    else if (dst.$title && data.$title) {
                        Object.keys(data.$title).forEach(function (pn) {
                            if (data.$title[pn] != dst.$title[pn]) {
                                dst.$title[pn] = data.$title[pn];
                                structChanged = true;
                            }
                        });
                        delete data.$title;
                    }
                    if ((dst.$inline || false) !== (data.$inline || false)) {
                        dst.$inline = data.$inline;
                        propsChanged = true;
                        if (dst.$items.length)
                            structChanged = true;
                        delete data.$inline;
                    }
                    if (!_utils.equals(dst.$fieldsOptions, data.$fieldsOptions)) {
                        dst.$fieldsOptions = data.$fieldsOptions;
                        propsChanged = true;
                        if (dst.$items.length)
                            structChanged = true;
                    }
                    delete data.$fieldsOptions;
                    if ((dst.$refProperty || '') !== (data.$refProperty || '')) {
                        dst.$refProperty = data.$refProperty;
                        structChanged = true;
                    }
                    if ((dst.$refController || '') !== (data.$refController || '')) {
                        dst.$refController = data.$refController;
                        structChanged = true;
                    }
                    if ((dst.$sticky || '') !== (data.$sticky || '')) {
                        dst.$sticky = data.$sticky;
                        structChanged = true;
                    }
                    if ((dst.$forceTable || false) !== (data.$forceTable || false)) {
                        dst.$forceTable = data.$forceTable;
                        if (dst.$type !== _layoutUtils.LAYOUT_ROW || !dst.$forceTable) {
                            delete dst.$forceTable;
                        }
                        structChanged = true;
                    }
                    if ((dst.$ref || '') !== (data.$ref || '')) {
                        dst.$ref = data.$ref;
                        if (dst.$ref) {
                            delete dst.name;
                            delete dst.form;
                            delete dst.$fieldsOptions;
                            reloadChildrens = true;
                        }
                        else {
                            delete dst.$refProperty;
                            delete dst.$refController;
                            delete dst.name;
                            delete dst.form;
                        }
                        dst.$items = [];
                        structChanged = true;
                    }
                    delete data.$ref;
                    delete data.$refProperty;
                    delete data.$refController;
                    delete data.$sticky;
                    delete data.$forceTable;
                    if ((dst.$widget || '') !== (data.$widget || '')) {
                        dst.$widget = data.$widget;
                        structChanged = true;
                    }
                    delete data.$widget;
                    if ((dst.$bindPages || '') !== (data.$bindPages || '')) {
                        dst.$bindPages = data.$bindPages;
                        structChanged = true;
                    }
                    delete data.$bindPages;
                    Object.keys(data).forEach(function (pn) {
                        if (data[pn] !== dst[pn]) {
                            dst[pn] = data[pn];
                            propsChanged = true;
                        }
                    });
                    that._disableRules = false;
                    if (structChanged) {
                        if (reloadChildrens) {
                            return _ipc.emit('LoadNestedLayouts', {
                                data: dst,
                                after: function (ldata) {
                                    _utils.merge(ldata, dst);
                                    var parent = that.map[dst.$parentId];
                                    that._cleanIds(dst);
                                    that.check(dst, parent);
                                    that._afterStructureChanged(dst);
                                }
                            });
                        }
                        that._afterStructureChanged(dst);
                    }
                    else if (propsChanged)
                        that._afterPropsChanged(dst);
                    else
                        that._refreshSelected();
                }
            };
            return BaseLayout;
        }());
        ui.BaseLayout = BaseLayout;
        ;
        var PageLayout = /** @class */ (function (_super) {
            __extends(PageLayout, _super);
            function PageLayout() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            //implements DatasetMethods
            PageLayout.prototype.ds_init = function (config) { return false; };
            PageLayout.prototype.ds_storeLastEvent = function (event, value) { };
            PageLayout.prototype.ds_LastEvent = function () { return null; };
            PageLayout.prototype.ds_destroy = function () { };
            PageLayout.prototype.ds_context = function () { return null; };
            PageLayout.prototype.ds_reemit = function (listeners, after) { return null; };
            PageLayout.prototype.ds_select = function (datasetName, value) { };
            PageLayout.prototype.ds_loaded = function (datasetName, value) { };
            PageLayout.prototype.ds_exec = function (event, context, dst, after, datasets, notify) { };
            PageLayout.prototype.pageLayoutInit = function () {
                var that = this;
                //datasets
                that.loadingHandler = null;
                that.noDataHandler = null;
                that.errorHandler = null;
                that.emitHandler = null;
                that.getLocalContextHandler = null;
                that.dataChangedHandler = null;
                that.updateMenuHandler = this.updateMenu.bind(that);
                that._removeMenus();
                if (that.ds_init && that.ds_init(that.data)) {
                    that.registerDataListener(that);
                }
            };
            PageLayout.prototype._doDatasetEventAfterEnabled = function (child) {
                var that = this;
                if (child.ds_LastEvent && child.dataEvent) {
                    var le = child.ds_LastEvent();
                    if (le)
                        child.dataEvent(le.event, le.value);
                }
            };
            PageLayout.prototype._refreshDataSets = function (children) {
                //list --> list of new visible "datasets listeners"
                var that = this;
                if (!that.page)
                    return;
                var events = that._getEventListFor(children);
                if (events.length) {
                    var emitters = that.page.emittersFor(events);
                    //reemit events
                    emitters.forEach(function (emitter) {
                        if (emitter.ds_reemit) {
                            emitter.ds_reemit(children, function () {
                            });
                        }
                    });
                }
            };
            PageLayout.prototype._callInternalRender = function ($parent, refresh) {
                var that = this;
                if (that.datasets && that.ds_exec) {
                    that.ds_exec("$load", null, that.props.data.ds, function (dse, ex) {
                        if (ex)
                            throw ex.message;
                        that._internalRender($parent, refresh);
                    }, null, true);
                }
                else
                    that._internalRender($parent, refresh);
            };
            PageLayout.prototype._destroyDataSets = function () {
                var that = this;
                if (that.ds_destroy)
                    that.ds_destroy();
            };
            PageLayout.prototype._removeMenus = function () {
                var that = this;
                var menusTypes = ["left", "right", "top", "bottom"];
                //var menus = [];
                menusTypes.forEach(function (mn) {
                    if (!that.data.$menus || !that.data.$menus[mn]) {
                        var c = that.page.childByType("menu-" + mn);
                        if (c)
                            c.setMenu(null);
                    }
                });
            };
            PageLayout.prototype.updateMenu = function (mn, data) {
                var that = this;
                _utils.log("From Layout Update Menu : " + (data ? data.name : 'null'), "menu");
                var c = that.page.childByType("menu-" + mn);
                if (c) {
                    c.setMenu(data);
                    return;
                }
                var MenuConstructor = null;
                if (mn == "right")
                    MenuConstructor = _menu.Menuright;
                else if (mn == "left")
                    MenuConstructor = _menu.Menuleft;
                if (MenuConstructor) {
                    var options = {
                        type: mn,
                        bodyId: null,
                        parentId: null
                    };
                    var header = that.page.childByType("header");
                    if (header) {
                        if (header.options.bodyId)
                            options.bodyId = header.options.bodyId;
                        if (header.options[options.type + "MenuPlace"])
                            options.parentId = header.options[options.type + "MenuPlace"];
                    }
                    c = new MenuConstructor(data, options);
                }
            };
            return PageLayout;
        }(BaseLayout));
        ui.PageLayout = PageLayout;
        _utils.applyMixins(PageLayout, [Phoenix.DatasetPlugin.DatasetMethods]);
        var Layout = /** @class */ (function (_super) {
            __extends(Layout, _super);
            function Layout(ldata, options, fdata, schema, locale, preferences) {
                return _super.call(this, ldata, options, fdata, schema, locale, preferences) || this;
            }
            return Layout;
        }(PageLayout));
        ui.Layout = Layout;
        ui.LayoutClass = Layout;
    })(ui = Phoenix.ui || (Phoenix.ui = {}));
})(Phoenix || (Phoenix = {}));
/// <reference path="../core/core-refs.ts" />
/// <reference path="../ui/page.control.ts" />
var Phoenix;
(function (Phoenix) {
    var _p = Phoenix, _ulocale = _p.ulocale, _utils = _p.utils, _locale = _p.locale, _pagecontrol = _p.pagecontrol, _dom = _p.dom, _ui = _p.ui;
    var autoclose;
    (function (autoclose) {
        autoclose.SCREEN_CENTER = 'screencenter';
        autoclose.SCREEN_TOP_CENTER = 'screentopcenter';
        autoclose.BOTTOM_LEFT = 'bottom-left';
        autoclose.BOTTOM_RIGHT = 'bottom-right';
        var AutoClose = /** @class */ (function () {
            function AutoClose(align, options) {
                var that = this;
                that._align = align;
                that.id = _utils.allocID();
                options = options || options;
                that._checkOptions(options);
                that._width = options.width;
                that._height = options.height;
                that._minWidth = options.minWidth;
                that._minHeight = options.minHeight;
                that._style = options.style;
                that._beforeClose = options.beforeClose;
                that._contentRender = options.contentRender;
                that._autocloseParents = options.parents || [];
                that.opener = options.opener;
                that.stayOnTop = options.stayOnTop;
                if (options.alignElement)
                    that.$alignElement = $(options.alignElement);
                that.$parent = $(options.parent);
                that._page = _pagecontrol.Page();
                that._resize = that.resize.bind(that);
            }
            AutoClose.prototype.resize = function () {
                var that = this;
                that._setMinWidthAndMinHeight();
                that._alignElement();
            };
            AutoClose.prototype.destroy = function () {
                var that = this;
                $(window).off('global-phoenix-resize', that._resize);
                that._autocloseParents = null;
                that.$element = null;
                that.$parent = null;
                that.$alignElement = null;
                that._beforeClose = null;
                that._contentRender = null;
                that._page = null;
                if (that.renderControl) {
                    if (that.renderControl.destroy)
                        that.renderControl.destroy();
                    that.renderControl = null;
                }
            };
            AutoClose.prototype.inPopup = function (element) {
                var that = this;
                for (var i = 0, len = that._autocloseParents.length; i < len; i++) {
                    var pid = that._autocloseParents[i];
                    var cp = _dom.find(null, pid);
                    if (cp && _dom.isChildOf(cp, element))
                        return true;
                }
                return false;
            };
            AutoClose.prototype._checkOptions = function (options) {
                var that = this;
                options.parent = options.parent || document.body;
                if (!options.alignElement) {
                    options.parent = document.body;
                    options.alignElement = null;
                    if (that._align !== autoclose.SCREEN_TOP_CENTER)
                        that._align = autoclose.SCREEN_CENTER;
                }
                if (that._align !== autoclose.SCREEN_TOP_CENTER && that._align !== autoclose.SCREEN_CENTER) {
                    if (!options.alignElement)
                        throw "Align element is null";
                }
                if (!options.contentRender)
                    throw "Invalid content render";
            };
            AutoClose.prototype._alignXScreenCenter = function () {
                var that = this, e = that.$element.get(0);
                var cr = _dom.offset(e);
                var pcr = _dom.offset(e.parentNode);
                e.style.left = Math.floor(Math.max((pcr.width - cr.width) / 2, 0)) + 'px';
            };
            AutoClose.prototype._alignYScreenCenter = function () {
                var that = this, e = that.$element.get(0);
                var cr = _dom.offset(e);
                var pcr = _dom.offset(e.parentNode);
                e.style.top = Math.floor(Math.max((pcr.height - cr.height) / 2, 0)) + 'px';
            };
            AutoClose.prototype._alignTopScreen = function () {
                var that = this, e = that.$element.get(0);
                e.style.top = '0px';
            };
            AutoClose.prototype._alignScreenTopCenter = function () {
                var that = this;
                that._alignXScreenCenter();
                that._alignTopScreen();
            };
            AutoClose.prototype._alignScreenCenter = function () {
                var that = this;
                that._alignXScreenCenter();
                that._alignYScreenCenter();
            };
            AutoClose.prototype._alignBottomLeft = function () {
                var that = this, e = that.$element.get(0), ae = that.$alignElement.get(0);
                var space = _dom.documentClientDim();
                var cre = _dom.offset(e);
                var crae = _dom.offset(ae);
                var docScroll = _dom.documentScroll();
                var viewSize = _dom.documentViewSize();
                var top = Math.round(crae.top + crae.height) - 1;
                if (top + cre.height > docScroll.top + viewSize.height) {
                    top = docScroll.top + viewSize.height - cre.height;
                }
                e.style.top = Math.max(0, Math.round(Math.max(docScroll.top, top))) + 'px';
                var cl = crae.left;
                if (cl + cre.width > space.width)
                    cl = Math.max(0, space.width - cre.width);
                e.style.left = cl + 'px';
            };
            AutoClose.prototype._alignBottomRight = function () {
                var that = this, e = that.$element.get(0), ae = that.$alignElement.get(0);
                var space = _dom.documentClientDim();
                var cre = _dom.offset(e);
                var crae = _dom.offset(ae);
                e.style.top = Math.max(0, Math.round(crae.top + crae.height) - 1) + 'px';
                var cr = Math.max(0, Math.round(space.width - crae.left - crae.width));
                if (cr + cre.width > space.width)
                    cr = Math.max(0, space.width - cre.width);
                e.style.right = cr + 'px';
            };
            AutoClose.prototype._alignElement = function () {
                var that = this;
                if (that._align === autoclose.SCREEN_CENTER)
                    that._alignScreenCenter();
                else if (that._align === autoclose.SCREEN_TOP_CENTER)
                    that._alignScreenTopCenter();
                else if (that._align === autoclose.BOTTOM_LEFT)
                    that._alignBottomLeft();
                else if (that._align === autoclose.BOTTOM_RIGHT)
                    that._alignBottomRight();
            };
            AutoClose.prototype._setMinWidthAndMinHeight = function () {
                var that = this;
                var e = that.$element.get(0);
                if (that._minWidth && that._minWidth !== 'auto')
                    e.style.minWidth = _dom.checkSize(that._minWidth);
                if (that._minHeight && that._minHeight !== 'auto')
                    e.style.minHeight = _dom.checkSize(that._minHeight);
            };
            AutoClose.prototype._setHeightAndWidth = function () {
                var that = this;
                var e = that.$element.get(0);
                that._setMinWidthAndMinHeight();
                if (that._width && that._width !== 'auto')
                    e.style.width = _dom.checkSize(that._width);
                if (that._height && that._height !== 'auto')
                    e.style.height = _dom.checkSize(that._height);
            };
            AutoClose.prototype.open = function () {
                var that = this;
                var css = ['bs-autoclose', 'bs-autoclose-hidden'];
                that._style = that._style || 'modal-content';
                if (that._style)
                    _dom.parseStyle(that._style, css);
                that.$element = $('<div id="' + that.id + '" class="' + css.join(' ') + '"><div></div></div>');
                that._autocloseParents.push(that.id);
                var e = that.$element.get(0);
                var p = that.$parent.get(0);
                that._setHeightAndWidth();
                _dom.append(p, e);
                that._contentRender($(e.firstChild), that, function (err) {
                    if (err) {
                        console.log(err);
                        that.destroy();
                        return;
                    }
                    that._alignElement();
                    _dom.removeClass(e, 'bs-autoclose-hidden');
                    that._page.setPopup(that);
                    $(window).on('global-phoenix-resize', that._resize);
                });
            };
            AutoClose.prototype.hide = function (event) {
                var that = this;
                if (that._beforeClose) {
                    that._beforeClose();
                }
                var e = that.$element.get(0);
                _dom.remove(e);
                that.$element = null;
                that.destroy();
            };
            return AutoClose;
        }());
        function open(align, options) {
            var a = new AutoClose(align, options);
            a.open();
        }
        autoclose.open = open;
    })(autoclose = Phoenix.autoclose || (Phoenix.autoclose = {}));
})(Phoenix || (Phoenix = {}));
/// <reference path="../../core/core-refs.ts" />
/// <reference path="./schema.data.ts" />
var Phoenix;
(function (Phoenix) {
    var Observable;
    (function (Observable) {
        var _sutils = Observable.SchemaUtils;
        var BaseState = /** @class */ (function () {
            function BaseState(parent, prop, value) {
                this.isState = true;
            }
            BaseState.prototype.destroy = function () {
                var that = this;
                if (that._state)
                    that._state = null;
                that.parent = null;
            };
            BaseState.prototype.state = function () {
                return this._state;
            };
            BaseState.prototype._init = function (parent, prop, value, list) {
                var that = this;
                list = list || [];
                that._state = value || {};
                that.name = prop;
                that.parent = parent;
                list.forEach(function (propertyName) {
                    if (that._state[propertyName] === undefined)
                        that._state[propertyName] = false;
                    Object.defineProperty(that, propertyName, {
                        get: function () {
                            return this._state[propertyName] || false;
                        },
                        set: function (value) {
                            var self = this;
                            var oldValue = self._state[propertyName] || false;
                            if (oldValue !== value) {
                                self._state[propertyName] = value;
                                if (propertyName === "filter") {
                                    if (self.parent) {
                                        var v = self.parent.getValue(that.name);
                                        var cs = self.parent.getSchema(that.name);
                                        if (cs && cs.enum && cs.filters) {
                                            var enums = value ? cs.filters[value] : cs.enum;
                                            if (enums) {
                                                var ii = enums.indexOf(v);
                                                if (ii < 0)
                                                    self.parent.setValue(that.name, enums.length ? enums[0] : null);
                                            }
                                        }
                                    }
                                }
                                if (self.parent && self.parent.notifyStateChanged)
                                    self.parent.notifyStateChanged(that.name + '.' + propertyName, {});
                            }
                        },
                        enumerable: true
                    });
                });
            };
            return BaseState;
        }());
        Observable.BaseState = BaseState;
        ;
        var ListStates = /** @class */ (function (_super) {
            __extends(ListStates, _super);
            function ListStates(parent, prop, value) {
                var _this = _super.call(this, parent, prop, value) || this;
                var that = _this;
                _this._init(parent, prop, value, null);
                return _this;
            }
            ListStates.prototype._init = function (parent, prop, value, list) {
                var that = this;
                that._state = value || {};
                that.name = prop;
                that.parent = parent;
            };
            Object.defineProperty(ListStates.prototype, "columns", {
                get: function () {
                    var that = this, array = that.parent[that.name];
                    return (array.columns || []).join(',');
                },
                set: function (value) {
                    var that = this, array = that.parent[that.name];
                    var oldVal = (array.columns || []).join(',');
                    value = value || '';
                    if (oldVal !== value) {
                        array.columns = value ? value.split(',') : undefined;
                        if (that.parent && that.parent.notifyStateChanged)
                            that.parent.notifyStateChanged(that.name + '.columns', {});
                    }
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(ListStates.prototype, "selected", {
                get: function () {
                    var that = this;
                    var array = that.parent[that.name];
                    return array.getSelectedItems().join(',');
                },
                set: function (value) {
                    var that = this;
                    var array = that.parent[that.name];
                    var oldValue = array.getSelectedItems().join(',').split(',').sort();
                    var newValue = (value || '').split(',').sort();
                    var s = newValue.join(',');
                    if (oldValue.join(',') !== s) {
                        array.setSelectedItems(JSON.parse('[' + s + ']'));
                    }
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(ListStates.prototype, "orderBy", {
                get: function () {
                    var that = this;
                    return that._orderBy;
                },
                set: function (value) {
                    var that = this;
                    if (that._orderBy !== value) {
                        that._orderBy = value;
                        if (that.parent && that.parent.notifyStateChanged)
                            that.parent.notifyStateChanged(that.name + '.orderBy', {});
                    }
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(ListStates.prototype, "filter", {
                get: function () {
                    var that = this;
                    return that._filter;
                },
                set: function (value) {
                    var that = this;
                    if (that._filter !== value) {
                        that._filter = value;
                        if (that.parent && that.parent.notifyStateChanged)
                            that.parent.notifyStateChanged(that.name + '.filter', {});
                    }
                },
                enumerable: true,
                configurable: true
            });
            return ListStates;
        }(BaseState));
        Observable.ListStates = ListStates;
        var DataStates = /** @class */ (function (_super) {
            __extends(DataStates, _super);
            function DataStates(parent, prop, value) {
                var _this = _super.call(this, parent, prop, value) || this;
                var ss = parent.getSchema('').properties[prop];
                var l = _sutils.states;
                if (ss) {
                    var props = _sutils.stateProps(ss);
                    if (props && props.length) {
                        l = props.concat(l);
                    }
                }
                _this._init(parent, prop, value, l);
                return _this;
            }
            return DataStates;
        }(BaseState));
        Observable.DataStates = DataStates;
        var LinkStates = /** @class */ (function (_super) {
            __extends(LinkStates, _super);
            function LinkStates(parent, prop, value) {
                var _this = _super.call(this, parent, prop, value) || this;
                var cp = prop;
                if (cp.indexOf('.$links') < 0)
                    cp = '$links.' + prop;
                _this._init(parent, cp, value, _sutils.linksStates);
                return _this;
            }
            return LinkStates;
        }(BaseState));
        Observable.LinkStates = LinkStates;
    })(Observable = Phoenix.Observable || (Phoenix.Observable = {}));
})(Phoenix || (Phoenix = {}));
/// <reference path="../../core/core-refs.ts" />
/// <reference path="./schema.data.ts" />
var Phoenix;
(function (Phoenix) {
    var _utils = Phoenix.utils;
    var Observable;
    (function (Observable) {
        var _errorsUtils = {
            errorChanged: function (oldErrors, newErrors) {
                oldErrors = oldErrors || [];
                if (!newErrors || !newErrors.length) {
                    if (oldErrors.length)
                        return true;
                }
                else {
                    if (oldErrors.length != newErrors.length) {
                        return true;
                    }
                    else {
                        var changed = false;
                        for (var i = 0, len = oldErrors.length; i < len; i++) {
                            var oe = oldErrors[i];
                            var ne = newErrors[i];
                            if (oe.code && ne.code) {
                                if (oe.code !== ne.code) {
                                    changed = true;
                                    break;
                                }
                            }
                            else if (!oe.code || !ne.code) {
                                changed = true;
                                break;
                            }
                            else {
                                if (oe.message !== ne.message) {
                                    changed = true;
                                    break;
                                }
                            }
                        }
                        return changed;
                    }
                }
            }
        };
        var Errors = /** @class */ (function () {
            function Errors(parent, prop, value) {
                this._init(parent, prop, value);
                this.isArray = true;
            }
            Errors.prototype.destroy = function () {
                var that = this;
                if (that._errors)
                    that._errors = null;
                that.parent = null;
            };
            Errors.prototype.errors = function () {
                return this._errors.slice();
            };
            Object.defineProperty(Errors.prototype, "length", {
                get: function () {
                    return this._errors ? this._errors.length : 0;
                },
                enumerable: true,
                configurable: true
            });
            Errors.prototype.find = function (prop) {
                var keys = [];
                for (var _i = 1; _i < arguments.length; _i++) {
                    keys[_i - 1] = arguments[_i];
                }
                if (!this._errors)
                    return null;
                var props = prop.split(','), ll = props.length;
                for (var i = 0, len = this._errors.length; i < len; i++) {
                    var found = true;
                    var item = this._errors[i];
                    for (var j = 0; j < ll; j++) {
                        if (keys[j] !== item[props[j]]) {
                            found = false;
                            break;
                        }
                    }
                    if (found)
                        return item;
                }
                return null;
            };
            Errors.prototype.clear = function (notify) {
                var that = this;
                if (that._errors.length) {
                    that._errors.length = 0;
                    if (notify)
                        that.notify();
                    return true;
                }
                return false;
            };
            Errors.prototype.hasErrors = function () {
                var that = this;
                return that._errors && that._errors.length ? true : false;
            };
            Errors.prototype.rmvError = function (message) {
                var that = this;
                if (that._errors && that._errors.length) {
                    var errors = that._errors;
                    var ii = errors.findIndex(function (error) {
                        return error.severity === 'error' && error.message === message;
                    });
                    if (ii >= 0) {
                        that._errors.splice(ii, 1);
                        that.notify();
                    }
                }
            };
            Errors.prototype.rmvErrorById = function (id) {
                var that = this;
                if (that._errors && that._errors.length) {
                    var errors = that._errors;
                    var ii = errors.findIndex(function (error) {
                        return error.id === id;
                    });
                    if (ii >= 0) {
                        that._errors.splice(ii, 1);
                        that.notify();
                    }
                }
            };
            Errors.prototype.addErrors = function (errors) {
                var that = this;
                that._errors = that._errors || [];
                if (errors && errors.length) {
                    errors.forEach(function (error) {
                        error.id = error.id || _utils.allocUuid();
                    });
                    that._errors = that._errors.concat(errors);
                    that.notify();
                }
            };
            Errors.prototype.push = function (error) {
                var that = this;
                that.addErrors([error]);
            };
            Errors.prototype.remove = function (error) {
                var that = this;
                if (that._errors) {
                    var ii = that._errors.indexOf(error);
                    if (ii >= 0) {
                        that._errors.splice(ii, 1);
                        that.notify();
                    }
                }
            };
            Errors.prototype.addError = function (message, id) {
                var that = this;
                that.addErrors([{ severity: "error", message: message, id: id || _utils.allocUuid() }]);
            };
            Errors.prototype.addSuccess = function (message, id) {
                var that = this;
                that.addErrors([{ severity: "success", message: message, timeout: 2, id: id || _utils.allocUuid() }]);
            };
            Errors.prototype.addWarning = function (message, id) {
                var that = this;
                that.addErrors([{ severity: "warning", message: message, timeout: 2, id: id || _utils.allocUuid() }]);
            };
            Errors.prototype.notify = function () {
                var that = this;
                if (that.parent && that.parent.notifyStateChanged)
                    that.parent.notifyStateChanged(that.name + '.errors', {});
            };
            Errors.prototype._init = function (parent, prop, value) {
                var that = this;
                that._errors = value || [];
                that.name = prop;
                that.parent = parent;
            };
            return Errors;
        }());
        Observable.Errors = Errors;
        Observable.errorsUtils = _errorsUtils;
    })(Observable = Phoenix.Observable || (Phoenix.Observable = {}));
})(Phoenix || (Phoenix = {}));
/// <reference path="../../core/core-refs.ts" />
/// <reference path="./schema.data.ts" />
/// <reference path="../datasets-plugin.ts" />
var Phoenix;
(function (Phoenix) {
    var Observable;
    (function (Observable) {
        var _utils = Phoenix.utils, _dom = Phoenix.dom, _application = Phoenix.application, _odata = Phoenix.data.odata, _sutils = Observable.SchemaUtils, _dutils = Observable.DataUtils, _dsPlugin = Phoenix.DatasetPlugin;
        var QueryableDataSource = /** @class */ (function () {
            function QueryableDataSource(dsConfig, model) {
                if (dsConfig.$type !== 'odata' && dsConfig.$type !== 'relation')
                    throw new Error('Only odata sources are supported.');
                var that = this;
                var ct = (dsConfig.$params && dsConfig.$params.$type ? dsConfig.$params.$type : 'odata');
                var appConfig = _application.config(_application.name) || {};
                var odataCfg = appConfig[ct] || {};
                if (odataCfg.array)
                    that._noPageCount = true;
                that._config = dsConfig;
                that._origFilter = that._config.$params.$filter;
                if (that._config.$params.$searchByFields) {
                    that._search = that._config.$params.$searchByFields.value;
                    that._searchFields = that._config.$params.$searchByFields.fields;
                }
                that._pageSize = 0;
                that._model = model;
                that._currentPage = 1;
                that._hasPrev = false;
                that._hasNext = false;
                if (that.isQuery()) {
                    that._pageSize = that._config.$params.$top || 0;
                    that._orderby = that._config.$params.$orderby || '';
                }
                else {
                    throw "Invalid Queryable DataSource";
                }
            }
            QueryableDataSource.prototype.initPagination = function (pageSize, currentpage, totalCount, hasNext, hasPrev, noPagesCount) {
                var that = this;
                that._pageSize = pageSize;
                that._noPageCount = noPagesCount;
                if (that._noPageCount) {
                    that._hasNext = hasNext;
                    that._hasPrev = hasPrev;
                }
                else {
                    that._totalCount = totalCount;
                }
                that._currentPage = currentpage;
            };
            QueryableDataSource.prototype.initFromData = function (ldata) {
                var that = this;
                if (that.isQuery()) {
                    that._pageSize = ldata.pageSize;
                    that._noPageCount = ldata._noPagesCount;
                    that._currentPage = that._pageSize ? (Math.ceil(ldata.skip / that._pageSize) + 1) : 0;
                    if (that._noPageCount) {
                        that._hasPrev = ldata._hasPrev;
                        that._hasNext = ldata._hasNext;
                    }
                    else {
                        that._totalCount = ldata.count;
                    }
                    that._skip = ldata.skip;
                    if (ldata.uri) {
                        var p = that._model.parent;
                        if (p.hasOwnProperty('uri'))
                            p.uri = ldata.uri;
                        if (p.hasOwnProperty('search'))
                            p.search = ldata.search;
                    }
                }
            };
            Object.defineProperty(QueryableDataSource.prototype, "filter", {
                get: function () {
                    var that = this;
                    return that._filter;
                },
                set: function (value) {
                    var that = this;
                    that._filter = value;
                    if (that._filter && that._filter.value) {
                        if (that._origFilter)
                            that._config.$params.$filter = { $left: that._origFilter, $op: "AND", $right: that._filter.value };
                        else
                            that._config.$params.$filter = that._filter.value;
                    }
                    else {
                        if (that._origFilter)
                            that._config.$params.$filter = that._origFilter;
                        else
                            that._config.$params.$filter = null;
                    }
                    that.refresh(true, true);
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(QueryableDataSource.prototype, "search", {
                get: function () {
                    var that = this;
                    return that._search;
                },
                set: function (value) {
                    var that = this;
                    if (value !== that._search) {
                        that._search = value;
                        that._config.$params.$searchByFields = {
                            fields: that._searchFields,
                            value: value
                        };
                        if (that._searchFields)
                            that.refresh(true, false);
                    }
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(QueryableDataSource.prototype, "searchFields", {
                get: function () {
                    var that = this;
                    return that._searchFields;
                },
                set: function (value) {
                    var that = this;
                    if (value.join('$$$') !== that._searchFields.join('$$$')) {
                        var doRefresh = !!that._search;
                        that._search = '';
                        that._searchFields = value;
                        that._config.$params.$searchByFields = {
                            fields: that._searchFields,
                            value: value
                        };
                        if (doRefresh)
                            that.refresh(true, false);
                    }
                },
                enumerable: true,
                configurable: true
            });
            QueryableDataSource.prototype.pageSize = function () {
                var that = this;
                return that.isQuery() ? that._pageSize : 0;
            };
            QueryableDataSource.prototype.orderBy = function (value) {
                var that = this;
                if (value === undefined)
                    return that._orderby;
                if (value !== that._orderby) {
                    that._orderby = value;
                    that.refresh(true, false);
                }
                return that._orderby;
            };
            QueryableDataSource.prototype.refresh = function (resetPagination, forceReload) {
                var that = this;
                return new _utils.Promise(function (resolve, reject) {
                    if (that.isQuery()) {
                        if (resetPagination)
                            that._currentPage = 0;
                        that._open(forceReload).then(function () {
                            that._model.notifyPaginationChanged();
                            that._model.notifySortingChanged();
                            resolve();
                        });
                    }
                    else
                        resolve();
                });
            };
            QueryableDataSource.prototype.currentPage = function (page) {
                var that = this;
                if (page !== undefined) {
                    if (that.isQuery()) {
                        var np = that.noPagesCount() ? page : Math.min(page, that.totalPages());
                        if (that._currentPage !== np) {
                            that._currentPage = np;
                            that._open(false).then(function () {
                                that._model.notifyPaginationChanged();
                            });
                        }
                    }
                    return page;
                }
                else
                    return that.isQuery() ? that._currentPage : 0;
            };
            QueryableDataSource.prototype.totalPages = function () {
                var that = this;
                return that.isQuery() && !that._noPageCount ? (that._pageSize ? Math.ceil(that._totalCount / that._pageSize) : 1) : 0;
            };
            QueryableDataSource.prototype.totalCount = function () {
                var that = this;
                return that.isQuery() && !that._noPageCount ? that._totalCount : 0;
            };
            QueryableDataSource.prototype.noPagesCount = function () {
                return this._noPageCount;
            };
            QueryableDataSource.prototype.hasNext = function () {
                return this._hasNext;
            };
            QueryableDataSource.prototype.hasPrev = function () {
                return this._hasPrev;
            };
            QueryableDataSource.prototype.destroy = function () {
                var that = this;
                that._config = null;
                that._model = null;
            };
            QueryableDataSource.prototype.isQuery = function () {
                return _dutils.isQuery(this._config);
            };
            QueryableDataSource.prototype.open = function () {
                return this._open(true);
            };
            QueryableDataSource.prototype.remove = function (key, etag) {
                var that = this;
                var isQuery = that.isQuery();
                if (!isQuery)
                    return null;
                return new _utils.Promise(function (resolve, reject) {
                    var dsCfg = {
                        name: "data",
                        $type: that._config.$type,
                        $method: "DELETE",
                        $params: {
                            $module: that._config.$params.$module,
                            $entity: that._config.$params.$entity,
                            $entityId: key
                        }
                    };
                    var result = {};
                    _dom.processing(true);
                    _dsPlugin.executeDatasets([dsCfg], { etag: etag }, result, {}, function (sended, ex) {
                        _dom.processing(false);
                        if (!ex) {
                            resolve(null);
                        }
                        else {
                            if (that._model) {
                                that._model.addAjaxException(ex);
                                reject(null);
                            }
                            else
                                reject(ex);
                        }
                    });
                });
            };
            QueryableDataSource.prototype._applyFilters = function () {
                var that = this;
                var allData = that._model.allData;
                return _odata.applyFilters(allData, that._search, that._searchFields, that._skip, that._pageSize, that._orderby);
            };
            QueryableDataSource.prototype._open = function (forceReload) {
                var that = this;
                that._config.name = "data";
                return new _utils.Promise(function (resolve, reject) {
                    _dom.processing(true);
                    var isQuery = that.isQuery();
                    var result = {};
                    if (isQuery) {
                        // update orderby
                        if (that._orderby) {
                            if (that._config.$params.$orderby !== that._orderby) {
                                that._config.$params.$orderby = that._orderby;
                            }
                        }
                        // update pagination
                        if (that._pageSize > 0) {
                            that._config.$params.$top = that._pageSize;
                            that._config.$params.$skip = Math.max(0, that._currentPage - 1) * that._pageSize;
                            if (that._config.$params.$skip == 0)
                                delete that._config.$params.$skip;
                            that._skip = that._config.$params.$skip;
                        }
                        else {
                            delete that._config.$params.$top;
                            delete that._config.$params.$skip;
                        }
                    }
                    var cfg = that._config;
                    if (!forceReload && isQuery && that._config.$params.$allData && that._model.allData) {
                        var ldata = that._applyFilters();
                        Phoenix.dom.processing(false);
                        that.initFromData(ldata);
                        that._model.setModel(ldata.documents);
                        resolve(ldata);
                        return;
                    }
                    _dsPlugin.executeDatasets([cfg], that._model.parent.model(true) || {}, result, {}, function (sended, ex) {
                        _dom.processing(false);
                        if (!ex) {
                            var ldata = result.data;
                            that.initFromData(ldata);
                            if (isQuery) {
                                if (that._skip && ((!that._noPageCount && that._skip >= that._totalCount))) {
                                    that._currentPage = 0;
                                    return that._open(forceReload).then(function (rdata) {
                                        resolve(rdata);
                                    });
                                }
                            }
                            if (isQuery && that._config.$params.$allData) {
                                that._model.allData = ldata._allData;
                            }
                            if (that._model) {
                                isQuery ? that._model.setModel(ldata.documents) : that._model.setModel(ldata);
                            }
                            resolve(ldata);
                        }
                        else {
                            if (that._model) {
                                that._model.addAjaxException(ex);
                                reject(null);
                            }
                            else
                                reject(ex);
                        }
                    });
                });
            };
            QueryableDataSource.prototype.save = function () {
                var that = this;
                if (that.isQuery())
                    return;
                if (!that._model.validate())
                    return;
            };
            return QueryableDataSource;
        }());
        Observable.QueryableDataSource = QueryableDataSource;
    })(Observable = Phoenix.Observable || (Phoenix.Observable = {}));
})(Phoenix || (Phoenix = {}));
var Phoenix;
(function (Phoenix) {
    var rules;
    (function (rules_1) {
        var _p = Phoenix, _observable = Phoenix.Observable, _su = _observable.SchemaUtils, _du = _observable.DataUtils, _locale = Phoenix.locale, _ulocale = Phoenix.ulocale, _utils = Phoenix.utils;
        var _ctx = {}, _patchContext = function (propertyName, value) {
            _ctx[propertyName] = value;
        }, _parseExpression = function (expression, options) {
            options = options || {};
            if (options.isPropagation) {
                expression = expression.replace(/sum\(\s*([^)]+?)\s*\)/g, function (match, args) {
                    var sumArgs = args.split(/\s*,\s*/);
                    if (sumArgs && sumArgs.length === 1) {
                        var faa = sumArgs[0].split('.');
                        var la = faa.pop();
                        return 'sum(' + faa.join('.') + ', \'' + la + '\')';
                    }
                    else
                        return match;
                });
            }
            return expression;
        }, _execPropagationRule = function (rule, inst, ctx, trigger) {
            try {
                if (!rule.code) {
                    rule.code = new Function('o', 'ctx', 'window', _parseExpression(rule.expression, { isPropagation: true }));
                    rule.conditionCode = rule.condition ? new Function('o', 'ctx', 'window', 'return ' + _parseExpression(rule.condition, { isPropagation: false })) : null;
                }
                var canRun = true;
                if (rule.conditionCode)
                    canRun = rule.conditionCode(inst, ctx, null);
                if (canRun) {
                    var root = inst.getRootModel();
                    _utils.logRule(root._callStack ? root._callStack.length : 0, rule, trigger, inst.className || '');
                    rule.code(inst, ctx, null);
                }
            }
            catch (e) {
                _patchRuleError(e, rule, inst.getRootModel());
            }
        }, _patchRuleError = function (exception, rule, root) {
            if (typeof exception === 'string')
                exception = { message: exception };
            var head = _utils.format('Rule \'{0}\'  {1}:', rule.name, rule.description || '');
            root.addError([head, exception.message || ''].join('\n'));
        }, _createContext = function (inst) {
            var res = {
                today: _ulocale.date2ISO(new Date()),
                now: function () { return new Date().toISOString(); },
                addHours: function (dateTime, hours) {
                    var cd = _ulocale.parseISODateTime(dateTime);
                    if (cd === null)
                        return undefined;
                    cd.setTime(cd.getTime() + (hours * 60 * 60 * 1000));
                    return cd.toISOString();
                },
                isTriggeredBy: function (propertyName) {
                    return false;
                },
                sum: function (list, propertyName) {
                    var res = 0;
                    list && list.forEach(function (item, index, level) {
                        res += (item[propertyName] || 0);
                    }, '');
                    return res;
                },
                safeDivide: function (dividend, divisor, def) {
                    divisor = divisor || 0;
                    dividend = dividend || 0;
                    var td = parseFloat(divisor.toFixed(8));
                    if (td === 0)
                        return def || 0;
                    return dividend / divisor;
                },
                partition: function (total, list, dst, src) {
                    var value = -1;
                    var mindex = -1;
                    total = total || 0;
                    var rest = total;
                    var tsrc = 0;
                    list.forEach(function (item, index, level) {
                        var cv = item[src] || 0;
                        if (Math.abs(cv) > value) {
                            value = Math.abs(cv);
                            mindex = index;
                        }
                        tsrc = tsrc + cv;
                    });
                    tsrc = parseFloat(tsrc.toFixed(8));
                    if (tsrc !== 0 && mindex >= 0) {
                        list.forEach(function (item, index, level) {
                            var d = item[src] || 0;
                            item[dst] = total * d / tsrc;
                            rest = rest - item[dst];
                        });
                        rest = parseFloat(rest.toFixed(8));
                        if (rest !== 0) {
                            var mItem = list.get(mindex);
                            mItem[dst] = (mItem[dst] || 0) + rest;
                        }
                    }
                },
                utc: function (value) {
                    if (!value)
                        return 0;
                    var d = _ulocale.parseISODateTime(value);
                    return Date.UTC(d.getUTCFullYear(), d.getUTCMonth(), d.getUTCDate(), d.getUTCHours(), d.getUTCMinutes(), d.getUTCSeconds(), d.getUTCMilliseconds());
                },
                milliseconds2Hours: function (milliseconds) {
                    return milliseconds / (1000 * 3600);
                },
                date: function (value) {
                    return _ulocale.parseISODateTime(value);
                }
            };
            Object.keys(_ctx).forEach(function (name) {
                if (!res[name])
                    res[name] = _ctx[name];
            });
            return res;
        }, _execInitRules = function (inst) {
            var rootSchema = inst.getRootModel().getSchema('');
            var rules, trigger;
            if (inst.$create) {
                rules = rootSchema.rules && rootSchema.rules.created ? rootSchema.rules.created[inst.className] : null;
                trigger = '$events.created';
            }
            else {
                rules = rootSchema.rules && rootSchema.rules.loaded ? rootSchema.rules.loaded[inst.className] : null;
                trigger = '$events.loaded';
            }
            if (rules) {
                var ctx_1 = _createContext(inst.getRootModel());
                rules.forEach(function (rule) { return _execPropagationRule(rootSchema.rulesMap[rule], inst, ctx_1, trigger); });
            }
        }, _extractPropertyPath = function (path, params) {
            return path;
            /*
            let ap = path.split('.');
            let rp = [];
            let cp = '', stag = '';
            for (let i = 0; i < ap.length; i++) {
                let sp = ap[i];
                rp.push(sp);
                cp = cp + stag + sp;
                stag = '.';
                if (params[cp])
                    rp.push(params[cp].$oid);
            }
            return rp.join('.');
            */
        }, _execBeforeSaveRules = function (inst) {
            var rootSchema = inst.getRootModel().getSchema('');
            var rules = rootSchema.rules && rootSchema.rules.saving ? rootSchema.rules.saving[inst.className] : null;
            if (rules) {
                var ctx_2 = _createContext(inst.getRootModel());
                rules.forEach(function (rule) { return _execPropagationRule(rootSchema.rulesMap[rule], inst, ctx_2, '$events.saving'); });
            }
        }, _patchErrorMessage = function (message, ctx, instance) {
            return _utils.execAngularExpression(message, { o: instance || {}, ctx: ctx });
        }, _execPropChangeRules = function (root, propertyName, params, options) {
            root.callStack = root.callStack || [];
            var cp = _extractPropertyPath(propertyName, params);
            root.callStack.push(cp);
            try {
                if (root.$schema.rules && ((root.$schema.rules.validation && options.validations) || (root.$schema.rules.propagation && options.propagations))) {
                    var segments = propertyName.split('.');
                    var sp_1 = segments.pop();
                    if (sp_1.charAt(0) === '$')
                        return;
                    var cp_1 = [sp_1];
                    var inst_1 = params.instance;
                    var pp_1 = inst_1;
                    var ctx_3 = _createContext(root);
                    var _loop_1 = function () {
                        var rules_2 = options.propagations && root.$schema.rules.propagation ? root.$schema.rules.propagation[inst_1.className] : null;
                        var trigger = cp_1.join('.');
                        var lrules = rules_2 ? rules_2[trigger] : null;
                        lrules && lrules.forEach(function (rule) { return _execPropagationRule(root.$schema.rulesMap[rule], inst_1, ctx_3, trigger); });
                        rules_2 = options.validations && root.$schema.rules.validation ? root.$schema.rules.validation[inst_1.className] : null;
                        lrules = rules_2 ? rules_2[trigger] : null;
                        lrules && lrules.forEach(function (ruleId) {
                            var rule = root.$schema.rulesMap[ruleId];
                            try {
                                if (!rule.code) {
                                    var returnCode = 'return ';
                                    if (rule.expression.indexOf(returnCode) >= 0)
                                        returnCode = '';
                                    rule.code = new Function('o', 'ctx', 'window', returnCode + _parseExpression(rule.expression, { isPropagation: false }));
                                    rule.conditionCode = rule.condition ? new Function('o', 'ctx', 'window', 'return ' + _parseExpression(rule.condition, { isPropagation: false })) : null;
                                }
                                var addToRoot = rule.triggers.length > 1;
                                var canRun = true;
                                if (rule.conditionCode)
                                    canRun = rule.conditionCode(inst_1, ctx_3, null);
                                if (canRun)
                                    _utils.logRule(root.callStack ? root.callStack.length : 0, rule, trigger, inst_1.className || '');
                                if (!canRun || rule.code(inst_1, ctx_3, null)) {
                                    if (addToRoot)
                                        root.rmvError(_patchErrorMessage(rule.errorMsg, ctx_3, inst_1));
                                    else
                                        pp_1.$errors[sp_1].rmvError(_patchErrorMessage(rule.errorMsg, ctx_3, inst_1));
                                }
                                else {
                                    if (addToRoot)
                                        root.addError(_patchErrorMessage(rule.errorMsg, ctx_3, inst_1));
                                    else
                                        pp_1.$errors[sp_1].addError(_patchErrorMessage(rule.errorMsg, ctx_3, inst_1));
                                }
                            }
                            catch (e) {
                                _patchRuleError(e, rule, root);
                            }
                        });
                        var cs = segments.pop();
                        if (cs && (cs.charAt(0) === '$'))
                            cs = segments.pop();
                        if (cs)
                            cp_1.unshift(cs);
                        inst_1 = inst_1.parent;
                    };
                    while (inst_1) {
                        _loop_1();
                    }
                }
            }
            finally {
                root.callStack.pop();
                if (!root.callStack.length)
                    root.callStack = null;
            }
        }, _execValidationRules = function (inst, selectedProps) {
            if (!inst.className)
                return false;
            var root = inst.getRootModel();
            if (!root.$schema.rules || !root.$schema.rules.validation || !root.$schema.rules.validation[inst.className])
                return false;
            var props = Object.keys(root.$schema.rules.validation[inst.className]);
            var ctx = _createContext(inst);
            var hasErrors = false;
            props.forEach(function (propName) {
                if (selectedProps && selectedProps.indexOf(propName) < 0)
                    return false;
                var lrules = root.$schema.rules.validation[inst.className][propName];
                lrules && lrules.forEach(function (ruleId) {
                    var rule = root.$schema.rulesMap[ruleId];
                    try {
                        if (!rule.code) {
                            var returnCode = 'return ';
                            if (rule.expression.indexOf(returnCode) >= 0)
                                returnCode = '';
                            rule.code = new Function('o', 'ctx', 'window', returnCode + _parseExpression(rule.expression, { isPropagation: false }));
                            rule.conditionCode = rule.condition ? new Function('o', 'ctx', 'window', 'return ' + _parseExpression(rule.condition, { isPropagation: false })) : null;
                        }
                        var execRule_1 = true;
                        if (rule.triggers.length) {
                            rule.triggers.forEach(function (trigger) {
                                if (trigger.indexOf('$events.') === 0)
                                    return;
                                if (execRule_1)
                                    execRule_1 = _su.hasProperty(trigger, inst.$schema, root.$schema);
                            });
                        }
                        if (!execRule_1)
                            return;
                        var addToRoot = rule.triggers.length > 1;
                        var canRun = true;
                        if (rule.conditionCode)
                            canRun = rule.conditionCode(inst, ctx, null);
                        if (canRun) {
                            _utils.logRule(root.callStack ? root.callStack.length : 0, rule, propName, inst.className || '');
                        }
                        if (!canRun || rule.code(inst, ctx, null)) {
                            if (addToRoot)
                                root.rmvError(_patchErrorMessage(rule.errorMsg, ctx, inst));
                            else
                                inst.$errors[propName].rmvError(_patchErrorMessage(rule.errorMsg, ctx, inst));
                        }
                        else {
                            hasErrors = true;
                            if (addToRoot)
                                root.addError(_patchErrorMessage(rule.errorMsg, ctx, inst));
                            else
                                inst.$errors[propName].addError(_patchErrorMessage(rule.errorMsg, ctx, inst));
                        }
                    }
                    catch (e) {
                        _patchRuleError(e, rule, root);
                    }
                });
            });
            return hasErrors;
        };
        rules_1.execInitRules = _execInitRules;
        rules_1.execBeforeSaveRules = _execBeforeSaveRules;
        rules_1.execPropChangeRules = _execPropChangeRules;
        rules_1.execValidationRules = _execValidationRules;
        rules_1.injectInContext = _patchContext;
    })(rules = Phoenix.rules || (Phoenix.rules = {}));
})(Phoenix || (Phoenix = {}));
/// <reference path="../../core/core-refs.ts" />
/// <reference path="../../core/modules/ajax.ts" />
/// <reference path="./schema.data.ts" />
/// <reference path="./state.data.ts" />
/// <reference path="./errors.data.ts" />
/// <reference path="./queryable.ts" />
/// <reference path="./rules.ts" />
var Phoenix;
(function (Phoenix) {
    var Observable;
    (function (Observable) {
        var JSONJPATCH_PROPERTY = 0, JSONJPATCH_METHOD = 1, JSONJPATCH_STATES = 2, JSONJPATCH_ERRORS = 3;
        var _p = Phoenix, _application = _p.application, _observable = Observable, _rules = _p.rules, _su = _observable.SchemaUtils, _du = _observable.DataUtils, _utils = Phoenix.utils, _jp = _p.jsonpatch, _rules = _p.rules, _ajax = Phoenix.ajax, _locale = Phoenix.locale, _ulocale = Phoenix.ulocale, _localeSchema = Phoenix.locale.schema, _createProp = function (obj, propertyName) {
            var rs = obj._rootParent._schema;
            var cs = obj._schema.properties[propertyName];
            if (!_su.inModel(cs, rs))
                return;
            Object.defineProperty(obj, propertyName, {
                get: function () {
                    var that = this;
                    var c = that._children[propertyName];
                    if (c) {
                        //if (c.isNull) return null;
                        //if (c.isUndefined) return undefined;
                        return c;
                    }
                    return that._model[propertyName];
                },
                set: function (value) {
                    var that = this;
                    var oldValue = that._model[propertyName];
                    if (oldValue !== value || !that._initialized[propertyName]) {
                        var schema = that._schema.properties[propertyName];
                        var bcRes = that._beforeChange(that, propertyName, schema, oldValue, value, !that._initialized[propertyName]);
                        value = bcRes.value;
                        that._initialized[propertyName] = true;
                        if (bcRes.continue) {
                            if (that.isRecursiveRule(propertyName))
                                return;
                            that._model[propertyName] = value;
                            var rootSchema = obj._rootParent._schema;
                            var e = that.$errors[propertyName];
                            if (e)
                                e.clear(true);
                            if (_su.isCompositionRef(schema, rootSchema)) {
                                that._setRefChild(propertyName, oldValue, value, {});
                                //OK2
                                that.notifyChanged(propertyName, oldValue, value, 'propchange', { instance: that, checkChildren: true }, true);
                                that.notifyStateChanged(propertyName, { instance: that, checkChildren: true });
                            }
                            else if (_su.isCompositionList(schema, rootSchema, false)) {
                                that._setListChild(propertyName, oldValue, value, 'propchange', { checkChildren: true });
                                //OK2
                                that.notifyChanged(propertyName, oldValue, value, 'propchange', { instance: that }, true);
                                that.notifyStateChanged(propertyName, { instance: that, checkChildren: true });
                            }
                            else if (_su.isSimpleList(schema, rootSchema)) {
                                that._setSimpleListChild(propertyName, oldValue, value, 'propchange', {});
                                //OK2
                                that.notifyChanged(propertyName, oldValue, value, 'propchange', { instance: that }, true);
                                that.notifyStateChanged(propertyName, { instance: that, checkChildren: true });
                            }
                            else if (_su.isList(schema, rootSchema)) {
                                that[propertyName].setModel(value);
                            }
                            else {
                                //OK2
                                that.notifyChanged(propertyName, oldValue, value, 'propchange', { instance: that }, true);
                            }
                        }
                    }
                },
                enumerable: true
            });
            if (_su.isCompositionList(cs, rs, false)) {
                // add expand 
                Object.defineProperty(obj, propertyName + Observable.EXPANDED_FIELD_NAME, {
                    get: function () {
                        var that = this;
                        var list = that[propertyName];
                        if (!list || !list.length)
                            return 0;
                        return list.$expand ? 2 : 1;
                    },
                    set: function (value) {
                        var that = this;
                        var list = that[propertyName];
                        if (list) {
                            if (value === 1)
                                list.$expand = false;
                            else if (value === 2)
                                list.$expand = true;
                        }
                    },
                    enumerable: true
                });
            }
        }, _createStateProp = function (obj, name, defvalue) {
            var ss = obj._schema.properties[name];
            var rs = obj._rootParent._schema;
            if (!_su.inModel(ss, rs))
                return;
            if (_su.isNumber(ss)) {
                if (_su.isMoney(ss)) {
                    defvalue = defvalue || {};
                    if (!defvalue.symbol)
                        defvalue.symbol = ss.symbol || _locale.number.symbol;
                    if (!defvalue.decimals)
                        defvalue.decimals = (ss.decimals !== undefined) ? ss.decimals : _locale.number.places;
                }
                else {
                    defvalue = defvalue || {};
                    if (ss.symbol !== undefined) {
                        defvalue = defvalue || {};
                        defvalue.symbol = ss.symbol;
                    }
                    if (ss.decimals !== undefined)
                        defvalue.decimals = ss.decimals;
                    else
                        defvalue.decimals = 0;
                }
            }
            if (ss.type === 'array' && (!ss.items || !ss.items.type || ss.items.type === 'object')) {
                obj.$states[name] = new _observable.ListStates(obj, name, defvalue);
            }
            else
                obj.$states[name] = new _observable.DataStates(obj, name, defvalue);
        }, _createErrorProp = function (obj, name, defvalue) {
            var schema = obj.$schema.properties[name];
            var rs = obj.root.$schema;
            if (!_su.inModel(schema, rs) || _su.isCompositionRef(schema, rs))
                return;
            obj.$errors[name] = new _observable.Errors(obj, name, defvalue);
        }, _createStateLinks = function (obj, name, defvalue) {
            obj.$links[name] = new _observable.LinkStates(obj, name, defvalue);
        }, _dutils = {
            setValue: function (path, value, model, params) {
                model.setValue(path, value, params);
            },
            getValue: function (path, model, params) {
                return model.getValue(path, params);
            },
            getState: function (path, model, params) {
                return model.getState(path, params);
            },
            _segment2Id: function (segment) {
                var id = parseInt(segment, 10);
                if ((id + '') !== segment)
                    id = segment;
                return id;
            },
            _resolveJSONPatchSegment: function (segment, value, useId) {
                if (value.isArray) {
                    if (segment === '$links') {
                        return { value: value.$links, useId: useId };
                    }
                    var id = _dutils._segment2Id(segment);
                    return { value: value.find('id', id), useId: useId };
                }
                return { value: value[segment], useId: useId };
            },
            getJSONPatchParent: function (segment, value) {
                var segments = segment.split('/');
                segments.shift();
                var res = { lastSegment: segments.pop(), value: null, type: JSONJPATCH_PROPERTY };
                if (segment.indexOf('$states') >= 0) {
                    res.type = JSONJPATCH_STATES;
                }
                else if (segment.indexOf('$errors') >= 0) {
                    res.type = JSONJPATCH_ERRORS;
                }
                else if (segment.indexOf('$links') >= 0) {
                    res.type = JSONJPATCH_METHOD;
                    var methodName = segments.pop();
                    var m = methodName.split('.');
                    if (m.length > 1) {
                        var arrayPropName = m.shift();
                        methodName = m.join('.');
                        var links = segments.pop();
                        segments.push(arrayPropName);
                        segments.push(links);
                    }
                    segments.push(methodName);
                }
                var cv = value;
                var useId = true;
                while (segments.length) {
                    var p = _dutils._resolveJSONPatchSegment(segments.shift(), cv, useId);
                    useId = p.useId;
                    cv = p.value;
                    if (!cv)
                        break;
                }
                if (cv) {
                    var nv = cv[res.lastSegment];
                    if (nv && nv.isArray) {
                        res.lastSegment = '';
                        cv = nv;
                    }
                }
                res.value = cv;
                return res;
            },
            _resolveSegment: function (segment, path, value, params, val, isSet) {
                if (segment === '$item') {
                    if (params) {
                        var p = params[path];
                        return p;
                    }
                }
                else if (segment === '$selected') {
                    if (isSet)
                        value[segment] = val;
                    return value[segment];
                }
                else if (segment === '$new') {
                    if (isSet)
                        value[segment] = val;
                    return value[segment];
                }
                else {
                    if (value && value[segment] && typeof value[segment] === 'function') {
                        if (isSet)
                            return value[segment](val);
                        return value[segment]();
                    }
                    else {
                        if (isSet)
                            value[segment] = val;
                        return value[segment];
                    }
                }
                return undefined;
            }
        };
        var DataListCore = /** @class */ (function () {
            function DataListCore(schema, parent, path, value, arrayParent, locale, isQuery, parentSelected) {
                var that = this;
                that.isArray = true;
                that._map = {};
                that._expanded = false;
                that.isQuery = isQuery;
                that._selectedUids = [];
                that._selectedPks = [];
                that.isNull = false;
                that.isUndefined = true;
                that._model = undefined;
                that._items = [];
                that._path = path;
                that._parent = parent;
                that._parentSelected = parentSelected;
                that._locale = locale;
                that._arrayParent = arrayParent;
                that._rootSchema = that._parent.getRootModel().getSchema('');
                that._schema = _su.expand$Ref(schema, that._rootSchema);
                that._schemaItems = _su.expand$Ref(that._schema.items, that._rootSchema);
                that.frozen = false;
                that.$links = {};
                if (that._schema.links) {
                    var parentModel_1 = that._parent.model(true);
                    Object.keys(that._schema.links).forEach(function (name) {
                        var link = $.extend({}, that._schema.links[name]);
                        var parentPath = path + '.' + name;
                        parentModel_1.$links = parentModel_1.$links || {};
                        parentModel_1.$links[parentPath] = $.extend(link, parentModel_1.$links[parentPath] || {});
                        that.$links[name] = new _observable.LinkStates(that.parent, path + '.$links.' + name, parentModel_1.$links[parentPath]);
                    });
                }
                that._setModel(value, true);
            }
            DataListCore.prototype.selecting = function (value, expandingProperty) {
                var that = this;
                if (that._schema.syncSelected) {
                    if (value) {
                        that._simulateSelecting = true;
                        that._savedSelectedUids = that._selectedUids.slice();
                    }
                    else {
                        var toSend = that._selectedPks.slice();
                        that._selectedUids = [];
                        that._selectedPks = [];
                        var map_1 = {};
                        that._savedSelectedUids.forEach(function (id) {
                            map_1[id] = true;
                        });
                        var keys_1 = null;
                        if (that._schemaItems.primaryKey) {
                            var doSend_1 = false;
                            keys_1 = _su.pkFields(that._schemaItems.primaryKey);
                            that.forEach(function (item) {
                                if (map_1[item.$id]) {
                                    if (item.internalSetSelected(true))
                                        doSend_1 = true;
                                    that._selectedUids.push(item.$id);
                                    if (keys_1)
                                        that._selectedPks.push(_su.pk2Id(_su.extractPkValue(item, keys_1), keys_1));
                                }
                                else if (item.internalSetSelected(false))
                                    doSend_1 = true;
                            }, expandingProperty);
                            that._savedSelectedUids = null;
                            that._simulateSelecting = false;
                            if (doSend_1)
                                that._parent.execSyncAction(that.getJSONPatchPath() + '.$selected', toSend.join(','));
                        }
                    }
                }
            };
            Object.defineProperty(DataListCore.prototype, "columns", {
                get: function () {
                    return this._columns;
                },
                set: function (value) {
                    this._columns = value;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(DataListCore.prototype, "manageSelecting", {
                get: function () {
                    var that = this;
                    return that._selecting && !that._multiselect && that.schema.autoSelect !== false && !that.schema.syncSelected;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(DataListCore.prototype, "allowSelecting", {
                get: function () {
                    var that = this;
                    return that._selecting;
                },
                set: function (value) {
                    this._selecting = value;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(DataListCore.prototype, "multiselect", {
                get: function () {
                    return this._multiselect;
                },
                set: function (value) {
                    this._multiselect = value;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(DataListCore.prototype, "expandingProperty", {
                get: function () {
                    return this._expandingProperty;
                },
                set: function (value) {
                    this._expandingProperty = value;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(DataListCore.prototype, "simulateSelecting", {
                get: function () {
                    return this._simulateSelecting;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(DataListCore.prototype, "schema", {
                get: function () {
                    var that = this;
                    return that._schema;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(DataListCore.prototype, "path", {
                get: function () {
                    var that = this;
                    return that._path;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(DataListCore.prototype, "parent", {
                get: function () {
                    var that = this;
                    return that._parent;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(DataListCore.prototype, "$selected", {
                get: function () {
                    var that = this;
                    if (that._parentSelected)
                        return that._parentSelected.$selected;
                    else
                        return this._selected;
                },
                set: function (value) {
                    this._setSelected(value, true);
                },
                enumerable: true,
                configurable: true
            });
            DataListCore.prototype._setSelected = function (value, notify) {
                var that = this;
                if (that._parentSelected) {
                    that._parentSelected._setSelected(value, notify);
                }
                else if (that._selected !== value) {
                    var os = that._selected;
                    that._selected = value;
                    if (notify && that._parent && !that.simulateSelecting) {
                        that._parent.notifyChanged(that._path + '.$selected', os, that._selected, 'propchange', { checkChildren: true, instance: that._parent }, false);
                        // that._parent.notifyStateChanged(that._path + '.$selected', { checkChildren: true }); ///????
                    }
                }
            };
            DataListCore.prototype.enumSelectedItems = function (expandingProperty, cb) {
            };
            DataListCore.prototype.getJSONPatchPath = function (propertyName) {
                var that = this;
                propertyName = propertyName ? that.path + '.' + propertyName : that.path;
                return that.parent.getJSONPatchPath(propertyName);
            };
            DataListCore.prototype.getFullPath = function () {
                var that = this;
                return that.parent.getPropertyPath(that.path);
            };
            DataListCore.prototype._rmvSelected = function (value, notify) {
                var that = this;
                if (that._parentSelected) {
                    that._parentSelected._rmvSelected(value, notify);
                }
                else if (that._selected === value) {
                    var ns_1 = null;
                    var os = that._selected;
                    if (that._schema && that._schema.children) {
                        that.enumSelectedItems(that._schema.children, function (item) {
                            if (!ns_1)
                                ns_1 = item;
                        });
                    }
                    that._selected = ns_1;
                    if (notify && that._parent && !that.simulateSelecting) {
                        that._parent.notifyChanged(that._path + '.$selected', os, that._selected, 'propchange', { checkChildren: true, instance: that._parent }, false);
                        // that._parent.notifyStateChanged(that._path + '.$selected', { checkChildren: true });
                    }
                }
            };
            DataListCore.prototype.pushSelected = function (item, notify) {
                var that = this;
                var id = item.$id;
                var ii = that._selectedUids.indexOf(id);
                if (ii < 0)
                    that._selectedUids.push(id);
                if (that._schemaItems.primaryKey) {
                    var keys = _su.pkFields(that._schemaItems.primaryKey);
                    id = _su.pk2Id(_su.extractPkValue(item, keys), keys);
                    ii = that._selectedPks.indexOf(id);
                    if (ii < 0)
                        that._selectedPks.push(id);
                }
                that._setSelected(item, notify);
            };
            DataListCore.prototype.model = function (original) {
                return this._getModel(original);
            };
            DataListCore.prototype.schemaModel = function () {
                var that = this;
                return that._model;
            };
            DataListCore.prototype._getModel = function (original) {
                var that = this;
                if (original)
                    return that._model;
                return that._model;
            };
            DataListCore.prototype._initModelInParent = function () {
                var that = this;
                if (!that._model) {
                    that._model = [];
                    that.isNull = false;
                    that.isUndefined = false;
                    if (that._parent) {
                        var model = that._parent.model(true);
                        model[that._path] = that._model;
                    }
                }
            };
            DataListCore.prototype.removeSelected = function (item, notifySelectedChanged) {
                var that = this;
                var ii = that._selectedUids.indexOf(item.$id);
                if (ii >= 0) {
                    that._selectedUids.splice(ii, 1);
                }
                if (that._schemaItems.primaryKey) {
                    var keys = _su.pkFields(that._schemaItems.primaryKey);
                    var id = _su.pk2Id(_su.extractPkValue(item, keys), keys);
                    ii = that._selectedPks.indexOf(id);
                    if (ii >= 0)
                        that._selectedPks.splice(ii, 1);
                }
                that._rmvSelected(item, notifySelectedChanged);
            };
            DataListCore.prototype.notifyChangedProperty = function (operation) {
                var that = this;
                //used for propName = count/filter/pagination/sorting
                that._parent.notifyChanged(that._path, undefined, undefined, operation, { instance: that._parent }, false);
            };
            DataListCore.prototype.addAjaxException = function (ex) {
                var that = this;
                return that._parent.addAjaxException(ex);
            };
            DataListCore.prototype.notifyPaginationChanged = function () { };
            DataListCore.prototype.notifyCountChanged = function () {
                this.notifyChangedProperty('count');
            };
            DataListCore.prototype.notifySortingChanged = function () { };
            DataListCore.prototype.isQueryable = function () {
                return this._queryable || false;
            };
            DataListCore.prototype.addErrors = function (errors) {
                var that = this;
                var err = that._parent.$errors[that._path];
                if (err)
                    err.addErrors(errors);
                else
                    that._parent.addErrors(errors);
            };
            DataListCore.prototype.addError = function (message) {
                var that = this;
                var errors = [{ severity: 'error', message: message, id: _utils.allocUuid() }];
                that.addErrors(errors);
            };
            DataListCore.prototype.rmvError = function (message) {
                var that = this;
                var err = that._parent.$errors[that._path];
                if (err)
                    err.rmvError(message);
                else
                    that._parent.rmvError(message);
            };
            Object.defineProperty(DataListCore.prototype, "length", {
                get: function () {
                    return this._items.length;
                },
                enumerable: true,
                configurable: true
            });
            DataListCore.prototype._destroyItems = function () {
                var that = this;
                that._selectedUids = [];
                if (that._items) {
                    that._model = undefined;
                    that._items = [];
                }
            };
            DataListCore.prototype.$orderby = function (value) {
                return '';
            };
            DataListCore.prototype.hasNext = function () {
                return false;
            };
            DataListCore.prototype.hasPrev = function () {
                return false;
            };
            DataListCore.prototype.noPagesCount = function () {
                return false;
            };
            DataListCore.prototype.totalPages = function () {
                return 1;
            };
            DataListCore.prototype.currentPage = function (page) {
                return 0;
            };
            DataListCore.prototype.totalCount = function () {
                return this._items.length;
            };
            DataListCore.prototype.destroy = function () {
                var that = this;
                that._parent = null;
                that._arrayParent = null;
                that._parentSelected = null;
                that._destroyItems();
                that.$links = null;
                that._selectedPks = null;
                that._model = null;
                that._schema = null;
                that._schemaItems = null;
                that._rootSchema = null;
            };
            DataListCore.prototype._fillItems = function () {
                var that = this;
                if (that._model)
                    that._model.forEach(function (item, index) {
                        that._items.push(item);
                    });
            };
            DataListCore.prototype._setModel = function (value, frozen) {
                var that = this;
                that.isNull = value === null;
                that.isUndefined = value === undefined;
                var ofv = that.frozen;
                if (frozen)
                    that.frozen = true;
                // remove && destroy items 
                that._destroyItems();
                that._model = value;
                that._fillItems();
                that.frozen = ofv;
            };
            DataListCore.prototype.setModel = function (value) {
                var that = this;
                that._setModel(value, true);
                //Ok
                that._parent.notifyChanged(that._path, undefined, undefined, 'propchange', { instance: that._parent, checkChildren: true }, false);
                that.notifyCountChanged();
                that._parent.notifyStateChanged(that._path, { instance: that._parent, checkChildren: true }); ///????
                that.afterSetModel();
            };
            DataListCore.prototype.afterSetModel = function () {
                var that = this;
                that.$selected = null;
            };
            DataListCore.prototype.indexOf = function (value) {
                return this._items.indexOf(value);
            };
            DataListCore.prototype.find = function (prop) {
                var keys = [];
                for (var _i = 1; _i < arguments.length; _i++) {
                    keys[_i - 1] = arguments[_i];
                }
                var props = prop.split(','), ll = props.length;
                for (var i = 0, len = this._items.length; i < len; i++) {
                    var found = true;
                    var item = this._items[i];
                    for (var j = 0; j < ll; j++) {
                        if (keys[j] !== item[props[j]]) {
                            found = false;
                            break;
                        }
                    }
                    if (found)
                        return item;
                }
                return null;
            };
            DataListCore.prototype._expandForEach = function (cb, expandingProperty, level, index, noCheckExpanding) {
                this._items.forEach(function (item) {
                    cb(item, index, level);
                    index++;
                    var list = _utils.getValue(item, expandingProperty);
                    if (list && (list.$expand || noCheckExpanding)) {
                        index = list._expandForEach(cb, expandingProperty, level + 1, index, noCheckExpanding);
                    }
                });
                return index;
            };
            DataListCore.prototype.forEach = function (cb, expandingProperty, noCheckExpanding) {
                if (!expandingProperty)
                    return this._items.forEach(function (item, index) { return cb(item, index, 0); });
                this._expandForEach(cb, expandingProperty, 0, 0, noCheckExpanding);
            };
            DataListCore.prototype.get = function (index) { return this._items[index]; };
            Object.defineProperty(DataListCore.prototype, "$expand", {
                get: function () {
                    return this._expanded;
                },
                set: function (value) {
                    var that = this;
                    if (that._expanded !== value) {
                        var ov = that._parent[that._path + Observable.EXPANDED_FIELD_NAME];
                        that._expanded = value;
                        var nv = that._parent[that._path + Observable.EXPANDED_FIELD_NAME];
                        if (nv !== ov)
                            that._parent.notifyChanged(that._path + Observable.EXPANDED_FIELD_NAME, ov, nv, 'propchange', { instance: that._parent }, true);
                    }
                },
                enumerable: true,
                configurable: true
            });
            return DataListCore;
        }());
        Observable.DataListCore = DataListCore;
        var DataListBase = /** @class */ (function (_super) {
            __extends(DataListBase, _super);
            function DataListBase() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            DataListBase.prototype._fillItems = function () {
                var that = this, keys = null;
                that._map = {};
                that._selectedUids = [];
                if (that._selected)
                    that.$selected = null;
                if (that._selectedPks.length) {
                    keys = _su.pkFields(that._schemaItems.primaryKey);
                }
                if (that._model)
                    that._model.forEach(function (item, index) {
                        if (that.isQuery && item)
                            item.$create = false;
                        var citem = new Data(that._schemaItems, that._parent, that._path, item, that, false, that._locale, null);
                        var addItem = false;
                        that._items.push(citem);
                        that._map[citem.$id] = citem;
                        if (keys) {
                            var pkId = _su.pk2Id(_su.extractPkValue(item, keys), keys);
                            if (that._selectedPks.lastIndexOf(pkId) >= 0) {
                                if (citem.internalSetSelected(true)) {
                                    if (!that.simulateSelecting)
                                        citem.notifyChanged('$select', false, true, 'propchange', { instance: citem }, true);
                                }
                                addItem = true;
                            }
                            else if (citem.$select)
                                addItem = true;
                        }
                        else if (citem.$select)
                            addItem = true;
                        if (addItem) {
                            that.pushSelected(citem, false);
                        }
                    });
            };
            DataListBase.prototype._updateSelecting = function (multiSelect, expandingProperty, list, root) {
                var that = this;
                if (multiSelect) {
                    that._selectedUids.forEach(function (sel) {
                        var ii = that._map[sel];
                        if (ii)
                            that.pushSelected(ii, true);
                    });
                }
                else {
                    // Send selected
                    that._selectedPks = [];
                    that._selected = null;
                    if (that._selectedUids.length) {
                        var sel = that._selectedUids.slice(0);
                        if (!list.length)
                            list.push(sel.pop());
                        sel.forEach(function (selid) {
                            var ii = that._map[selid];
                            if (ii)
                                ii.$select = false;
                        });
                        if (list.length && list[0]) {
                            var ii = that._map[list[0]];
                            list[0] = null;
                            if (ii)
                                that.pushSelected(ii, true);
                        }
                    }
                }
                if (expandingProperty) {
                    that._items.forEach(function (item) {
                        var elist = _utils.getValue(item, expandingProperty);
                        if (elist)
                            elist._updateSelecting(multiSelect, expandingProperty, list, false);
                    }, null);
                }
            };
            DataListBase.prototype.clearSelection = function (expandingProperty, force) {
                var that = this;
                that.enumSelectedItems(expandingProperty, function (item) {
                    that.selectItem(false, item, false, expandingProperty, false);
                });
                if (force)
                    that._selectedPks = [];
            };
            DataListBase.prototype.getSelectedItems = function (expandingProperty) {
                var that = this;
                var res = [];
                if (that._schemaItems.primaryKey) {
                    var keys_2 = _su.pkFields(that._schemaItems.primaryKey);
                    that.enumSelectedItems(expandingProperty, function (item) {
                        var id = _su.pk2Id(_su.extractPkValue(item, keys_2), keys_2);
                        res.push(id);
                    });
                }
                return res;
            };
            DataListBase.prototype.setSelectedItems = function (selected) {
                var that = this;
                if (that._schemaItems.primaryKey) {
                    var keys_3 = _su.pkFields(that._schemaItems.primaryKey);
                    that.enumSelectedItems('', function (item) {
                        var id = _su.pk2Id(_su.extractPkValue(item, keys_3), keys_3);
                        var ii = selected.indexOf(id);
                        if (ii < 0) {
                            that.selectItem(false, item, false, '', false);
                        }
                        else
                            selected.splice(ii, 1);
                    });
                    selected.forEach(function (pk) {
                        var p = _su.findByPk(pk, keys_3, that._items);
                        if (p)
                            that.selectItem(true, p, true, '', false);
                    });
                }
            };
            DataListBase.prototype.updateSelecting = function (multiSelect, expandingProperty) {
                this._updateSelecting(multiSelect, expandingProperty, [], true);
            };
            DataListBase.prototype.enumSelectedItems = function (expandingProperty, cb) {
                var that = this;
                that._enumSelected(expandingProperty, function (parent, ii) {
                    if (ii)
                        cb(ii);
                });
            };
            DataListBase.prototype._enumChildren = function (expandingProperty, cb) {
                var that = this;
                if (!expandingProperty)
                    return;
                that._items.forEach(function (item) {
                    cb(item);
                    var list = item[expandingProperty];
                    if (list)
                        list._enumChildren(expandingProperty, cb);
                });
            };
            DataListBase.prototype.enumChildren = function (expandingProperty, cb) {
                this._enumChildren(expandingProperty, cb);
            };
            DataListBase.prototype._enumSelected = function (expandingProperty, cb) {
                var that = this;
                if (!expandingProperty) {
                    var sel = that._selectedUids.slice(0);
                    cb(that, null);
                    if (!sel.length)
                        return;
                    sel.forEach(function (sid) {
                        var ii = that._map[sid];
                        if (ii)
                            cb(that, ii);
                    });
                }
                else {
                    that._enumSelected(null, cb);
                    that._items.forEach(function (item) {
                        var list = _utils.getValue(item, expandingProperty);
                        if (list && list.length)
                            list._enumSelected(expandingProperty, cb);
                    });
                }
            };
            DataListBase.prototype.selectItem = function (value, item, multiSelect, expandingProperty, selectChildren) {
                var that = this;
                if (!item)
                    return;
                if (value) {
                    if (!item.$select) {
                        if (multiSelect) {
                            item.$select = true;
                            if (expandingProperty && selectChildren) {
                                var list = _utils.getValue(item, expandingProperty);
                                if (list)
                                    list._enumChildren(expandingProperty, function (ii) { ii.$select = true; });
                            }
                        }
                        else {
                            var selList_1 = [];
                            that._enumSelected(expandingProperty, function (parent, ii) {
                                if (parent && !ii) {
                                    parent._selectedUids = [];
                                    parent._selectedPks = [];
                                }
                                else {
                                    if (ii.internalSetSelected(false)) {
                                        selList_1.push({ item: ii, value: false });
                                    }
                                }
                            });
                            if (item.internalSetSelected(true)) {
                                selList_1.push({ item: item, value: true });
                            }
                            var pa = item._arrayParent;
                            if (pa)
                                pa.pushSelected(item, true);
                            selList_1.forEach(function (citem) {
                                if (!that.simulateSelecting)
                                    citem.item.notifyChanged('$select', !citem.value, citem.value, 'propchange', { instance: citem.item }, true);
                            });
                        }
                    }
                }
                else {
                    if (item.$select) {
                        if (multiSelect) {
                            item.$select = false;
                            if (expandingProperty && selectChildren) {
                                var list = _utils.getValue(item, expandingProperty);
                                if (list)
                                    list._enumChildren(expandingProperty, function (ii) { ii.$select = false; });
                            }
                        }
                        else {
                            var doNotify = item.internalSetSelected(false, true);
                            var pa = item._arrayParent;
                            if (pa)
                                that.removeSelected(item, true);
                            if (doNotify) {
                                if (!that.simulateSelecting)
                                    item.notifyChanged('$select', true, false, 'propchange', { instance: item }, true);
                            }
                        }
                    }
                }
            };
            DataListBase.prototype.canDoNext = function () {
                var that = this;
                if (that.noPagesCount())
                    return that.hasNext();
                var tp = that.totalPages();
                var cp = that.currentPage();
                return cp < tp;
            };
            DataListBase.prototype.canDoPrev = function () {
                var that = this;
                if (that.noPagesCount())
                    return that.hasPrev();
                return that.currentPage() > 1;
            };
            DataListBase.prototype.moveSelected = function (value, navigate) {
                var that = this;
                var sel = null;
                // find selected
                that.enumSelectedItems('', function (ii) {
                    if (!sel) {
                        sel = ii;
                    }
                });
                if (sel) {
                    var idx = that._items.indexOf(sel);
                    var ndx = Math.max(0, Math.min(idx + value, that._items.length - 1));
                    if (navigate && ndx !== idx + value) {
                        // try to navigate 
                        if (value > 0 && that.canDoNext()) {
                            that.currentPage(that.currentPage() + 1);
                            return;
                        }
                        else if (value < 0 && that.canDoPrev()) {
                            that.currentPage(that.currentPage() - 1);
                            return;
                        }
                    }
                    var ns = that._items[ndx];
                    if (ns !== sel)
                        that.selectItem(true, ns, false, '', false);
                }
            };
            DataListBase.prototype.sortByKey = function (values, key) {
                var that = this;
                if (!values || !values.length)
                    return;
                if (that._model && that._model.length) {
                    var mm_1 = {};
                    var im_1 = {};
                    var oldSort_1 = [];
                    that._model.forEach(function (mi, index) {
                        mm_1[mi[key]] = mi;
                        im_1[mi[key]] = that._items[index];
                        oldSort_1.push(mi[key]);
                    });
                    that._model.splice(0, that._model.length);
                    that._items.splice(0, that._items.length);
                    values.forEach(function (value, index) {
                        that._model.push(mm_1[value]);
                        that._items.push(im_1[value]);
                    });
                    if (oldSort_1.join('$$') !== values.join('$$'))
                        that._parent.notifyChanged(that._path, undefined, undefined, 'propchange', { instance: that._parent, checkChildren: true, sorting: true }, false);
                }
            };
            DataListBase.prototype.findById = function (id) {
                return this._map[id];
            };
            DataListBase.prototype.findByPk = function (pkValue) {
                var that = this;
                if (that._schemaItems.primaryKey) {
                    var keys = _su.pkFields(that._schemaItems.primaryKey);
                    return _su.findByPk(pkValue, keys, that._items);
                }
                return null;
            };
            DataListBase.prototype.indexOf = function (value) {
                var that = this;
                if (typeof value !== 'object')
                    value = that.findById(value);
                return value ? that._items.indexOf(value) : null;
            };
            DataListBase.prototype.$orderby = function (value) {
                var that = this;
                var states = that.parent.$states[that.path];
                if (value === undefined)
                    return states.orderBy;
                states.orderBy = value;
                return states.orderBy;
            };
            DataListBase.prototype.$filter = function (value) {
                //mongo db filter 
                var that = this;
                var states = that.parent.$states[that.path];
                if (value === undefined)
                    return states.filter;
                states.filter = value;
                return states.filter;
            };
            return DataListBase;
        }(DataListCore));
        Observable.DataListBase = DataListBase;
        var QueryList = /** @class */ (function (_super) {
            __extends(QueryList, _super);
            function QueryList(parentSchema, schema, parent, path, value, pageSize, pageNumber, totalCount, hasNext, hasPrev, noPagesCount, allData, arrayParent, locale) {
                var _this = _super.call(this, schema, parent, path, value, arrayParent, locale, true, null) || this;
                var that = _this;
                var root = that._parent.getRootModel();
                var cfg = _du.dsConfig(root.datasets, schema, true);
                if (root.design) {
                    cfg = {
                        $type: 'odata',
                        $params: { $entity: 'EntityIsMissing' },
                        $autoOpen: false
                    };
                }
                if (!cfg) {
                    throw 'Invalid config! You must define a dataset in form for the property: "' + path + '".';
                }
                that.allData = allData;
                that._main = cfg.$main;
                that._queryable = true;
                if (pageSize === undefined) {
                    pageSize = cfg.$params.$top || 20;
                }
                that._query = new Observable.QueryableDataSource(cfg, that);
                that._query.initPagination(pageSize, pageNumber, totalCount, hasNext, hasPrev, noPagesCount);
                if (that._main) {
                    if (root) {
                        root.onRefresh = function (options) {
                            var resetPagination = (options && options.resetPagination);
                            return that.$refresh(resetPagination);
                        };
                    }
                }
                return _this;
            }
            Object.defineProperty(QueryList.prototype, "filter", {
                get: function () {
                    return this._query.filter;
                },
                set: function (value) {
                    this._query.filter = value;
                    this.notifyChangedProperty('filter');
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(QueryList.prototype, "searchFields", {
                get: function () {
                    return this._query.searchFields;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(QueryList.prototype, "searchField", {
                set: function (value) {
                    this._query.searchFields = value;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(QueryList.prototype, "search", {
                get: function () {
                    return this._query.search;
                },
                set: function (value) {
                    this._query.search = value;
                },
                enumerable: true,
                configurable: true
            });
            QueryList.prototype.totalPages = function () {
                return this._query.totalPages();
            };
            QueryList.prototype.totalCount = function () {
                return this._query.totalCount();
            };
            QueryList.prototype.hasNext = function () {
                return this._query.hasNext();
            };
            QueryList.prototype.hasPrev = function () {
                return this._query.hasPrev();
            };
            QueryList.prototype.noPagesCount = function () {
                return this._query.noPagesCount();
            };
            QueryList.prototype.$refresh = function (resetPagination) {
                return this._query.refresh(resetPagination, true);
            };
            QueryList.prototype.$orderby = function (value) {
                return this._query.orderBy(value);
            };
            QueryList.prototype.notifyPaginationChanged = function () {
                this.notifyChangedProperty('pagination');
            };
            QueryList.prototype.notifyFilterChanged = function () {
                this.notifyChangedProperty('filter');
            };
            QueryList.prototype.notifySortingChanged = function () {
                this.notifyChangedProperty('sorting');
            };
            QueryList.prototype.currentPage = function (page) {
                if (page != undefined) {
                    return this._query.currentPage(page);
                }
                else
                    return this._query.currentPage();
            };
            QueryList.prototype._removeItem = function (key, etag) {
                var that = this;
                if (that._query) {
                    var p = that._query.remove(key, etag);
                    if (p.then)
                        p.then(function () {
                            that.$refresh((that._items.length > 1) ? false : true).then(function () { });
                        });
                }
            };
            QueryList.prototype.remove = function (item) {
                var that = this;
                var om = item.model(true);
                var selected = item.$select;
                var etag = om ? om['@odata.etag'] : null;
                if (that._schemaItems && that._schemaItems.primaryKey) {
                    var pk_1 = _su.odataId(_su.pkFields(that._schemaItems.primaryKey), item);
                    if (that._schemaItems.links && that._schemaItems.links.$remove && that._schemaItems.links.$remove.confirm) {
                        var msg = that._schemaItems.links.$remove.confirm;
                        if (that._locale)
                            msg = _ulocale.tt(msg || '', that._locale);
                        _utils.confirm(null, msg, function () {
                            that._removeItem(pk_1, etag);
                        });
                    }
                    else
                        that._removeItem(pk_1, etag);
                }
            };
            QueryList.prototype.destroy = function () {
                var that = this;
                that.allData = null;
                if (that._query) {
                    that._query.destroy();
                    that._query = null;
                }
                if (that._main) {
                    var root = that._parent.getRootModel();
                    if (root)
                        root.onRefresh = null;
                }
                _super.prototype.destroy.call(this);
            };
            return QueryList;
        }(DataListBase));
        Observable.QueryList = QueryList;
        var CompositionList = /** @class */ (function (_super) {
            __extends(CompositionList, _super);
            function CompositionList() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            CompositionList.prototype._destroyItems = function () {
                _super.prototype._destroyItems.call(this);
                var that = this;
                that._selectedPks = [];
            };
            CompositionList.prototype.find = function (prop) {
                var keys = [];
                for (var _i = 1; _i < arguments.length; _i++) {
                    keys[_i - 1] = arguments[_i];
                }
                var props = prop.split(','), ll = props.length;
                for (var i = 0, len = this._items.length; i < len; i++) {
                    var found = true;
                    var item = this._items[i];
                    for (var j = 0; j < ll; j++) {
                        if (keys[j] !== item[props[j]]) {
                            found = false;
                            break;
                        }
                    }
                    if (found)
                        return item;
                }
                return null;
            };
            return CompositionList;
        }(DataListBase));
        Observable.CompositionList = CompositionList;
        var SimpleCompositionList = /** @class */ (function (_super) {
            __extends(SimpleCompositionList, _super);
            function SimpleCompositionList() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            SimpleCompositionList.prototype._destroyItems = function () {
                _super.prototype._destroyItems.call(this);
                var that = this;
                that._selectedPks = [];
            };
            return SimpleCompositionList;
        }(DataListCore));
        Observable.SimpleCompositionList = SimpleCompositionList;
        var SimpleTypeList = /** @class */ (function (_super) {
            __extends(SimpleTypeList, _super);
            function SimpleTypeList() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            SimpleTypeList.prototype.push = function (item) {
                var that = this;
                that._initModelInParent();
                that._model.push(item);
                that._items.push(item);
                that._parent.notifyChanged(that._path, undefined, item, 'add', { $index: that._items.length - 1, $value: item, $id: item, instance: that._parent }, false);
                that.notifyCountChanged();
            };
            SimpleTypeList.prototype.splice = function (start, deleteCount, item) {
                if (deleteCount > 0)
                    throw 'Delete count is not supported.';
                var that = this;
                if (!that._model)
                    return;
                item.$create = true;
                that._model.splice(start, deleteCount, item);
                that._items.splice(start, deleteCount, item);
                that._parent.notifyChanged(that._path, undefined, item, 'add', { method: true, change: true, $index: start, $value: item, $id: item, instance: that._parent }, false);
                that.notifyCountChanged();
            };
            SimpleTypeList.prototype.remove = function (item) {
                var that = this;
                var ii = that._items.indexOf(item);
                if (ii >= 0) {
                    that._items.splice(ii, 1);
                    that._model.splice(ii, 1);
                    that._parent.notifyChanged(that._path, undefined, item, 'remove', { method: true, change: true, $index: ii, $value: item, $id: item, instance: that._parent }, false);
                    that.notifyCountChanged();
                }
            };
            return SimpleTypeList;
        }(SimpleCompositionList));
        Observable.SimpleTypeList = SimpleTypeList;
        var DataList = /** @class */ (function (_super) {
            __extends(DataList, _super);
            function DataList(schema, parent, path, value, arrayParent, locale, parentSelected) {
                var _this = _super.call(this, schema, parent, path, value, arrayParent, locale, false, parentSelected) || this;
                var that = _this;
                that._createNewItem(false, true);
                return _this;
            }
            DataList.prototype._initNew = function () {
                var that = this;
                //let o = _su.init(that._schemaItems, that._rootSchema, null, { $create: true });
                var o = { $create: true };
                that._new = new Data(that._schemaItems, that._parent, that._path + '.$new', o, null, true, that._locale, null);
                that._new.notifyChanged('', undefined, o, 'propchange', { instance: that._new, checkChildren: true }, false);
                that._new.notifyStateChanged('', { instance: that._new, checkChildren: true });
            };
            Object.defineProperty(DataList.prototype, "filter", {
                get: function () {
                    var that = this;
                    var sFilter = that.$filter();
                    if (!sFilter)
                        return null;
                    return JSON.parse(sFilter);
                },
                set: function (value) {
                    var that = this;
                    var sFilter = (value ? JSON.stringify(value) : '');
                    var cFilter = that.$filter() || '';
                    if (sFilter === cFilter)
                        return;
                    if (that.parent.execSyncAction(that.getJSONPatchPath() + '.$filter', sFilter, sFilter)) {
                        return;
                    }
                    that.$filter(sFilter);
                },
                enumerable: true,
                configurable: true
            });
            DataList.prototype._createNewItem = function (init, define) {
                var that = this;
                if (define) {
                    Object.defineProperty(that, '$new', {
                        get: function () {
                            var obj = this;
                            if (!obj._new)
                                obj._initNew();
                            return obj._new;
                        },
                        set: function (value) {
                            var obj = this;
                            if (!obj._new)
                                obj._initNew();
                            obj._new._setModel(value, true);
                            //OK TODO $new
                            obj._new.notifyChanged('', undefined, value, 'propchange', { instance: obj._new });
                            obj._new.notifyStateChanged('', { instance: obj._new, checkChildren: true });
                        },
                        enumerable: true
                    });
                }
                if (init && !that._new)
                    that._initNew();
            };
            DataList.prototype.updateItem = function (old, newItem) {
                var that = this;
                // validate
                if (!newItem.validate())
                    return false;
                // clear errors 
                newItem.$errors.$.addErrors([], false);
                // validate primary key
                var newModel = newItem._getModel(true);
                if (that._schemaItems.primaryKey) {
                    var keys = _su.pkFields(that._schemaItems.primaryKey);
                    var pkNewValue = _su.extractPkValue(newModel, keys);
                    var pkOldValue = _su.extractPkValue(old._getModel(true), keys);
                    var p = _su.findByPk(pkNewValue, keys, that._items);
                    if (p && p !== old) {
                        // Primary key violation
                        var msg = keys.length > 1 ? _localeSchema.uniqueColumns : _localeSchema.uniqueColumn;
                        newItem.$errors.$.addErrors([{ code: 'duplicate_value', message: _utils.format(msg, keys.join(', ')) }], false);
                        return false;
                    }
                }
                // update Old object
                return true;
            };
            DataList.prototype.addNew = function () {
                var that = this;
                if (!that._new)
                    return;
                if (!that._new.validate())
                    return;
                var model = that._new._getModel(false, true);
                if (that._schemaItems.primaryKey) {
                    var keys = _su.pkFields(that._schemaItems.primaryKey);
                    var pkValue = _su.extractPkValue(model, keys);
                    var p = _su.findByPk(pkValue, keys, that._items);
                    // Primary key violation
                    that._parent.$errors[that._path].addErrors([], false);
                    if (p) {
                        var msg = keys.length > 1 ? _localeSchema.uniqueColumns : _localeSchema.uniqueColumn;
                        that._parent.$errors[that._path].addErrors([{ code: 'duplicate_value', message: _utils.format(msg, keys.join(', ')) }], false);
                        return;
                    }
                }
                else {
                    that._parent.$errors[that._path].addErrors([], false);
                }
                that._destroyNew();
                that.push(model);
                that._createNewItem(true, false);
            };
            DataList.prototype._destroyNew = function () {
                var that = this;
                if (that._new) {
                    that._new.destroy();
                    that._new = null;
                }
            };
            DataList.prototype.destroy = function () {
                var that = this;
                that._destroyNew();
                _super.prototype.destroy.call(this);
            };
            DataList.prototype.push = function (item) {
                var that = this;
                item.$create = true;
                if (item.$select && item.$create)
                    that.clearSelection();
                that._initModelInParent();
                that.splice(-1, 0, item);
            };
            DataList.prototype.splice = function (start, deleteCount, item) {
                if (deleteCount > 0)
                    throw 'Delete count is not supported.';
                var that = this;
                that._initModelInParent();
                if (that.manageSelecting) {
                    that.clearSelection(that.expandingProperty);
                    item.$select = true;
                }
                var ofv = that.frozen;
                that.frozen = true;
                //if (item && !item.$create)
                //    item = _su.init(that._schemaItems, that._rootSchema, null, item);
                var isPush = start < 0;
                if (isPush) {
                    that._model.push(item);
                }
                else
                    that._model.splice(start, deleteCount, item);
                var ii = new Data(that._schemaItems, that._parent, that._path, item, that, false, that._locale, null);
                if (isPush)
                    that._items.push(ii);
                else
                    that._items.splice(start, deleteCount, ii);
                that.frozen = ofv;
                that._map[ii.$id] = ii;
                if (ii.$select) {
                    that.pushSelected(ii, true);
                }
                that._parent.notifyChanged(that._path, undefined, item, 'add', { method: true, change: true, $index: isPush ? that._items.length - 1 : start, $id: ii.$id, $value: ii, source: that._parent.getPropertyPath(that._path), instance: that._parent }, false);
                ii.notifyStateChanged('', { checkChildren: true });
            };
            DataList.prototype.remove = function (item) {
                var that = this;
                var removed = null;
                var ofv = that.frozen, notify;
                if (!that._model)
                    return;
                that.frozen = true;
                var ii = that._items.indexOf(item);
                var id = item.$id;
                var ns = null;
                var doDestroy = false;
                if (ii >= 0) {
                    removed = item.model();
                    notify = true;
                    if (item.$select && that.manageSelecting) {
                        if ((ii + 1) < that._items.length) {
                            ns = that._items[ii + 1];
                        }
                        else if (ii > 0) {
                            ns = that._items[ii - 1];
                        }
                    }
                    that._items.splice(ii, 1);
                    that._model.splice(ii, 1);
                    if (!ofv)
                        that.frozen = ofv;
                    that.removeSelected(item, false);
                    that.frozen = true;
                    doDestroy = true;
                }
                that.frozen = ofv;
                delete that._map[id];
                if (notify) {
                    that._parent.notifyChanged(that._path, undefined, item, 'remove', { mmethod: true, change: true, $index: ii, $value: item, $id: id, instance: that._parent }, false);
                    if (doDestroy) {
                        item.destroy();
                        doDestroy = false;
                    }
                    var path = (that._path ? that._path + '.' : '') + '$item'; // ???
                    that._parent.notifyStateChanged(path, {}); ///????
                    if (ns) {
                        that.pushSelected(ns, true);
                        ns.internalSetSelected(true);
                        ns.notifyChanged('$select', false, true, 'propchange', { instance: ns }, true);
                    }
                }
                if (doDestroy) {
                    item.destroy();
                }
            };
            return DataList;
        }(CompositionList));
        Observable.DataList = DataList;
        var Data = /** @class */ (function () {
            function Data(schema, parent, path, value, arrayParent, frozen, locale, datasets, transform, designMode) {
                var that = this;
                that._rootParent = parent ? parent._rootParent : that;
                var apath = [];
                if (parent) {
                    var p = parent.getPropertyPath();
                    if (p)
                        apath.push(p);
                }
                if (path)
                    apath.push(path);
                if (arrayParent)
                    apath.push('$item');
                that._fullPath = apath.join('.');
                that.design = designMode;
                that.$id = _utils.allocID();
                that.$create = false;
                that._initialized = {};
                that._selected = value && value.$select ? true : false;
                that._model = {};
                that.datasets = datasets;
                that.transform = transform;
                that.$states = {};
                that.$errors = {};
                that.$links = {};
                that._path = path;
                that._locale = locale;
                that._parent = parent;
                that._schema = _su.expand$Ref(schema, that._rootParent._schema);
                that.className = that._schema.name;
                if (!that._parent) {
                    that._validators = [{ name: 'schema', active: true }];
                }
                that._arrayParent = arrayParent;
                that._children = {};
                that._initFromSchema(schema);
                if (!that._parent || frozen)
                    that.frozen = true;
                if (that === that._rootParent) {
                    that._rootParent.$create = value ? (value.$create || false) : false;
                }
                that._setModel(value, true);
                that.frozen = false;
                if (!that._parent) {
                    that.notifyChanged('*', undefined, value, 'propchange', { source: '' }, false);
                    that.notifyStateChanged('*', { checkChildren: true });
                }
                _rules.execInitRules(that);
            }
            Object.defineProperty(Data.prototype, "fullPath", {
                get: function () {
                    return this._fullPath;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Data.prototype, "owner", {
                get: function () {
                    var that = this;
                    return that._arrayParent ? that._arrayParent : that._parent;
                },
                enumerable: true,
                configurable: true
            });
            Data.prototype.pkId = function () {
                var that = this;
                if (that._schema.primaryKey) {
                    var keys = _su.pkFields(that._schema.primaryKey);
                    return _su.pk2Id(_su.extractPkValue(that, keys), keys);
                }
                else
                    return undefined;
            };
            Data.prototype.getJSONPatchPath = function (propertyName) {
                var that = this;
                if (!that.parent)
                    return propertyName;
                if (that._arrayParent) {
                    return that._arrayParent.getJSONPatchPath(that._model.id + (propertyName ? '.' + propertyName : ''));
                }
                else {
                    return that.parent.getJSONPatchPath(propertyName ? that._path + '.' + propertyName : that._path);
                }
            };
            Data.prototype.getPropertyPath = function (propertyName, treePath) {
                var that = this;
                if (propertyName === undefined)
                    return that._fullPath;
                var cp = that._fullPath;
                if (treePath && that._fullPath) {
                    var segments = that._fullPath.split('.');
                    var len = segments.length - 1;
                    while (len > 0 && segments[len - 1] === treePath && segments[len] === '$selected') {
                        segments.pop();
                        segments.pop();
                        len = len - 2;
                    }
                    cp = segments.join('.');
                }
                return cp ? (cp + '.' + propertyName) : propertyName;
            };
            Data.prototype.saveModel = function () {
                var that = this;
                that._origModel = _su.copyModel(that._schema, that._model);
            };
            Object.defineProperty(Data.prototype, "$schema", {
                get: function () {
                    return this._schema;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Data.prototype, "parent", {
                get: function () {
                    return this._parent;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Data.prototype, "root", {
                get: function () {
                    return this._rootParent;
                },
                enumerable: true,
                configurable: true
            });
            Data.prototype.setModel = function (value) {
                var that = this;
                that._destroyObject(that, '_children');
                that._children = {};
                that.frozen = true;
                that._setModel(value, false);
                that.frozen = false;
                if (!that._parent) {
                    that.notifyChanged('*', undefined, value, 'propchange', { sourve: '' }, false);
                    that.notifyStateChanged('*', { checkChildren: true });
                }
            };
            Data.prototype.update = function (value) {
                var that = this;
                if (!value)
                    return;
                var props = Object.keys(that._schema.properties);
                var rs = that._rootParent._schema;
                props.forEach(function (name) {
                    var ss = that._schema.properties[name];
                    if (!_su.inModel(ss, rs))
                        return;
                    if (_su.isCompositionRef(ss, rs)) {
                        var ref = that[name];
                    }
                    else if (_su.isCompositionList(ss, rs, false)) {
                        that[name] = value[name];
                    }
                    else if (_su.isSimpleList(ss, rs)) {
                        that[name] = value[name];
                    }
                    else if (_su.isList(ss, rs)) {
                        that[name] = value[name];
                    }
                    else {
                        that[name] = value[name];
                    }
                });
            };
            Data.prototype.$refresh = function (options) {
                var that = this;
                if (!that._parent) {
                    if (that.onRefresh)
                        return that.onRefresh(options);
                    else {
                        return new _utils.Promise(function (resolve, reject) {
                            _du.loadMainData({ datasets: that.datasets, transform: that.transform, context: that.model(true) }, false).then(function (data) {
                                that.update(data);
                                resolve();
                            }).catch(function (ex) {
                                that.addAjaxException(ex);
                                reject();
                            });
                        });
                    }
                }
                else
                    return _utils.Promise.resolve();
            };
            Data.prototype.clearErrors = function (recursive) {
                var that = this;
                if (that.$errors) {
                    Object.keys(that.$errors).forEach(function (errorName) {
                        var e = that.$errors[errorName];
                        e.clear(true);
                    });
                }
                if (recursive) {
                    var rs_1 = that._rootParent.$schema;
                    var props = Object.keys(that._schema.properties);
                    props.forEach(function (name) {
                        var ss = that._schema.properties[name];
                        if (!_su.inModel(ss, rs_1))
                            return;
                        if (_su.isCompositionRef(ss, rs_1)) {
                            var ref = that[name];
                            if (ref)
                                ref.clearErrors(recursive);
                        }
                        else if (_su.isCompositionList(ss, rs_1, false)) {
                            var list = that[name];
                            if (list) {
                                list.forEach(function (item) {
                                    item.clearErrors(recursive);
                                });
                            }
                        }
                    });
                }
            };
            Data.prototype._validate = function (validators, isSaving, selectedProps) {
                var that = this;
                that.clearErrors(false);
                if (!validators || !validators.length)
                    return true;
                var props = Object.keys(that._schema.properties);
                var error = false;
                //for each property validate
                var rs = that._rootParent._schema;
                if (isSaving)
                    _rules.execBeforeSaveRules(that);
                props.forEach(function (name) {
                    var ss = that._schema.properties[name];
                    var execPropValidate = false;
                    if (!_su.inModel(ss, rs))
                        return;
                    var state = that.$states[ss.$stateProperty || name];
                    if (state.isHidden || state.isDisabled)
                        return;
                    if (selectedProps && selectedProps.indexOf(name) < 0)
                        return false;
                    if (_su.isCompositionRef(ss, rs)) {
                        var ref = that[name];
                        if (ref) {
                            if (!ref._validate(validators, isSaving))
                                error = true;
                        }
                        else {
                            if (state.isMandatory) {
                                that.$errors[name].addErrors([{ message: _utils.format(_localeSchema.required, _su._title(ss.title, Phoenix.locale)) }], false);
                                error = true;
                            }
                        }
                    }
                    else if (_su.isCompositionList(ss, rs, false)) {
                        var list = that[name];
                        if (list) {
                            list.forEach(function (item) {
                                if (!item._validate(validators, isSaving))
                                    error = true;
                            });
                            execPropValidate = true;
                        }
                    }
                    else
                        execPropValidate = true;
                    if (execPropValidate) {
                        if (!that._execValidators(validators, name, 'validate', {}, { base: that, state: state, schema: ss, value: that[name] })) {
                            error = true;
                        }
                    }
                });
                if (_rules.execValidationRules(that, selectedProps))
                    error = true;
                if (!that._parent) {
                    // validate root element
                    if (!that._execValidators(validators, '', 'validate', {}, { base: that, state: null, schema: that._schema, value: null })) {
                        error = true;
                    }
                }
                return !error;
            };
            Data.prototype.isRecursiveRule = function (propertyName) {
                var that = this;
                var root = that.getRootModel();
                if (!root.callStack)
                    return;
                var path = that.getPropertyPath(propertyName);
                if (root.callStack.indexOf(path) >= 0) {
                    _utils.logRule(root.callStack.length, 'Recursive rule detected: property: ' + path + ' - last rule canceled.', path, '');
                    return true;
                }
                return false;
            };
            Data.prototype.validate = function (isSaving) {
                var that = this;
                var root = that.getRootModel();
                return that._validate(root._validators, isSaving);
            };
            Data.prototype.partialValidate = function (properties) {
                var that = this;
                var root = that.getRootModel();
                return that._validate(root._validators, false, properties);
            };
            Object.defineProperty(Data.prototype, "$select", {
                get: function () {
                    return this._selected;
                },
                set: function (value) {
                    var that = this;
                    if (that.internalSetSelected(value)) {
                        if (that._arrayParent) {
                            if (that._selected)
                                that._arrayParent.pushSelected(that, true);
                            else
                                that._arrayParent.removeSelected(that, true);
                            if (!that._arrayParent.simulateSelecting)
                                that.notifyChanged('$select', !value, value, 'propchange', { source: that.getPropertyPath('$select'), instance: that }, true);
                        }
                    }
                },
                enumerable: true,
                configurable: true
            });
            Data.prototype.select = function (value, multiSelect, parentArray, expandingProperty, selectChildren) {
                var that = this;
                if (multiSelect) {
                    if (that._arrayParent)
                        that._arrayParent.selectItem(value, that, multiSelect, expandingProperty, selectChildren);
                    return;
                }
                if (expandingProperty) {
                    parentArray.selectItem(value, that, false, expandingProperty, selectChildren, true);
                }
                else {
                    if (that._arrayParent) {
                        that._arrayParent.selectItem(value, that, false, null, false);
                    }
                }
            };
            Data.prototype.toggleExpand = function (expandingProperty) {
                var that = this;
                var res = false;
                if (!expandingProperty)
                    return res;
                var list = _utils.getValue(that, expandingProperty);
                if (list) {
                    list.$expand = !list.$expand;
                    res = list.$expand;
                }
                return res;
            };
            Data.prototype.enumVisibleChildren = function (expandingProperty, level, root, cb) {
                var that = this;
                var list = _utils.getValue(that, expandingProperty);
                ;
                if (list && (list.$expand || root)) {
                    list._items.forEach(function (child) {
                        cb(child, level + 1);
                        child.enumVisibleChildren(expandingProperty, level + 1, false, cb);
                    });
                }
            };
            Data.prototype.internalSetSelected = function (value) {
                var that = this;
                if (that._selected !== value) {
                    that._selected = value;
                    return true;
                }
                return false;
            };
            Object.defineProperty(Data.prototype, "$index", {
                get: function () {
                    var that = this;
                    if (that._arrayParent) {
                        return Math.max(that._arrayParent.indexOf(that), 0) + 1;
                    }
                    return 0;
                },
                enumerable: true,
                configurable: true
            });
            Data.prototype.getJsonPachDelta = function (options) {
                var that = this;
                var mData = that.model(false);
                var delta = _jp.compare(that._origModel, mData, options);
                if (!delta || !delta.length)
                    return null;
                that._origModel = mData;
                return delta;
            };
            Data.prototype.applyJsonPachDelta = function (delta) {
                var that = this;
                if (delta && delta.length) {
                    that._updating = true;
                    try {
                        delta.forEach(function (item) {
                            var parent = _dutils.getJSONPatchParent(item.path, that);
                            if (parent.type === JSONJPATCH_METHOD) {
                                if (parent.value) {
                                    parent.value[parent.lastSegment] = item.value;
                                }
                                return;
                            }
                            ;
                            var p = parent.value;
                            if (p.isArray && parent.type === JSONJPATCH_PROPERTY) {
                                if (item.op === 'add') {
                                    p.push(item.value);
                                }
                                else if (item.op === 'remove') {
                                    var item_1 = p.find('id', _dutils._segment2Id(parent.lastSegment));
                                    if (item_1)
                                        p.remove(item_1);
                                }
                                else if (item.op === 'sort') {
                                    p.sortByKey(item.value, 'id');
                                }
                            }
                            else {
                                if (parent.type === JSONJPATCH_ERRORS) {
                                    if (parent.lastSegment === '$errors') {
                                        if (!item.value) {
                                            p.clearErrors(true);
                                        }
                                        else {
                                            Object.keys(item.value).forEach(function (name) {
                                                var error = p.$errors[name];
                                                if (error) {
                                                    error.clear(item.op === 'remove');
                                                    if (item.op !== 'remove')
                                                        error.addErrors(item.value[name]);
                                                }
                                            });
                                        }
                                    }
                                    else {
                                        if (p.isArray && !parent.lastSegment) {
                                            if (item.op === 'add')
                                                p.addErrors([item.value]);
                                        }
                                        else {
                                            var error = p[parent.lastSegment];
                                            if (error) {
                                                if (item.op === 'remove')
                                                    error.clear(true);
                                                else {
                                                    error.addErrors(item.value);
                                                }
                                            }
                                        }
                                    }
                                }
                                else if (parent.type === JSONJPATCH_STATES) {
                                    if (p && !p.isState) {
                                        p = p[parent.lastSegment];
                                        if (typeof item.value === 'object') {
                                            Object.keys(item.value).forEach(function (key) {
                                                if (p[key] && p[key].isState) {
                                                    var v_4 = item.value[key];
                                                    if (typeof v_4 === 'object') {
                                                        Object.keys(v_4).forEach(function (n) {
                                                            p[key][n] = v_4[n];
                                                        });
                                                    }
                                                }
                                                else
                                                    p[key] = item.value[key];
                                            });
                                        }
                                        return;
                                    }
                                    if (item.op === 'remove')
                                        p[parent.lastSegment] = undefined;
                                    else
                                        p[parent.lastSegment] = item.value;
                                }
                                else {
                                    if (item.op === 'remove')
                                        p[parent.lastSegment] = undefined;
                                    else
                                        p[parent.lastSegment] = item.value;
                                }
                            }
                        });
                    }
                    finally {
                        var mData = that.model(false);
                        that._origModel = mData;
                        that._updating = false;
                    }
                }
            };
            Data.prototype.$save = function () {
                var that = this;
                var root = that.getRootModel();
                if (root !== that)
                    return _utils.Promise.reject(null);
                if (!that.validate(true))
                    return _utils.Promise.reject(null);
                var ds = _du.extractMainDataSource(that);
                if (ds && _du.isCreateOrUpdate(ds)) {
                    var mData_1 = that.model(false);
                    if (that.$create) {
                        ds.$method = 'POST';
                        delete ds.$params.$entityId;
                    }
                    else {
                        ds.$method = 'PATCH';
                        if (!that._schema.primaryKey) {
                            that.addError('Primary key is missing. Check schema.');
                            return _utils.Promise.reject(null);
                        }
                        var delta = void 0;
                        if (_application.useJSONPatch) {
                            var keys = _su.pkFields(that._schema.primaryKey);
                            var pkValue = _su.extractPkValue(mData_1, keys);
                            ds.$params.$entityId = _su.entityId(pkValue);
                            delta = _jp.compare(that._origModel, mData_1, { useId: true });
                            if (!delta || !delta.length)
                                return _utils.Promise.resolve(mData_1);
                        }
                        else {
                            delta = _utils.deltaPatch(that._origModel, mData_1);
                            if (!delta)
                                return _utils.Promise.resolve(mData_1);
                        }
                        // send delta
                        mData_1 = delta;
                    }
                    return new _utils.Promise(function (resolve, reject) {
                        _du.datasetAsPromise(ds, mData_1).then(function (data) {
                            that.$create = false;
                            resolve();
                        }).catch(function (ex) {
                            that.addAjaxException(ex);
                            reject(null);
                        });
                    });
                }
                else
                    return _utils.Promise.reject(null);
            };
            Data.prototype.getRootModel = function () {
                return this._rootParent;
            };
            //validators
            Data.prototype.addValidator = function (name, value) {
                var root = this.getRootModel();
                root._validators.push({ name: name, active: value });
            };
            Data.prototype.activateValidator = function (name, value) {
                var that = this;
                var model = that.getRootModel();
                for (var i = 0, len = model._validators.length; i < len; i++) {
                    var v = model._validators[i];
                    if (v.name === name) {
                        v.active = value;
                        break;
                    }
                }
            };
            Data.prototype.hasValidators = function () {
                var that = this;
                var model = that.getRootModel();
                if (model._validators.length) {
                    if (model._validators.length == 1)
                        return model._validators[0].active;
                    else {
                        for (var i = 0, len = model._validators.length; i < len; i++) {
                            if (model._validators[i].active)
                                return true;
                        }
                    }
                }
                return false;
            };
            Data.prototype.getParentOf = function (bind, params) {
                return this.getValue(Observable.SchemaUtils.parentPath(bind), params);
            };
            Data.prototype.setValue = function (path, value, params) {
                var that = this;
                var v = that, segments = path.split('.');
                var ii = params ? segments.lastIndexOf('$item') : -1;
                var jj = params ? segments.lastIndexOf('$selected') : -1;
                if (ii > 0) {
                    if (jj > 0 && jj > ii)
                        v = params[segments.slice(0, jj + 1).join('.')];
                    else
                        v = params[segments.slice(0, ii + 1).join('.')];
                }
                else if (jj > 0) {
                    v = params[segments.slice(0, jj + 1).join('.')];
                }
                for (var i = Math.max(Math.max(ii + 1, jj + 1), 0), len = segments.length; i < len; i++) {
                    if (!v)
                        break;
                    if (i === len - 1)
                        v[segments[i]] = value;
                    else
                        v = v[segments[i]];
                }
            };
            Data.prototype._getModel = function (original, copyUx) {
                var that = this;
                if (original)
                    return that._model;
                var rootModel = that.getRootModel();
                var rootSchema = rootModel ? rootModel._schema : that._schema;
                return _su.copyModel(that._schema, that._model, rootSchema, copyUx);
            };
            Data.prototype.schemaModel = function (copyStates) {
                var that = this;
                var rootModel = that.getRootModel();
                var rootSchema = rootModel ? rootModel._schema : that._schema;
                return _su.copyModel(that._schema, that._model, rootSchema, true, copyStates);
            };
            Data.prototype.model = function (original) {
                return this._getModel(original);
            };
            Data.prototype.getRelativeValue = function (path) {
                return this.getValue(path, {});
            };
            Data.prototype.getRelativeState = function (path) {
                return this.getState(path, {});
            };
            Data.prototype.getValueInfo = function (path, params) {
                var that = this;
                if (!path)
                    return { value: that, parentIsNull: false };
                var v = that, segments = path.split('.');
                var ii = params ? segments.lastIndexOf('$item') : -1;
                var jj = params ? segments.lastIndexOf('$selected') : -1;
                if (ii > 0) {
                    if (jj > 0 && jj > ii)
                        v = params[segments.slice(0, jj + 1).join('.')];
                    else
                        v = params[segments.slice(0, ii + 1).join('.')];
                }
                else if (jj > 0) {
                    v = params[segments.slice(0, jj + 1).join('.')];
                }
                for (var i = Math.max(Math.max(ii + 1, jj + 1), 0), len = segments.length; i < len; i++) {
                    if (!v)
                        break;
                    v = v[segments[i]];
                }
                return { value: v, parentIsNull: false };
            };
            Data.prototype.getValue = function (path, params) {
                return this.getValueInfo(path, params).value;
            };
            Data.prototype.getSchema = function (path) {
                var that = this;
                return _su.getSchema(path, that._schema, that._rootParent._schema, false);
            };
            //TODO states for $index
            Data.prototype.getState = function (path, params) {
                var that = this;
                if (!path)
                    return { value: that, parentIsNull: false };
                var cs = that, segments = path.split('.'), propertyName = segments.pop(), opropertyName = propertyName, ps, res = {}, cpath = [], islink = false;
                var ll = segments.length - 1;
                var isMeta = _su.isMetaProp(propertyName);
                if (isMeta) {
                    var ms = _su.getSchema(path, that._schema, that._rootParent._schema, false);
                    if (ms && ms.$stateProperty)
                        propertyName = ms.$stateProperty;
                }
                var ii = params ? segments.lastIndexOf('$item') : -1;
                var jj = params ? segments.lastIndexOf('$selected') : -1;
                if (ii > 0) {
                    if (jj > 0 && jj > ii)
                        cs = params[segments.slice(0, jj + 1).join('.')];
                    else
                        cs = params[segments.slice(0, ii + 1).join('.')];
                }
                else if (jj > 0) {
                    cs = params[segments.slice(0, jj + 1).join('.')];
                }
                for (var i = Math.max(Math.max(ii + 1, jj + 1), 0), len = segments.length; i < len; i++) {
                    var s = segments[i];
                    var ignoreState = false;
                    if (i === ll) {
                        if (s === '$links') {
                            islink = true;
                            break;
                        }
                    }
                    cs = cs[s];
                    if (!cs) {
                        ps = null;
                    }
                    else {
                        ps = cs.$states && cs.$states[s] ? cs.$states[s].state() : null;
                        //not ok
                        //cs = cs[s];
                    }
                    if (!cs || cs.isNull || cs.isUndefined) {
                        res.isDisabled = true;
                    }
                    if (ps && ps.isHidden)
                        res.isHidden = true;
                    if (ps && ps.isDisabled)
                        res.isDisabled = true;
                    if (ps && ps.isReadOnly)
                        res.isReadOnly = true;
                    if (!cs)
                        break;
                }
                var state = {};
                if (!islink) {
                    if (propertyName === Observable.SELECTED_FIELD_NAME) {
                        return { isDisabled: false, isReadOnly: false, isHidden: false };
                    }
                    else if (propertyName === Observable.INDEX_FIELD_NAME) {
                        return { isDisabled: false, isReadOnly: true, isHidden: false };
                    }
                    else if (propertyName === Observable.EXPANDED_FIELD_NAME) {
                        return { isDisabled: false, isReadOnly: true, isHidden: false };
                    }
                }
                if (cs) {
                    var pp = '$states';
                    if (islink)
                        pp = '$links';
                    var oo = cs[pp] ? cs[pp][propertyName] : null;
                    if (oo) {
                        state = oo.state();
                        if (!islink && cs.$errors && cs.$errors[opropertyName]) {
                            state.errors = cs.$errors[opropertyName].errors();
                        }
                    }
                }
                return $.extend({}, state, res);
            };
            Data.prototype._setPropErrors = function (propName, value) {
                var that = this;
                if (value.$errors && value.$errors[propName] && that.$errors[propName]) {
                    var errors = value.$errors[propName];
                    var ne_1 = [];
                    errors.forEach(function (err) { ne_1.push(err); });
                    that.$errors[propName].addErrors(ne_1);
                }
                if (that.$errors[propName])
                    value.$errors[propName] = that.$errors[propName].errors();
            };
            Data.prototype._setModel = function (value, frozen) {
                var that = this;
                var ofv = that.frozen;
                if (frozen)
                    that.frozen = true;
                that.isNull = value === null;
                that.isUndefined = value === undefined;
                value = value || {};
                var icreate = value.$create !== undefined ? value.$create : (that._parent ? that._parent.$create : false);
                if (value) {
                    value = _su.init(that._schema, that._rootParent._schema, null, value, icreate, { select: that._schema === that._rootParent._schema });
                    if (value) {
                        that.$create = value.$create;
                        value.$create;
                    }
                }
                value.$states = value.$states || {};
                value.$links = value.$links || {};
                value.$errors = value.$errors || {};
                var props = Object.keys(that._schema.properties);
                //for each property set value && state
                var rs = that._rootParent._schema;
                that._model.$links = value.$links;
                props.forEach(function (name) {
                    var si = that._schema.properties[name];
                    if (!_su.inModel(si, rs))
                        return;
                    var isMeta = _su.isMetaProp(name);
                    var val = value[name];
                    if (!val && (_su.isCompositionList(si, rs, false) || _su.isList(si, rs))) {
                        //val = [];
                        value[name] = val;
                    }
                    if (_su.isList(si, rs))
                        that._setQueryListChild(name, val, value.pageSize, value.pageSize ? (Math.round(value.skip / value.pageSize) + 1) : 0, value.count, value._hasNext, value._hasPrev, value._noPagesCount, value._origData);
                    else
                        that[name] = val;
                    if (!isMeta) {
                        if (value.$states && value.$states[name]) {
                            var ss_3 = value.$states[name];
                            Object.keys(ss_3).forEach(function (sn) { that.$states[name][sn] = ss_3[sn]; });
                        }
                        value.$states[name] = that.$states[name].state();
                    }
                    that._setPropErrors(name, value);
                });
                that._setPropErrors('$', value);
                //for each link set state
                if (value.$links) {
                    props = Object.keys(that._schema.links || {});
                    props.forEach(function (name) {
                        var ss = value.$links[name];
                        var dst = that.$links[name];
                        if (ss) {
                            Object.keys(ss).forEach(function (sn) { dst[sn] = ss[sn]; });
                        }
                        value.$links[name] = that.$links[name].state();
                    });
                }
                that._model = value;
                that.frozen = ofv;
            };
            Data.prototype._setRefChild = function (propertyName, oldvalue, value) {
                var that = this;
                var ofv = that.frozen;
                that.frozen = true;
                if (!that._children[propertyName])
                    that._children[propertyName] = new Data(that._schema.properties[propertyName], that, propertyName, value, null, true, that._locale, null);
                else
                    that._children[propertyName]._setModel(value, true);
                that.frozen = ofv;
            };
            Data.prototype._setListChild = function (propertyName, oldvalue, value) {
                var that = this;
                var ofv = that.frozen;
                that.frozen = true;
                if (!that._children[propertyName]) {
                    var pa = null;
                    if (that._arrayParent && that._arrayParent.schema.children === propertyName)
                        pa = that._arrayParent;
                    that._children[propertyName] = new DataList(that._schema.properties[propertyName], that, propertyName, value, null, that._locale, pa);
                }
                else
                    that._children[propertyName]._setModel(value, true);
                that.frozen = ofv;
            };
            Data.prototype._setSimpleListChild = function (propertyName, oldvalue, value) {
                var that = this;
                var ofv = that.frozen;
                that.frozen = true;
                if (!that._children[propertyName])
                    that._children[propertyName] = new SimpleTypeList(that._schema.properties[propertyName], that, propertyName, value, null, that._locale, false, null);
                else
                    that._children[propertyName]._setModel(value, true);
                that.frozen = ofv;
            };
            Data.prototype._setQueryListChild = function (propertyName, value, pageSize, page, totalCount, hasNext, hasPrev, noPagesCount, allData) {
                var that = this;
                var ofv = that.frozen;
                that.frozen = true;
                if (that._children[propertyName])
                    that._children[propertyName].destroy();
                that._children[propertyName] = new QueryList(that._schema, that._schema.properties[propertyName], that, propertyName, value, pageSize, page, totalCount, hasNext, hasPrev, noPagesCount, allData, null, that._locale);
                that.frozen = ofv;
                that.notifyChanged(propertyName, null, value, 'propchange', { instance: that }, true);
                that.notifyStateChanged(propertyName, { instance: that, checkChildren: true });
            };
            Data.prototype._initFromSchema = function (schema) {
                var that = this;
                if (!that._model)
                    return;
                var states = (schema.states ? $.extend(true, {}, schema.states) : null), links = (schema.links ? $.extend(true, {}, schema.links) : null), errors = (schema.errors ? $.extend(true, {}, schema.errors) : null);
                var npAdded = false;
                //create hidden props
                var props = Object.keys(schema.properties);
                props.forEach(function (pn) {
                    if (_su.isMetaProp(pn))
                        return;
                    var cs = schema.properties[pn];
                    if (cs.format === 'password') {
                        if (!cs.capabilities || !cs.capabilities.noConfirming) {
                            var np = '$$' + pn;
                            cs.$meta = np;
                            var ps = schema.properties[np];
                            if (!ps) {
                                ps = $.extend(true, {}, cs);
                                ps.title = Phoenix.locale.ui.Confirm;
                                // for this field use $stateProperty to get    
                                ps.$stateProperty = pn;
                                schema.properties[np] = ps;
                                npAdded = true;
                            }
                        }
                    }
                    else if (cs.format === 'rate') {
                        cs.exclusiveMinimum = true;
                        cs.exclusiveMaximum = true;
                        if (cs.decimals === undefined)
                            cs.decimals = _su.RATE_DECIMALS;
                        if (cs.maximum === undefined)
                            cs.maximum = _su.RATE_MAXIMUM;
                        if (cs.minimum === undefined)
                            cs.minimum = -_su.RATE_MAXIMUM;
                        if (cs.symbol === undefined)
                            cs.symbol = _su.RATE_SYMBOL;
                    }
                });
                if (npAdded)
                    props = Object.keys(schema.properties);
                props.forEach(function (name) {
                    _createProp(that, name);
                    if (!_su.isMetaProp(name))
                        _createStateProp(that, name, states ? states[name] : null);
                    _createErrorProp(that, name, errors ? errors[name] : null);
                });
                if (schema.links) {
                    Object.keys(schema.links).forEach(function (name) { _createStateLinks(that, name, links ? links[name] : null); });
                }
                // root error
                if (!that._parent || that._arrayParent)
                    that.$errors.$ = new _observable.Errors(that, '$', []);
            };
            Data.prototype.getParentModel = function (path) {
                var segments = path.split('.');
                segments.pop();
                return _dutils.getValue(segments.join('.'), this);
            };
            Data.prototype.addAjaxException = function (ex) {
                var that = this;
                if (that._parent) {
                    return that._parent.addAjaxException(ex);
                }
                var error = _ajax.extractAjaxErrors(ex);
                var errors = [];
                var firstGlbError = null;
                if (error.message) {
                    firstGlbError = { message: error.message, details: [] };
                    errors.push(firstGlbError);
                }
                if (error.list && error.list.length) {
                    error.list.forEach(function (ed) {
                        var addGlb = true;
                        if (ed.target) {
                            var m = that.getParentModel(ed.target);
                            if (m) {
                                var pn = _su.lastSegment(ed.target, null);
                                if (m.hasOwnProperty(pn)) {
                                    addGlb = false;
                                    m.$errors[pn].addError(ed.message);
                                }
                            }
                        }
                        if (addGlb) {
                            if (firstGlbError)
                                firstGlbError.details.push({ message: ed.message });
                            else
                                errors.push({ message: ed.message });
                        }
                    });
                }
                that.$errors.$.addErrors(errors);
            };
            Data.prototype.addError = function (message) {
                var that = this;
                var errors = [{ severity: 'error', message: message, id: _utils.allocUuid() }];
                that.addErrors(errors);
            };
            Data.prototype.rmvError = function (message) {
                var that = this;
                if (that.$errors.$)
                    that.$errors.$.rmvError(message);
                else if (that._parent)
                    that._parent.rmvError(message);
            };
            Data.prototype.addErrors = function (errors) {
                var that = this;
                if (that.$errors.$)
                    that.$errors.$.addErrors(errors);
                else if (that._parent)
                    that._parent.addErrors(errors);
            };
            Data.prototype._beforeChange = function (thisObject, propertyName, schema, oldValue, value, forceContinue) {
                var that = this;
                var res = { continue: true, value: value };
                if (_su.isNumber(schema) && !isNaN(value) && value !== null && value !== undefined) {
                    if (that.$states[propertyName] && that.$states[propertyName].decimals !== undefined) {
                        res.value = parseFloat(value.toFixed(that.$states[propertyName].decimals));
                        if (!forceContinue && oldValue === res.value)
                            res.continue = false;
                    }
                }
                if (res.continue && schema.ux && schema.emitChanging)
                    res.continue = thisObject.notifyBeforeChanged(propertyName, oldValue, value, {});
                return res;
            };
            Data.prototype.notifyStateChanged = function (stateName, params) {
                var that = this;
                if (that.frozen || (that._arrayParent && that._arrayParent.frozen))
                    return;
                if (that !== that._rootParent) {
                    params.fromChildren = true;
                    var list = that._getPaths(params);
                    list.forEach(function (path, index) {
                        var cn = path;
                        if (stateName) {
                            if (cn)
                                cn = cn + '.' + stateName;
                            else
                                cn = stateName;
                        }
                        params.change = (index === 0);
                        that._rootParent.notifyStateChanged(cn, params);
                    });
                }
                else {
                    if (!params.fromChildren)
                        params.change = true;
                    _utils.logModule('proxydata') && _utils.log('State changed: ' + that._extractPropName(stateName || '', params), 'proxydata');
                    if (that.onstatechanged)
                        that.onstatechanged(stateName, params);
                }
            };
            Data.prototype._extractPropName = function (pn, params) {
                Object.keys(params).sort().reverse().forEach(function (name) {
                    var p = params[name];
                    if (p && p.$index !== undefined) {
                        pn = pn.replace(name, name + '[' + p.$index + ']');
                    }
                });
                return pn;
            };
            Data.prototype._execValidators = function (validators, propertyName, event, params, ldata) {
                var that = this;
                var error = false;
                if (propertyName) {
                    if (!ldata) {
                        var info = that.getValueInfo(propertyName, params);
                        if (info.value === undefined && info.parentIsNull)
                            return !error;
                    }
                }
                else if (event !== 'validate')
                    return !error;
                validators.forEach(function (validator) {
                    if (validator.active) {
                        if (!validator.hnd)
                            validator.hnd = _su.getValidator(validator.name);
                        if (validator.hnd) {
                            if (!validator.hnd(event, that, { name: propertyName, params: params, locale: that._locale }, ldata)) {
                                error = true;
                            }
                        }
                    }
                });
                return !error;
            };
            Data.prototype.notifyBeforeChanged = function (propertyName, oldValue, value, params) {
                var that = this;
                if (that.frozen || (that._arrayParent && that._arrayParent.frozen))
                    return;
                if (that !== that._rootParent) {
                    params.fromChildren = true;
                    var list = that._getPaths(params);
                    var res_5 = true;
                    list.forEach(function (path, index) {
                        var cn = path;
                        if (propertyName) {
                            if (cn)
                                cn = cn + '.' + propertyName;
                            else
                                cn = propertyName;
                        }
                        params.change = (index === 0);
                        res_5 = res_5 && that._rootParent.notifyBeforeChanged(cn, oldValue, value, params);
                    });
                }
                else {
                    if (!params.fromChildren)
                        params.change = true;
                    params.continue = true;
                    if (that.onchange && params.change)
                        that.onchange(propertyName, oldValue, value, 'beforeChange', params);
                    return params.continue;
                }
            };
            Data.prototype._getSelectedParentArray = function (avanced) {
                var that = this;
                var current = that;
                var res = that._arrayParent;
                var cpath = that._arrayParent.path + '.$item';
                while (true) {
                    if (res.schema.children && res.schema.children === res.path && res.parent._arrayParent) {
                        res = res.parent._arrayParent;
                        cpath = res.path + '.$item.' + cpath;
                    }
                    else
                        break;
                }
                if (avanced)
                    return { path: cpath, value: res };
                return res;
            };
            Data.prototype._getPaths = function (params) {
                var that = this;
                if (that._arrayParent) {
                    var paArray_1 = that._getSelectedParentArray(true);
                    var pa_1 = paArray_1.value;
                    var res_6 = pa_1.parent._getPaths(params);
                    var sel_1 = null;
                    if (pa_1.$selected === that) {
                        sel_1 = [];
                        res_6.forEach(function (path, index) {
                            if (path.indexOf('.$selected.') > 0 || path.indexOf('.$item.') < 0) {
                                var p = (path ? path + '.' : '') + pa_1.path + '.$selected';
                                sel_1.push(p);
                                params[p] = that;
                            }
                        });
                    }
                    res_6.forEach(function (path, index) {
                        res_6[index] = (path ? path + '.' : '') + paArray_1.path;
                        params[res_6[index]] = that;
                    });
                    if (!sel_1)
                        return res_6;
                    return res_6.concat(sel_1);
                }
                else {
                    if (!that.parent) {
                        return [''];
                    }
                    var res_7 = that.parent._getPaths(params);
                    res_7.forEach(function (path, index) {
                        res_7[index] = path ? path + '.' + that._path : that._path;
                    });
                    return res_7;
                }
            };
            Data.prototype.notifyChanged = function (propertyName, oldValue, value, op, params, validate) {
                var that = this;
                if (that.frozen || (that._arrayParent && that._arrayParent.frozen))
                    return;
                if (that !== that._rootParent) {
                    params.fromChildren = false;
                    var list = that._getPaths(params);
                    list.forEach(function (path, index) {
                        var cn = path;
                        if (propertyName) {
                            if (cn)
                                cn = cn + '.' + propertyName;
                            else
                                cn = propertyName;
                        }
                        params.change = (index === 0);
                        that._rootParent.notifyChanged(cn, oldValue, value, op, params, validate);
                    });
                }
                else {
                    if (!params.fromChildren)
                        params.change = true;
                    _utils.logModule('proxydata') && _utils.log('Changed: ' + that._extractPropName(propertyName || '', params) + ', operation = ' + op, 'proxydata');
                    if (that.onchange)
                        that.onchange(propertyName, oldValue, value, op, params);
                    if (!that._updating && validate && that._validators && params.change && that.hasValidators()) {
                        that._execValidators(that._validators, propertyName, 'propchanged', params);
                    }
                    //Execute validation rules 
                    if (!that._updating && params.change) {
                        _rules.execPropChangeRules(that, propertyName, params, { validations: true, propagations: true });
                        if (that.onsync)
                            that.onsync(null);
                    }
                }
            };
            Data.prototype.execSyncAction = function (propName, actionParams, params) {
                var that = this._rootParent;
                if (that.onsync && (!params || !params.$nosync)) {
                    var syncParams = that.syncAction(propName, actionParams);
                    if (syncParams) {
                        that.onsync(syncParams);
                        return true;
                    }
                }
                return false;
            };
            Data.prototype.syncAction = function (actionName, actionParams) {
                var that = this;
                var segments = actionName.split('.');
                if (segments[segments.length - 1] === '$sort') {
                    return { op: 'replace', path: '/' + segments.join('/'), params: actionParams };
                }
                else if (segments[segments.length - 1] === '$filter') {
                    return { op: actionParams ? 'replace' : 'remove', path: '/' + segments.join('/'), params: actionParams };
                }
                else if (segments[segments.length - 1] === '$selected') {
                    return { op: 'replace', path: '/' + segments.join('/'), params: actionParams, delayed: true };
                }
                var ii = actionName.indexOf('$links.');
                if (ii < 0)
                    return null;
                var root = '';
                if (ii > 0) {
                    root = actionName.substr(0, ii - 1);
                }
                var link = actionName.substr(ii + '$links.'.length);
                var schema = that.getSchema(root);
                if (schema.links && schema.links[link] && schema.links[link].ux)
                    return null;
                if (!root && link === 'save') {
                    if (!that.validate(true))
                        return null;
                }
                var after = null;
                if (schema.links && schema.links[link]) {
                    if (schema.links[link].data) {
                        actionParams = schema.links[link].data;
                    }
                    after = schema.links[link].after;
                }
                return { path: '/' + segments.join('/'), params: actionParams, after: after };
            };
            Data.prototype._destroyObject = function (obj, pn) {
                var o = obj[pn];
                if (o) {
                    Object.keys(o).forEach(function (name) {
                        o[name].destroy();
                        delete o[name];
                    });
                }
            };
            Data.prototype.hasErrors = function () {
                var that = this;
                var res = false;
                if (res)
                    return res;
                var props = Object.keys(that.$errors);
                for (var _i = 0, props_1 = props; _i < props_1.length; _i++) {
                    var p = props_1[_i];
                    if (that.$errors[p].hasErrors()) {
                        res = true;
                        break;
                    }
                }
                props = Object.keys(that._schema.properties || {});
                var rs = that._rootParent._schema;
                for (var _a = 0, props_2 = props; _a < props_2.length; _a++) {
                    var p = props_2[_a];
                    var ss = that._schema.properties[p];
                    if (!_su.inModel(ss, rs))
                        continue;
                    if (_su.isCompositionRef(ss, rs)) {
                        res = that[p].hasErrors();
                    }
                    else if (_su.isCompositionList(ss, rs, false)) {
                        var list = that[p];
                        list.forEach(function (item) {
                            if (!res)
                                res = item.hasErrors();
                        });
                    }
                    if (res)
                        break;
                }
                return res;
            };
            Data.prototype.destroy = function () {
                var that = this;
                that._parent = null;
                that._destroyObject(that, '_children');
                that._destroyObject(that, '$states');
                that._destroyObject(that, '$links');
                that._destroyObject(that, '$errors');
                that._arrayParent = null;
                that._model = null;
                that._schema = null;
                that.onRefresh = null;
                that.onchange = null;
                that.onsync = null;
                that.onstatechanged = null;
                that._rootParent = null;
            };
            return Data;
        }());
        Observable.Data = Data;
        Observable.ObservableUtils = _dutils;
    })(Observable = Phoenix.Observable || (Phoenix.Observable = {}));
})(Phoenix || (Phoenix = {}));
/// <reference path="./proxy.data.ts" />
var Phoenix;
(function (Phoenix) {
    var serversync;
    (function (serversync) {
        var _p = Phoenix, _observable = Phoenix.Observable, _su = _observable.SchemaUtils, _du = _observable.DataUtils, _dsPlugin = _p.DatasetPlugin, _locale = Phoenix.locale, _ulocale = Phoenix.ulocale, _utils = Phoenix.utils;
        function update(model, actions, form, success, after) {
            try {
                var delta_1 = model.getJsonPachDelta({ useId: true });
                if (actions && actions.length) {
                    delta_1 = delta_1 || [];
                    actions.forEach(function (action) {
                        delta_1.push({ op: action.op || 'add', path: action.path, value: action.params });
                    });
                }
                if (!delta_1) {
                    try {
                        success(null);
                    }
                    finally {
                        after();
                    }
                    return;
                }
                var dataset = form.syncDataSet();
                dataset.name = 'patch';
                dataset.$params.$method = 'PATCH';
                var result_1 = {};
                _dsPlugin.executeDatasets([dataset], delta_1, result_1, [], function (sended, ex) {
                    try {
                        if (!ex) {
                            success(result_1.patch);
                        }
                        else {
                            model.addAjaxException(ex);
                        }
                    }
                    finally {
                        after();
                    }
                });
            }
            catch (ex) {
                after();
            }
        }
        serversync.update = update;
    })(serversync = Phoenix.serversync || (Phoenix.serversync = {}));
})(Phoenix || (Phoenix = {}));
/// <reference path="../../core/core-refs.ts" />
/// <reference path="../../data/datasets.ts" />
/// <reference path="./proxy.data.ts" />
/// <reference path="./schema.data.ts" />
var Phoenix;
(function (Phoenix) {
    var Observable;
    (function (Observable) {
        var _data = Phoenix.data, _utils = Phoenix.utils, _su = Observable.SchemaUtils;
        var _schemaValidator = function (event, model, params, data) {
            var res = true;
            var isValidate = event === 'validate';
            if (event === 'propchanged' || isValidate) {
                if (!params.name)
                    return res;
                if (params.method)
                    return true;
                var pn = _su.lastSegment(params.name, null);
                if (_su.arrayProps.indexOf(pn) >= 0)
                    return res;
                var value = data ? data.value : model.getValue(params.name, params.params);
                var state = data ? data.state : model.getState(params.name, params.params);
                var schema = data ? data.schema : model.getSchema(params.name);
                if (state && (state.isHidden || state.isDisabled))
                    return res;
                var llocale = params.locale;
                var errors = [];
                var glbErors = [];
                var base = data ? data.base : model.getParentOf(params.name, params.params);
                if (!_su.validateSchema(value, schema, state, llocale, errors, glbErors))
                    res = false;
                if (isValidate) {
                    // check password
                    if (_su.isMetaProp(pn) && schema && schema.format === 'password') {
                        var orig = model.getValue(_su.extractBase(params.name) + schema.$stateProperty, params.params);
                        schema = model.getValue(_su.extractBase(params.name) + schema.$stateProperty, params.params);
                        if (!_su.validatePassword(orig, value, schema, state, llocale, errors))
                            res = false;
                    }
                }
                if (base.$errors && base.$errors[pn])
                    base.$errors[pn].addErrors(errors);
            }
            return res;
        };
        _su.registerValidator('schema', _schemaValidator);
    })(Observable = Phoenix.Observable || (Phoenix.Observable = {}));
})(Phoenix || (Phoenix = {}));
/// <reference path="../../core/core-refs.ts" />
var Phoenix;
(function (Phoenix) {
    var ui;
    (function (ui) {
        var _ui = ui, _utils = Phoenix.utils;
        var FormManager = /** @class */ (function () {
            function FormManager() {
                this._forms = {};
                this._inAction = false;
            }
            FormManager.prototype.setInAction = function (value) {
                this._inAction = value;
            };
            FormManager.prototype.isInAction = function () {
                return this._inAction;
            };
            FormManager.prototype.broadcast = function (eventName, params) {
                var that = this;
                _utils.nextTick(function () {
                    Object.keys(that._forms).forEach(function (formName) {
                        var form = that._forms[formName];
                        if (form)
                            form.execAction(eventName, params);
                    });
                });
            };
            FormManager.prototype.add = function (form) {
                if (form && form.data && form.data.name)
                    this._forms[form.data.name] = form;
            };
            FormManager.prototype.remove = function (form) {
                if (form && form.data && form.data.name)
                    this._forms[form.data.name] = null;
            };
            FormManager.prototype.formByName = function (form) {
                return this._forms[form];
            };
            return FormManager;
        }());
        ui.FormManager = FormManager;
        var fm = function () {
            var _cfm;
            return function () {
                if (!_cfm)
                    _cfm = new FormManager();
                return _cfm;
            };
        };
        ui.formManager = fm();
    })(ui = Phoenix.ui || (Phoenix.ui = {}));
})(Phoenix || (Phoenix = {}));
/// <reference path="../../core/core-refs.ts" />
/// <reference path="../../ui/layout.control.ts" />
/// <reference path="./schema.data.ts" />
/// <reference path="./proxy.data.ts" />
/// <reference path="./formmanager.ts" />
/// <reference path="./server-sync.ts" />
var Phoenix;
(function (Phoenix) {
    var ui;
    (function (ui) {
        var _p = Phoenix, _ui = _p.ui, _utils = _p.utils, _build = _p.build, _link = _p.link, _dom = _p.dom, _layoutUtils = _p.layoutUtils, _customData = _p.customData, _preferences = _p.preferences, _sutils = _p.Observable.SchemaUtils, _outils = _p.Observable.ObservableUtils, _ulocale = _p.ulocale;
        var Form = /** @class */ (function (_super) {
            __extends(Form, _super);
            function Form(layoutData, options, ldata, schema, locale, preferences) {
                var _this = _super.call(this, layoutData, options, ldata, schema, locale, preferences) || this;
                _this._event2Layout = function (event) {
                    var that = this;
                    if (!that.$element)
                        return null;
                    var root = that.$element.get(0);
                    var t = event.target;
                    while (t) {
                        var id = t.getAttribute('data-render');
                        if (id) {
                            var ll = that.getLayoutById(id);
                            if (ll)
                                return ll;
                        }
                        t = (t === root) ? null : t.parentNode;
                    }
                    return null;
                };
                var that = _this;
                if (ldata && ldata.$transactionId) {
                    that._transactionId = ldata.$transactionId;
                    that._viewId = ldata.id;
                    delete ldata.$transactionId;
                }
                that._resizeHnd = function (event) {
                    that._resizeControls(false);
                    return true;
                };
                var ctx = _link.context();
                if (ctx.$url.$showRules)
                    _utils.showRules(true);
                if (options.module) {
                    that.module = options.module;
                    delete options.module;
                }
                if (layoutData.data) {
                    that.formData = $.extend(true, {}, layoutData.data);
                }
                that.formManager = _ui.formManager();
                that.formManager.add(that);
                that.$schema = schema || {};
                that.$rootSchema = that.$schema;
                if (options.path) {
                    that.$rootPath = options.path;
                    that.$schema = _sutils.getSchema(options.path, that.$schema, that.$rootSchema, true);
                }
                if (options.checkFormLayout)
                    options.checkFormLayout(that);
                that.$locale = locale;
                if (options && options.preferenceName) {
                    that._settingsName = options.preferenceName;
                    that._settings = preferences;
                }
                if (options && options.storageName) {
                    that._settingsName = options.storageName;
                    that._localSettings = true;
                }
                var isSync = ((options && options.jsonSync) || (that.syncDataSet() !== null));
                if (isSync)
                    that.onsync = Phoenix.serversync.update;
                _sutils.fillEnumsFromData(that.$schema, ldata);
                that.setData(ldata);
                that.$model.onchange = that._modelChanged.bind(that);
                if (isSync)
                    that.$model.onsync = that._synModel.bind(that);
                that.$model.onstatechanged = that._stateChanged.bind(that);
                that._bindStates = {};
                that._bindTitles = {};
                that._bindAccordion = {};
                Object.keys(that.map).forEach(function (layoutId) {
                    var l = that.map[layoutId];
                    if (l.$bindState) {
                        that._bindStates[l.$bindState] = that._bindStates[l.$bindState] || [];
                        that._bindStates[l.$bindState].push(layoutId);
                    }
                    if (l.$title && l.$title.value && !l.$title.isHidden) {
                        var fields = [];
                        if (_utils.extractAngularVars(l.$title.value, fields)) {
                            fields && fields.forEach(function (field) {
                                if (!that._bindTitles[field.name]) {
                                    that._bindTitles[field.name] = [];
                                    that.registerListenerFor(field.name, that, 'layout-titles');
                                }
                                that._bindTitles[field.name].push(layoutId);
                            });
                            l.$fields = true;
                        }
                    }
                    if (l.$bindPages && l.$type === _layoutUtils.LAYOUT_ACCORDION && l.$widget === 'none') {
                        if (!that._bindAccordion[l.$bindPages]) {
                            that._bindAccordion[l.$bindPages] = [];
                            that.registerListenerFor(l.$bindPages, that, 'layout-accordion');
                        }
                        that._bindAccordion[l.$bindPages].push(layoutId);
                        that._activateTab(l);
                    }
                });
                Object.keys(that._bindStates).forEach(function (propName) {
                    var state = that.$model.getState(propName, {});
                    if (state && state.isHidden) {
                        var l = that._bindStates[propName];
                        l.forEach(function (layoutId) {
                            that.map[layoutId].$isHidden = true;
                        });
                    }
                    that.registerListenerFor(propName, that, 'layout-state');
                });
                that.registerListenerFor('$', that);
                that.loadPrefs();
                if (options && options.validators)
                    options.validators.forEach(function (validatorName) {
                        that.$model.addValidator(validatorName, true);
                    });
                if (!that.options.design && that.options.externalSchema && that.options.externalLayout && !_build.release && !options.autoClose) {
                    that.options.authoringIndicator = true;
                    that.options.verticalSpacing = true;
                }
                that._afterCreate();
                return _this;
            }
            Form.prototype.addChildForm = function (aForm, parentId) {
                var that = this;
                that._childrenForms = that._childrenForms || [];
                that._childrenForms.push({ form: aForm, parentId: parentId });
                aForm._parentForm = that;
            };
            Form.prototype.removeChildForm = function (aForm) {
                var that = this;
                if (that._childrenForms) {
                    var ii = that._childrenForms.length;
                    while (ii--) {
                        var item = that._childrenForms[ii];
                        if (item.form === aForm) {
                            that._childrenForms.splice(ii, 1);
                            break;
                        }
                    }
                }
            };
            Form.prototype.closeInlineForms = function (where) {
                var that = this;
                var layout = that.getLayoutByName(where);
                if (layout && that._childrenForms) {
                    var ii = that._childrenForms.length;
                    while (ii--) {
                        var item = that._childrenForms[ii];
                        if (item.parentId === layout.$id) {
                            that._childrenForms.splice(ii, 1);
                            item.form._parentForm = null;
                            item.form.close();
                        }
                    }
                }
            };
            Form.prototype.hasInlineForms = function (where) {
                var that = this;
                var layout = that.getLayoutByName(where);
                if (layout && that._childrenForms) {
                    var ii = that._childrenForms.length;
                    while (ii--) {
                        var item = that._childrenForms[ii];
                        if (item.parentId === layout.$id)
                            return item.form;
                    }
                }
                return null;
            };
            Form.prototype._isInDelayedAction = function () {
                if (this.formManager)
                    return this.formManager.isInAction();
                else
                    return this._internalDelayedAction;
            };
            Form.prototype._setInDelayedAction = function (value) {
                if (this.formManager)
                    this.formManager.setInAction(value);
                else
                    this._internalDelayedAction = value;
            };
            Form.prototype.initOptions = function (options) {
                options = options || {};
                if (options.parentContext) {
                    this._parentModel = options.parentContext;
                    options.parentContext = null;
                }
                options.form = true;
                return options;
            };
            Form.prototype.syncTransactionId = function () {
                return this._transactionId;
            };
            Form.prototype.syncViewId = function () {
                return this._viewId;
            };
            Form.prototype.execLater = function (task) {
                var that = this;
                if (that._afterProcessing) {
                    that._afterProcessing[task.id] = task.hnd;
                }
                else
                    task.hnd();
            };
            Form.prototype._processing = function (handler, detach) {
                var that = this;
                if (detach)
                    that._afterProcessing = {};
                try {
                    handler();
                }
                finally {
                    if (that._afterProcessing) {
                        Object.keys(that._afterProcessing).forEach(function (name) {
                            that._afterProcessing[name]();
                        });
                    }
                    that._afterProcessing = null;
                }
            };
            Form.prototype.syncDataSet = function () {
                var that = this;
                var datasets = that.data.datasets ? Object.keys(that.data.datasets) : [];
                if (datasets.length === 1 && that.data.datasets[datasets[0]].$type === 'sync') {
                    var res = _utils.copy(that.data.datasets[datasets[0]]);
                    return res;
                }
                return null;
            };
            Form.prototype._getFormLData = function () {
                return this.$model;
            };
            Form.prototype._activateTab = function (l) {
                var that = this;
                var cv = that.$model.getValue(l.$bindPages, {});
                var state = that.$model.getState(l.$bindPages, {});
                l.showTabs = state.isHidden === true;
                if (cv) {
                    var oldActive_1 = null, newActive_1 = null;
                    l.$items.forEach(function (item) {
                        if (item.opened)
                            oldActive_1 = item;
                        if (item.$name === cv)
                            newActive_1 = item;
                    });
                    if (newActive_1) {
                        newActive_1.opened = true;
                        if (oldActive_1 && oldActive_1 !== newActive_1)
                            oldActive_1.opened = false;
                    }
                    else if (!oldActive_1 && l.$items.length)
                        l.$items[0].opened = true;
                }
            };
            Form.prototype.setData = function (ldata) {
                var that = this;
                ldata = ldata || {};
                //that.$data = _sutils.init(that.$schema, that.$schema, null, ldata, ldata.$create, { select: true });
                that.$data = ldata;
                if (that.options.beforeSetModel) {
                    that.options.beforeSetModel(that.$data, that);
                }
                if (!that.$model) {
                    that.$model = new Phoenix.Observable.Data(that.$schema, null, '', that.$data, null, false, that.$locale, that.data.datasets, that.data.transform, that.options.design);
                }
                else {
                    that.$model.setModel(that.$data);
                }
                that.$model.saveModel();
                if (that.options.afterModelCreated) {
                    that.options.afterModelCreated(that.$model, that);
                }
            };
            Form.prototype.processing = function (value) {
                var that = this;
                that._inProcessing = value;
                _dom.processing(value, 100);
            };
            Form.prototype.controlByField = function (fieldName) {
                var that = this;
                return that._findControlByField(fieldName);
            };
            Form.prototype.controlByName = function (name, includeNotCreated) {
                var that = this;
                return that._findControlByName(name, includeNotCreated);
            };
            Form.prototype._findControlByField = function (fieldName) {
                var that = this;
                var list = [];
                Object.keys(that.controls).forEach(function (cn) {
                    var c = that.controls[cn];
                    if (c && c.$bind === fieldName) {
                        list.push(c);
                    }
                });
                return list.length ? list : null;
            };
            Form.prototype._findControlByName = function (name, includeNotCreated) {
                var that = this;
                var list = [];
                Object.keys(that.controls).forEach(function (cn) {
                    var c = that.controls[cn];
                    if (c && c.name === name) {
                        list.push(c);
                    }
                });
                if (includeNotCreated && !list.length && that.namedMapFields[name]) {
                    list.push(that.namedMapFields[name]);
                }
                return list.length ? list : null;
            };
            //todo: remove use that._preferences 
            Form.prototype.loadPrefs = function () {
                var that = this;
                if (that._localSettings) {
                    if (that._settingsName)
                        that._settings = _preferences(that._settingsName);
                }
            };
            Form.prototype.supportSettings = function () {
                return !!this._settingsName;
            };
            Form.prototype.getFieldSettings = function (field) {
                var that = this;
                if (that._settings)
                    return that._settings[field];
                return null;
            };
            Form.prototype.setFieldSettings = function (field, settings) {
                var that = this;
                that._settings = that._settings || {};
                that._settings[field] = settings;
            };
            Form.prototype.savePrefs = function (after) {
                var that = this;
                if (that._settingsName) {
                    if (that._localSettings) {
                        that._settings = that._settings || {};
                        _preferences(that._settingsName, that._settings);
                        after();
                    }
                    else {
                        Phoenix.external.preferenceSaveHandler(that._settingsName, that._settings).then(function () {
                            after();
                        });
                    }
                }
            };
            Form.prototype.sendMessage = function (message, field, params) {
                var that = this;
                var res;
                var ctrls = that._findControlByField(field);
                if (ctrls && ctrls.length) {
                    ctrls.forEach(function (ctrl) {
                        if (ctrl.sendMessage)
                            res = ctrl.sendMessage(message, params);
                    });
                }
                return res;
            };
            Form.prototype.afterSettings = function (field, widget, sdata) {
                var that = this;
                if (that.options.settingsHandler)
                    return that.options.settingsHandler('after', field, widget, sdata);
                return sdata;
            };
            Form.prototype.beforeSettings = function (field, widget) {
                var that = this;
                if (that.options.settingsHandler)
                    return that.options.settingsHandler('before', field, widget);
                return null;
            };
            Form.prototype._createError = function () {
                var that = this;
                var css = ['bs-form-error'];
                if (that.options.verticalSpacing)
                    css.push('bs-form-vertical-space');
                else if (that.options.closeButtonHandler || that.options.authoringIndicator)
                    css.push('bs-form-settings-space');
                return $('<div id="' + that.data.$id + '_error" class="' + css.join(' ') + '"><div>').get(0);
            };
            Form.prototype._createErrorItem = function (error, show) {
                var that = this;
                var style = (error.severity == 'success' ? 'success' : ((error.severity == 'warning') ? 'info' : 'danger'));
                var c = show ? '' : 'bs-none ';
                var html = [_utils.format('<div id="{0}_error" data-error="true" class="' + c + ' alert alert-' + style + ' alert-dismissible fade show">', error.id)];
                html.push('<button type="button" data-error-close="true" class="close" aria-label="Close">');
                html.push('<span data-error-close="true" aria-hidden="true">&times;</span>');
                html.push('</button>');
                var cm = error.message.split('\n');
                var msgLen = cm.length;
                cm.forEach(function (msg, index) {
                    if (index > 0)
                        html.push('<br/>');
                    html.push(_utils.escapeHtml(msg));
                });
                if (error.details && error.details.length) {
                    error.details.forEach(function (err) {
                        if (err.message)
                            html.push('<p class="bs-error-detail-item">' + _utils.escapeHtml(err.message) + '</p>');
                    });
                }
                html.push('</div>');
                return $(html.join('')).get(0);
            };
            Form.prototype.clearErrors = function () {
                var that = this;
                if (that.$element) {
                    var eerr = _dom.find(that.$element.get(0), that.data.$id + '_error');
                    if (eerr) {
                        _dom.empty(eerr);
                    }
                }
            };
            Form.prototype.showErrorItem = function (error, clear) {
                var that = this;
                if (that.$element) {
                    var eerr = _dom.find(that.$element.get(0), that.data.$id + '_error');
                    if (eerr) {
                        if (clear) {
                            _dom.empty(eerr);
                        }
                        _dom.append(eerr, that._createErrorItem(error, clear));
                    }
                }
            };
            Form.prototype.afterRenderChildren = function ($e) {
                //setup tooltip
                var $ttc = $e.find('[data-phoenix-tooltip]');
                if ($ttc["tooltip"])
                    $ttc["tooltip"]({
                        html: true,
                        container: 'body',
                        template: '<div class="tooltip bs-tooltip-help" role="tooltip"><div class="tooltip-arrow"></div><div class="tooltip-inner"></div></div>'
                    });
            };
            Form.prototype._loadNestedControllers = function () {
                var that = this;
                that._nestedControllers = [];
                Object.keys(that.map).forEach(function (name) {
                    var layout = that.map[name];
                    if (layout.$refController) {
                        var cfg = { $refProperty: layout.$refProperty, handler: null, beforeSetModel: null };
                        var config = _customData.get(layout.$refController);
                        if (!config)
                            throw _utils.format('Controller not found "{0}". Use customData.register(controllerName, ctrlConfig).', layout.$refController);
                        if (config.onModelChanged)
                            cfg.handler = config.onModelChanged.bind(config);
                        if (config.beforeSetModel)
                            cfg.beforeSetModel = config.beforeSetModel.bind(config);
                        that._nestedControllers.push(cfg);
                    }
                });
            };
            Form.prototype.hasNestedControllers = function () {
                var that = this;
                if (!that._nestedControllers) {
                    that._loadNestedControllers();
                }
                return that._nestedControllers.length > 0;
            };
            Form.prototype.modelCreated = function (data) {
                var that = this;
                that._nestedControllers.forEach(function (cfg) {
                    if (!cfg.beforeSetModel)
                        return;
                    var d = data, dispatch = false;
                    if (cfg.$refProperty) {
                        dispatch = true;
                        d = _utils.getValue(data, cfg.$refProperty);
                    }
                    else if (!cfg.$refProperty)
                        dispatch = true;
                    if (dispatch && d)
                        cfg.beforeSetModel(d);
                });
            };
            Form.prototype.modelChanged = function (action, model, form, modal) {
                var that = this;
                that._nestedControllers.forEach(function (cfg) {
                    if (!cfg.handler)
                        return;
                    var a = action, m = model, dispatch = false;
                    if (cfg.$refProperty && a.property && a.property.indexOf(cfg.$refProperty + '.') === 0) {
                        dispatch = true;
                        a = _utils.copy(action);
                        a.property = a.property.substring(cfg.$refProperty.length + 1);
                        m = model.getValue(cfg.$refProperty, action.params);
                    }
                    else if (!cfg.$refProperty)
                        dispatch = true;
                    if (dispatch)
                        cfg.handler(a, m, form, modal);
                });
            };
            Form.prototype.afterRender = function ($e) {
                var that = this;
                var e = $e.get(0);
                if (that.autoClose)
                    e.tabIndex = 0;
                var fc = e.firstChild ? e.firstChild : e;
                if (that.options.form && !that.options.design) {
                    _dom.before(fc, that._createError());
                }
                var fdetail = function (icon, type, color, delta) {
                    var html = ['<div ' + type + '="true" class="bs-cursor-p bs-form-settings' + (color ? ' ' + color : '') + (delta ? ' ' + ' space-' + delta : '') + '" id="' + that.data.$id + '_settings">'];
                    html.push('<span ' + type + '="true" class="' + _dom.iconClass(icon) + '"></span>');
                    html.push('</div>');
                    return html.join('');
                };
                var cd = 0;
                if (that.options.closeButtonHandler) {
                    var iconName = 'times-circle-o';
                    var color = 'red';
                    if (that.options.autoClose) {
                        iconName = 'remove';
                        color = 'normal';
                    }
                    _dom.append(e, $(fdetail(iconName, 'data-form-detail-close', color, cd)).get(0));
                    cd++;
                }
                if (that.options.authoringIndicator) {
                    _dom.append(e, $(fdetail('cog', 'data-form-settings', null, cd)).get(0));
                    cd++;
                }
                that._showErrors();
            };
            Form.prototype._afterLayoutAdded = function (layout) {
                var that = this;
                _layoutUtils.enumSubLayouts(layout, function (item) {
                    if (item.$fields && item.$title && item.$title.value) {
                        var e = that.$element.get(0);
                        var titleElement = _dom.find(e, item.$id + '_title');
                        if (titleElement)
                            Phoenix.layoutUtils.updateLayoutTitle(titleElement, item, that.$model, that.$locale);
                    }
                });
            };
            Form.prototype.changed = function (propName, ov, nv, op, params) {
                var that = this;
                if (params.targetId === 'layout-titles') {
                    if (that._bindTitles[params.propName]) {
                        if (that.$element) {
                            var e_1 = that.$element.get(0);
                            that._bindTitles[params.propName].forEach(function (layoutId) {
                                var titleElement = _dom.find(e_1, layoutId + '_title');
                                if (titleElement) {
                                    var l = that.getLayoutById(layoutId);
                                    if (l && l.$title && l.$title.value)
                                        _layoutUtils.updateLayoutTitle(titleElement, l, that.$model, that.$locale);
                                }
                            });
                        }
                    }
                }
                else if (params.targetId === 'layout-accordion') {
                    if (that._bindAccordion[params.propName]) {
                        that._bindAccordion[params.propName].forEach(function (layoutId) {
                            var l = that.getLayoutById(layoutId);
                            l.$items.forEach(function (item) {
                                if (item.$name === nv && !item.opened) {
                                    that._activatePageLayout(item);
                                }
                            });
                        });
                    }
                }
            };
            Form.prototype._showErrors = function () {
                var that = this;
                var err = that.$model.$errors.$;
                if (!err.hasErrors()) {
                    that.clearErrors();
                }
                else {
                    var le = err.errors();
                    for (var i = 0, len = le.length; i < len; i++) {
                        var ce = le[i];
                        that.showErrorItem(ce, i == 0);
                    }
                }
            };
            Form.prototype.stateChanged = function (propName, params) {
                var that = this;
                if (params.targetId === 'layout-accordion') {
                    if (propName === 'isHidden' && params.property) {
                        var state_1 = that.$model.getState(params.property, {});
                        var l = that._bindAccordion[params.property];
                        if (l)
                            l.forEach(function (layoutId) {
                                var layout = that.map[layoutId];
                                var tab = _dom.find(that.$element.get(0), layout.$id + '_tab');
                                if (tab) {
                                    if (state_1.isHidden)
                                        _dom.removeClass(tab, 'bs-none');
                                    else
                                        _dom.addClass(tab, 'bs-none');
                                }
                            });
                    }
                }
                else if (params.targetId === 'layout-state') {
                    if (propName === 'isHidden' && params.property) {
                        var state_2 = that.$model.getState(params.property, {});
                        var l = that._bindStates[params.property];
                        if (l)
                            l.forEach(function (layoutId) {
                                var layout = that.map[layoutId];
                                if (layout)
                                    that.updateIsHidden(layout, state_2.isHidden);
                            });
                    }
                }
                else if (params.property === '$' && propName === 'errors') {
                    that._showErrors();
                }
            };
            Form.prototype.getSchema = function (path) {
                var that = this;
                return _sutils.getSchema(path, that.$schema, that.$rootSchema, false);
            };
            Form.prototype.getLookupForSchema = function (path, lookupName) {
                var that = this;
                return _sutils.getLookup(path, lookupName, that.$schema, that.$rootSchema);
            };
            Form.prototype.registerListenerFor = function (field, target, id) {
                var that = this;
                var p = field;
                that._listenerChanged = true;
                that._listeners = that._listeners || {};
                that._listeners[p] = that._listeners[p] || [];
                that._listeners[p].push({ target: target, id: id || '' });
            };
            Form.prototype.unRegisterListenerFor = function (field, target) {
                var that = this;
                var p = field;
                if (that._listeners && that._listeners[p]) {
                    var i = that._listeners[p].findIndex(function (item) {
                        return item.target === target;
                    });
                    if (i >= 0) {
                        that._listeners[p].splice(i, 1);
                        that._listenerChanged = true;
                    }
                }
            };
            Form.prototype.setValue = function (path, value) {
                _outils.setValue(path, value, this.$model);
            };
            Form.prototype.getValue = function (path) {
                return _outils.getValue(path, this.$model);
            };
            Form.prototype.getParentModel = function (path) {
                var segments = path.split('.');
                segments.pop();
                return _outils.getValue(segments.join('.'), this.$model);
            };
            Form.prototype.getState = function (path) {
                var that = this;
                var res = _outils.getState(path, this.$model);
                if (that.options.design) {
                    res.isHidden = false;
                    res.isDisabled = false;
                }
                return res;
            };
            Form.prototype._enumListener = function (name, cb) {
                var that = this;
                that._listeners[name].forEach(function (target) {
                    cb(target);
                });
            };
            Form.prototype._rebuildListeners = function () {
                var that = this;
                if (that._listenerChanged) {
                    that._listenersByName = Object.keys(that._listeners);
                    that._listenerChanged = false;
                }
            };
            Form.prototype._match = function (p, cb, params) {
                var that = this;
                var match = p.join('.'), match2 = match + '.';
                if (that._listenersByName) {
                    that._listenersByName.forEach(function (name) {
                        if (name === match) {
                            cb(name, true, false, false);
                        }
                        else if (match === '*' || (match.indexOf(name + '.') === 0)) {
                            cb(name, false, true, false);
                        }
                        else if (params.checkChildren && name.indexOf(match2) === 0) {
                            cb(name, false, false, true);
                        }
                    });
                }
            };
            Form.prototype.openInlineForm = function (opts) {
                var that = this;
                var layout = that.getLayoutByName(opts.where);
                if (layout && ui.OpenInlineForm)
                    ui.OpenInlineForm(layout.$id, opts.name, opts.meta, opts.controller, opts.data, opts.locale, function (childForm) {
                        that.addChildForm(childForm, layout.$id);
                    });
            };
            Form.prototype.execAction = function (propName, actionParams, params) {
                var that = this;
                // Find Link in schema
                if (that.$model.execSyncAction(propName, actionParams, params))
                    return;
                if (propName.indexOf('$action.') === 0) {
                    var segments = propName.split('.');
                    segments.shift();
                    var cl = {};
                    var link_2 = segments.join('.');
                    cl[link_2] = true;
                    return _link.execLink(cl, actionParams, null);
                }
                that._modelChanged(propName, null, null, 'execute', params, actionParams);
            };
            Form.prototype.close = function () {
                var that = this;
                if (that.$content) {
                    that.$content.empty();
                    _dom.remove(that.$content.get(0));
                }
                that.destroy();
            };
            Form.prototype.broadcast = function (eventName, params) {
                this.formManager.broadcast(eventName, params);
            };
            Form.prototype.patch = function (delta) {
                var that = this;
                that._inSync = true;
                that.processing(true);
                try {
                    that._processing(function () { that.$model.applyJsonPachDelta(delta); }, delta.length > 10);
                }
                finally {
                    that.processing(false);
                    that._inSync = false;
                }
            };
            Form.prototype._sendData = function () {
                var that = this;
                that._inSync = true;
                that.processing(true);
                var ca = null;
                if (that._actions && that._actions.length)
                    ca = that._actions;
                that._actions = null;
                that.onsync(that.$model, ca, that, function (delta) {
                    if (delta && delta.length) {
                        that._processing(function () { that.$model.applyJsonPachDelta(delta); }, delta.length > 10);
                    }
                }, function () {
                    that.processing(false);
                    that._inSync = false;
                    if (ca) {
                        ca.forEach(function (action) {
                            if (action && action.after) {
                                that.execAction(action.after, {}, { $nosync: true });
                            }
                        });
                    }
                });
            };
            Form.prototype._synModel = function (action) {
                var that = this;
                if (that._inSync)
                    return;
                if (that.onsync) {
                    if (that._syncTimeOut) {
                        clearTimeout(that._syncTimeOut);
                    }
                    //80 > 30 = focusDelay
                    if (action) {
                        var delayed = action.delayed;
                        delete action.delayed;
                        that._actions = that._actions || [];
                        var oi = that._actions.findIndex(function (ii) { return ii.path === action.path && ii.op === action.op; });
                        if (oi >= 0)
                            that._actions.splice(oi, 1);
                        that._actions.push(action);
                        if (delayed) {
                            setTimeout(function () {
                                that._sendData();
                            }, 80);
                        }
                        else {
                            that._sendData();
                        }
                    }
                    else {
                        setTimeout(function () {
                            that._sendData();
                        }, 80);
                    }
                }
            };
            Form.prototype._modelChanged = function (propName, ov, nv, op, params, actionParams) {
                var that = this;
                var p = propName.split('.');
                that._rebuildListeners();
                //update controls
                params = params || {};
                params.oldValue = ov;
                params.newValue = nv;
                if (op !== "execute" && op !== "beforeChange") {
                    that._match(p, function (name, exact, parent, child) {
                        if (op !== 'propchange' && !exact)
                            return;
                        params.propName = name;
                        if (exact) {
                            that._enumListener(name, function (item) {
                                if (item.target.changed) {
                                    params.targetId = item.id;
                                    item.target.changed(propName, ov, nv, op, params);
                                }
                            });
                        }
                        else if (parent) {
                            that._enumListener(name, function (item) {
                                if (item.target.changed) {
                                    params.targetId = item.id;
                                    item.target.changed(propName, ov, nv, op, params);
                                }
                            });
                        }
                        else if (child) {
                            that._enumListener(name, function (item) {
                                if (item.target.changed) {
                                    params.targetId = item.id;
                                    item.target.changed(name, ov, that.getValue(name), op, params);
                                }
                            });
                        }
                    }, params);
                }
                that.afterchanged(propName, op, params, actionParams);
                //update controls
            };
            Form.prototype.afterchanged = function (propName, op, params, actionParams) {
                var that = this;
                if (that.onaction) {
                    //if (that.inAction || that._inProcessing) return;
                    if (that.inAction)
                        return;
                    that.inAction = true;
                    try {
                        that.onaction({ property: propName, operation: op, params: params, actionParams: actionParams }, that.$model, that);
                    }
                    finally {
                        that.inAction = false;
                    }
                }
            };
            Form.prototype.on = function (cb) {
                var that = this;
                that.onaction = cb;
                if (that.onaction)
                    that.onaction({ operation: 'init' }, that.$model, that);
            };
            Form.prototype._stateChanged = function (propName, params) {
                var that = this;
                var p = propName.split('.'), stateName, propertyName;
                var isState = false;
                if (_sutils.statesAndErrors.indexOf(p[p.length - 1]) >= 0) {
                    stateName = p.pop();
                    propertyName = p.join('.');
                    isState = true;
                }
                that._rebuildListeners();
                that._match(p, function (name, exact, parent, child) {
                    if (exact) {
                        that._enumListener(name, function (item) {
                            if (item.target.stateChanged)
                                item.target.stateChanged(stateName, { targetId: item.id, property: propertyName, origProperty: propName, isState: isState }, params);
                        });
                    }
                    else if (parent) {
                        that._enumListener(name, function (item) {
                            if (item.target.stateChanged)
                                item.target.stateChanged(null, { targetId: item.id, property: propertyName, origProperty: propName, isState: isState }, params);
                        });
                    }
                    else if (child) {
                        that._enumListener(name, function (item) {
                            if (item.target.stateChanged) {
                                params.targetId = item.id;
                                item.target.stateChanged(null, { targetId: item.id, property: propertyName, origProperty: propName, isState: isState }, params);
                            }
                        });
                    }
                }, params);
            };
            Form.prototype.destroy = function () {
                var that = this;
                that.$data = null;
                that.$schema = null;
                that._bindStates = null;
                that._bindTitles = null;
                that._bindAccordion = null;
                that.module = null;
                that.onsync = null;
                that.onaction = null;
                that._listeners = {};
                that._parentModel = null;
                that._listenersByName = [];
                that._loadNestedControllers = null;
                if (that._parentForm)
                    that._parentForm.removeChildForm(that);
                if (that._childrenForms) {
                    var children = that._childrenForms.slice();
                    children.forEach(function (item) { return item.form.destroy(); });
                    that._childrenForms = null;
                }
                if (that.$model) {
                    that.$model.onchange = null;
                    that.$model.onstatechanged = null;
                    that.$model.destroy();
                    that.$model = null;
                }
                if (that.formManager) {
                    that.formManager.remove(that);
                    that.formManager = null;
                }
                _super.prototype.destroy.call(this);
            };
            Form.prototype._idComponent = function (el) {
                var that = this;
                if (!that.$element)
                    return null;
                var t = el, root = that.$element.get(0), id;
                while (t) {
                    if (!t.getAttribute)
                        return null;
                    id = t.getAttribute('data-render');
                    if (id) {
                        if (!that.controls[id]) {
                            id = null;
                        }
                        else
                            break;
                    }
                    t = (t === root) ? null : t.parentNode;
                }
                return id ? id : null;
            };
            Form.prototype._event2FieldByElement = function (el) {
                var that = this;
                var id = that._idComponent(el);
                if (!id)
                    return null;
                return that.controls[id];
            };
            Form.prototype.postMessageToParent = function (actionName, params) {
                var that = this;
                if (that._parentForm) {
                    _utils.nextTick(function () {
                        that._parentForm.execAction(actionName, params);
                    });
                }
            };
            Form.prototype._event2Field = function (event) {
                var that = this;
                return that._event2FieldByElement(event.target);
            };
            Form.prototype._removeBaseEvents = function () {
                var that = this, $e = that.$element;
                $e.off('focusin');
                $e.off('focusout');
                $e.off('click');
                $e.off('dblclick');
                $e.off('keydown');
                $e.off('keyup');
                $e.off('keypress');
                $e.off('mousedown');
                $e.off('paste');
                $(window).off('global-phoenix-resize', that._resizeHnd);
                _super.prototype._removeBaseEvents.call(this);
            };
            Form.prototype._freeze = function (e) {
                e.preventDefault();
                e.stopPropagation();
                return false;
            };
            Form.prototype._doKeyDown = function (event) {
                return true;
            };
            Form.prototype._doKeyPress = function (event) {
                var that = this;
                if (that.autoClose) {
                    if (event.keyCode === _dom.keys.VK_ESCAPE || event.keyCode === _dom.keys.VK_F4) {
                        that.autoClose.explicitClose = true;
                        Phoenix.pagecontrol.Page().setPopup(null);
                        return false;
                    }
                    if (event.keyCode === _dom.keys.VK_ENTER) {
                        that.execAction('form-validate');
                    }
                }
                return true;
            };
            Form.prototype._addBaseEvents = function () {
                var that = this;
                that.$element.on('focusin', function (event) {
                    if (that._inProcessing)
                        return that._freeze(event);
                    var control = that._event2Field(event);
                    if (control && control.focusIn) {
                        if (control.focused)
                            return;
                        control.focused = true;
                        control.focusIn(event);
                    }
                });
                that.$element.on('focusout', function (event) {
                    if (that._inProcessing)
                        return that._freeze(event);
                    var control = that._event2Field(event);
                    if (control && control.focusOut) {
                        var ne_2 = { target: event.target };
                        if (control.focusTimer) {
                            window.clearTimeout(control.focusTimer);
                            control.focusTimer = 0;
                        }
                        that._setInDelayedAction(true);
                        control.focusTimer = _utils.focusDelay(function () {
                            that._setInDelayedAction(false);
                            if (control.destroyed)
                                return;
                            control.focusTimer = 0;
                            var ae = window.document.activeElement;
                            if (ae) {
                                var c = that._event2FieldByElement(ae);
                                if (c !== control) {
                                    if (control.focusInControl(ae))
                                        c = control;
                                }
                                else if (c === control) {
                                    if (!control.focusInControl(ae))
                                        c = null;
                                }
                                if (c !== control) {
                                    control.focusOut(ne_2);
                                    control.focused = false;
                                }
                            }
                            else {
                                control.focusOut(ne_2);
                                control.focused = false;
                            }
                        });
                    }
                });
                that.$element.on('dblclick', function (event) {
                    if (that._inProcessing)
                        return that._freeze(event);
                    var control = that._event2Field(event);
                    if (control && control.dblclick) {
                        control.dblclick(event);
                    }
                });
                that.$element.on('click', function (event) {
                    if (that._inProcessing)
                        return that._freeze(event);
                    var control = that._event2Field(event);
                    var target = event.target;
                    if (control && target.id === control.id + '_rules') {
                        control.showRules();
                        event.preventDefault();
                        return;
                    }
                    if (control && control.click) {
                        if (control.stopProppagation)
                            control.stopProppagation(event);
                        if (control.focusClick)
                            return;
                        if (!that._isInDelayedAction() || control.focused && control.targetInControl(event.target)) {
                            return control.click(event);
                        }
                        that._setInDelayedAction(true);
                        control.focusClick = _utils.focusDelay(function () {
                            that._setInDelayedAction(false);
                            if (control.destroyed)
                                return;
                            control.focusClick = 0;
                            control.click(event);
                            return;
                        });
                    }
                    else if (!control) {
                        var target_1 = event.target;
                        if (target_1) {
                            var close_1 = target_1.getAttribute('data-error-close');
                            if (close_1) {
                                var elem = _dom.findByAttribute(target_1, that.$element.get(0), "data-error");
                                if (elem) {
                                    if (elem.id) {
                                        //{0}_error"
                                        var errorId = elem.id.substr(0, elem.id.length - 6);
                                        that.$model.$errors.$.rmvErrorById(errorId);
                                    }
                                    else {
                                        _dom.remove(elem);
                                        that.openErrors();
                                    }
                                }
                                return that._freeze(event);
                            }
                            else if (target_1.getAttribute('data-form-detail-close')) {
                                if (that.options.closeButtonHandler) {
                                    that.options.closeButtonHandler();
                                }
                                return that._freeze(event);
                            }
                            else if (target_1.getAttribute('data-form-settings')) {
                                if (that.options.authoringIndicator) {
                                    _link.execLink({ $formAuthoring: true, path: that.options.path, name: that.options.externalLayout, schema: that.options.externalSchema, locale: that.options.externalLocale }, {}, null);
                                }
                                return that._freeze(event);
                            }
                        }
                    }
                    var layout = that._event2Layout(event);
                    if (layout && layout.$actionName)
                        that.execAction(layout.$actionName);
                });
                that.$element.on('keypress', function (event) {
                    if (that._inProcessing)
                        return that._freeze(event);
                    if (!that._doKeyDown(event)) {
                        return;
                    }
                    var control = that._event2Field(event);
                    if (control && control.keypress)
                        control.keypress(event);
                });
                that.$element.on('keydown', function (event) {
                    if (that._inProcessing)
                        return that._freeze(event);
                    if (!that._doKeyPress(event)) {
                        return;
                    }
                    var control = that._event2Field(event);
                    if (control && control.keydown)
                        control.keydown(event);
                });
                that.$element.on('keyup', function (event) {
                    if (that._inProcessing)
                        return that._freeze(event);
                    if (!that._doKeyDown(event)) {
                        return;
                    }
                    var control = that._event2Field(event);
                    if (control && control.keyup)
                        control.keyup(event);
                });
                that.$element.on('paste', function (event) {
                    if (that._inProcessing)
                        return that._freeze(event);
                    var control = that._event2Field(event);
                    if (control && control.paste)
                        control.paste(event);
                });
                that.$element.on('keyup', function (event) {
                    if (that._inProcessing)
                        return that._freeze(event);
                    var control = that._event2Field(event);
                    if (control && control.keyup)
                        control.keyup(event);
                });
                that.$element.on('mousedown', function (event) {
                    if (that._inProcessing)
                        return that._freeze(event);
                    var control = that._event2Field(event);
                    if (control && control.mousedown)
                        return control.mousedown(event);
                    return true;
                });
                $(window).on('global-phoenix-resize', that._resizeHnd);
                _super.prototype._addBaseEvents.call(this);
            };
            Form.prototype._resizeControls = function (visibilityChanged) {
                var that = this;
                if (that.currentResizeList)
                    that.currentResizeList.forEach(function (c) { c.resize(visibilityChanged); });
            };
            Form.prototype._resizeAndAfterRender = function (visibilityChanged) {
                var that = this;
                if (that.afterRenderList) {
                    that.afterRenderList.forEach(function (c) { c.afterAddedInDom(); });
                    that.afterRenderList = [];
                }
                that._resizeControls(visibilityChanged);
            };
            Form.prototype.afterAddedInDom = function () {
                _super.prototype.afterAddedInDom.call(this);
                var that = this;
                that._resizeAndAfterRender(false);
                if (that._autofocus && that._autofocus.setFocus) {
                    window.setTimeout(function () {
                        if (that._autofocus) {
                            that._autofocus.setFocus();
                            that._autofocus = null;
                        }
                    }, 200);
                }
            };
            Form.prototype._afterVisibilityChanged = function (options) {
                _super.prototype._afterVisibilityChanged.call(this, options);
                var that = this;
                if (options.inDom && options.resize) {
                    that._resizeAndAfterRender(true);
                }
            };
            return Form;
        }(ui.BaseLayout));
        ui.Form = Form;
        ;
        ui.FormClass = Form;
        function removeForm(form) {
            if (form) {
                var e = null;
                if (form.$element) {
                    e = form.$element.get(0);
                }
                form.destroy();
                if (e)
                    _dom.remove(e);
            }
        }
        ui.removeForm = removeForm;
        ui.OpenForm = null;
        ui.OpenInlineForm = null;
    })(ui = Phoenix.ui || (Phoenix.ui = {}));
})(Phoenix || (Phoenix = {}));
/// <reference path="../../core/core-refs.ts" />
/// <reference path="../../core/modules/ajax.ts" />
/// <reference path="../../core/modules/application.ts" />
/// <reference path="../modal.control.ts" />
/// <reference path="../autoclose.control.ts" />
/// <reference path="./form.control.ts" />
/// <reference path="./schema.data.ts" />
var Phoenix;
(function (Phoenix) {
    var _p = Phoenix, _ajax = _p.ajax, _dom = _p.dom, _utils = _p.utils, _autoclose = _p.autoclose, _modal = _p.modal, _pagecontrol = _p.pagecontrol, _application = _p.application, _su = _p.Observable.SchemaUtils, _external = _p.external, _customData = _p.customData;
    var ui;
    (function (ui) {
        var ModalForm = /** @class */ (function (_super) {
            __extends(ModalForm, _super);
            function ModalForm(formOptions, layout, schema, data, locale, preferences) {
                var _this = _super.call(this, formOptions, locale) || this;
                var that = _this;
                var opts = formOptions.opts ? formOptions.opts : {};
                if (formOptions.validators) {
                    opts.validators = formOptions.validators;
                    delete formOptions.validators;
                }
                that.render = new ui.Form(layout, opts, data, schema, locale, preferences);
                that.render.$locale = locale;
                return _this;
            }
            ModalForm.prototype.on = function (hnd) {
                var that = this;
                var newHnd = function (action, data, form) {
                    return hnd(that, action, data, form);
                };
                that._clickHnd = function (name) {
                    that.render.afterchanged(name, "modal-action", {});
                };
                that.render.on(newHnd);
            };
            ModalForm.prototype.onNatural = function (hnd) {
                var that = this;
                var newHnd = function (action, data, form) {
                    return hnd(action, data, form, that);
                };
                that._clickHnd = function (name) {
                    that.render.afterchanged(name, "modal-action", {});
                };
                that.render.on(newHnd);
            };
            return ModalForm;
        }(Phoenix.modal.Modal));
        ui.ModalForm = ModalForm;
        function _checkEx(ex) {
            if (typeof ex === 'string')
                return { message: ex };
            return ex;
        }
        var _openForm = function (formOptions, params, handler) {
            _su.loadSchemaRefs(params.schema, params.data, params.layout, null, function (ex, ldata) {
                if (ex) {
                    console.log(ex);
                    ex = _checkEx(ex);
                    ex = ex._ajax ? _ajax.extractAjaxErrors(ex) : ex;
                    if (formOptions && formOptions.module && formOptions.module.error)
                        return formOptions.module.error(ex);
                    _utils.alert('', ex.message, function () { });
                    return;
                }
                var f = new ModalForm(formOptions, params.layout, params.schema, ldata, params.locale, params.preferences);
                f.open();
                if (handler) {
                    formOptions.natural ? f.onNatural(handler) : f.on(handler);
                }
            });
        };
        var _preferenceName = function (name, config) {
            var prefName = '';
            if (name && _application.name)
                prefName = _application.name + '_form_' + name;
            if (prefName && config && config.current && config.current.preferences) {
                var prefs = config.current.preferences;
                if (prefs.excludedForms && prefs.excludedForms.indexOf(prefName) >= 0)
                    prefName = '';
            }
            return prefName;
        }, _loadSchema = function (schema) {
            if (typeof schema === 'object') {
                return _utils.Promise.resolve($.extend(true, {}, schema));
            }
            else {
                var config = _application.config(_application.name);
                return _ajax.get(config.current.prototypes + '/' + schema + '.json');
            }
        }, _prepareForm = function (layout, schema, formData, locale, opts, after) {
            var ci = 0, li = -1, si = -1, promises = [], params = { locale: locale }, dataIndex = -1, preferencesIndex = -1;
            var config = _application.config(_application.name);
            opts = opts || {};
            if (locale && locale.$name)
                opts.externalLocale = locale.$name;
            if (!formData || !formData.then)
                params.data = $.extend(true, {}, formData);
            else {
                promises.push(formData);
                dataIndex = 0;
                ci++;
            }
            var ln;
            if (typeof layout === 'object') {
                params.layout = $.extend(true, {}, layout);
                ln = params.layout.name;
            }
            else {
                li = ci;
                ci++;
                opts.externalLayout = layout;
                ln = layout;
                promises.push(_ajax.get(config.current.forms + '/' + layout + '.json'));
            }
            if (typeof schema === 'object') {
                params.schema = $.extend(true, {}, schema);
            }
            else {
                si = ci;
                ci++;
                opts.externalSchema = schema;
                promises.push(_ajax.get(config.current.prototypes + '/' + schema + '.json'));
            }
            var preferenceName = _preferenceName(ln, config);
            if (preferenceName && _external.preferenceLoadHandler) {
                preferencesIndex = ci;
                ci++;
                opts.preferenceName = preferenceName;
                promises.push(_external.preferenceLoadHandler(preferenceName));
            }
            if (promises.length) {
                _utils.Promise.all(promises).then(function (values) {
                    if (li >= 0)
                        params.layout = values[li];
                    if (si >= 0)
                        params.schema = values[si];
                    if (dataIndex >= 0)
                        params.data = values[dataIndex];
                    if (preferencesIndex >= 0) {
                        params.preferences = values[preferencesIndex];
                    }
                    after(null, opts, params);
                }).catch(function (ex) {
                    after(ex, null, null);
                });
            }
            else
                after(null, opts, params);
        };
        var _OpenModalForm = function (formOptions, layout, schema, fdata, locale, handler) {
            _prepareForm(layout, schema, fdata, locale, null, function (ex, opts, params) {
                if (ex) {
                    console.log(ex);
                    ex = _checkEx(ex);
                    ex = ex._ajax ? _ajax.extractAjaxErrors(ex) : ex;
                    if (formOptions && formOptions.module && formOptions.module.error)
                        return formOptions.module.error(ex);
                    _utils.alert('', ex.message, function () { });
                    return;
                }
                formOptions = formOptions || {};
                formOptions.opts = opts;
                _openForm(formOptions, params, handler);
            });
        };
        var _initController = function (options, config) {
            if (config.isFormController)
                options.beforeSetModel = config.beforeSetModel ? config.beforeSetModel.bind(config) : null;
            else
                options.beforeSetModel = config.initObjectState ? config.initObjectState.bind(config) : null;
            options.beforeModelCreated = config.initModel ? config.initModel.bind(config) : null;
            options.onSettings = config.onSettings ? config.onSettings.bind(config) : null;
            options.storageName = config.storageName;
            options.validators = config.validators;
            options.checkFormLayout = config.checkFormLayout;
        };
        var _showModalForm = function (opts, data) {
            if (!opts.controller)
                throw 'Controller name is empty.';
            var config = typeof opts.controller === 'string' ? _customData.get(opts.controller) : opts.controller;
            if (!config)
                throw _utils.format('Controller not found "{0}". Use customData.register(controllerName, ctrlConfig).', opts.controller);
            var options = {};
            _initController(options, config);
            var fo = opts.options;
            fo.opts = options;
            fo.parentContext = opts.parentContext;
            fo.natural = true;
            var hnd = null;
            if (config.isFormController) {
                hnd = config.modelChanged.bind(config);
            }
            else if (config.onModelChanged) {
                hnd = config.onModelChanged.bind(config);
            }
            _OpenModalForm(fo, opts.name, opts.meta, data, opts.locale, hnd);
        };
        var _showInlineForm = function (opts, after, data) {
            if (!opts.controller)
                throw 'Controller name is empty.';
            var config = typeof opts.controller === 'string' ? _customData.get(opts.controller) : opts.controller;
            if (!config)
                throw _utils.format('Controller not found "{0}". Use customData.register(controllerName, ctrlConfig).', opts.controller);
            var options = {};
            _initController(options, config);
            var fo = opts.options;
            fo.opts = options;
            fo.parentContext = opts.parentContext;
            fo.natural = true;
            var hnd = null;
            if (config.isFormController) {
                hnd = config.modelChanged.bind(config);
            }
            else if (config.onModelChanged) {
                hnd = config.onModelChanged.bind(config);
            }
            if (!opts.formParent)
                throw 'No form parent.';
            var parent = _dom.find(null, opts.formParent);
            if (!parent)
                throw 'No form parent.';
            _OpenFormExp($(parent), opts.name, opts.meta, data, opts.locale, hnd, fo, after);
        };
        var _showAutoCloseForm = function (opts, data, after) {
            if (!opts.controller)
                throw 'Controller name is empty.';
            var config = typeof opts.controller === 'string' ? _customData.get(opts.controller) : opts.controller;
            if (!config)
                throw _utils.format('Controller not found "{0}". Use customData.register(controllerName, ctrlConfig).', opts.controller);
            var options = {};
            _initController(options, config);
            var fo = opts.options;
            fo = options;
            fo.natural = true;
            fo.parentContext = opts.parentContext;
            var hnd = null;
            if (config.isFormController) {
                hnd = config.modelChanged.bind(config);
            }
            else if (config.onModelChanged) {
                hnd = config.onModelChanged.bind(config);
            }
            fo.autoClose = opts.autoClose;
            _OpenFormExp(null, opts.name, opts.meta, data, null, hnd, fo, after);
        };
        var _openInlineForm = function ($parent, params, handler, opts, after) {
            opts = opts || { design: false };
            if (opts && opts.autoClose) {
                var ac_1 = opts.autoClose;
                var acOptions = {
                    parent: ac_1.parentId ? _dom.find(null, ac_1.parentId) : null,
                    alignElement: ac_1.alignElementId ? _dom.find(null, ac_1.alignElementId) : null,
                    style: ac_1.style,
                    parents: ac_1.parents,
                    opener: ac_1.opener,
                    width: ac_1.width,
                    height: ac_1.height,
                    minWidth: ac_1.minWidth,
                    minHeight: ac_1.minHeight,
                    stayOnTop: ac_1.stayOnTop,
                    beforeClose: ac_1.beforeClose,
                    contentRender: function ($p, autoCloseControl, cb) {
                        try {
                            var co_2 = opts;
                            if (opts.opts)
                                opts = opts.opts || {};
                            if (co_2 !== opts && co_2.parentContext) {
                                opts.parentContext = co_2.parentContext;
                                co_2.parentContext = null;
                            }
                            if (ac_1.showCloseButton) {
                                opts.closeButtonHandler = function () {
                                    var pager = _pagecontrol.Page();
                                    pager.setPopup(null);
                                };
                            }
                            var render_1 = new ui.Form(params.layout, opts, params.data, params.schema, params.locale, params.preferences);
                            render_1.$locale = params.locale;
                            render_1.autoClose = autoCloseControl;
                            render_1.render($p);
                            if (handler)
                                render_1.on(handler);
                            autoCloseControl.renderControl = render_1;
                            cb();
                            if (after)
                                after(render_1);
                        }
                        catch (ex) {
                            cb(ex);
                        }
                    }
                };
                _autoclose.open(ac_1.align, acOptions);
                return;
            }
            var co = opts;
            if (opts.opts)
                opts = opts.opts || {};
            if (co !== opts && co.parentContext) {
                opts.parentContext = co.parentContext;
                co.parentContext = null;
            }
            var render = new ui.Form(params.layout, opts || { design: false }, params.data, params.schema, params.locale, params.preferences);
            render.$locale = params.locale;
            render.render($parent);
            if (handler)
                render.on(handler);
            if (after)
                after(render);
        };
        var _loadSubLayouts = function ($parent, params, handler, formOpts, after) {
        };
        var _afterLoadSchema = function ($parent, params, handler, formOpts, after) {
            _su.loadSchemaRefs(params.schema, params.data, params.layout, formOpts ? formOpts.parentContext : null, function (ex, ldata) {
                if (ex) {
                    console.log(ex);
                    ex = _checkEx(ex);
                    ex = ex._ajax ? _ajax.extractAjaxErrors(ex) : ex;
                    if (formOpts && formOpts.module && formOpts.module.error)
                        return formOpts.module.error(ex);
                    _utils.alert('', ex.message, function () { });
                    return;
                }
                params.data = ldata;
                _openInlineForm($parent, params, handler, formOpts, after);
            });
        };
        var _OpenFormExp = function ($parent, layout, schema, fdata, locale, handler, formOpts, after) {
            _prepareForm(layout, schema, fdata, locale, formOpts, function (ex, opts, params) {
                if (ex) {
                    console.log(ex);
                    ex = _checkEx(ex);
                    ex = ex._ajax ? _ajax.extractAjaxErrors(ex) : ex;
                    if (formOpts && formOpts.module && formOpts.module.error)
                        return formOpts.module.error(ex);
                    _utils.alert('', ex.message, function () { });
                    return;
                }
                if (opts && formOpts && formOpts.parentContext)
                    opts.parentContext = formOpts.parentContext;
                _afterLoadSchema($parent, params, handler, opts, after);
            });
        };
        function _camelize(propName) {
            return propName.split('.').map(function (segment) {
                return segment.charAt(0).toUpperCase() + segment.slice(1);
            }).join('').split('-').map(function (segment) {
                return segment.charAt(0).toUpperCase() + segment.slice(1);
            }).join('');
        }
        var FormController = /** @class */ (function () {
            function FormController() {
            }
            FormController.prototype.isFormController = function () { return true; };
            FormController.prototype.data = function () { return null; };
            FormController.prototype.beforeSetModel = function (model, form) {
                if (form && form.hasNestedControllers())
                    form.modelCreated(model);
                this.initObjectState(model, form);
            };
            FormController.prototype.initObjectState = function (model, form) { };
            FormController.prototype.modelChanged = function (action, model, form, modal) {
                if (form.hasNestedControllers()) {
                    form.modelChanged(action, model, form, modal);
                }
                this.onModelChanged(action, model, form, modal);
            };
            FormController.prototype.onModelChanged = function (action, model, form, modal) {
                var that = this;
                var pn = action.property;
                var ca = action;
                if (pn) {
                    if (that.bindProperty && pn.indexOf(that.bindProperty) === 0) {
                        pn = pn.substr(that.bindProperty.length);
                        ca.property = pn;
                    }
                    var ii = pn.indexOf('$links.');
                    if (ii >= 0)
                        pn = pn.replace(/\$links\./g, '');
                    var c = 'on' + _camelize(pn);
                    if (that[c])
                        return that[c](ca, model, form, modal);
                }
            };
            return FormController;
        }());
        ui.FormController = FormController;
        _customData.register('phoenix.empty.controller', { onModelChanged: function (action, model, form, modalForm) { } });
        ui.loadSchema = _loadSchema;
        ui.formController2Options = _initController;
        ui.OpenModalForm = _OpenModalForm;
        ui.showModalForm = _showModalForm;
        ui.showAutoCloseForm = _showAutoCloseForm;
        ui.OpenForm = _OpenFormExp;
        ui.OpenInlineForm = function (parentId, layout, schema, controller, formData, locale, after, options) {
            var opts = {
                name: layout,
                meta: schema,
                controller: controller,
                options: {},
                formParent: parentId,
                locale: locale
            };
            if (options)
                _utils.merge(options, opts.options);
            _showInlineForm(opts, after, formData);
        };
        _external.formOpenHandler = function (params) {
            var opts = {
                name: params.name,
                meta: params.meta,
                controller: params.controller || 'phoenix.empty.controller',
                options: params.options || {}
            };
            if (!params.modal) {
                opts.autoClose = {
                    align: _autoclose.BOTTOM_LEFT,
                    opener: params.opener,
                    alignElementId: params.alignElementId,
                    style: params.style,
                    parents: params.parents,
                    width: params.width,
                    height: params.height,
                    minWidth: params.minWidth,
                    minHeight: params.minHeight,
                    showCloseButton: params.showCloseButton
                };
                _showAutoCloseForm(opts);
            }
            else {
                _showModalForm(opts);
            }
        };
    })(ui = Phoenix.ui || (Phoenix.ui = {}));
})(Phoenix || (Phoenix = {}));
/// <reference path="../../../core/core-refs.ts" />
/// <reference path="../../../ui/layout.control.ts" />
/// <reference path="../schema.data.ts" />
var Phoenix;
(function (Phoenix) {
    var _render = Phoenix.render, _ui = Phoenix.ui, _dom = Phoenix.dom, _utils = Phoenix.utils, _device = Phoenix.device, _observable = Phoenix.Observable, _ulocale = Phoenix.ulocale, _locale = Phoenix.locale, _customData = Phoenix.customData, _sutils = _observable.SchemaUtils;
    var uiutils;
    (function (uiutils) {
        var DATE_PICKER_NAME = 'datepicker';
        var DATETIME_PICKER_NAME = 'datetimepicker';
        var _dateNative = function () {
            var res = false, called = false;
            return function () {
                if (called)
                    return res;
                called = true;
                if (_device.phone || _device.tablet) {
                    var elem = document.createElement('input');
                    elem.setAttribute('type', 'date');
                    res = (elem.type === 'date');
                    return res;
                }
                else
                    return false;
            };
        }, _align2Css = function (align) {
            if (align === 'center')
                return 'align-center';
            else if (align === 'right')
                return 'align-end';
            return '';
        }, _numberNative = function () {
            var res = false, called = false;
            return function () {
                if (called)
                    return res;
                called = true;
                if (_device.phone || _device.tablet) {
                    var elem = document.createElement('input');
                    elem.setAttribute('type', 'number');
                    res = (elem.type === 'number');
                    return res;
                }
                else
                    return false;
            };
        }, _transform = function (value, displayValue, transform, item) {
            var func = _customData.get("ui.html." + transform);
            if (func)
                return { value: func(value, displayValue, item), html: true };
            return { value: displayValue, html: false };
        }, _mapIcon = function (options, value, textValue) {
            var skey = value + '';
            var iconName = options.avanced.icons[value] || 'none';
            var iconClass = options.avanced.iconClass || null;
            var align = _align2Css(options.avanced.alignIcon || 'center');
            var css = [];
            if (iconName)
                css.push(iconClass ? _dom.customIconClass(iconName, iconClass) : _dom.iconClass(iconName));
            var cc = options.tableOptions && options.tableOptions.small ? 'small-table' : '';
            var dcss = ['bs-image-cell', align];
            if (options.avanced._expandItem) {
                dcss.push('bs-expand-parent');
                css.push('bs-expand-child');
            }
            if (cc)
                dcss.push(cc);
            var html = ['<div class="' + dcss.join(' ') + '"'];
            if (options.avanced._clickable)
                html.push(' data-clickable="true"');
            if (options.avanced._expandItem) {
                if (options.level)
                    html.push(' style="margin-left:' + (0.5 * options.level) + 'em;"');
                css.push('bs-expand-space');
                if (options.avanced._expandItemClass)
                    css.push(options.avanced._expandItemClass);
            }
            if (!options.display) {
                css.push('bs-image-size');
            }
            html.push('><span class="' + css.join(' ') + '"></span>');
            if (options.avanced._expandItem && options.display && options.display.value) {
                html.push('<span class="bs-expand-child">');
                html.push(' ');
                html.push(options.display.value);
                html.push('</span>');
            }
            html.push('</div>');
            return { value: html.join(''), html: true };
        }, _afutils = {
            useDatePicker: function () { return $.fn[DATE_PICKER_NAME] != null; },
            useDateTimePicker: function () { return $.fn[DATETIME_PICKER_NAME] != null; },
            addErrorDiv: function (html, noMargin) {
                if (Phoenix.bootstrap4)
                    html.push('<div class="invalid-feedback bs-none' + (noMargin ? ' no-y-margin' : '') + '" id="{0}_errors"></div>');
                else {
                    html.push('<div class="small text-danger bs-none" id="{0}_errors"></div>');
                }
            },
            keyPressPassword: function (event, input, options) {
                var code = event.which;
                if (code === _dom.keys.VK_SPACE) {
                    event.preventDefault();
                    return false;
                }
                return true;
            },
            keyPressDate: function (event, input, options) {
                return true;
            },
            keyPressCode: function (event, input, options) {
                var code = event.keyCode;
                if (code === _dom.keys.VK_SPACE) {
                    event.preventDefault();
                    return false;
                }
                return true;
            },
            keyPressNumber: function (event, input, options) {
                var validChars = "-0123456789,." + options.decimalSep;
                var code = event.keyCode;
                if (!event.metaKey && _dom.ignoreKeys.indexOf(code) < 0) {
                    var char = String.fromCharCode(code);
                    if (validChars.indexOf(char) < 0) {
                        event.preventDefault();
                        return false;
                    }
                }
                return true;
            },
            doPasteDate: function (event, input, options) {
                return true;
            },
            doPasteCode: function (event, input, options) {
                return true;
            },
            doPasteNumber: function (event, input, options) {
                return true;
            },
            doPastePassword: function (event, input, options) {
                return true;
            },
            keyDownDate: function (event, input, options) {
                return true;
            },
            keyDownCode: function (event, input, options) {
                return true;
            },
            keyDownNumber: function (event, input, options) {
                return true;
            },
            keyDownPassword: function (event, input, options) {
                return true;
            },
            addContainerId: function (html, authoring) {
                if (authoring)
                    html.push(' draggable="true"');
                html.push(' data-render="{0}"');
                html.push(' id="{0}"');
            },
            containerBaseClass: function (groupClass, authoring, options) {
                var css = [groupClass, options.groupFieldClass || "bs-field-group", "bs-island"];
                if (options.noVerticalMargins && !authoring)
                    css.pop();
                if (options.inline)
                    css.push(options.inlineFieldClass || "bs-field-inline");
                if (authoring)
                    css.push(' design');
                return css.join(' ');
            },
            align2Css: _align2Css,
            fieldWrapper: function (html, options, authoring, after, customizer) {
                var _bootstrap4 = Phoenix.bootstrap4;
                if (options.inline)
                    options.columns = false;
                var groupClass = customizer && customizer.formGroup ? customizer.formGroup : "form-group";
                var css = [_afutils.containerBaseClass(groupClass, authoring, options)];
                var tag = customizer && customizer.tag ? customizer.tag : "div";
                html.push('<' + tag + ' class="');
                if (options.size)
                    css.push((_bootstrap4 ? 'form-control' : 'form-group-') + options.size);
                if (options.columns) {
                    if (!_bootstrap4)
                        css.push('form-horizontal');
                    css.push('row');
                }
                if (options.styles)
                    css.push(options.styles);
                if (options.right)
                    css.push(' float-right');
                html.push(css.join(' '));
                html.push('"');
                _afutils.addContainerId(html, authoring);
                html.push('>');
                after();
                html.push('</' + tag + '>');
            },
            fillSelect: function (enums, input, schema) {
                if (input) {
                    var enumNames = schema.enumNames || schema.enum;
                    var oenums = schema.enum;
                    _dom.empty(input);
                    var frag = document.createDocumentFragment();
                    enums.forEach(function (en) {
                        var i = oenums.indexOf(en);
                        var et = enumNames[i] || (en + '');
                        var o = document.createElement('option');
                        _dom.attr(o, "value", en);
                        o.textContent = et;
                        _dom.append(frag, o);
                    });
                    _dom.append(input, frag);
                }
            },
            datePickerSetValue: function ($element, value) {
                $element[DATE_PICKER_NAME]('update', _ulocale.parseISODate(value || '') || '');
            },
            datePickerInitialize: function ($element, opts, onHide) {
                _dom.addClass($element.get(0), 'date');
                var o = $.extend({ zIndexOffset: 1000, language: _ulocale.currentLang, autoclose: true }, opts || {});
                $element[DATE_PICKER_NAME](o);
                if (onHide)
                    $element[DATE_PICKER_NAME]().on('hide', onHide);
            },
            datePickerDestroy: function ($element) {
                if ($element.data[DATE_PICKER_NAME]) {
                    _dom.removeClass($element.get(0), 'date');
                    $element[DATE_PICKER_NAME]('destroy');
                }
            },
            //date time 
            dateTimePickerSetValue: function ($element, value) {
                $element[DATETIME_PICKER_NAME]('date', _ulocale.parseISODate(value || '') || '');
            },
            dateTimePickerInitialize: function ($element, opts, onHide) {
                _dom.addClass($element.get(0), 'date');
                var dopts = {
                    icons: {
                        time: _dom.iconClass('clock-o'),
                        date: _dom.iconClass('calendar'),
                        up: _dom.iconClass('arrow-up'),
                        down: _dom.iconClass('arrow-down'),
                        previous: _dom.iconClass('arrow-left'),
                        next: _dom.iconClass('arrow-right'),
                        today: _dom.iconClass('exclamation-circle'),
                        clear: _dom.iconClass('trash'),
                        close: _dom.iconClass('times')
                    },
                    locale: _ulocale.currentLang,
                    showClose: true
                };
                var o = $.extend(dopts, opts || {});
                $element[DATETIME_PICKER_NAME](o);
                if (onHide)
                    $element[DATETIME_PICKER_NAME]().on('hide', onHide);
            },
            dateTimePickerDestroy: function ($element) {
                if ($element.data[DATETIME_PICKER_NAME]) {
                    _dom.removeClass($element.get(0), 'date');
                    $element[DATETIME_PICKER_NAME]('destroy');
                }
            },
            text2value: function (textValue, schema, state) {
                var that = this;
                if (_sutils.isDate(schema)) {
                    var pdate = _ulocale.tryParseDate(textValue);
                    return _ulocale.localeDate2ISO(pdate);
                }
                else if (_sutils.isDateTime(schema)) {
                    var pdate = _ulocale.tryParseDateTime(textValue);
                    return _ulocale.localeDateTime2ISO(pdate);
                }
                else if (_sutils.isNumber(schema)) {
                    return _sutils.text2Value(textValue + '', schema, state);
                }
                return textValue;
            },
            defaultOptions: { titleIsHidden: false, placeHolder: false, labelCol: 3 },
            displayValue: function (value, schema, locale, options, item, fieldName) {
                var res;
                options = options || {};
                if (_utils.isNullOrUndefined(value)) {
                    res = { value: '', html: false };
                    return res;
                }
                if (options.isTotal && (_sutils.isFwField(fieldName) || schema.enum)) {
                    res = { value: '', html: false };
                    return res;
                }
                if (schema.enum) {
                    var si = schema.enum.indexOf(value);
                    var dv = si >= 0 ? (schema.enumNames ? _ulocale.tt(schema.enumNames[si], locale) : value) : '';
                    if (options.avanced && options.avanced.transform) {
                        res = _transform(value, dv, options.avanced.transform, item);
                    }
                    else if (options.avanced && options.avanced.icons)
                        res = _mapIcon(options, value, dv);
                    else
                        res = { value: dv, html: false };
                }
                else {
                    switch (schema.type) {
                        case 'string':
                            if (schema.format) {
                                switch (schema.format) {
                                    case 'date':
                                        var dv = _ulocale.shortDate(value || '');
                                        if (options.avanced && options.avanced.transform)
                                            res = _transform(value, dv, options.avanced.transform, item);
                                        else
                                            res = { value: dv, html: false };
                                        break;
                                    case 'date-time':
                                        var tv = _ulocale.shortDateTime(value || '');
                                        if (options.avanced && options.avanced.transform)
                                            res = _transform(value, tv, options.avanced.transform, item);
                                        else
                                            res = { value: tv, html: false };
                                        break;
                                }
                            }
                            if (!res) {
                                if (options.avanced && options.avanced.transform)
                                    res = _transform(value, value, options.avanced.transform, item);
                                else if (options.avanced && options.avanced.icons)
                                    res = _mapIcon(options, value, value);
                                else if (value && options.avanced && options.avanced.multiline) {
                                    res = { value: '<span>' + value.split('\n').map(function (item) { return _utils.escapeHtml(item); }).join('<br/>') + '</span>', html: true };
                                }
                                else
                                    res = { value: value, html: false };
                            }
                            break;
                        case 'number':
                            var ndv = void 0;
                            if (options.state)
                                ndv = _ulocale.decimal(value || 0, options.state.decimals || 0, (options.useSymbol ? (options.state.symbol || '') : ''));
                            else
                                ndv = (schema.format === 'money') ? _ulocale.money(value || 0, options.useSymbol) : _ulocale.decimal(value || 0, schema.decimals || 0, (options.useSymbol ? schema.symbol : ''));
                            if (options.avanced && options.avanced.transform)
                                res = _transform(value, ndv, options.avanced.transform, item);
                            else if (options.avanced && options.avanced.icons)
                                res = _mapIcon(options, value, value);
                            else
                                res = { value: ndv, html: false };
                            break;
                        case 'integer':
                            var idv = _ulocale.integer(value);
                            if (options.avanced && options.avanced.transform)
                                res = _transform(value, idv, options.avanced.transform, item);
                            else if (options.avanced && options.avanced.icons)
                                res = _mapIcon(options, value, value);
                            else
                                res = { value: idv, html: false };
                            break;
                        case 'boolean':
                            if (options.isTotal) {
                                res = { value: '', html: false };
                                return res;
                            }
                            if (options.avanced && options.avanced.transform) {
                                res = _transform(value, value ? _locale.ui.Yes : _locale.ui.No, options.avanced.transform, item);
                            }
                            else if (options.html) {
                                var html = [];
                                if ((options.avanced && options.avanced.editable) || options.editable || options.check || (options.avanced && options.avanced.icons)) {
                                    var ces = 'bs-bool-edit';
                                    var cc = options.tableOptions && options.tableOptions.small ? ' small-table' : '';
                                    var map = options.avanced ? options.avanced.icons : null;
                                    if (!map)
                                        map = {
                                            'true': 'check-square-o',
                                            'false': 'square-o'
                                        };
                                    var iconName = map[!!value + ''];
                                    var css = [ces, 'bs-image-size'];
                                    if (iconName)
                                        css.push(_dom.iconClass(iconName));
                                    html.push('<center class="bs-image-cell' + cc + '"><span data-clickable="true" class="' + css.join(' ') + '"></span>&nbsp;</center>');
                                    res = { value: html.join(''), html: true };
                                }
                                else {
                                    res = { value: value ? _locale.ui.Yes : _locale.ui.No, html: false };
                                }
                            }
                            else
                                res = { value: value ? _locale.ui.Yes : _locale.ui.No, html: false };
                            break;
                    }
                }
                if (!res)
                    res = { value: value, html: false };
                if (options.html && options.avanced && options.avanced.$link) {
                    var chtml = ['<a href="#" class="bs-cursor-p" data-phoenix-href="link://$link">'];
                    chtml.push(res.value);
                    chtml.push('</a>');
                    res.value = chtml.join('');
                    res.html = true;
                }
                return res;
            },
            addTooltipAndRule: function (html, options) {
                if (options.description) {
                    html.push('<span id="{0}_tooltip" data-toggle="tooltip" data-phoenix-tooltip="true" data-placement="auto" title="' + options.description + '" class="' + _dom.iconClass("question-circle") + ' bs-tooltip-icon');
                    html.push('"></span>');
                }
                if (options.rules) {
                    html.push('<span id="{0}_rules"  class="' + _dom.iconClass('bolt') + ' bs-rules');
                    html.push('"></span>');
                }
            }
        };
        if (_afutils.useDatePicker()) {
            var tdp = function (lang) {
                var dtJquery = $.fn[DATE_PICKER_NAME];
                if (Phoenix.bootstrap4) {
                    dtJquery.DPGlobal.template = dtJquery.DPGlobal.template.replace(/\"table-condensed\"/g, '"table-sm"');
                }
                dtJquery.dates[lang] = {
                    days: _locale.date.weekdays,
                    daysShort: _locale.date.weekdaysShort,
                    daysMin: _locale.date.weekdaysMin,
                    months: _locale.date.months,
                    monthsShort: _locale.date.monthsShort,
                    today: _locale.date.today,
                    clear: _locale.date.clear,
                    format: _locale.date.dateShort.replace(/\//g, _locale.date.daySep),
                    titleFormat: 'MM yyyy',
                    weekStart: _locale.date.weekStart
                };
            };
            _dom.readyHandlers.push(function () {
                tdp(_ulocale.currentLang);
            });
            _ulocale.register(tdp);
        }
        if (_afutils.useDateTimePicker()) {
            var tdp = function (lang) {
                var moment = window['moment'];
                if (moment) {
                    moment.updateLocale(lang, {
                        months: _locale.date.months,
                        monthsShort: _locale.date.monthsShort,
                        weekdays: _locale.date.weekdays,
                        weekdaysShort: _locale.date.weekdaysShort,
                        weekdaysMin: _locale.date.weekdaysMin,
                        longDateFormat: {
                            LT: Phoenix.locale.date.shortTime.replace(/M/g, 'm').replace(/S/g, 's'),
                            L: _locale.date.dateShort.replace(/\//g, _locale.date.daySep).toUpperCase()
                        },
                        week: {
                            dow: _locale.date.weekStart
                        }
                    });
                }
            };
            _dom.readyHandlers.push(function () {
                tdp(_ulocale.currentLang);
            });
            _ulocale.register(tdp);
        }
        uiutils.utils = _afutils;
    })(uiutils = Phoenix.uiutils || (Phoenix.uiutils = {}));
})(Phoenix || (Phoenix = {}));
/// <reference path="../../../core/core-refs.ts" />
/// <reference path="../../../ui/layout.control.ts" />
/// <reference path="../schema.data.ts" />
/// <reference path="./uiutils.ts" />
/// <reference path="../form.control.ts" />
var Phoenix;
(function (Phoenix) {
    var _utils = Phoenix.utils, _uiutils = Phoenix.uiutils, _observable = Phoenix.Observable, _dom = Phoenix.dom, _external = Phoenix.external, _customData = Phoenix.customData, _sutils = _observable.SchemaUtils;
    var ui;
    (function (ui) {
        var _registerLinkControl = function (factory, widget) {
            widget = widget || 'button';
            _customData.register('ui-control-links-' + widget, factory);
        }, _getRegisteredLinkControl = function (widget) {
            widget = widget || 'button';
            return _customData.get('ui-control-links-' + widget);
        }, _registerControl = function (factory, type, isEnum, widget, options) {
            isEnum = isEnum || false;
            widget = widget || '';
            if (isEnum)
                type = '*';
            options = options || {};
            var lookup = options.lookup || false;
            var format = options.format || '';
            if (options.readOnly)
                _customData.register('ui-controls-readonly-' + widget + '-' + format, factory);
            else
                _customData.register('ui-controls-' + type + '-' + isEnum + '-' + lookup + '-' + widget + '-' + format, factory);
        }, _getRegisteredControl = function (type, isEnum, widget, format, options) {
            isEnum = isEnum || false;
            if (isEnum)
                type = '*';
            widget = widget || '';
            format = format || '';
            var lookup = options && options.lookup ? true : false;
            var readOnly = options && options.readOnly ? true : false;
            if (readOnly) {
                var factory = _customData.get('ui-controls-readonly-' + widget + '-' + format);
                if (!factory && format)
                    factory = _customData.get('ui-controls-readonly-' + widget + '-');
                return factory;
            }
            else {
                var factory = _customData.get('ui-controls-' + type + '-' + isEnum + '-' + lookup + '-' + widget + '-' + format);
                if (!factory && format)
                    factory = _customData.get('ui-controls-' + type + '-' + isEnum + '-' + lookup + '-' + widget + '-');
                return factory;
            }
        };
        var AbsField = /** @class */ (function () {
            function AbsField(fp, options, form) {
                var that = this;
                that._isBinded = true;
                that.config = fp;
                that.form = form;
                that.options = options || {};
                fp.options = fp.options || {};
                that.parent = that.form.getLayoutById(fp.$parentId);
                that.$bind = fp.$bind;
                if (that.$bind === '$none') {
                    that._isBinded = false;
                    that._internalValue = fp.options.value;
                    that._internalState = fp.options.state || {};
                }
                if (fp.$name)
                    that.name = fp.$name;
                that.$display = that.config.$display || that.$bind;
                if (fp.$lookup) {
                    that.useDisplay = (that.$display !== that.$bind);
                    that.$lookup = that.form.getLookupForSchema(that.$bind, fp.$lookup);
                }
                var isMeta = _sutils.isMeta(that.$bind);
                if (isMeta)
                    that.$bind = that.getCustomBind();
                if (that._isBinded && that.$bind) {
                    form.registerListenerFor(that.$bind, that);
                }
                if (that._isBinded && that.useDisplay) {
                    form.registerListenerFor(that.$display, that);
                }
                that._defineProps();
                that.fieldOptions = fp.options || {};
                that.renderOptions = that.fieldOptions;
                that.$schema = that._isBinded && that.$bind ? form.getSchema(that.$bind) : {};
                if (that.$schema && that.$schema.type === 'array') {
                    that.$schemaItems = _sutils.expand$Ref(that.$schema.items, that.form.$rootSchema);
                }
                that.id = fp.$id;
                that.title = that.fieldOptions.title ? that.fieldOptions.title : (that.$schema ? that.$schema.title : that.$bind);
            }
            AbsField.prototype.hide = function (value) {
                var that = this;
                if (!that._isBinded)
                    return;
                that._internalState.isHidden = true;
                if (that.stateChanged)
                    that.stateChanged('isHidden', {});
            };
            AbsField.prototype.setInternalValue = function (value, notify) {
                var that = this;
                if (that._isBinded)
                    return;
                if (that._internalValue !== value) {
                    var ov = that._internalValue;
                    that._internalValue = value;
                    if (that.changed)
                        that.changed('', ov, value, 'propchange');
                    if (that.fieldOptions.onChange)
                        that.fieldOptions.onChange();
                }
            };
            AbsField.prototype.getInternalValue = function () {
                return this._internalValue;
            };
            AbsField.prototype.getSettingsName = function (controlName) {
                var that = this;
                var a = [that.$bind, controlName];
                if (that.name)
                    a.push(that.name);
                return a.join('_');
            };
            AbsField.prototype.targetInControl = function (target) {
                var that = this;
                if (that.$element) {
                    var e = that.$element.get(0);
                    return _dom.isChildOf(e, target);
                }
                return false;
            };
            AbsField.prototype.focusInControl = function (activeFocusElement) {
                var that = this;
                if (that.$element) {
                    var e = that.$element.get(0);
                    return _dom.isChildOf(e, activeFocusElement);
                }
                return false;
            };
            AbsField.prototype.setParentId = function (id) { };
            AbsField.prototype.isMeta = function () { return false; };
            AbsField.prototype.beforeSaveSettings = function () { return false; };
            AbsField.prototype.savePreferences = function (after) {
                var that = this;
                if (!that._isBinded)
                    return;
                if (!that.form.supportSettings())
                    return after();
                if (that.beforeSaveSettings())
                    that.form.savePrefs(after);
            };
            AbsField.prototype.getCustomBind = function () {
                return '';
            };
            AbsField.prototype.getBind = function () {
                var that = this, res = [];
                if (that.$bind)
                    res.push(that.$bind);
                return res;
            };
            AbsField.prototype.setHidden = function (element) {
                if (!element)
                    return;
                if (this.state.isHidden)
                    _dom.addClass(element, 'bs-none');
                else
                    _dom.removeClass(element, 'bs-none');
            };
            AbsField.prototype._state = function () {
                var that = this;
                that.state = that.state || {};
                var state;
                if (that._isBinded) {
                    state = that.form.getState(that.$bind);
                    that.state.value = that.form.getValue(that.$bind);
                }
                else {
                    state = that._internalState;
                    that.state.value = that._internalValue;
                }
                Object.keys(state).forEach(function (pn) { that.state[pn] = state[pn]; });
            };
            AbsField.prototype._defineProps = function () { };
            AbsField.prototype.render = function ($parent) { };
            AbsField.prototype.appendElement = function ($parent, options) {
                var that = this;
                if ($parent) {
                    if (that.options.replaceParent)
                        $parent.replaceWith(that.$element);
                    else
                        $parent.append(that.$element);
                }
            };
            AbsField.prototype.setEvents = function (opts) { };
            AbsField.prototype.removeEvents = function () { };
            AbsField.prototype.customOptions = function (opts) {
                var that = this;
                if (that._isBinded && _utils.showRules()) {
                    var rs_2 = that.form.$rootSchema;
                    var bs_1 = that.form.$schema;
                    var binds = that.getBind();
                    binds.forEach(function (bind) {
                        var ss = _sutils.getSchema(_sutils.parentPath(bind), bs_1, rs_2, true);
                        var rpn = _sutils.lastSegment(bind, null);
                        if (ss && ss.name) {
                            if (bs_1.rules && bs_1.rules.validation && bs_1.rules.validation[ss.name] && bs_1.rules.validation[ss.name][rpn]) {
                                opts.rules = true;
                            }
                            else if (bs_1.rules && bs_1.rules.propagation && bs_1.rules.propagation[ss.name] && bs_1.rules.propagation[ss.name][rpn]) {
                                opts.rules = true;
                            }
                        }
                    });
                }
            };
            AbsField.prototype.showRules = function () {
                var that = this;
                if (!that._isBinded)
                    return;
                var rs = that.form.$rootSchema, rules = [];
                var bs = that.form.$schema;
                var binds = that.getBind();
                binds.forEach(function (bind) {
                    var ss = _sutils.getSchema(_sutils.parentPath(bind), bs, rs, true);
                    var rpn = _sutils.lastSegment(bind, null);
                    if (ss && ss.name) {
                        if (bs.rules && bs.rules.validation && bs.rules.validation[ss.name] && bs.rules.validation[ss.name][rpn]) {
                            rules.push(bs.rulesMap[bs.rules.validation[ss.name][rpn]]);
                        }
                        if (bs.rules && bs.rules.propagation && bs.rules.propagation[ss.name] && bs.rules.propagation[ss.name][rpn]) {
                            rules.push(bs.rulesMap[bs.rules.propagation[ss.name][rpn]]);
                        }
                    }
                });
                if (_external.ruleViewer)
                    _external.ruleViewer(rules);
            };
            AbsField.prototype._initOptions = function (defOpts) {
                var that = this;
                var popts = {};
                // init default options from parent layout ($fieldsOptions)
                if (that.parent && that.parent.$fieldsOptions) {
                    if (that.parent.$fieldsOptions.columns) {
                        if (popts.columns === undefined) {
                            popts.columns = that.parent.$fieldsOptions.columns;
                        }
                        if (popts.labelCol === undefined && that.parent.$fieldsOptions.labelCol) {
                            popts.labelCol = that.parent.$fieldsOptions.labelCol;
                        }
                    }
                    if (that.parent.$fieldsOptions.titleIsHidden) {
                        if (popts.titleIsHidden === undefined)
                            popts.titleIsHidden = true;
                    }
                }
                var opts = $.extend({}, defOpts, popts, that.fieldOptions);
                if (that.parent && that.parent.$inline)
                    opts.inline = true;
                that.customOptions(opts);
                that.renderOptions = opts;
                return opts;
            };
            AbsField.prototype.destroy = function () {
                var that = this;
                if (that.focusTimer) {
                    window.clearTimeout(that.focusTimer);
                    that.focusTimer = 0;
                }
                if (that.$element) {
                    that.removeEvents();
                    that.$element = null;
                }
                that.destroyed = true;
                that.$schema = null;
                that.parent = null;
                if (that._isBinded) {
                    if (that.$bind)
                        that.form.unRegisterListenerFor(that.$bind, that);
                    if (that.useDisplay)
                        that.form.unRegisterListenerFor(that.$display, that);
                }
            };
            AbsField.prototype.showErrors = function (element, errors) {
                var that = this;
                var hasErrors = errors && errors.length;
                var e = _dom.find(element, that.id + '_errors');
                if (e) {
                    if (hasErrors) {
                        var cerror = errors[0].message;
                        if (that.renderOptions.inline && Phoenix.bootstrap4)
                            cerror = '  (' + cerror + ')';
                        _dom.text(e, cerror);
                        _dom.removeClass(e, 'bs-none');
                    }
                    else {
                        _dom.addClass(e, 'bs-none');
                    }
                }
            };
            return AbsField;
        }());
        ui.AbsField = AbsField;
        ;
        ui.registerControl = _registerControl;
        ui.getRegisteredControl = _getRegisteredControl;
        ui.registerLinkControl = _registerLinkControl;
        ui.getRegisteredLinkControl = _getRegisteredLinkControl;
        ui.filterManagerFactory = null;
    })(ui = Phoenix.ui || (Phoenix.ui = {}));
})(Phoenix || (Phoenix = {}));
/// <reference path="../../../core/core-refs.ts" />
/// <reference path="./absfield.control.ts" />
var Phoenix;
(function (Phoenix) {
    var _p = Phoenix, _utils = _p.utils, _dom = _p.dom, _ui = _p.ui, _uiutils = _p.uiutils;
    var alertctrl;
    (function (alertctrl) {
        function _createAlert(id, options, authoring) {
            options = $.extend({ columns: false }, options);
            options.columns = false;
            var html = [];
            _uiutils.utils.fieldWrapper(html, options, authoring, function () {
                html.push('<div id="{0}_alert" class="alert alert-' + (options.type || 'danger') + '" role="alert">');
                html.push('</div>');
            });
            return _utils.format(html.join(''), id);
        }
        ;
        var Alert = /** @class */ (function (_super) {
            __extends(Alert, _super);
            function Alert(fp, options, form) {
                var _this = _super.call(this, fp, options, form) || this;
                _this._state();
                return _this;
            }
            Alert.prototype._setDisabled = function (input, element) {
                var that = this;
                /* not supported */
            };
            Alert.prototype._setReadOnly = function (input, element) {
                /* nothing todo */
            };
            Alert.prototype._setMandatory = function (input, element) {
                /* not supported */
            };
            Alert.prototype._label = function () {
                var that = this;
                return that.$element ? _dom.find(that.$element.get(0), that.id + '_alert') : null;
            };
            Alert.prototype._state2UI = function () {
                var that = this, label = that._label(), element = that.$element ? that.$element.get(0) : null;
                if (label) {
                    _dom.text(label, that.state.value || '');
                    that._setDisabled(label, element);
                    that._setReadOnly(label, element);
                    that.setHidden(element);
                    that._setMandatory(label, element);
                }
            };
            Alert.prototype.changed = function (propName, ov, nv, op) {
                var that = this, label = that._label();
                if (that.state.value != nv) {
                    that.state.value = nv;
                    if (label)
                        _dom.text(label, that.state.value || '');
                }
            };
            Alert.prototype.stateChanged = function (propName, params) {
                var that = this, state = that.form.getState(that.$bind), label = that._label(), element = that.$element ? that.$element.get(0) : null;
                if (state.isHidden !== that.state.isHidden) {
                    that.state.isHidden = state.isHidden;
                    if (label)
                        that.setHidden(element);
                }
                if (state.isDisabled !== that.state.isDisabled) {
                    that.state.isDisabled = state.isDisabled;
                    if (label)
                        that._setDisabled(label, element);
                }
                if (state.isReadOnly !== that.state.isReadOnly) {
                    that.state.isReadOnly = state.isReadOnly;
                    if (label)
                        that._setReadOnly(label, element);
                }
                if (state.isMandatory !== that.state.isMandatory) {
                    that.state.isMandatory = state.isMandatory;
                    if (label)
                        that._setMandatory(label, element);
                }
            };
            Alert.prototype.render = function ($parent) {
                var that = this;
                var opts = that._initOptions(_uiutils.utils.defaultOptions);
                if (!that.$element) {
                    that.$element = $(_createAlert(that.id, opts, that.options.design));
                    that._state2UI();
                }
                that.appendElement($parent, opts);
                return that.$element;
            };
            return Alert;
        }(Phoenix.ui.AbsField));
        alertctrl.Alert = Alert;
        _ui.registerControl(Alert, "string", false, 'alert', null);
    })(alertctrl || (alertctrl = {}));
})(Phoenix || (Phoenix = {}));
/// <reference path="../../../core/core-refs.ts" />
/// <reference path="./absfield.control.ts" />
var Phoenix;
(function (Phoenix) {
    var _utils = Phoenix.utils, _dom = Phoenix.dom, _ui = Phoenix.ui, _uiutils = Phoenix.uiutils;
    var formcomplex;
    (function (formcomplex) {
        function _createContainer(id, options, authoring) {
            options = $.extend({ titleIsHidden: false, placeHolder: false, columns: false }, options);
            var html = [];
            if (authoring) {
                _uiutils.utils.fieldWrapper(html, options, authoring, function () { });
            }
            else {
                var css = [];
                if (options.style)
                    _dom.parseStyle(options.style, css);
                html.push('<div');
                if (css.length)
                    html.push(' class= "' + css.join(' ') + '"');
                _uiutils.utils.addContainerId(html, authoring);
                html.push('/></div>');
            }
            return _utils.format(html.join(''), id);
        }
        var ComplexBase = /** @class */ (function (_super) {
            __extends(ComplexBase, _super);
            function ComplexBase(fp, options, form) {
                var _this = _super.call(this, fp, options, form) || this;
                _this._state();
                return _this;
            }
            ComplexBase.prototype.click = function (event) {
                var that = this;
            };
            ComplexBase.prototype._setDisabled = function (element) { };
            ComplexBase.prototype._setReadOnly = function (element) { };
            ComplexBase.prototype._setMandatory = function (element) { };
            ComplexBase.prototype._state2UI = function () {
                var that = this, element = that.$element ? that.$element.get(0) : null;
                if (element) {
                    that.renderContent(element);
                }
            };
            ComplexBase.prototype.renderContent = function (parent) {
                var that = this, s = '';
                if (that.state.value != undefined) {
                    s = JSON.stringify(that.state.value.model(true), null, 2);
                }
                _dom.append(parent, $('<pre>' + s + '</pre>').get(0));
            };
            ComplexBase.prototype.changed = function (propName, ov, nv, op) {
                var that = this;
                that.state.value = that.form.getValue(that.$bind);
                that._state2UI();
            };
            ComplexBase.prototype.stateChanged = function (propName, params) {
                var that = this, state = that.form.getState(that.$bind), element = that.$element ? that.$element.get(0) : null;
                if (state.isHidden !== that.state.isHidden) {
                    that.state.isHidden = state.isHidden;
                    that.setHidden(element);
                }
                if (state.isDisabled !== that.state.isDisabled) {
                    that.state.isDisabled = state.isDisabled;
                    that._setDisabled(element);
                }
                if (state.isReadOnly !== that.state.isReadOnly) {
                    that.state.isReadOnly = state.isReadOnly;
                    that._setReadOnly(element);
                }
                if (state.isMandatory !== that.state.isMandatory) {
                    that.state.isMandatory = state.isMandatory;
                    that._setMandatory(element);
                }
            };
            ComplexBase.prototype.render = function ($parent) {
                var that = this;
                var opts = that._initOptions(_uiutils.utils.defaultOptions);
                if (!that.$element) {
                    that.$element = $(_createContainer(that.id, opts, that.options.design));
                    that._state2UI();
                    that.setEvents(opts);
                }
                that.appendElement($parent, opts);
                return that.$element;
            };
            return ComplexBase;
        }(Phoenix.ui.AbsField));
        formcomplex.ComplexBase = ComplexBase;
        _ui.registerControl(ComplexBase, 'object', false, 'objectjson', null);
        _ui.registerControl(ComplexBase, 'array', false, 'objectjson', null);
    })(formcomplex = Phoenix.formcomplex || (Phoenix.formcomplex = {}));
})(Phoenix || (Phoenix = {}));
/// <reference path="../../../core/core-refs.ts" />
/// <reference path="./complex.control.ts" />
var Phoenix;
(function (Phoenix) {
    var formarray;
    (function (formarray) {
        var _p = Phoenix, _customData = _p.customData, _formcomplex = _p.formcomplex, _ui = _p.ui, _utils = _p.utils, _dom = _p.dom, _link = _p.link;
        var GRID_COLUMNS = 4;
        var ArrayControl = /** @class */ (function (_super) {
            __extends(ArrayControl, _super);
            function ArrayControl() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            ArrayControl.prototype.customOptions = function (options) {
                var that = this;
                _super.prototype.customOptions.call(this, options);
                if (!options.item || !options.item.render)
                    throw 'Item render is null. Use options: { item : {render: "my_item_render"}} ';
                that._render = _customData.get(options.item.render);
                if (!that._render) {
                    throw 'Item render isn\'t registered. Use customData.register("' + options.item.render + '", controller);';
                }
            };
            ArrayControl.prototype._renderContentElement = function (item, index, itemAfter) {
                if (itemAfter === void 0) { itemAfter = false; }
                var self = this;
                var itemParent;
                var itemCss = [];
                if (self._layout === 'scroll')
                    itemCss.push(self._id + '_inScroll');
                if (self._layout === 'grid' || self._layout === 'column') {
                    var ci = index % self._columns;
                    if ((ci === 0 && self._layout === 'grid') || (index === 0 && self._layout === 'column')) {
                        self._row = $('<div class="row"></div>').get(0);
                        var bootstrapCol = Math.floor(12 / self._columns);
                        for (var i = 0; i < self._columns; i++)
                            _dom.append(self._row, $('<div class="col-sm-' + bootstrapCol + '"></div>').get(0));
                        _dom.append(self._cp, self._row);
                    }
                    itemParent = self._row.childNodes[ci];
                }
                else {
                    itemParent = self._cp;
                    itemCss.push('bs-inline-block bs-va-top');
                }
                if (self.renderOptions.item.style) {
                    _dom.parseStyle(self.renderOptions.item.style, itemCss);
                }
                var itemContainer = $('<div class="' + itemCss.join(' ') + '"></div>').get(0);
                if (itemAfter)
                    self._parentItemAddedInDom = itemContainer;
                else {
                    if (!item && self._render.lastRender)
                        self._render.lastRender(itemContainer, item, self._id, index);
                    else
                        self._render.render(itemContainer, item, self._map, self.state.value.get(index), index);
                }
                _dom.append(itemParent, itemContainer);
            };
            ArrayControl.prototype.beforeRenderContent = function () {
                var self = this;
                self._render && self._render.beforeRenderContent && self._render.beforeRenderContent(self);
            };
            // Create content
            ArrayControl.prototype.renderContent = function (parent) {
                var that = this, columns = 0, scrollLeft = null, scrollRight = null;
                _dom.empty(parent);
                that._parent = parent;
                that._id = _utils.allocID();
                that._map = {};
                that._layout = 'inline';
                if (that.renderOptions && that.renderOptions.layout)
                    that._layout = that.renderOptions.layout.type;
                that._cp = document.createDocumentFragment();
                if (that._layout === 'grid' || that._layout === 'column')
                    that._columns = Math.max(Math.min(that.renderOptions.layout.columns || GRID_COLUMNS, 12), 1);
                var m = that.state.value.model(true);
                that._localModel = m;
                that.beforeRenderContent();
                m && m.forEach(function (item, index) {
                    that._renderContentElement(item, index);
                });
                if (that._render.lastRender)
                    that._renderContentElement(null, m && m.length);
                that._renderContentElement(null, m && m.length + 1, true);
                if ((that._layout === 'grid' || that._layout === 'column') && !_dom.hasClass(parent, 'container-fluid'))
                    _dom.addClass(parent, 'container-fluid');
                if (that._layout === 'scroll') {
                    var scrollContainer = $(_utils.format('<div id="{0}_overflow" class="array-control-overflow">', that._id)).get(0);
                    _dom.append(scrollContainer, $(_utils.format('<div id="{0}_left" class="{0}_move array-control-move array-control-goLeft"><span class="{1}"></span></div>', that._id, _dom.iconClass('chevron-left'))).get(0));
                    _dom.append(scrollContainer, $(_utils.format('<div id="{0}_right" class="{0}_move array-control-move array-control-goRight"><span class="{1}"></span></div>', that._id, _dom.iconClass('chevron-right'))).get(0));
                    var container = $(_utils.format('<div id="{0}_container"></div>', that._id)).get(0);
                    _dom.append(scrollContainer, container);
                    _dom.append(container, that._cp);
                    _dom.append(parent, scrollContainer);
                }
                else
                    _dom.append(parent, that._cp);
            };
            ArrayControl.prototype.destroy = function () {
                var that = this;
                that._map = null;
                that._render = null;
                _super.prototype.destroy.call(this);
            };
            ArrayControl.prototype.setEvents = function (opts) {
                var that = this;
                if (that._render.setEvents)
                    that._render.setEvents(opts);
            };
            ArrayControl.prototype.removeEvents = function () {
                var that = this;
                if (that._render.removeEvents)
                    that._render.removeEvents();
            };
            ArrayControl.prototype.click = function (event) {
                var that = this;
                if (that._render.click)
                    that._render.click(that.$element.get(0), event, that._map, that.state.value, that.form);
            };
            ArrayControl.prototype.afterAddedInDom = function () {
                var self = this;
                if (self._render.afterAddedInDomRender)
                    self._render.afterAddedInDomRender(self._parentItemAddedInDom, self._id);
            };
            ArrayControl.prototype.resize = function () {
                var self = this;
                var width = 0, height = 0, maxWidth = 0;
                if (self._layout === 'scroll') {
                    self._nOverflow = $(_utils.format('#{0}_overflow', self._id));
                    self._nCtrlLeft = $(_utils.format('#{0}_left', self._id));
                    self._nCtrlRight = $(_utils.format('#{0}_right', self._id));
                    self._nContainer = $(_utils.format('#{0}_container', self._id));
                    self._nInScroll = $(_utils.format('.{0}_inScroll', self._id));
                    self._nCtrls = $(_utils.format('.{0}_move', self._id));
                    self._nInScroll.each(function () {
                        width += $(this).outerWidth();
                        if ($(this).height() > height)
                            height = $(this).height();
                        if ($(this).outerWidth() > maxWidth)
                            maxWidth = $(this).outerWidth();
                    });
                    width = Math.round(width);
                    height = Math.round(height);
                    self._nContainer.css('width', width + "px");
                    self._nContainer.css('height', (height + 10) + "px");
                    var heightMoveCtrl = self._nCtrls.height();
                    self._nCtrls.css('padding-top', Math.round(height / 2 - heightMoveCtrl / 2));
                    self._nCtrls.css('padding-bottom', Math.round(height / 2 - heightMoveCtrl / 2));
                    var paddingBorder = 10;
                    var paddingCenter = 20;
                    self._nCtrlLeft.css('padding-left', paddingBorder);
                    self._nCtrlLeft.css('padding-right', paddingCenter);
                    self._nCtrlRight.css('padding-left', paddingCenter);
                    self._nCtrlRight.css('padding-right', paddingBorder);
                    self._nCtrlRight.css('left', Math.round(self._nOverflow.outerWidth() - (paddingCenter + paddingBorder + self._nCtrls.width() + 3)));
                    self._setMoveCtrls();
                    self._moveDelta = 0;
                    self._nCtrlLeft.mouseenter(function () {
                        self._moveDelta = -5;
                        self._activeMove();
                    });
                    self._nCtrlLeft.mouseleave(function () {
                        self._moveDelta = 0;
                    });
                    self._nCtrlRight.mouseenter(function () {
                        self._moveDelta = 5;
                        self._activeMove();
                    });
                    self._nCtrlRight.mouseleave(function () {
                        self._moveDelta = 0;
                    });
                }
                if (self._render.afterResize)
                    self._render.afterResize(self._id, self.state.value, self.form);
            };
            ArrayControl.prototype.changed = function (propName, ov, nv, op) {
                _super.prototype.changed.call(this, propName, ov, nv, op);
                var self = this;
                /*var m = self.state.value.model(true);
                if (m === self._localModel)
                    return;
                self._localModel = m;*/
                setTimeout(function () {
                    self.afterAddedInDom();
                    self.resize();
                }, 50);
            };
            ArrayControl.prototype._activeMove = function () {
                var self = this;
                if (self._moveDelta == 0)
                    self._moving = false;
                else if (!self._moving) {
                    setTimeout(function () { self._move(self); }, 10);
                    self._moving = true;
                }
            };
            ArrayControl.prototype._setMoveCtrls = function () {
                var self = this;
                var scroll = self._nOverflow.scrollLeft();
                self._nCtrlLeft.css('display', 'block');
                self._nCtrlRight.css('display', 'block');
                if (scroll == 0)
                    self._nCtrlLeft.css('display', 'none');
                if (scroll + self._nOverflow.outerWidth() + 1 > self._nContainer.outerWidth())
                    self._nCtrlRight.css('display', 'none');
            };
            ArrayControl.prototype._move = function (ctx) {
                var self = ctx;
                var scroll = self._nOverflow.scrollLeft();
                self._nOverflow.scrollLeft(scroll + self._moveDelta);
                self._moving = false;
                self._activeMove();
                self._setMoveCtrls();
            };
            return ArrayControl;
        }(Phoenix.formcomplex.ComplexBase));
        formarray.ArrayControl = ArrayControl;
        _ui.registerControl(ArrayControl, 'array', false, 'array-control', null);
    })(formarray = Phoenix.formarray || (Phoenix.formarray = {}));
})(Phoenix || (Phoenix = {}));
/// <reference path="../../../core/core-refs.ts" />
/// <reference path="./absfield.control.ts" />
/// <reference path="../schema.data.ts" />
/// <reference path="./uiutils.ts" />
/// <reference path="../../../core/modules/locale.ts" />
var Phoenix;
(function (Phoenix) {
    var gridrender;
    (function (gridrender) {
        var _utils = Phoenix.utils, _dom = Phoenix.dom, _ui = Phoenix.ui, _uiutils = Phoenix.uiutils, _ulocale = Phoenix.ulocale, _su = Phoenix.Observable.SchemaUtils;
        var _addDesign = function (id, options, authoring, html) {
            if (authoring)
                html.push(' draggable="true"');
            if (authoring)
                html.push(' data-render="{0}"');
        }, _addSortIndicator = function (th, asc) {
            var lc = _dom.icon(asc ? 'caret-up' : 'caret-down');
            _dom.addClass(lc, 'bs-basictable-sort');
            _dom.attr(lc, 'sort', 'true');
            _dom.append(th.firstElementChild, lc);
        }, _rmvSortIndicator = function (th) {
            var lc = (th.lastElementChild ? th.firstElementChild.lastElementChild : null);
            if (lc) {
                if (_dom.attr(lc, 'sort') === 'true') {
                    _dom.remove(lc);
                }
            }
        }, _getColumnsSizeParents = function (id, parent, options, isFrozen) {
            var res = [], el;
            if (options._useColGrp) {
                if (isFrozen) {
                    el = Phoenix.dom.find(parent, id + '_colgrp_frozen_header');
                    if (el)
                        res.push(el);
                    el = Phoenix.dom.find(parent, id + '_colgrp_frozen');
                    if (el)
                        res.push(el);
                    if (options.total && options.total.property) {
                        el = Phoenix.dom.find(parent, id + '_colgrp_frozen_footer');
                        if (el)
                            res.push(el);
                    }
                }
                else {
                    el = Phoenix.dom.find(parent, id + '_colgrp_header');
                    if (el)
                        res.push(el);
                    el = Phoenix.dom.find(parent, id + '_colgrp');
                    if (el)
                        res.push(el);
                    if (options.total && options.total.property) {
                        el = Phoenix.dom.find(parent, id + '_colgrp_footer');
                        if (el)
                            res.push(el);
                    }
                }
            }
            else {
                if (!options.headerIsHidden) {
                    if (isFrozen)
                        el = Phoenix.dom.find(parent, id + '_frozen_cols');
                    else
                        el = Phoenix.dom.find(parent, id + '_cols');
                    if (el)
                        res.push(el);
                }
            }
            return res;
        }, _setColumnWidth = function (colId, colsParents, width) {
            colsParents.forEach(function (parent) {
                for (var i = 0, len = parent.childNodes.length; i < len; i++) {
                    var col = parent.childNodes[i];
                    var c = _dom.attr(col, 'colid');
                    if (c === colId) {
                        col.style.width = width + 'px';
                        break;
                    }
                }
            });
        }, _updSorting = function (options, pc, colMap, orderby) {
            if (!options.sorting)
                return;
            if (pc && pc.childElementCount) {
                var aorderby = (orderby || '').split(' ');
                if (!aorderby.length)
                    aorderby = [''];
                for (var i = 0, len = pc.children.length; i < len; i++) {
                    var e = pc.children[i];
                    var cid = _dom.attr(e, 'colId');
                    var col = colMap(cid);
                    cid = col && col.options && col.options.display ? col.options.display : cid;
                    if (aorderby[0] === cid) {
                        _rmvSortIndicator(e);
                        _addSortIndicator(e, aorderby.length == 1);
                    }
                    else
                        _rmvSortIndicator(e);
                }
            }
        }, _isPixel = function (value) {
            if (typeof value === 'number')
                return true;
            if (typeof value === 'string') {
                var ps = parseInt(value, 10) + '';
                if (ps === value.trim())
                    return true;
                if ((ps + 'px') === value.trim())
                    return true;
            }
            return false;
        }, _ensureWidth = function (value) {
            if (typeof value === 'number')
                return value + 'px';
            if ((parseInt(value, 10) + '') === value.trim())
                return value.trim() + 'px';
            return value;
        }, _widthFromSchema = function (schema) {
            if (_su.isBoolean(schema))
                return 50;
            if (_su.isDate(schema))
                return 110;
            if (_su.isNumber(schema))
                return 110;
            return 150;
        }, _createDetail = function (id, childBefore) {
            var res = document.createElement('tr');
            res.className = 'bs-table-row-detail';
            res.id = id + '_detail';
            var td = document.createElement('td');
            td.colSpan = childBefore.childNodes.length;
            _dom.append(res, td);
            return res;
        }, _createColsWidth = function (columns, options, isFrozen) {
            var frag = document.createDocumentFragment();
            columns.forEach(function (col) {
                var cc = document.createElement('col');
                _dom.attr(cc, 'colid', col.$bind);
                if (col.options.width)
                    cc.style.width = _ensureWidth(col.options.width);
                if (col.options.minWidth)
                    cc.style.minWidth = _ensureWidth(col.options.minWidth);
                _dom.append(frag, cc);
            });
            return frag;
        }, _createCols = function (id, columns, options, authoring, locale, orderby, isFrozen) {
            var frag = document.createDocumentFragment();
            var aorderby = (orderby || '').split(' ');
            columns.forEach(function (col, colIndex) {
                var css;
                var th = document.createElement('th');
                _dom.attr(th, 'colId', col.$bind);
                _dom.attr(th, 'data-drag', 'move');
                if (!options._useColGrp) {
                    if (col.options.width)
                        th.style.width = _ensureWidth(col.options.width);
                    if (col.options.minWidth)
                        th.style.minWidth = _ensureWidth(col.options.minWidth);
                }
                if (css)
                    th.className = css.join(' ');
                var cth = document.createElement('div');
                var headerCss = ['bs-column-header'];
                if (options.header) {
                    if (options.header.align)
                        headerCss.push(options.header.align);
                    if (options.header.style)
                        headerCss.push(options.header.style);
                }
                cth.className = headerCss.join(' ');
                var p = cth;
                if (options.headerLines) {
                    console.log('headerLines is obsolete. use instead header.rows');
                    options.header = options.header = {};
                    options.header.rows = options.headerLines;
                }
                if (options.header && options.header.rows && options.header.rows > 1) {
                    var tt = document.createElement('div');
                    headerCss = ['bs-header-rows-parent row-' + options.header.rows];
                    tt.className = headerCss.join(' ');
                    p = document.createElement('div');
                    headerCss = ['bs-header-rows'];
                    p.className = headerCss.join(' ');
                    tt.appendChild(p);
                    cth.appendChild(tt);
                }
                if (options.selecting && options.selecting.multiselect && options.selecting.selectAll && _su.isSelectField(col.$bind)) {
                    var v = _uiutils.utils.displayValue(false, col.schema, locale, {
                        html: true, selectable: true, editable: true, isTotal: false, check: true,
                        avanced: col.options || {}, tableOptions: options, state: {}
                    }, null, col.$bind);
                    if (v.html) {
                        var $c = $(v.value);
                        _dom.append(p, $c.get(0));
                    }
                    else {
                        _dom.append(p, document.createTextNode(v.value));
                    }
                }
                else {
                    _dom.append(p, document.createTextNode(_ulocale.tt(((col.isLink && !col.options.titleIsHidden) ? '' : col.title) || String.fromCharCode(160), locale)));
                }
                if (options.allowColumnResize && _isPixel(col.options.width)) {
                    var re = document.createElement('div');
                    re.className = 'bs-col-resize';
                    _dom.attr(re, 'data-drag', 'resize');
                    _dom.attr(th, 'colId', col.$bind);
                    _dom.append(cth, re);
                }
                _dom.append(th, cth);
                if (options.sorting) {
                    var ss = col.options.display ? col.options.displaySchema : col.schema;
                    var fn = col.options.display ? col.options.display : col.$bind;
                    if (ss && _su.canSort(ss)) {
                        css = css || [];
                        css.push('bs-cursor-p');
                        if (aorderby && aorderby.length && aorderby[0] === fn) {
                            _addSortIndicator(th, orderby.length === 1);
                        }
                    }
                }
                if (css)
                    th.className = css.join(' ');
                _dom.append(frag, th);
            });
            return frag;
        }, _createGridRows = function (id, rows, values, columns, options, authoring, locale) {
            var frag = document.createDocumentFragment();
            rows && rows.forEach(function (row, rowIndex) {
                _dom.append(frag, _createGridRow(id, rowIndex, row, values, columns, options, authoring, locale));
            });
            return frag;
        }, 
        /*
        *  row: {name: fieldName, schema: {}}
        */
        _createGridRow = function (id, index, row, values, columns, options, authoring, locale) {
            var tr = document.createElement('tr');
            if (options.align === 'middle')
                _dom.addClass(tr, 'bs-va-middle');
            columns.forEach(function (col, colIndex) {
                var td = document.createElement('td');
                if (colIndex == 0) {
                    _dom.append(td, document.createTextNode(row.schema.title || String.fromCharCode(160)));
                }
                else {
                    _dom.attr(td, 'rowId', col.id);
                    _dom.attr(td, 'colId', row.name);
                    td['rowIndex'] = index;
                    td['colIndex'] = colIndex - 1;
                    var item = values.get(colIndex - 1);
                    var v = _uiutils.utils.displayValue(item.getRelativeValue(row.name), row.schema, locale, { html: true, useSymbol: true, editable: row.canEdit, check: row.check, avanced: null, tableOptions: options, state: null }, item, row.name);
                    if (v.html) {
                        var $c = $(v.value);
                        _dom.append(td, $c.get(0));
                    }
                    else
                        _dom.append(td, document.createTextNode(v.value));
                }
                _dom.append(tr, td);
            });
            return tr;
        }, _setRowsSelected = function (id, value, options, parent) {
            if (options.selecting && options.selecting.row) {
                var p = [];
                var tr = _dom.find(parent, id);
                if (tr)
                    p.push(tr);
                if (options.allowFrozenColumns) {
                    tr = _dom.find(parent, id + '_frozen');
                    if (tr)
                        p.push(tr);
                }
                p.forEach(function (ctr) {
                    if (value)
                        _dom.addClass(ctr, 'bs-row-selected');
                    else
                        _dom.removeClass(ctr, 'bs-row-selected');
                });
            }
        }, _createRow = function (id, index, level, row, columns, options, authoring, locale, isOdd, isFrozen, isTotal, totalOptions) {
            var _bootstrap4 = Phoenix.bootstrap4;
            var tr = document.createElement('tr');
            tr.id = row.$id + (isFrozen ? '_frozen' : '');
            var rcss = ['bs-table-row'];
            if (options.align === 'middle')
                rcss.push('bs-va-middle');
            if (options.bindStatus) {
                var status_1 = row[options.bindStatus];
                if (status_1)
                    rcss.push('table-' + status_1);
            }
            if (!isTotal && row.$select && options.selecting && options.selecting.row) {
                if (!options.noRowSelectedIndicator)
                    rcss.push('bs-row-selected');
            }
            if (level)
                rcss.push('bs-row-level-' + level);
            tr.className = rcss.join(' ');
            if (!options._useStripedCss && options.striped) {
                var isOdd_1 = index % 2 === 1;
                if (!isOdd_1)
                    _dom.addClass(tr, 'even');
            }
            columns.forEach(function (col, colIndex) {
                var td = document.createElement('td');
                if (totalOptions) {
                    if (colIndex === 0) {
                        if (totalOptions.columnField)
                            col = columns.find(function (c) { return c.$bind === totalOptions.columnField; });
                        else
                            col = null;
                        td.colSpan = totalOptions.colspan;
                    }
                    else if (colIndex < totalOptions.colspan) {
                        return;
                    }
                }
                var appendSpace = false;
                if (col) {
                    if (index === 0 && options.headerIsHidden && !options._useColGrp) {
                        if (col.options.width)
                            td.style.width = _ensureWidth(col.options.width);
                        if (col.options.minWidth)
                            td.style.minWidth = _ensureWidth(col.options.minWidth);
                    }
                    var css = [];
                    if (col.options._expandItem)
                        css.push('bs-cursor-d');
                    var state = row.getRelativeState(col.$bind);
                    if (state.style) {
                        _dom.parseStyle(state.style, css);
                    }
                    var align = col.options.align;
                    if (col.schema) {
                        var isNumber = _su.isNumber(col.schema);
                        var isDate = _su.isDate(col.schema) || _su.isDateTime(col.schema);
                        if (!options._nowrap && (isNumber || isDate))
                            css.push('nowrap');
                        if (!align) {
                            if (isNumber)
                                align = 'right';
                            else if (isDate)
                                align = 'center';
                        }
                    }
                    if (align)
                        css.push(_uiutils.utils.align2Css(align));
                    if (col.isLink && !isTotal && col.options.button) {
                        css.push('bs-td-button');
                    }
                    if (!isTotal && options.editing && (!state.isHidden && state.isReadOnly || state.isDisabled || col.options.editing === false || col.options.selecting === false)) {
                        css.push('bs-td-readonly');
                    }
                    if (css.length)
                        td.className = css.join(' ');
                    _dom.attr(td, 'colId', col.$bind);
                    if (!state.isHidden) {
                        if (col.isLink) {
                            if (!isTotal) {
                                var btn = void 0, span = void 0;
                                if (col.options.button) {
                                    var _space = '';
                                    btn = document.createElement('button');
                                    btn.type = 'button';
                                    if (state.isDisabled)
                                        btn.disabled = true;
                                    var sz = col.options.size || 'sm';
                                    var sizeCss = sz === 'normal' ? '' : ' btn-' + sz;
                                    var cc = (col.options.type || 'link');
                                    cc = _dom.bootstrapStyles(col.options.outline)[cc];
                                    btn.className = 'bs-button btn btn-' + cc + sizeCss + (state.isDisabled ? ' disabled' : '');
                                    if (col.options.icon) {
                                        span = document.createElement('span');
                                        span.className = _dom.iconClass(col.options.icon);
                                        _dom.append(btn, span);
                                        _space = ' ';
                                    }
                                    if (col.schema.title) {
                                        if (col.options.titleIsHidden) {
                                            btn.title = col.schema.title;
                                        }
                                        else {
                                            var tn = document.createTextNode(_space + col.schema.title);
                                            _dom.append(btn, tn);
                                        }
                                    }
                                }
                                else if (col.options.icon) {
                                    btn = document.createElement('center');
                                    if (state.isDisabled) {
                                        _dom.addClass(btn, 'bs-disabled');
                                    }
                                    span = document.createElement('span');
                                    var cssb = ['text-' + (col.options.type || 'default')];
                                    cssb.push('bs-basictable-btn');
                                    cssb.push(_dom.iconClass(col.options.icon));
                                    span.className = cssb.join(' ');
                                    _dom.append(btn, span);
                                }
                                else {
                                    appendSpace = true;
                                }
                                if (btn) {
                                    btn['$link'] = col.$bind;
                                    _dom.append(td, btn);
                                }
                            }
                        }
                        else {
                            var p = td;
                            var co = col.options || {};
                            var editable = (options.editing || _su.isSelectField(col.$bind)) && !state.isDisabled && !state.isReadOnly && !state.isHidden;
                            if (!state.isHidden) {
                                var dv = null;
                                if (co.display && co.displaySchema) {
                                    dv = _uiutils.utils.displayValue(row.getRelativeValue(co.display), co.displaySchema, locale, { tableOptions: options, avanced: co.displayOptions || {}, state: row.getRelativeState(co.display) }, row, co.display);
                                }
                                var v = _uiutils.utils.displayValue(row.getRelativeValue(col.$bind), col.schema, locale, { html: true, useSymbol: false, selectable: !state.isDisabled, editable: editable, isTotal: isTotal, check: options.editing, avanced: co, tableOptions: options, display: dv, level: level, state: state }, row, col.$bind);
                                if (v.html) {
                                    var $c = $(v.value);
                                    _dom.append(p, $c.get(0));
                                }
                                else {
                                    if (v.value === '')
                                        appendSpace = true;
                                    else
                                        _dom.append(p, document.createTextNode(v.value));
                                }
                            }
                        }
                    }
                    else
                        appendSpace = true;
                }
                else
                    appendSpace = true;
                if (appendSpace) {
                    _dom.append(td, document.createTextNode(String.fromCharCode(160)));
                }
                _dom.append(tr, td);
            });
            return tr;
        }, _createBulkRows = function (id, rows, columns, options, authoring, locale, isFrozen, isTotal, cb) {
            var frag = document.createDocumentFragment();
            rows && rows.forEach(function (row, rowIndex) {
                var level = row.level || 0;
                if (cb)
                    cb(row.value, rowIndex, level);
                var isOdd = rowIndex % 2 === 1;
                _dom.append(frag, _createRow(id, rowIndex, level, row.value, columns, options, authoring, locale, isOdd, isFrozen, isTotal, null));
            });
            return frag;
        }, _createRows = function (id, rows, columns, options, authoring, locale, isFrozen, isTotal, cb, totalField, stopField) {
            var totalOptions = null;
            if (totalField || stopField) {
                var colspan = 0;
                for (var i = 0; i < columns.length; i++) {
                    var c = columns[i];
                    if (stopField) {
                        if (c.$bind === stopField)
                            break;
                    }
                    else if (_su.isNumber(c.schema))
                        break;
                    colspan++;
                }
                if (colspan > 1) {
                    totalOptions = { colspan: colspan, columnField: totalField };
                }
            }
            var frag = document.createDocumentFragment();
            rows && rows.forEach(function (row, rowIndex, level) {
                level = level || 0;
                if (cb)
                    cb(row, rowIndex, level);
                var isOdd = rowIndex % 2 === 1;
                _dom.append(frag, _createRow(id, rowIndex, level, row, columns, options, authoring, locale, isOdd, isFrozen, isTotal, totalOptions));
            }, options.expandingProperty);
            return frag;
        }, _canUseColGroups = function (options, columns) {
            var that = this;
            var res = true;
            // all columns have width defined (but not minWidth)
            for (var i = 0, len = columns.length; i < len; i++) {
                var col = columns[i];
                if (!col.options.width || col.options.minWidth) {
                    res = false;
                    break;
                }
            }
            res = res && options.width !== 'auto';
            if (!res) {
                var vscrolling = options.scrolling && options.scrolling.vertical;
                if (vscrolling) {
                    throw 'To support scrolling vertical, all columns must have explicit widths but not explicit minWidth.';
                }
                if (options.editing) {
                    throw 'To support inline editing, all columns must have explicit widths but not explicit minWidth.';
                }
            }
            return res;
        }, _hasFrozenColumns = function (opts, frozenColumns) {
            var res = !!(opts.allowFrozenColumns && frozenColumns && frozenColumns.length);
            return res;
        }, _cssTable = function (options, isHeader, isFrozen, isFooter) {
            var vscrolling = options.scrolling && options.scrolling.vertical;
            var css = ['table', 'bs-control'];
            if (vscrolling)
                css.push('scrolling');
            if (isHeader || isFooter) {
                css.push('table-header');
                if (isFooter)
                    css.push('footer');
                else
                    css.push('header');
                if (isFooter && options.total && options.total.light) {
                    css.push('light');
                }
            }
            if (!isHeader && !isFooter && (options._useStripedCss && options.striped)) {
                css.push('table-striped');
            }
            if (options._useColGrp) {
                css.push('bs-fixed');
            }
            //adde
            if (!isHeader && !isFooter && (options.editing || options.nowrap)) {
                css.push('nowrap');
                options._nowrap = true;
            }
            else if (!isHeader && !isFooter && options.allowFrozenColumns) {
                css.push('nowrap');
                options._nowrap = true;
            }
            if (options.allowFrozenColumns && !options.headerIsHidden) {
                if (isHeader)
                    css.push('headernowrap');
                else if (!vscrolling)
                    css.push('headernowrap');
            }
            css.push('bs-theme');
            if (options.border)
                css.push('table-bordered');
            if (options.small)
                css.push('bs-style-small-table');
            return css;
        }, _styleTable = function (options, isHeader, isFrozen, isFooter) {
            var style = [];
            if (isFrozen)
                return style;
            if (options.width && options.width !== 'auto') {
                style.push('min-width: ' + _ensureWidth(options.width));
            }
            return style;
        }, _createTable = function (html, options, isHeader, isFrozen, isFooter) {
            var vscrolling = options.scrolling && options.scrolling.vertical;
            var css = _cssTable(options, isHeader, isFrozen, isFooter);
            html.push('<table');
            if (css.length)
                html.push(' class="' + css.join(' ') + '"');
            html.push(' id="{0}_table');
            if (isFrozen)
                html.push('_frozen');
            if (isHeader)
                html.push('_header');
            if (isFooter)
                html.push('_footer');
            html.push('"');
            var style = _styleTable(options, isHeader, isFrozen, isFooter);
            if (style.length)
                html.push(' style="' + style.join(';') + '"');
            html.push('>');
            //if (options.description) {
            //    html.push("<caption>");
            //    _uiutils.utils.addTooltip(html, options.description, options);
            //    html.push("</caption>");
            //}
            if (options._useColGrp)
                html.push('<colgroup id="{0}_colgrp' + (isFrozen ? '_frozen' : '') + (isHeader ? '_header' : '') + (isFooter ? '_footer' : '') + '"></colgroup>');
            if (isHeader) {
                if (!options.headerIsHidden)
                    html.push('<thead><tr class="bs-va-middle" id="{0}' + (isFrozen ? '_frozen' : '') + '_cols"></tr></thead>');
            }
            else if (!vscrolling) {
                if (!options.headerIsHidden)
                    html.push('<thead><tr class="bs-va-middle" id="{0}' + (isFrozen ? '_frozen' : '') + '_cols"></tr></thead>');
                if (options.total && options.total.property)
                    html.push('<tfoot id="{0}' + (isFrozen ? '_frozen' : '') + '_totals"></tfoot>');
            }
            if (isFooter) {
                if (options.total && options.total.property)
                    html.push('<tfoot id="{0}' + (isFrozen ? '_frozen' : '') + '_totals"></tfoot>');
            }
            if (!isHeader && !isFooter) {
                html.push('<tbody id="{0}');
                if (isFrozen)
                    html.push('_frozen');
                html.push('_rows"></tbody>');
            }
            html.push('</table>');
        }, _columnsWidth = function (cols) {
            var res = 0;
            cols.forEach(function (col) {
                res += parseInt(col.options.width + '', 10);
            });
            return res;
        }, _updatecolumnsWidth = function (e, id, cols) {
            var cw = _columnsWidth(cols);
            var p = _dom.find(e, id + '_frozen_header_parent');
            if (p)
                p.style.width = cw + 'px';
            p = _dom.find(e, id + '_frozen_header_sep');
            if (p) {
                if (cw)
                    _dom.removeClass(p, 'empty');
                else
                    _dom.addClass(p, 'empty');
            }
        }, _cloneForMove = function (element) {
            var fe = element.cloneNode(true);
            if (fe.tagName.toLowerCase() === 'th') {
                var tr = element.parentElement;
                var table = tr.parentElement.parentElement;
                var html = ['<div>'];
                html.push('<table class="');
                html.push(table.className);
                html.push('">');
                html.push('<thead>');
                html.push('<tr class="');
                html.push(tr.className);
                html.push('">');
                html.push('</tr></thead><table>');
                html.push('</div>');
                var ce = $(html.join('')).get(0);
                var ctr = ce.firstChild.firstChild.firstChild;
                ctr.style.height = element.offsetHeight + 'px';
                _dom.append(ctr, fe);
                fe = ce;
            }
            var p = _dom.position(element, null);
            fe.style.top = p.top + 'px';
            fe.style.left = p.left + 'px';
            fe.style.width = element.offsetWidth + 'px';
            fe.style.height = element.offsetHeight + 'px';
            fe.style.zIndex = '9000';
            fe.style.position = 'absolute';
            return fe;
        }, _isMultiselectMinimized = function (container) {
            return _dom.hasClass(container, 'minimized');
        }, _setMultiselectMinimized = function (minimized, id, container) {
            var closeBtn = _dom.find(container, id + '_close_ms');
            if (minimized) {
                _dom.addClass(container, 'minimized');
                if (closeBtn) {
                    _dom.removeClass(closeBtn, Phoenix.dom.iconClass('window-minimize', true));
                    _dom.addClass(closeBtn, Phoenix.dom.iconClass('window-maximize', true));
                }
            }
            else {
                _dom.removeClass(container, 'minimized');
                if (closeBtn) {
                    _dom.removeClass(closeBtn, Phoenix.dom.iconClass('window-maximize', true));
                    _dom.addClass(closeBtn, Phoenix.dom.iconClass('window-minimize', true));
                }
            }
        }, _createMultiselectItems = function (id, container, options, items) {
            var itemsContainer = _dom.find(container, id + '_ms_list');
            var exp = options.rowMove.expression || '{{$id}}';
            var toClone = $('<li class="list-group-item bs-list-item-button"></li>').get(0);
            var btn = $('<div class="bs-list-button"><span class="' + _dom.iconClass('times') + '"></span></div>').get(0);
            var d = document.createDocumentFragment();
            items.forEach(function (item) {
                var e = toClone.cloneNode();
                _dom.attr(e, 'data-ms-unselect', item.$id);
                _dom.text(e, _utils.execAngularExpression(exp, item.model(true)));
                _dom.append(d, e);
                _dom.append(e, btn.cloneNode(true));
            });
            while (itemsContainer.firstChild)
                _dom.remove(itemsContainer.firstChild);
            _dom.append(itemsContainer, d);
        }, _createMultiselectContainer = function (id, maximized) {
            var html = ['<div class="modal-content bs-table-selected-list" id="{0}_ms">'];
            html.push('<div class="bs-table-selected-list-header"><span id="{0}_close_ms" class="icon-close {1}"></span></div>');
            html.push('<div class="bs-table-selected-list-content">');
            html.push('<ul class="list-group"  id="{0}_ms_list">');
            html.push('</ul>');
            html.push('</div>');
            html.push('</div>');
            var e = $(_utils.format(html.join(''), id, _dom.iconClass('window-minimize'))).get(0);
            if (!maximized)
                _setMultiselectMinimized(true, id, e);
            return e;
        }, _createGridContainer = function (id, options, authoring, title, locale, columns, frozenColumns) {
            title = title || '';
            options._useColGrp = _canUseColGroups(options, columns);
            options._useStripedCss = !!!(options.rows && options.rows.detail) && options.striped;
            options = $.extend({ right: false, icon: null, type: 'default', width: 'auto', height: 'auto', size: null, scrolling: { horizontal: false } }, options);
            //create div container 
            if (options.title !== undefined)
                title = options.title;
            var html = [], css = ['bs-field-group bs-tab-font bs-island'];
            if (options.noVerticalMargins && !options.design)
                css.pop();
            html.push('<div id="{0}" ');
            html.push(' class="');
            if (authoring)
                css.push('design');
            html.push(css.join(' '));
            html.push('"');
            _addDesign(id, options, authoring, html);
            html.push('>');
            //create header div
            html.push('<div id="{0}_header"></div>');
            css = ['bs-basictable-group'];
            var hscrolling = options.scrolling && options.scrolling.horizontal;
            var vscrolling = options.scrolling && options.scrolling.vertical;
            if (vscrolling || options.allowFrozenColumns)
                css.push('border');
            if (hscrolling && !vscrolling)
                css.push('bs-scroll-x');
            html.push('<div id="{0}_focus" class="');
            html.push(css.join(' '));
            html.push('"');
            if (!authoring)
                html.push(' data-render="{0}"');
            if (options.selecting && (options.selecting.cell || options.selecting.row)) {
                html.push(' tabindex="0" ');
            }
            html.push('>');
            if (options.allowFrozenColumns) {
                html.push('<div class="bs-table-cols">');
                var fw = _columnsWidth(frozenColumns);
                html.push('<div id="{0}_frozen_header_parent"  class="bs-table-frozen-cols" style="width:' + fw + 'px;">');
                if (vscrolling && !options.headerIsHidden) {
                    // parent of frozen header table
                    html.push('<div id="{0}_table_frozen_header" class="bs-table-header header">');
                    // frozen header table 
                    _createTable(html, options, true, true, false);
                    html.push('</div>'); //bs-table-header
                }
                // parent of frozen table content
                css = ['bs-table-content-scroll frozen'];
                html.push('<div  class="' + css.join(' ') + '">');
                css = ["bs-table-content frozen"];
                html.push('<div id="{0}_frozen_scroll" class="' + css.join(' ') + '"');
                if (vscrolling) {
                    var style = [];
                    if (options.minHeight) {
                        style.push("min-height: " + parseInt(options.minHeight + '', 10) + 'px');
                    }
                    if (options.height && options.height !== "auto") {
                        style.push("height: " + parseInt(options.height + '', 10) + 'px');
                    }
                    else if (options.minHeight && options.bottom) {
                        // calculate height  onresize && afterrender
                    }
                    else if (!options.minHeight) {
                        throw "To support scrolling vertical, the grid must have an explicit height/min-height.";
                    }
                    if (style.length)
                        html.push(' style="' + style.join(';') + '"');
                }
                html.push('>');
                html.push('<div  class="' + css.join(' ') + '">');
                _createTable(html, options, false, true, false);
                if (vscrolling) {
                    html.push('<div id="{0}_frozen_scroll_delta" class="bs-relative"></div>');
                }
                html.push('</div>');
                html.push('</div>'); // {0}_frozen_scroll
                html.push('</div>'); // 0}_frozen_header_parent
                if (vscrolling && options.total && options.total.property) {
                    html.push('<div id="{0}_table_frozen_footer" class="bs-table-header footer' + (options.total.light ? ' light' : '') + '">');
                    _createTable(html, options, false, true, true);
                    html.push('</div>'); //bs-table-header
                }
                html.push('</div>'); // bs-table-frozen-cols
                html.push('<div id="{0}_frozen_header_sep" class="bs-table-cols-sep' + (frozenColumns.length ? '' : ' empty') + '"></div>');
                html.push('<div class="bs-table-free-cols">');
            }
            if (vscrolling && !options.headerIsHidden) {
                html.push('<div id="{0}_table_header" class="bs-table-header header" style="padding-right:');
                html.push(_dom.scrollbar());
                html.push('px;">');
                html.push('<div id="{0}_table_header_content" class="bs-table-header-content">');
                _createTable(html, options, true, false, false);
                html.push('</div></div>');
            }
            //create div table container
            if (vscrolling) {
                html.push('<div class="bs-table-content-scroll">');
            }
            css = ["bs-table-content"];
            if (vscrolling)
                css.push("vscroll");
            html.push('<div id="{0}_master_scroll" class="' + css.join(' ') + '"');
            if (vscrolling) {
                var style = [];
                if (options.minHeight) {
                    style.push("min-height: " + parseInt(options.minHeight + '', 10) + 'px');
                }
                if (options.height && options.height !== "auto") {
                    style.push("height: " + parseInt(options.height + '', 10) + 'px');
                }
                else if (options.minHeight && options.bottom) {
                    // calculate height  onresize && afterrender
                }
                else if (!options.minHeight) {
                    throw "To support scrolling vertical, the grid must have an explicit height/min-height.";
                }
                if (style.length)
                    html.push(' style="' + style.join(';') + '"');
            }
            html.push('>');
            // create table
            _createTable(html, options, false, false, false);
            html.push('</div>');
            if (vscrolling) {
                html.push('</div>'); //bs-table-content-scroll
                if (options.total && options.total.property) {
                    html.push('<div id="{0}_table_footer" class="bs-table-header footer' + (options.total.light ? ' light' : '') + '" style="padding-right:');
                    html.push(_dom.scrollbar());
                    html.push('px;">');
                    html.push('<div id="{0}_table_footer_content" class="bs-table-header-content">');
                    _createTable(html, options, false, false, true);
                    html.push('</div>');
                    html.push('</div>');
                }
            }
            if (options.allowFrozenColumns) {
                html.push('</div>'); //bs-table-free-cols
                html.push('</div>'); //bs-table-cols
            }
            html.push('</div>');
            html.push('<center id="{0}_pagination"></center>');
            html.push('<div id="{0}_bottom"></div>');
            _uiutils.utils.addErrorDiv(html);
            html.push('</div>');
            //create bottom div
            return _utils.format(html.join(''), id);
        }, _resizeDiv = function (parent, point) {
            var res = document.createElement('div');
            res.className = 'bs-absolute bs-col-resize-indicator';
            res.style.top = '0px';
            res.style.left = point.left + 'px';
            _dom.append(parent, res);
            return res;
        }, _setRowSize = function (element, parent, hasBorder) {
            var height = parent.offsetHeight - (hasBorder ? 3 : 1);
            element.style.height = Math.floor(height) + 'px';
        }, _updateInplaceSelect = function (inplace, svalue, value, state, parent, cell, col, opts) {
            var enums = state.filter ? col.schema.filters[state.filter] || [] : col.schema.enum;
            var ii = enums.indexOf(value);
            if (ii < 0) {
                _utils.nextTick(function () {
                    cell.item.setValue(col.$bind, enums[0]);
                });
                inplace.input.selectedIndex = 0;
            }
            else {
                inplace.input.selectedIndex = ii;
            }
        }, _updateInplaceEdit = function (inplace, svalue, value, state, parent, cell, col, opts) {
            if (col.schema.enum) {
                return _updateInplaceSelect(inplace, svalue, value, state, parent, cell, col, opts);
            }
            svalue = svalue || '';
            if (_su.isNumber(col.schema)) {
                inplace.input.value = svalue;
                return;
            }
            if (_su.isDate(col.schema)) {
                //TODO
                if (_uiutils.utils.useDatePicker()) {
                    _uiutils.utils.datePickerSetValue($(parent), value);
                }
                else
                    inplace.input.value = svalue;
                return;
            }
            inplace.input.value = svalue;
        }, _createSelectInplaceEdit = function (svalue, value, state, parent, cell, col, opts) {
            var input = document.createElement("select");
            input.type = "text";
            var css = ['bs-inplace-edit bs-edit-border bs-inplace-edit-size custom-select'];
            input.className = css.join(' ');
            var enums = state.filter ? col.schema.filters[state.filter] || [] : col.schema.enum;
            var ii = enums.indexOf(value);
            _uiutils.utils.fillSelect(enums, input, col.schema);
            _setRowSize(input, parent, false);
            _dom.empty(parent);
            _dom.addClass(parent, 'focused');
            _dom.append(parent, input);
            if (ii < 0) {
                _utils.nextTick(function () {
                    cell.item.setValue(col.$bind, enums[0]);
                });
                input.selectedIndex = 0;
            }
            else {
                input.selectedIndex = ii;
            }
            return { input: input, parent: input, td: parent, combo: null, isInputElement: true, canSelect: false, schema: col.schema };
        }, _createInplaceLookup = function (svalue, value, state, parent, cell, col, opts) {
            var pp = document.createElement("div");
            pp.className = 'bs-inplace-parent bs-edit-border ';
            var cp = pp;
            if (opts.after) {
                cp = document.createElement("div");
                cp.className = 'bs-input-group';
                pp.appendChild(cp);
            }
            var isDatePicker = _su.isDate(col.schema) && _uiutils.utils.useDatePicker();
            var input = document.createElement("input");
            input.type = opts.type || 'text';
            var css = ['bs-inplace-edit bs-inplace-edit-size'];
            if (opts.after)
                css.push('bs-input-group-main');
            input.className = css.join(' ');
            _dom.append(cp, input);
            if (opts.after) {
                var addon = document.createElement("span");
                addon.tabIndex = -1;
                addon.className = 'bs-input-group-addon bs-cursor-d input-group-append input-group-addon';
                var icon = document.createElement("span");
                icon.className = _dom.iconClass(opts.after.icon);
                _dom.append(addon, icon);
                _dom.append(cp, addon);
                if (opts.id)
                    addon.id = opts.id + '_after';
            }
            _setRowSize(input, parent, true);
            _dom.empty(parent);
            _dom.addClass(parent, 'focused');
            _dom.append(parent, pp);
            if (_su.isDate(col.schema)) {
                if (isDatePicker) {
                    _uiutils.utils.datePickerInitialize($(pp), { showOnFocus: false }, function (e) { });
                    _uiutils.utils.datePickerSetValue($(pp), value);
                }
                else
                    input.value = _ulocale.isoDatePart(value || '');
            }
            else
                input.value = svalue;
            return { input: input, parent: pp, td: parent, isInputElement: true, canSelect: true, schema: col.schema, combo: null };
        }, _updateEvenOdd = function (pr) {
            if (pr.childNodes.length) {
                var isOdd = false;
                for (var i = 0, len = pr.childNodes.length; i < len; i++) {
                    var e = pr.childNodes[i];
                    if (_dom.hasClass(e, "bs-table-row")) {
                        if (isOdd)
                            _dom.removeClass(e, "even");
                        else
                            _dom.addClass(e, "even");
                        isOdd = !isOdd;
                    }
                }
            }
        }, _createInplaceEdit = function (svalue, value, state, parent, cell, col, opts) {
            if (col.schema.enum) {
                return _createSelectInplaceEdit(svalue, value, state, parent, cell, col, opts);
            }
            else if (_su.isBoolean(col.schema)) {
                return { input: null, parent: null, td: parent, isInputElement: false, canSelect: false, schema: col.schema, combo: null };
            }
            else if (opts.after || opts.before) {
                return _createInplaceLookup(svalue, value, state, parent, cell, col, opts);
            }
            var input = document.createElement("input");
            input.type = opts.type || 'text';
            var css = ['bs-inplace-edit bs-edit-border bs-inplace-edit-size'];
            if (col.options.align)
                css.push(_uiutils.utils.align2Css(col.options.align));
            if (input.type === 'text' && col.schema.maxLength) {
                input.maxLength = col.schema.maxLength;
            }
            input.className = css.join(' ');
            _setRowSize(input, parent, false);
            _dom.empty(parent);
            _dom.addClass(parent, 'focused');
            _dom.append(parent, input);
            if (_su.isDate(col.schema)) {
                input.value = _ulocale.shortDate(value || '');
            }
            else if (_su.isNumber(col.schema)) {
                input.value = svalue;
            }
            else
                input.value = svalue;
            return { input: input, parent: input, td: parent, isInputElement: true, canSelect: true, schema: col.schema, decimals: state.decimals, combo: null };
        };
        var _gridUtil = {
            createCols: _createCols,
            createColGroup: _createColsWidth,
            updSorting: _updSorting,
            gridContainer: _createGridContainer,
            createRows: _createRows,
            createBulkRows: _createBulkRows,
            createRow: _createRow,
            setRowsSelected: _setRowsSelected,
            createGridRows: _createGridRows,
            createInplaceEdit: _createInplaceEdit,
            updateInplaceEdit: _updateInplaceEdit,
            createDetail: _createDetail,
            updateEvenOdd: _updateEvenOdd,
            ensureWidth: _ensureWidth,
            updateFrozenWidth: _updatecolumnsWidth,
            setColumnWidth: _setColumnWidth,
            hasFrozenColumns: _hasFrozenColumns,
            cloneForMove: _cloneForMove,
            isPixel: _isPixel,
            widthFromSchema: _widthFromSchema,
            resizeDiv: _resizeDiv,
            getColumnsSizeParents: _getColumnsSizeParents,
            multiselectContainer: _createMultiselectContainer,
            createMultiselectItems: _createMultiselectItems,
            isMultiselectMinimized: _isMultiselectMinimized,
            setMultiselectMinimized: _setMultiselectMinimized
        };
        gridrender.GridUtil = _gridUtil;
    })(gridrender = Phoenix.gridrender || (Phoenix.gridrender = {}));
})(Phoenix || (Phoenix = {}));
/// <reference path="../../../core/core-refs.ts" />
/// <reference path="./absfield.control.ts" />
/// <reference path="../errors.data.ts" />
/// <reference path="../../pager.control.ts" />
/// <reference path="./basicgrid.ts" />
/// <reference path="./uiutils.ts" />
var Phoenix;
(function (Phoenix) {
    var _utils = Phoenix.utils, _dom = Phoenix.dom, _ui = Phoenix.ui, _ulocale = Phoenix.ulocale, _uiutils = Phoenix.uiutils, _observable = Phoenix.Observable, _gridrender = Phoenix.gridrender, _gu = _gridrender.GridUtil, _eu = _observable.errorsUtils, _link = Phoenix.link, _locale = Phoenix.locale, _drag = Phoenix.drag, _events = Phoenix.events, _sutils = _observable.SchemaUtils;
    var formgrid;
    (function (formgrid) {
        var MIN_COL_WIDTH = 20, MAX_COL_WIDTH = 2000;
        formgrid.toolBarFactory = null;
        formgrid.toolBarRender = null;
        var withModifier = function ($event, key) {
            if (key === _dom.keys.VK_TAB && $event.shiftKey)
                return false;
            return $event.altKey || $event.ctrlKey || $event.metaKey || $event.shiftKey;
        }, checkPixels = function (val) {
            val = (val || '') + '';
            val = val.trim();
            var p = parseInt(val, 10);
            if ((p + '') === val || (p + 'px') === val || (p + ' px') === val)
                return true;
            return false;
        };
        formgrid.gridlookup = null;
        formgrid.glbGridFilter = null;
        formgrid.glbGridSettings = null;
        formgrid.glbMongoFilter2Filter = null;
        var BasicGrid = /** @class */ (function (_super) {
            __extends(BasicGrid, _super);
            function BasicGrid(fp, options, form) {
                var _this = _super.call(this, fp, options, form) || this;
                _this._refreshGrid = function () {
                    var that = this;
                    var opts = that.renderOptions;
                    if (that.state.value) {
                        that.state.value.allowSelecting = that.renderOptions.selecting && (that.renderOptions.selecting.row || that.renderOptions.selecting.cell);
                        that.state.value.multiselect = that.renderOptions.selecting && that.renderOptions.selecting.multiselect;
                        that.state.value.expandingProperty = that.renderOptions.expandingProperty;
                    }
                    that.removeEvents();
                    that._initCols(opts);
                    that._renderColumns(opts);
                    that._renderRows(true, '', null);
                    that._renderTotalRows();
                    that.setEvents(that.renderOptions);
                    that.resize();
                };
                var that = _this;
                if (that.fieldOptions.striped === undefined) {
                    that.fieldOptions.striped = true;
                }
                that._view = [];
                that._viewMap = {};
                that._ignoreNotifications = false;
                that._state();
                if (form.supportSettings()) {
                    that._settingsName = that.getSettingsName('basicgrid');
                    that._settings = form.getFieldSettings(that._settingsName);
                }
                if (that._settings) {
                    var origColumns = that.fieldOptions.columns;
                    var newColumns = that._settings.columns || [];
                    var oMap_1 = {};
                    origColumns.forEach(function (col) { oMap_1[col.$bind] = col; });
                    newColumns.forEach(function (col) {
                        var old = oMap_1[col.$bind];
                        if (old) {
                            var co = col.options || {};
                            var no = old.options || {};
                            if (co.width)
                                no.width = co.width;
                            if (co.frozen)
                                no.frozen = co.frozen;
                            if (co.display)
                                no.display = co.display;
                            col.options = no;
                        }
                    });
                    that.fieldOptions.columns = newColumns;
                    that._settings.columns = null;
                }
                if (that.fieldOptions && that.fieldOptions.total && that.fieldOptions.total.property) {
                    that._totalProperty = that.fieldOptions.total.property;
                    var totalSchema = that.form.getSchema(that._totalProperty);
                    that._totalIsArray = (totalSchema && totalSchema.type === 'array');
                    that._totalField = that.fieldOptions.total.field;
                    that._stopField = that.fieldOptions.total.firstTotal;
                    form.registerListenerFor(that._totalProperty, that);
                }
                // load config 
                that.checkOptions(that.fieldOptions);
                that._initOrigColumns(that.fieldOptions);
                that._initCols(that.fieldOptions);
                that._details = [];
                that._onselectItemHandler = that._onselectItem.bind(that);
                return _this;
            }
            BasicGrid.prototype._initOrigColumns = function (opts) {
                var that = this;
                that._originalCols = {};
                opts.columns = opts.columns || [];
                opts.columns.forEach(function (col) {
                    col.options = col.options || {};
                    if (col.$bind === _observable.EXPANDED_FIELD_NAME && col.options.display) {
                        that._originalCols[col.options.display] = $.extend(true, {}, col);
                        that._originalCols[col.options.display].options._expandItem = true;
                    }
                });
            };
            BasicGrid.prototype.checkOptions = function (opts) {
                if (opts.allowColumnMove === undefined)
                    opts.allowColumnMove = true;
                opts.align = opts.align || 'middle';
            };
            BasicGrid.prototype.beforeSaveSettings = function () {
                var that = this;
                if (that._settingsName) {
                    that._settings = { columns: [] };
                    var allCols = that.renderOptions.columns || [];
                    allCols.forEach(function (col) {
                        var cc = { $bind: col.$bind, options: null };
                        var opts = {};
                        if (col.canStartDragHandler)
                            opts.frozen = true;
                        if (col.options.width)
                            opts.width = col.options.width;
                        if (col.options.display)
                            opts.display = col.options.display;
                        if (col.options.frozen)
                            opts.frozen = col.options.frozen;
                        if (col.options._expandItem)
                            cc.$bind = _observable.EXPANDED_FIELD_NAME;
                        cc.options = opts;
                        that._settings.columns.push(cc);
                    });
                    that.form.setFieldSettings(that._settingsName, that._settings);
                    return true;
                }
                return false;
            };
            BasicGrid.prototype._inplaceEditValue2Model = function (value, item, col) {
                var that = this;
                var state = item.getState(col.$bind);
                var nv = _sutils.text2Value(value, col.schema, state);
                var ov = item.getValue(col.$bind);
                if (nv !== ov) {
                    item.setValue(col.$bind, nv);
                    return true;
                }
                return false;
            };
            BasicGrid.prototype.setFocus = function (focusParams) {
                var that = this;
                var state = that.form.getState(that.$bind);
                if (state.isDisabled || state.isHidden)
                    return;
                if (that.inplace && that.inplace.input && that.inplace.isInputElement) {
                    var input = that.inplace.input;
                    input.focus();
                }
                else if (that.$element) {
                    var f = _dom.query(that.$element.get(0), '[tabindex="0"]');
                    if (f)
                        f.focus();
                }
            };
            BasicGrid.prototype._inplaceEditAcceptKeys = function (key) {
                var that = this;
                if (that.inplace.schema.enum) {
                    if (key === _dom.keys.VK_UP || key === _dom.keys.VK_DOWN)
                        return false;
                }
                else if (_sutils.isDate(that.inplace.schema) && _uiutils.utils.useDatePicker()) {
                    if (key === _dom.keys.VK_UP || key === _dom.keys.VK_DOWN || key === _dom.keys.VK_LEFT || key === _dom.keys.VK_RIGHT)
                        return false;
                }
                return true;
            };
            BasicGrid.prototype._inplaceEditAddEvents = function () {
                var that = this;
                if (that.inplace.schema.enum) {
                    $(that.inplace.input).on('change', function (event) {
                        var td = that.inplace.td;
                        var cell = that._td2value(td);
                        var iv = that._inplaceEditGetValue(cell);
                        if (!that._inplaceEditValue2Model(iv, cell.item, cell.col))
                            that._modifyCell(cell.item, cell.col.$bind, null, td);
                    });
                }
            };
            BasicGrid.prototype._inplaceEditRemoveEvents = function () {
                var that = this;
                if (that.inplace.schema.enum) {
                    $(that.inplace.input).off('change');
                }
                else if (_sutils.isDate(that.inplace.schema)) {
                    if (_uiutils.utils.useDatePicker()) {
                        _uiutils.utils.datePickerDestroy($(that.inplace.parent));
                    }
                }
            };
            BasicGrid.prototype._inplaceEditGetValue = function (cell) {
                var that = this;
                if (!cell.item)
                    return null;
                var state = cell.item.getState(cell.col.$bind);
                if (that.inplace.schema.enum) {
                    var si = that.inplace.input.selectedIndex;
                    return state.filter ? that.inplace.schema.filters[state.filter][si] : that.inplace.schema.enum[si];
                }
                return _uiutils.utils.text2value(that.inplace.input.value, that.inplace.schema, state);
            };
            BasicGrid.prototype._inpaceEditShow = function (td, isFocusIn) {
                var that = this;
                var cell = that._td2value(td);
                var value = cell.item.getValue(cell.col.$bind);
                var state = cell.item.getState(cell.col.$bind);
                var s = _sutils.value2Text(value, cell.col.schema, state);
                td.tabIndex = -1;
                var opts = { type: 'text', after: null, id: null };
                if (cell.col.$lookup) {
                    // ---> START LOOKUP
                    opts.after = { icon: 'chevron-down' };
                    opts.id = td.id || _utils.allocID();
                    td.id = opts.id;
                    // <--- END LOOKUP
                }
                else if (_sutils.isDate(cell.col.schema)) {
                    if (_uiutils.utils.useDatePicker())
                        opts.after = { icon: 'calendar' };
                }
                that.inplace = _gu.createInplaceEdit(s, value, state, td, cell, cell.col, opts);
                // ---> START LOOKUP
                if (cell.col.$lookup) {
                    that.inplace.id = opts.id;
                    that.inplace.col = cell.col;
                    that._createGridPopup();
                }
                // <--- END LOOKUP
                that._inplaceEditAddEvents();
                if (that.inplace.isInputElement) {
                    that.inplace.input.tabIndex = 0;
                    that.inplace.input.focus();
                    if (that.inplace.canSelect)
                        _dom.select(that.inplace.input);
                }
                else {
                    // focus on td ?
                    td.tabIndex = 0;
                    td.focus();
                }
                that._onFrozenFocusScroll(td, cell.col);
            };
            BasicGrid.prototype._destroyInplaceEdit = function () {
                var that = this;
                if (that.inplace) {
                    if (that.inplace.combo) {
                        that.inplace.combo.destroy();
                        that.inplace.combo = null;
                    }
                    that.inplace = null;
                }
            };
            BasicGrid.prototype._inplaceEditRemove = function (isFocusOut, isDestroy, isCancel) {
                var that = this;
                if (that.inplace && !isDestroy) {
                    var td_1 = that.inplace.td;
                    if (isFocusOut) {
                        td_1.tabIndex = 0;
                    }
                    var cell_1 = that._td2value(td_1);
                    that._inplaceEditRemoveEvents();
                    if (that.inplace.parent)
                        _dom.remove(that.inplace.parent);
                    _dom.removeClass(td_1, 'focused');
                    var updValue = that.inplace.input ? true : false;
                    if (updValue) {
                        var s = that._inplaceEditGetValue(cell_1);
                        that._destroyInplaceEdit();
                        if (!cell_1.item)
                            return;
                        // ---> START LOOKUP
                        if (cell_1.col.$lookup) {
                            var ov = (cell_1.item.getValue(cell_1.col.$bind) || '') + '';
                            if (!isCancel && s !== ov) {
                                return that._findValue(s, cell_1, function (ldata) {
                                    that._setRemoteValue(cell_1.col, cell_1.item, ldata);
                                    // maybe not
                                    that._modifyCell(cell_1.item, cell_1.col.$bind, null, td_1);
                                });
                            }
                            else {
                                // maybe not
                                that._modifyCell(cell_1.item, cell_1.col.$bind, null, td_1);
                            }
                        }
                        else if (isCancel || !that._inplaceEditValue2Model(s + '', cell_1.item, cell_1.col))
                            that._modifyCell(cell_1.item, cell_1.col.$bind, null, td_1);
                    }
                }
                that._destroyInplaceEdit();
            };
            BasicGrid.prototype._inplaceEditModel2Control = function (item, field, td) {
                var that = this;
                var cell = that._td2value(td);
                var iv = that._inplaceEditGetValue(cell);
                var value = item.getValue(cell.col.$bind);
                var state = item.getState(cell.col.$bind);
                var s = _sutils.value2Text(value, cell.col.schema, state);
                var opts = {};
                _gu.updateInplaceEdit(that.inplace, s, value, state, td, cell, cell.col, opts);
            };
            BasicGrid.prototype.removeEvents = function () {
                var that = this;
                if (that._scrollableMaster) {
                    $(that._scrollableMaster).off('scroll');
                }
                //if (that._scrollableFrozenContent  && (that.fieldOptions.editing || (that.fieldOptions.selecting && that.fieldOptions.selecting.cell)))
                //    $(that._scrollableFrozenContent).off('scroll');
                that._scrollableMaster = null;
                that._scrollableHeaderOfMaster = null;
                that._scrollableFooterOfMaster = null;
                if (that._drag) {
                    _drag.dragManager.rmvDrag(that._drag);
                    that._drag = null;
                }
            };
            BasicGrid.prototype._onFrozenFocusScroll = function (td, col) {
                var that = this;
                if (col && col.options && col.options.frozen) {
                    var opts = that.renderOptions;
                    var hasFrozenColumns = _gu.hasFrozenColumns(opts, that.frozenColumns);
                    if (hasFrozenColumns && opts.scrolling && opts.scrolling.vertical) {
                        if (that._rsFrozenTimer) {
                            that._rsFrozenTimer.clearTimeout();
                            that._rsFrozenTimer = null;
                        }
                        that.syncMasterScroll(null);
                        //that._rsFrozenTimer = window.setTimeout(function () {}, 50);
                    }
                }
            };
            BasicGrid.prototype.setEvents = function (opts) {
                var that = this;
                var vscroll = opts.scrolling && opts.scrolling.vertical;
                if (vscroll) {
                    var e = that.$element.get(0);
                    that._scrollableMaster = _dom.find(e, that.id + '_master_scroll');
                    that._scrollableHeaderOfMaster = _dom.find(e, that.id + '_table_header_content');
                    if (that._totalProperty)
                        that._scrollableFooterOfMaster = _dom.find(e, that.id + '_table_footer_content');
                    var hasFrozenColumns = _gu.hasFrozenColumns(opts, that.frozenColumns);
                    that._scrollableFrozenContent = hasFrozenColumns ? _dom.find(e, that.id + '_frozen_scroll') : null;
                    that._deltaHScrollContent = hasFrozenColumns ? _dom.find(e, that.id + '_frozen_scroll_delta') : null;
                    if (that._scrollableMaster && that._scrollableHeaderOfMaster)
                        $(that._scrollableMaster).on('scroll', that.syncHeaderAndFrozenScroll.bind(that));
                    //if (that._scrollableFrozenContent && (that.fieldOptions.editing || (that.fieldOptions.selecting && that.fieldOptions.selecting.cell)))
                    //    $(that._scrollableFrozenContent).on('scroll', that.syncMasterScroll.bind(that));
                }
                if (((opts.allowColumnResize || opts.allowColumnMove) && !opts.headerIsHidden) || opts.rowMove) {
                    var drag_2 = _drag.dragManager.addDrag([that.$element.get(0)]);
                    that._drag = drag_2;
                    drag_2.canStartDragHandler = that._canStartDrag.bind(that);
                    drag_2.onDragStart = that._onDragStart.bind(that);
                    drag_2.onDrag = that._onDrag.bind(that);
                    drag_2.onDragEnd = that._onDragEnd.bind(that);
                }
            };
            BasicGrid.prototype._getColsInfo = function (columns, parent) {
                var res = [];
                columns.forEach(function (col, index) {
                    var th = parent.childNodes[index];
                    if (!th.id)
                        th.id = _utils.allocID();
                    res.push({ htmlId: th.id, info: col });
                });
                return res;
            };
            BasicGrid.prototype._canStartDrag = function (event) {
                var that = this;
                var target = event.target;
                var opDrag = _dom.attr(target, 'data-drag');
                var opts = that.renderOptions;
                var colElement = null;
                if (!opts.headerIsHidden && (opts.allowColumnResize || opts.allowColumnMove))
                    colElement = _dom.parentByTag(that.$element.get(0), target, 'th');
                if (colElement) {
                    var opts_1 = that.renderOptions;
                    if (opts_1.headerIsHidden || (!opts_1.allowColumnResize && !opts_1.allowColumnMove))
                        return false;
                    if (!opDrag)
                        opDrag = _dom.attr(colElement, 'data-drag');
                    if (!opDrag)
                        return false;
                    if (!colElement.id)
                        colElement.id = _utils.allocID();
                    that._drag.data.op = opDrag;
                    that._drag.data.cloneId = colElement.id;
                    that._drag.data.column = _dom.attr(colElement, 'colId');
                    if (!that._drag.data.column)
                        return false;
                    return that['_cdd' + opDrag](event);
                }
                var td = opts.rowMove ? _dom.parentByTag(that.$element.get(0), event.target, 'td') : null;
                if (td) {
                    var cell = that._td2cell(td);
                    if (cell) {
                        var opts_2 = that.renderOptions;
                        var item = that._findById(cell.row);
                        if (item) {
                            that._drag.data.op = 'rowmove';
                            that._drag.data.row = cell.row;
                            that._drag.coverDocument = false;
                            that._drag.cursor = 'default';
                            that._drag.moveSourceName = 'rowmove';
                            return true;
                        }
                    }
                }
                return false;
            };
            BasicGrid.prototype._onDragStart = function (event) {
                var that = this;
                if (that._drag.data.op)
                    return that['_sdd' + that._drag.data.op](event);
                return false;
            };
            BasicGrid.prototype._onDrag = function (event) {
                var that = this;
                if (that._drag.data.op)
                    return that["_ddd" + that._drag.data.op](event);
                return false;
            };
            BasicGrid.prototype._onDragEnd = function (cancel, event) {
                var that = this;
                if (that._drag.data.op)
                    return that['_edd' + that._drag.data.op](cancel, event);
                return false;
            };
            BasicGrid.prototype._cddresize = function (event) {
                var that = this, opts = that.renderOptions;
                if (!opts.allowColumnResize)
                    return false;
                var drag = that._drag;
                drag.coverDocument = true;
                drag.cursor = 'col-resize';
                drag.moveX = true;
                return true;
            };
            BasicGrid.prototype._sddresize = function (event) {
                var that = this;
                var drag = that._drag;
                drag.floatParent = that._gridParentFocus();
                var col = _dom.find(drag.floatParent, that._drag.data.cloneId);
                var p = _dom.position(col, drag.floatParent);
                drag.floatElement = _gu.resizeDiv(drag.floatParent, { left: Math.round(p.left + col.offsetWidth) });
                drag.minLeft = Math.round(p.left + MIN_COL_WIDTH);
                drag.maxLeft = Math.round(p.left + MAX_COL_WIDTH);
                return true;
            };
            BasicGrid.prototype._dddresize = function (event) {
                return true;
            };
            BasicGrid.prototype._eddresize = function (cancel, event) {
                var that = this;
                var drag = that._drag;
                if (!drag)
                    return;
                if (drag.floatElement) {
                    _dom.remove(drag.floatElement);
                    drag.floatElement = null;
                }
                if (cancel)
                    return;
                var col = that._colByField(drag.data.column);
                var point = _events.point(event);
                var deltaWidth = point.x - drag.startPoint.x;
                var colh = _dom.find(drag.floatParent, that._drag.data.cloneId);
                var ow = parseInt(col.options.width + '', 10);
                if (colh.offsetWidth - ow > 5) {
                    var factor = ow / colh.offsetWidth;
                    deltaWidth = Math.round(factor * deltaWidth);
                }
                var nw = Math.min(Math.max(MIN_COL_WIDTH, ow + deltaWidth), MAX_COL_WIDTH);
                that._updateColWidth(col, nw);
                that.savePreferences(function () { });
            };
            BasicGrid.prototype._updateColWidth = function (col, width) {
                var that = this;
                var oldvalue = Math.max(parseInt(col.options.width || '0', 10), MAX_COL_WIDTH);
                if (oldvalue === width)
                    return;
                col.options.width = width;
                var isFrozen = col.options.frozen && that.renderOptions.allowFrozenColumns;
                var colSize = _gu.getColumnsSizeParents(that.id, that.$element.get(0), that.renderOptions, isFrozen);
                _gu.setColumnWidth(col.$bind, colSize, width);
                if (isFrozen)
                    _gu.updateFrozenWidth(that.$element.get(0), that.id, that.frozenColumns);
                that.resize();
            };
            BasicGrid.prototype._cddmove = function (event) {
                var that = this, opts = that.renderOptions;
                if (!opts.allowColumnMove)
                    return false;
                var grid = that.$element.get(0);
                var drag = that._drag;
                var cloned = _dom.find(grid, drag.data.cloneId);
                drag.coverDocument = true;
                drag.cursor = 'move';
                drag.moveX = true;
                drag.moveY = true;
                drag.startOffset = _dom.position(cloned, null);
                var pc, children;
                var copts = {
                    firstDelta: 0,
                    lastDelta: -10,
                    delta: -4,
                    top: drag.startOffset.top,
                    height: cloned.offsetHeight
                };
                if (opts.allowFrozenColumns) {
                    pc = _dom.find(grid, that.id + '_frozen_cols');
                    if (pc)
                        children = _dom.childrenPositions(pc, that._getColsInfo(that.frozenColumns, pc), false, 'frozen', copts);
                }
                copts.lastDelta = 0;
                pc = _dom.find(grid, that.id + '_cols');
                if (pc) {
                    var fc = _dom.childrenPositions(pc, that._getColsInfo(that.columns, pc), false, 'free', copts);
                    if (children)
                        children = children.concat(fc);
                    else
                        children = fc;
                }
                drag.data.childrenPositions = children;
                return true;
            };
            BasicGrid.prototype._cddrowmove = function (event) {
                var that = this, opts = that.renderOptions;
                if (!opts.rowMove)
                    return false;
                var grid = that.$element.get(0);
                var drag = that._drag;
                return true;
            };
            BasicGrid.prototype._sddrowmove = function (event) {
                var that = this;
                var opts = that.renderOptions;
                if (!opts.rowMove)
                    return false;
                if (opts.rowMove.multiselect) {
                    // only for multiselect
                    if (!opts.selecting || !opts.selecting.row || !opts.selecting.multiselect)
                        return false;
                }
                var exp = opts.rowMove.expression || '{{$id}}';
                var drag = that._drag;
                var item = that._findById(that._drag.data.row);
                if (opts.rowMove.multiselect && item.$select)
                    return false;
                var ele = $('<div><span class="bs-row-in-drag">' + _utils.escapeHtml(_utils.execAngularExpression(exp, item)) + '</span></div>').get(0);
                drag.floatElement = _gu.cloneForMove(ele);
                drag.floatElement.style.left = (event.pageX - 5) + 'px';
                drag.floatElement.style.top = (event.pageY - 5) + 'px';
                _dom.append(document.body, drag.floatElement);
                drag.moveX = true;
                drag.moveY = true;
                drag.data.item = item;
                ;
                if (opts.rowMove.multiselect)
                    drag.data.multiSelTarget = that._openMultiselectSummary(null, true);
                return true;
            };
            BasicGrid.prototype._dddrowmove = function (event) {
                var that = this;
                return true;
            };
            BasicGrid.prototype._eddrowmove = function (cancel, event) {
                var that = this;
                var drag = that._drag;
                if (!drag)
                    return;
                if (drag.floatElement) {
                    _dom.remove(drag.floatElement);
                    drag.floatElement = null;
                }
                if (cancel)
                    return;
                if (event && drag.data.multiSelTarget) {
                    var point = _events.point(event);
                    var p = _dom.position(drag.data.multiSelTarget, null);
                    if (point.x > p.left && point.x < (p.left + drag.data.multiSelTarget.offsetWidth) &&
                        point.y > p.top && point.y < (p.top + drag.data.multiSelTarget.offsetHeight)) {
                        var opts = that.renderOptions;
                        if (that.state.value) {
                            var list = that.state.value;
                            list.selecting(true, opts.expandingProperty);
                            try {
                                drag.data.item.select(true, opts.selecting && opts.selecting.row && opts.selecting.multiselect, that.state.value, opts.expandingProperty, opts.expanding && opts.expanding.selectChildren);
                            }
                            finally {
                                list.selecting(false, opts.expandingProperty);
                            }
                        }
                    }
                }
            };
            BasicGrid.prototype._sddmove = function (event) {
                var that = this;
                var drag = that._drag;
                var toClone = _dom.find(that.$element.get(0), drag.data.cloneId);
                drag.floatElement = _gu.cloneForMove(toClone);
                _dom.append(document.body, drag.floatElement);
                return true;
            };
            BasicGrid.prototype._eddmove = function (cancel, event) {
                var that = this;
                var drag = that._drag;
                if (!drag)
                    return;
                if (drag.floatElement) {
                    _dom.remove(drag.floatElement);
                    drag.floatElement = null;
                }
                if (drag.data.mdiv) {
                    _dom.remove(drag.data.mdiv);
                    drag.data.mdiv = null;
                }
                if (cancel)
                    return;
                if (drag.data.best && drag.data.column) {
                    var info = drag.data.best.info;
                    var toMove = that._mapCols[drag.data.column];
                    if (drag.data.best.position === 'empty') {
                        //frozen --> free or free -> frozen
                        toMove.column.options.frozen = !!!toMove.column.options.frozen;
                    }
                    else {
                        if (info.$bind === toMove.column.$bind)
                            return;
                        var where = that._mapCols[info.$bind];
                        var src = toMove.column;
                        var dst = where.column;
                        var ci = toMove.tindex;
                        var ni = drag.data.best.position === 'after' ? where.tindex + 1 : where.tindex;
                        var frozenChanged = false;
                        if (!!src.options.frozen !== !!dst.options.frozen) {
                            src.options.frozen = dst.options.frozen;
                            frozenChanged = true;
                        }
                        if (ci === ni - 1) {
                            if (!frozenChanged)
                                return;
                        }
                        else {
                            // remove src
                            that.renderOptions.columns.splice(ci, 1);
                            if (ci < ni)
                                ni--;
                            // insert at ni
                            that.renderOptions.columns.splice(ni, 0, src);
                        }
                    }
                    that.savePreferences(function () {
                        that._refreshGrid();
                    });
                }
            };
            BasicGrid.prototype._dddmove = function (event) {
                var that = this;
                var drag = that._drag;
                var p = _events.point(event);
                var best = _dom.findNearest(p.x, p.y, drag.data.childrenPositions);
                if (drag.data.best != best) {
                    var pos = {
                        left: best.left,
                        top: best.top,
                        width: best.width,
                        height: best.height
                    };
                    drag.data.mdiv = _dom.showMove(drag.data.mdiv, best.vertical, pos, (best.zone === 'frozen' ? 'bs-drag-color-success' : 'bs-drag-color-info'));
                }
                drag.data.best = best;
                return true;
            };
            BasicGrid.prototype.destroy = function () {
                var that = this;
                that._destroyDetails();
                if (that.columns) {
                    that.columns.forEach(function (col) {
                        col.schema = null;
                    });
                    that.columns = null;
                }
                if (that.frozenColumns) {
                    that.frozenColumns.forEach(function (col) {
                        col.schema = null;
                    });
                    that.frozenColumns = null;
                }
                if (that._totalProperty) {
                    that.form.unRegisterListenerFor(that._totalProperty, that);
                }
                that._inplaceEditRemove(false, true, false);
                that._onselectItemHandler = null;
                if (that._eventBus) {
                    that._eventBus.destroy();
                    that._eventBus = null;
                }
                if (that._pager) {
                    that._pager.destroy();
                    that._pager = null;
                }
                if (that.toolBar) {
                    that.toolBar.destroy();
                    that.toolBar = null;
                }
                that._details = null;
                that._mapCols = null;
                that._originalCols = null;
                that._settings = null;
                that._scroller = null;
                that._rsTimer = null;
                that._rsFrozenTimer = null;
                that._scrollableMaster = null;
                that._scrollableHeaderOfMaster = null;
                that._scrollableFooterOfMaster = null;
                that._scrollableFrozenContent = null;
                that._deltaHScrollContent = null;
                _super.prototype.destroy.call(this);
            };
            BasicGrid.prototype._moveToPage = function (page) {
                var that = this;
                if (that.state.value)
                    that.state.value.currentPage(page);
            };
            BasicGrid.prototype._onselectPage = function (page) {
                var that = this;
                switch (page) {
                    case 'next':
                        that._moveToPage(that._pager.options.noPagesCount ? that._pager.props.currentPage + 1 : Math.min(that._pager.props.totalPages, that._pager.props.currentPage + 1));
                        break;
                    case 'prev':
                        that._moveToPage(Math.max(0, that._pager.props.currentPage - 1));
                        break;
                    case 'first':
                        that._moveToPage(1);
                        break;
                    case 'last':
                        that._moveToPage(that._pager.props.totalPages);
                        break;
                    default:
                        that._moveToPage(page);
                        break;
                }
            };
            BasicGrid.prototype.setColumns = function (columns) {
                var that = this;
                that.renderOptions.columns = columns.map(function (col) {
                    var oldCol = that._colByField(col.$bind);
                    if (!oldCol)
                        oldCol = that._originalCols[col.$bind];
                    if (oldCol) {
                        if (oldCol.options._expandItem) {
                            col.$bind = _observable.EXPANDED_FIELD_NAME;
                        }
                        col.options = oldCol.options;
                    }
                    return col;
                });
                that.savePreferences(function () {
                    that._refreshGrid();
                });
            };
            BasicGrid.prototype._setVisiblesColumns = function (columns) {
                var that = this;
                that.renderOptions.columns.forEach(function (col) {
                    var colName = col.$bind;
                    if (_sutils.isSelectField(colName))
                        return;
                    if (col.options._expandItem)
                        colName = _observable.EXPANDED_FIELD_NAME;
                    col._isHidden = columns ? columns.indexOf(colName) < 0 : false;
                });
                that.savePreferences(function () {
                    that._refreshGrid();
                });
            };
            BasicGrid.prototype._getMultiselectdItems = function () {
                var that = this;
                var selectedItems = [];
                var opts = that.renderOptions;
                var list = that.state.value;
                if (!list)
                    return;
                list.enumSelectedItems(opts.expandingProperty, function (ii) {
                    selectedItems.push(ii);
                });
                return selectedItems;
            };
            BasicGrid.prototype._updateMultiselectSummary = function (isCreate) {
                var that = this;
                var opts = that.renderOptions;
                if (opts.rowMove && opts.rowMove.multiselect && opts.selecting && opts.selecting.row && opts.selecting.multiselect) {
                    if (that._timeOutSelected)
                        window.clearTimeout(that._timeOutSelected);
                    that._timeOutSelected = window.setTimeout(function () {
                        var selectedItems = that._getMultiselectdItems();
                        if (!selectedItems.length) {
                            that._closeMultiselectSummary(true, false);
                        }
                        else {
                            that._openMultiselectSummary(selectedItems, false);
                        }
                    }, 100);
                }
            };
            BasicGrid.prototype._openMultiselectSummary = function (selectedItems, forceMaximized) {
                var that = this;
                var mse = _dom.find(that.$element.get(0), that.id + '_ms');
                if (!mse) {
                    mse = that._toggleMultiselectSummary(selectedItems, forceMaximized);
                }
                else {
                    if (!selectedItems)
                        selectedItems = that._getMultiselectdItems();
                    if (forceMaximized && _gu.isMultiselectMinimized(mse))
                        _gu.setMultiselectMinimized(false, that.id, mse);
                    _gu.createMultiselectItems(that.id, mse, that.renderOptions, selectedItems);
                }
                return mse;
            };
            BasicGrid.prototype._closeMultiselectSummary = function (forceClose, toggleMinimize) {
                var that = this;
                var mse = _dom.find(that.$element.get(0), that.id + '_ms');
                if (forceClose) {
                    if (mse)
                        that._toggleMultiselectSummary(null, false);
                    return;
                }
                if (toggleMinimize && mse) {
                    var v = !_gu.isMultiselectMinimized(mse);
                    _gu.setMultiselectMinimized(v, that.id, mse);
                }
            };
            BasicGrid.prototype._toggleMultiselectSummary = function (selectedItems, forceMaximized) {
                var that = this;
                var mse = _dom.find(that.$element.get(0), that.id + '_ms');
                if (mse) {
                    _dom.remove(mse);
                    return null;
                }
                if (!selectedItems)
                    selectedItems = that._getMultiselectdItems();
                mse = _gu.multiselectContainer(that.id, forceMaximized);
                _gu.createMultiselectItems(that.id, mse, that.renderOptions, selectedItems);
                var p = _dom.find(that.$element.get(0), that.id + '_focus');
                if (p) {
                    _dom.append(p, mse);
                }
                return mse;
            };
            BasicGrid.prototype._renderToolbar = function () {
                var that = this;
                if (that.toolBar && formgrid.toolBarRender) {
                    var opts = that.fieldOptions;
                    var tbOptions = opts.toolbar || {};
                    var tt = tbOptions.parentName && !that.options.design ? that.form.getLayoutElementByName(tbOptions.parentName) : null;
                    var element = that.$element.get(0);
                    if (!tt)
                        tt = _dom.find(element, that.id + '_header');
                    else {
                        _dom.addClass(tt, 'bs-field-group');
                        _dom.removeClass(tt, 'no-x-padding');
                    }
                    var bt = _dom.find(element, that.id + '_bottom');
                    formgrid.toolBarRender($(tt), that.toolBar, $(bt));
                }
            };
            BasicGrid.prototype._createToolbar = function () {
                var that = this;
                if (formgrid.toolBarFactory)
                    that.toolBar = formgrid.toolBarFactory(that);
            };
            BasicGrid.prototype._state = function () {
                _super.prototype._state.call(this);
                var that = this;
                var opts = that.fieldOptions;
                if (!that.state.value)
                    return;
                that.state.value.allowSelecting = that.renderOptions.selecting && (that.renderOptions.selecting.row || that.renderOptions.selecting.cell);
                that.state.value.multiselect = that.renderOptions.selecting && that.renderOptions.selecting.multiselect;
                that.state.value.expandingProperty = that.renderOptions.expandingProperty;
                if (that.state.value.isQueryable()) {
                    // create pager
                    var options = $.extend({ size: "default", selectPage: that._onselectPage.bind(that), noPagesCount: that.state.value.noPagesCount() }, opts.pager || {});
                    that._pager = new _ui.Pager(options);
                    var p = that._pager;
                    p.props.hasNext = that.state.value.hasNext();
                    p.props.hasPrev = that.state.value.hasPrev();
                    p.props.totalPages = that.state.value.totalPages();
                    p.props.currentPage = that.state.value.currentPage();
                }
                that._createToolbar();
            };
            BasicGrid.prototype._destroyDetails = function () {
                //Destroy all inline "forms" 
                var that = this;
                if (!that._details)
                    return;
                var fm = _ui.formManager();
                that._details.forEach(function (detail) {
                    var f = fm.formByName(detail);
                    if (f)
                        f.destroy();
                });
                that._details = [];
            };
            BasicGrid.prototype._destroyDetailById = function (id) {
                var that = this;
                var ii = that._details.indexOf(id);
                if (ii >= 0)
                    that._details.splice(ii, 1);
                var f = _ui.formManager().formByName(id);
                if (f)
                    f.destroy();
            };
            BasicGrid.prototype._initCols = function (options) {
                var that = this;
                that._mapCols = {};
                if (!options.columns || !options.columns.length) {
                    options.columns = [{ $bind: '$index' }];
                }
                that.columns = [];
                that.frozenColumns = [];
                var ii = options.columns.findIndex(function (item) {
                    return _sutils.isSelectField(item.$bind);
                });
                var selectField = null, expandField = null;
                var addSelected = options.selecting && options.selecting.row && options.selecting.multiselect;
                if (addSelected) {
                    if (ii < 0) {
                        selectField = { "$bind": _observable.SELECTED_FIELD_NAME, "options": { "width": 50, "frozen": true } };
                        options.columns.splice(0, 0, selectField);
                    }
                    else {
                        selectField = options.columns[ii];
                    }
                }
                else {
                    if (ii >= 0)
                        options.columns.splice(ii, 1);
                }
                var canExpand = !!options.expandingProperty;
                var addWidth = options.scrolling && options.scrolling.vertical || options.editing;
                var ri = [];
                //xxxx
                var cc = (that.state.value && that.state.value.columns) ? that.state.value.columns : null;
                options.columns.forEach(function (col, index) {
                    var c = $.extend({}, col);
                    c.options = c.options || {};
                    if (selectField !== col && cc && cc.indexOf(col.$bind) < 0)
                        c._isHidden = true;
                    if (canExpand && _sutils.isExpandField(col.$bind)) {
                        expandField = col;
                        c.schema = _sutils.getSchema(col.$bind, that.$schemaItems, that.form.$rootSchema, false);
                        c.$bind = options.expandingProperty + col.$bind;
                        c.options.icons = {
                            '1': options.expanding && options.expanding.plus ? options.expanding.plus : 'plus',
                            '2': options.expanding && options.expanding.minus ? options.expanding.minus : 'minus',
                        };
                        c.options.align = c.options.align || 'left';
                        c.options.alignIcon = c.options.alignIcon || 'left';
                        c.options._clickable = true;
                        c.options._expandItem = true;
                        if (options.expanding) {
                            if (options.expanding.style)
                                c.options._expandItemClass = options.expanding.style;
                            if (options.expanding.iconClass)
                                c.options.iconClass = options.expanding.iconClass;
                        }
                    }
                    if (!c.schema)
                        c.schema = _sutils.getSchema(col.$bind, that.$schemaItems, that.form.$rootSchema, false);
                    if (!c.schema) {
                        if (!c.schema) {
                            console.log('Field (bind) not found : ' + col.$bind);
                            return;
                        }
                    }
                    if (c.options.$lookup)
                        c.$lookup = that.form.getLookupForSchema(that.$bind + '.' + c.$bind, c.options.$lookup);
                    if (that._mapCols[c.$bind]) {
                        console.log('Duplicate column name  : ' + col.$bind);
                        return;
                    }
                    c.title = _ulocale.tt(c.options.title || c.schema.title, that.form.$locale);
                    if (c.options.display) {
                        c.options.displaySchema = _sutils.getSchema(c.options.display, that.$schemaItems, that.form.$rootSchema, false);
                        if (!c.title && c.options.displaySchema) {
                            c.title = _ulocale.tt(c.options.displaySchema.title, that.form.$locale);
                        }
                    }
                    if (_sutils.isLink(col.$bind)) {
                        c.isLink = true;
                        c._isHidden = false;
                    }
                    if (addWidth && !c.options.width)
                        c.options.width = _gu.widthFromSchema(c.schema);
                    if (c.options.frozen && options.allowFrozenColumns) {
                        if (!c.options.width) {
                            c.options.width = _gu.widthFromSchema(c.schema);
                        }
                        else if (!checkPixels(c.options.width)) {
                            c.options.width = 50;
                        }
                        if (!c._isHidden) {
                            that.frozenColumns.push(c);
                            that._mapCols[c.$bind] = { column: c, index: that.frozenColumns.length - 1, tindex: index };
                        }
                        return;
                    }
                    if (!c._isHidden) {
                        that.columns.push(c);
                        that._mapCols[c.$bind] = { column: c, index: that.columns.length - 1, tindex: index };
                    }
                });
            };
            BasicGrid.prototype._colByField = function (field) {
                var ff = this._mapCols[field];
                return ff ? ff.column : null;
            };
            BasicGrid.prototype._totalChanged = function (propName, ov, nv, op, params) {
                var that = this;
                if (!that.$element)
                    return;
                if (that._ignoreNotifications)
                    return false;
                switch (op) {
                    case 'propchange':
                        if (propName === that._totalProperty) {
                            that._renderTotalRows();
                        }
                        else {
                            var item = null, prop = '';
                            if (!that._totalIsArray) {
                                item = params.instance;
                                prop = propName.split('.').pop();
                            }
                            else {
                                var instPath = _sutils.parsePath(that._totalProperty, propName, '');
                                item = params[instPath];
                                prop = propName.substr(instPath.length + 1);
                            }
                            if (item) {
                                that._modifyFooterCell(item, prop);
                            }
                        }
                        break;
                }
            };
            BasicGrid.prototype.changed = function (propName, ov, nv, op, params) {
                var that = this;
                if (!that.$element)
                    return;
                if (that._ignoreNotifications)
                    return false;
                var pp = propName.substr(that.$bind.length);
                if (pp.indexOf('.$selected') >= 0)
                    return;
                var checkVisibility = that.renderOptions.hideWhenNoRows;
                var oldSelected = that.selectedCell;
                var rowToSelect = null;
                var forceRender = false;
                if (params.checkChildren && op === 'propchange' && propName === that.$bind) {
                    checkVisibility = true;
                    forceRender = true;
                    that.state.value = that.form.getValue(that.$bind);
                    that.state.value.allowSelecting = that.renderOptions.selecting && (that.renderOptions.selecting.row || that.renderOptions.selecting.cell);
                    that.state.value.multiselect = that.renderOptions.selecting && that.renderOptions.selecting.multiselect;
                    that.state.value.expandingProperty = that.renderOptions.expandingProperty;
                }
                var updOddEven = false, doResize = false, doSelectFirstCell = false;
                if (that._totalProperty) {
                    if (propName.indexOf(that._totalProperty) === 0) {
                        that._totalChanged(propName, ov, nv, op, params);
                        return;
                    }
                    else if (params.checkChildren && op === 'propchange' && propName === that._totalProperty) {
                        that._totalChanged(that._totalProperty, ov, nv, op, params);
                    }
                }
                if (!that.state.value) {
                    op = 'none';
                }
                switch (op) {
                    case "count":
                        var t = that.toolBar;
                        if (t && t.setValue)
                            t.setValue("count", that.state.value.totalCount());
                        break;
                    case "filter":
                        var tb = that.toolBar;
                        if (tb && tb.setValue)
                            tb.setValue('filter', that.state.value.filter.title || '');
                        break;
                    case "pagination":
                        var p = that._pager;
                        if (p) {
                            p.props.totalPages = that.state.value.totalPages();
                            p.props.currentPage = that.state.value.currentPage();
                            p.props.hasNext = that.state.value.hasNext();
                            p.props.hasPrev = that.state.value.hasPrev();
                        }
                        break;
                    case 'sorting':
                        that._updateSorting();
                        break;
                    case 'propchange':
                        if (propName === that.$bind) {
                            if (params.sorting) {
                                that._renderRows(true, '', null, false);
                                if (oldSelected) {
                                    that._selectCell(oldSelected, null, false, false);
                                }
                            }
                            else {
                                that._renderRows(true, '', null, false);
                                doSelectFirstCell = true;
                            }
                            doResize = true;
                            checkVisibility = true;
                        }
                        else {
                            var prop = propName;
                            var instPath = _sutils.parsePath(that.$bind, prop, that.renderOptions.expandingProperty);
                            var item = params[instPath];
                            if (item) {
                                var cp = propName.substr(instPath.length + 1);
                                if (!cp)
                                    return;
                                that._modifyCell(item, cp, null, null);
                                if (_sutils.isSelectField(cp)) {
                                    if (!that.renderOptions.noRowSelectedIndicator)
                                        _gu.setRowsSelected(item.$id, item.$select, that.fieldOptions, that.$element.get(0));
                                    if (item.$select && that.renderOptions.selecting && that.renderOptions.selecting.cell) {
                                        if (!that.selectedCell || that.selectedCell.row !== item.$id) {
                                            that._selectFirstCellEditable('model', item.$id, null);
                                            doSelectFirstCell = false;
                                        }
                                    }
                                    that._updateMultiselectSummary(false);
                                }
                            }
                        }
                        break;
                    case 'add':
                        that._createRow(params.$value);
                        if (params.$value.$select) {
                            rowToSelect = params.$value.$id;
                            doSelectFirstCell = true;
                        }
                        doResize = true;
                        updOddEven = true;
                        checkVisibility = true;
                        break;
                    case 'remove':
                        var opts = that.renderOptions;
                        if (opts.expandingProperty) {
                            that._removeRow(params.$id);
                            if (params.$value) {
                                var list = params.$value[opts.expandingProperty];
                                if (list)
                                    list._enumChildren(opts.expandingProperty, function (item) {
                                        that._removeRow(item.$id);
                                    });
                            }
                            updOddEven = true;
                            // that._renderRows(true, '', null, false);
                            // doResize = true;
                        }
                        else {
                            that._removeRow(params.$id);
                            updOddEven = true;
                        }
                        checkVisibility = true;
                        break;
                }
                if (checkVisibility) {
                    var nv_1 = that._isHidden();
                    var oldValue = _dom.hasClass(that.$element.get(0), 'bs-none');
                    if (nv_1 !== oldValue) {
                        that.setHidden(that.$element.get(0));
                        doResize = true;
                    }
                }
                if (updOddEven)
                    that._updOddEvenLater();
                if (doResize)
                    that.resize();
                if (doSelectFirstCell) {
                    var colToSelect = null;
                    if (!rowToSelect && oldSelected) {
                        rowToSelect = oldSelected.row;
                        colToSelect = oldSelected.col;
                    }
                    if (rowToSelect && !that._findById(rowToSelect)) {
                        rowToSelect = null;
                        colToSelect = null;
                    }
                    that._selectFirstCellEditable('model', rowToSelect, colToSelect);
                }
            };
            BasicGrid.prototype._modifyStateTD = function (item, field, stateName, td) {
                var that = this;
                var opts = that.renderOptions;
                var col = that._colByField(field);
                if (!col)
                    return;
                var state = item.getState(field);
                var co = col.options || {};
                var editable = (opts.editing || _sutils.isSelectField(field)) && !state.isDisabled && !state.isReadOnly && !state.isHidden && (co.editing !== false) && (co.selecting !== false);
                if (state.isHidden) {
                    _dom.empty(td);
                }
                if (opts.editing) {
                    if (editable)
                        _dom.removeClass(td, 'bs-td-readonly');
                    else
                        _dom.addClass(td, 'bs-td-readonly');
                }
            };
            BasicGrid.prototype._modifyTD = function (item, field, td) {
                var that = this;
                var opts = that.renderOptions;
                var col = that._colByField(field);
                if (!col)
                    return;
                var state = item.getState(field);
                var co = col.options || {};
                var editable = (opts.editing || _sutils.isSelectField(field)) && !state.isDisabled && !state.isReadOnly && !state.isHidden;
                _dom.empty(td);
                if (state.isHidden)
                    return;
                var dv = null;
                var ii = that._viewMap[item.$id];
                var level = ii ? ii.level || 0 : 0;
                if (co.display && co.displaySchema) {
                    dv = _uiutils.utils.displayValue(item.getValue(co.display), co.displaySchema, that.form.$locale, { html: true, tableOptions: opts, avanced: co.displayOptions || {}, state: item.getState(co.display) }, item, co.display);
                }
                var v = _uiutils.utils.displayValue(item.getValue(field), col.schema, that.form.$locale, { html: true, useSymbol: false, editable: editable, selectable: !state.isDisabled, check: opts.editing, avanced: co, tableOptions: opts, display: dv, level: level, state: state }, item, field);
                if (v.html) {
                    var $c = $(v.value);
                    _dom.append(td, $c.get(0));
                }
                else {
                    var cv = v.value;
                    if (cv === '')
                        cv = String.fromCharCode(160);
                    _dom.append(td, document.createTextNode(cv));
                }
            };
            BasicGrid.prototype._findTR = function (id, col) {
                var that = this, opts = that.renderOptions;
                var cid = id + (col.options.frozen && opts.allowFrozenColumns ? '_frozen' : '');
                return _dom.find(that.$element.get(0), cid);
            };
            BasicGrid.prototype._id2rowId = function (id) {
                var ii = id.indexOf('_frozen');
                if (ii > 0)
                    id = id.substring(0, ii);
                return id;
            };
            BasicGrid.prototype._findtBody = function (col) {
                var that = this, opts = that.renderOptions;
                var cid = that.id + (col.options.frozen && opts.allowFrozenColumns ? '_frozen_rows' : '_rows');
                return _dom.find(that.$element.get(0), cid);
            };
            BasicGrid.prototype._modifyFooterCell = function (item, field) {
                var that = this;
                if (!that.$element)
                    return;
                var col = that._colByField(field);
                if (!col)
                    return;
                var tr = that._findTR(item.$id, col);
                if (!tr)
                    return;
                that._findCellAndModify(item, tr, field, null);
            };
            BasicGrid.prototype._findCellAndModify = function (item, tr, field, stateName) {
                //TODO: optimize
                var that = this;
                var list = _dom.queryAll(tr, 'td[colid="' + field + '"]');
                for (var i = 0, len = list.length; i < len; i++) {
                    var ctd = list.item(i);
                    if (stateName) {
                        var stateValue = item.$states[field][stateName];
                        if (stateValue === true && ['isDisabled', 'isHidden', 'isReadOnly'].indexOf(stateName) >= 0) {
                            if (that.inplace && that.inplace.input && that.inplace.td === ctd)
                                that._inplaceEditRemove(false, false, true);
                        }
                        else {
                        }
                        that._modifyStateTD(item, field, stateName, ctd);
                    }
                    else {
                        if (that.inplace && that.inplace.input && that.inplace.td === ctd) {
                            that._inplaceEditModel2Control(item, field, ctd);
                            return;
                        }
                        that._modifyTD(item, field, ctd);
                    }
                }
            };
            BasicGrid.prototype._modifyCell = function (item, field, stateName, td) {
                var that = this;
                if (!that.$element)
                    return;
                var col = that._colByField(field);
                if (!col)
                    return;
                if (td) {
                    if (that.inplace && that.inplace.input && that.inplace.td === td) {
                        that._inplaceEditModel2Control(item, field, td);
                        return;
                    }
                    return that._modifyTD(item, field, td);
                }
                var tr = that._findTR(item.$id, col);
                if (!tr)
                    return;
                that._findCellAndModify(item, tr, field, stateName);
            };
            BasicGrid.prototype._rootElement = function () {
                return this.$element ? this.$element.get(0) : null;
            };
            BasicGrid.prototype._gridParentFocus = function () {
                var that = this;
                return that.$element ? _dom.find(that.$element.get(0), that.id + '_focus') : null;
            };
            BasicGrid.prototype._setErrors = function (grid, element) {
                var that = this;
                var errors = that.state.errors;
                if (element && Phoenix.bootstrap4) {
                    var errorClass = 'is-invalid';
                    if (errors && errors.length)
                        _dom.addClass(element, errorClass);
                    else
                        _dom.removeClass(element, errorClass);
                }
                that.showErrors(element, errors);
            };
            BasicGrid.prototype._setTableFocus = function (value) {
                var that = this;
                var table = _dom.find(that.$element.get(0), that.id + '_table');
                if (table) {
                    if (value)
                        _dom.addClass(table, 'focused');
                    else
                        _dom.removeClass(table, 'focused');
                }
                table = _dom.find(that.$element.get(0), that.id + '_table_frozen');
                if (table) {
                    if (value)
                        _dom.addClass(table, 'focused');
                    else
                        _dom.removeClass(table, 'focused');
                }
            };
            BasicGrid.prototype.focusIn = function ($event) {
                var that = this;
                if (that.$element) {
                    that._setTableFocus(true);
                    if (that.selectedCell) {
                        var c = that._cell(that.selectedCell, true);
                        if (!c) {
                            that.selectedCell = null;
                            that._selectFirstCell('focusin', null, false, null);
                            if (that.selectedCell)
                                c = that._cell(that.selectedCell, true);
                        }
                        if (!c)
                            return;
                        var canEdit = that.canEdit(that.selectedCell);
                        if (canEdit && !that.inplace) {
                            that._inpaceEditShow(c.td, true);
                        }
                    }
                    else {
                        that._inplaceEditRemove(false, false, false);
                    }
                }
            };
            BasicGrid.prototype.focusOut = function ($event) {
                var that = this;
                if (that.$element) {
                    that._setTableFocus(false);
                    that._inplaceEditRemove(true, false, false);
                }
            };
            BasicGrid.prototype._doTab = function (forward) {
                var that = this;
                if (forward)
                    return that._moveRightSelectedCell(true);
                else
                    return that._moveLeftSelectedCell(true);
            };
            BasicGrid.prototype.keypress = function (event) {
                var that = this;
                var focusParent = this._gridParentFocus();
                if (!_dom.isChildOf(focusParent, event.target))
                    return;
                if (that.selectedCell) {
                    if (that.inplace && _dom.isChildOf(that.inplace.td, event.target)) {
                        var cell = that._td2value(that.inplace.td);
                        if (_sutils.isNumber(that.inplace.schema) && !that.inplace.schema.enum) {
                            if (_uiutils.utils.keyPressNumber(event, that.inplace.input, { decimalSep: _locale.number.decimal, thousandSep: _locale.number.thousand, places: that.inplace.decimals, schema: that.inplace.schema }) === false)
                                return false;
                        }
                        else if (_sutils.isDate(that.inplace.schema) && !that.inplace.schema.enum) {
                            if (_uiutils.utils.keyPressDate(event, that.inplace.input, { sep: _locale.date.daySep, format: _locale.date.dateShort, schema: that.inplace.schema }) === false)
                                return false;
                        }
                        else if (_sutils.isBoolean(that.inplace.schema)) {
                            if (String.fromCharCode(event.which) === ' ') {
                                if (that.fieldOptions.editing) {
                                    var state = cell.item.getRelativeState(cell.col.$bind);
                                    if (!state.isDisabled && !state.isReadOnly) {
                                        var ov = cell.item.getValue(cell.col.$bind);
                                        cell.item.setValue(cell.col.$bind, !ov);
                                    }
                                }
                            }
                            event.preventDefault();
                        }
                    }
                }
            };
            BasicGrid.prototype.keydown = function ($event) {
                var that = this, key = $event.which || $event.keyCode;
                var focusParent = this._gridParentFocus();
                if (!_dom.isChildOf(focusParent, $event.target))
                    return;
                var preventDefault = false;
                if (that.inplace && _dom.isChildOf(that.inplace.td, $event.target)) {
                    if (!that._inplaceEditAcceptKeys(key))
                        return;
                    if (that.inplace.combo && (key === _dom.keys.VK_F4 || (key === _dom.keys.VK_DOWN && $event.ctrlKey))) {
                        // ---> START LOOKUP
                        that._toggleGridLookup();
                        // <--- END LOOKUP  
                    }
                    else if (_sutils.isNumber(that.inplace.schema) && !that.inplace.schema.enum) {
                        if (_uiutils.utils.keyDownNumber($event, that.inplace.input, { decimalSep: _locale.number.decimal, thousandSep: _locale.number.thousand, places: that.inplace.decimals, schema: that.inplace.schema }) === false)
                            return;
                    }
                    else if (_sutils.isDate(that.inplace.schema) && !that.inplace.schema.enum) {
                        if (_uiutils.utils.keyDownDate($event, that.inplace.input, { sep: _locale.date.daySep, format: _locale.date.dateShort, schema: that.inplace.schema }) === false)
                            return;
                    }
                }
                if (withModifier($event, key))
                    return;
                if (that.fieldOptions.selecting && that.fieldOptions.selecting.cell) {
                    switch (key) {
                        case _dom.keys.VK_TAB:
                        case _dom.keys.VK_ENTER:
                            preventDefault = that._doTab(!$event.shiftKey);
                            break;
                        case _dom.keys.VK_UP:
                            preventDefault = that._moveUpSelectedCell(1);
                            break;
                        case _dom.keys.VK_DOWN:
                            preventDefault = that._moveDownSelectedCell(1);
                            break;
                    }
                }
                preventDefault && $event.preventDefault() && $event.stopPropagation();
            };
            // ---> START LOOKUP
            BasicGrid.prototype._toggleGridLookup = function () {
                var that = this;
                if (!that.inplace || !that.inplace.combo)
                    return;
                if (that.inplace.combo.opened)
                    formgrid.gridlookup.closeGridLookup(that.inplace, that._eventBus, 'combo');
                else
                    that._openGridLookup();
            };
            BasicGrid.prototype._createGridPopup = function () {
                var that = this;
                if (!that._eventBus)
                    that._eventBus = new Phoenix.serial.SingleEventBus(50);
                var input = that.inplace.input;
                var parent = that.$element.get(0);
                that.inplace.combo = formgrid.gridlookup.checkGridPopup(that, that.inplace.col.$lookup, input, parent);
            };
            BasicGrid.prototype._searchText = function () {
                var that = this;
                if (that.inplace && that.inplace.combo) {
                    var col = that.inplace.col;
                    var cell = that._td2cell(that.inplace.td);
                    if (cell) {
                        var item = that._findById(cell.row);
                        if (item) {
                            var cv = item.getValue(col.$bind, null) || '';
                            var nv = that.inplace.input.value || '';
                            if (nv !== cv)
                                return nv;
                        }
                    }
                }
                return '';
            };
            BasicGrid.prototype._getSource = function (cell, options) {
                var that = this;
                options.fieldName = cell.col.$lookup.mapping[cell.col.$bind];
                options.paginated = true;
                options.containerId = that.form.syncTransactionId();
                options.viewId = that.form.syncViewId();
                options.selected = cell.item.pkId();
                return _sutils.executeLookup(cell.col.$lookup, cell.item, options);
            };
            BasicGrid.prototype._findValue = function (search, cell, after) {
                var that = this;
                if (!search && search === '') {
                    that._eventBus.push(null, function (ldata) { return after(null); }, true);
                    return;
                }
                var opts = { search: search, select: false, findFirst: true, find: false, paginated: that.renderOptions.paginated };
                that._eventBus.push(that._getSource(cell, opts), function (ldata) {
                    ldata = that._filterResult(ldata, opts, cell.col.$lookup, cell.col.$bindp, cell.col.$display);
                    if (ldata && ldata.value && ldata.value.length)
                        after(ldata.value[0]);
                    else
                        after(null);
                }, true);
            };
            BasicGrid.prototype._filterResult = function (ldata, opts, lookup, bind, display) {
                var that = this;
                lookup = formgrid.gridlookup.checkGridLookup(lookup, that.form.$model);
                if (ldata && Array.isArray(ldata)) {
                    ldata = { value: ldata };
                }
                else if (ldata && ldata.documents) {
                    if (lookup.data && lookup.data.$params && lookup.data.$params.$allData) {
                        var fi = _sutils.findFirst(opts.search, _sutils.remoteSearch(_sutils.lastSegment(bind, bind), lookup), ldata.documents);
                        if (fi)
                            return { value: [fi.item] };
                        return null;
                    }
                    else {
                        ldata.value = ldata.documents;
                        delete ldata.documents;
                    }
                }
                return ldata;
            };
            BasicGrid.prototype._setRemoteValue = function (col, item, ldata) {
                var that = this;
                var mapping = Object.keys(col.$lookup.mapping);
                var base = _sutils.extractBase(col.$bind);
                var empty = [], changed = false;
                mapping.forEach(function (key) {
                    if (!col.$lookup.mapping[key]) {
                        empty.push(key);
                    }
                    else {
                        var ov = item.getValue(base + key, null) || '';
                        var nv = ldata ? ldata[col.$lookup.mapping[key]] || '' : '';
                        if (nv === '') {
                            if (typeof ov === 'number')
                                nv = 0;
                            else if (typeof ov === 'boolean')
                                nv = false;
                        }
                        if (nv !== ov) {
                            item.setValue(base + key, nv, null);
                            changed = true;
                        }
                    }
                });
                if (changed)
                    empty.forEach(function (key) {
                        item.setValue(base + key, col.$lookup.mapping[key]);
                    });
            };
            BasicGrid.prototype._onselectItem = function (value) {
                var that = this;
                if (that.inplace && that.inplace.combo) {
                    var col_1 = that.inplace.col;
                    var cell = that._td2cell(that.inplace.td);
                    if (cell) {
                        var item_2 = that._findById(cell.row);
                        if (item_2) {
                            that._eventBus.push(value, function (ldata) {
                                that._setRemoteValue(col_1, item_2, ldata);
                            }, true);
                        }
                    }
                }
            };
            BasicGrid.prototype._openGridLookup = function () {
                var that = this;
                if (!that.inplace.combo.opened) {
                    var cell = that._td2cell(that.inplace.td);
                    var selected = void 0;
                    if (cell) {
                        var item = that._findById(cell.row);
                        if (item)
                            selected = item.pkId();
                    }
                    var lookup = formgrid.gridlookup.checkGridLookup(that.inplace.col.$lookup, that.form.$model);
                    formgrid.gridlookup.openGridLookup(that.inplace, {
                        lookup: lookup,
                        parentControl: that,
                        formControl: that.form,
                        display: that.inplace.col.$bind,
                        bind: that.inplace.col.$bind,
                        containerId: that.form.syncTransactionId(),
                        viewId: that.form.syncViewId(),
                        selected: selected,
                        align: that.inplace.id,
                        openerId: that.inplace.id + '_after',
                        searchText: that._searchText(),
                        onselect: that._onselectItemHandler,
                        lookupColumns: that.inplace.col.options.lookupColumns ? that.inplace.col.options.lookupColumns : undefined,
                        propertyName: 'combo',
                        minWidth: that.inplace.col.options.lookupMinWidth || 0
                    });
                }
            };
            BasicGrid.prototype.checkFocus = function (focusParams) {
                var that = this;
                _utils.nextTick(function () {
                    var ae = window.document.activeElement;
                    if (!ae || !that.targetInControl(ae)) {
                        that.focusOut(null);
                        that.focused = false;
                    }
                });
            };
            // <--- END LOOKUP    
            BasicGrid.prototype.focusInControl = function (activeFocusElement) {
                var that = this;
                var focusParent = that._gridParentFocus();
                var p = _dom.isChildOf(focusParent, activeFocusElement);
                // ---> START LOOKUP
                if (!p && that.inplace) {
                    if (that.inplace.combo && that.inplace.combo.opened)
                        return that.inplace.combo.focusInCombo(activeFocusElement);
                    if (that.inplace && _sutils.isDate(that.inplace.schema) && _uiutils.utils.useDatePicker()) {
                        var dp = _dom.query(document.body, '.datepicker');
                        if (dp && (_dom.isChildOf(dp, activeFocusElement) || activeFocusElement === document.body))
                            return true;
                    }
                }
                // <--- END LOOKUP 
                return p;
            };
            BasicGrid.prototype._tr2rowId = function (tr, col) {
                var id = tr.id;
                if (col && col.options.frozen) {
                    var ii = id.indexOf('_frozen');
                    if (ii > 0) {
                        id = id.substring(0, ii);
                    }
                }
                return id;
            };
            BasicGrid.prototype._td2cell = function (td) {
                var that = this;
                var tr = td.parentNode;
                var pr = tr.parentNode;
                var c = that._colByField(_dom.attr(td, 'colid'));
                if (!c)
                    return null;
                var rid = that._tr2rowId(tr, c);
                var item = that._findById(rid);
                if (item && c)
                    return { row: rid, col: _dom.attr(td, 'colid') };
                return null;
            };
            BasicGrid.prototype._td2value = function (td) {
                var that = this;
                var tr = td.parentNode;
                var pr = tr.parentNode;
                var c = that._colByField(_dom.attr(td, 'colid'));
                var rid = that._tr2rowId(tr, c);
                var item = that._findById(rid);
                return { item: item, col: c };
            };
            BasicGrid.prototype.mousedown = function (event) {
                var that = this;
                var focusParent = this._gridParentFocus();
                if (!_dom.isChildOf(focusParent, event.target))
                    return true;
                var td = _dom.parentByTag(that.$element.get(0), event.target, 'td');
                if (td) {
                    var opts = that.renderOptions;
                    var cell = that._td2cell(td);
                    if (cell) {
                        if (that._selectCell(cell, event, true, false)) {
                            event.preventDefault();
                        }
                        else if (opts.selecting && !opts.selecting.multiselect) {
                            that._selectRow(cell.row);
                        }
                    }
                }
                return true;
            };
            BasicGrid.prototype._addRows = function (item, childrens) {
                var that = this;
                that._renderRows(false, item.$id, childrens, false);
                that._updOddEvenLater();
            };
            BasicGrid.prototype._removeRows = function (item, childrens) {
                var that = this;
                childrens.forEach(function (child) { that._removeRow(child.value.$id); });
                that._updOddEvenLater();
            };
            BasicGrid.prototype.dblclick = function (event) {
                var that = this;
                var opts = that.renderOptions;
                if (!opts.doubleClick)
                    return;
                var td = _dom.parentByTag(that.$element.get(0), event.target, 'td');
                if (td) {
                    var cell = that._td2cell(td);
                    if (cell) {
                        var item = that._findById(cell.row);
                        that.form.execAction(that.$bind + '.$links.' + opts.doubleClick, item);
                    }
                }
            };
            BasicGrid.prototype.click = function (event) {
                var that = this;
                if (!that.state.value)
                    return;
                var opts = that.renderOptions;
                var td = _dom.parentByTag(that.$element.get(0), event.target, 'td');
                if (td) {
                    var cell = that._td2cell(td);
                    if (cell) {
                        var item = that._findById(cell.row);
                        var c = that._colByField(cell.col);
                        if (item) {
                            var linkName = event && event.target && event.target.$link || event.target.parentNode.$link;
                            if (linkName) {
                                var lk = item.getRelativeState(c.$bind);
                                if (lk.isDisabled || lk.isHidden)
                                    return;
                                if (c.schema.$widgetAction) {
                                    if (that[c.schema.$widgetAction])
                                        that[c.schema.$widgetAction](item);
                                }
                                else
                                    that.form.execAction(that.$bind + '.$item.' + linkName, item);
                            }
                            else if (c) {
                                if (that.inplace && that.inplace.input && that.inplace.td === td) {
                                    // ---> START LOOKUP
                                    if (that.inplace.combo) {
                                        // Click on inplace edit
                                        if (event.target.id === that.inplace.id + '_after' || event.target.parentNode.id === that.inplace.id + '_after')
                                            that._toggleGridLookup();
                                    }
                                    // <--- END LOOKUP  
                                    return;
                                }
                                if (c.options._expandItem) {
                                    if (_dom.attr(event.target, 'data-clickable') || _dom.attr(event.target.parentNode, 'data-clickable')) {
                                        var state = item.getRelativeState(c.$bind);
                                        if (!state.isDisabled && !state.isReadOnly) {
                                            var expanded = item.toggleExpand(opts.expandingProperty);
                                            //TODO : move in modifyCell
                                            that._ignoreNotifications = true;
                                            try {
                                                var childrens_1 = [];
                                                var ii = that._viewMap[item.$id];
                                                item.enumVisibleChildren(opts.expandingProperty, ii.level, true, function (item, level) {
                                                    var ii = { level: level, value: item };
                                                    childrens_1.push(ii);
                                                });
                                                if (!childrens_1.length)
                                                    return;
                                                if (expanded)
                                                    that._addRows(item, childrens_1);
                                                else
                                                    that._removeRows(item, childrens_1);
                                                //item.notifyChanged(item.$bind, undefined, undefined, 'set', { source: item.getPropertyPath(that.$bind), instance: item }, false);
                                            }
                                            finally {
                                                that._ignoreNotifications = false;
                                            }
                                        }
                                    }
                                }
                                else if (c.options.$link) {
                                    var a = _dom.findByAttribute(event.target, td, 'data-phoenix-href');
                                    if (a) {
                                        var state = item.getRelativeState(c.$bind);
                                        if (!state.isDisabled) {
                                            if (c.options.$link.action)
                                                that.form.execAction(that.$bind + '.$links.' + c.options.$link.action, item);
                                            else
                                                _link.execLink(c.options.$link, { $item: item }, null);
                                        }
                                    }
                                }
                                else if (c.options.actionName) {
                                    var state = item.getRelativeState('$links.' + c.options.actionName);
                                    if (state && !state.isDisabled)
                                        that.form.execAction(that.$bind + '.$item.$links.' + c.options.actionName, item);
                                }
                                else if (_sutils.isSelectField(c.$bind) || (opts.editing && _sutils.isBoolean(c.schema))) {
                                    if (_dom.attr(event.target, 'data-clickable')) {
                                        var state = item.getRelativeState(c.$bind);
                                        if (!state.isDisabled && !state.isReadOnly && !state.isHidden) {
                                            var ov = item.getValue(c.$bind);
                                            if (_sutils.isSelectField(c.$bind)) {
                                                var list = that.state.value;
                                                list.selecting(true, opts.expandingProperty);
                                                try {
                                                    item.select(!!!ov, opts.selecting && opts.selecting.row && opts.selecting.multiselect, that.state.value, opts.expandingProperty, opts.expanding && opts.expanding.selectChildren);
                                                }
                                                finally {
                                                    list.selecting(false, opts.expandingProperty);
                                                }
                                            }
                                            else
                                                item.setValue(c.$bind, !!!ov);
                                        }
                                    }
                                }
                                else if (opts.selecting && opts.selecting.row && !opts.selecting.multiselect && opts.selecting.action) {
                                    //used for lookup
                                    var state = item.getRelativeState('$links.' + opts.selecting.action);
                                    if (state && !state.isDisabled)
                                        that.form.execAction(that.$bind + '.$item.$links.' + opts.selecting.action, item);
                                }
                            }
                        }
                    }
                }
                else {
                    var th = _dom.parentByTag(that.$element.get(0), event.target, 'th');
                    if (th) {
                        var cid = _dom.attr(th, 'colid');
                        if (cid) {
                            var col = that._colByField(cid);
                            var ss = col.options.display ? col.options.displaySchema : col.schema;
                            if (!ss || !col)
                                return;
                            if (_sutils.isSelectField(col.$bind) && opts.selecting && opts.selecting.row && opts.selecting.multiselect && opts.selecting.selectAll) {
                                var center = _dom.parentByTag(that.$element.get(0), event.target, 'center');
                                if (center) {
                                    var check = _dom.query(center, '.bs-bool-edit');
                                    if (check) {
                                        var cc = _dom.iconClass('check-square-o', true);
                                        var nc = _dom.iconClass('square-o', true);
                                        var isChecked = _dom.hasClass(check, cc);
                                        if (isChecked) {
                                            _dom.removeClass(check, cc);
                                            _dom.addClass(check, nc);
                                        }
                                        else {
                                            _dom.removeClass(check, nc);
                                            _dom.addClass(check, cc);
                                        }
                                        var list = that.state.value;
                                        if (!isChecked) {
                                            list.selecting(true, opts.expandingProperty);
                                            try {
                                                list.forEach(function (item, index, level) {
                                                    item.select(true, opts.selecting && opts.selecting.row && opts.selecting.multiselect, that.state.value, opts.expandingProperty, false);
                                                }, opts.expandingProperty, true);
                                            }
                                            finally {
                                                list.selecting(false, opts.expandingProperty);
                                            }
                                        }
                                        else {
                                            list.selecting(true, opts.expandingProperty);
                                            try {
                                                var selectedItems = that._getMultiselectdItems();
                                                selectedItems.forEach(function (item) {
                                                    item.select(false, opts.selecting && opts.selecting.row && opts.selecting.multiselect, that.state.value, opts.expandingProperty, false);
                                                });
                                            }
                                            finally {
                                                list.selecting(false, opts.expandingProperty);
                                            }
                                        }
                                    }
                                }
                            }
                            else if (opts.sorting && _sutils.canSort(ss)) {
                                var fn = ss.orderBy ? ss.orderBy : (col.options.display ? col.options.display : col.$bind);
                                var no = fn;
                                var oldob = that.state.value.$orderby();
                                if (oldob === fn) {
                                    var items = fn.split(',');
                                    no = items.map(function (item) {
                                        item = item.trim();
                                        var a = item.split(' ');
                                        if (a.length === 1)
                                            a.push('desc');
                                        else
                                            a[1] = a[1] === 'desc' ? 'asc' : 'desc';
                                        return a.join(' ');
                                    }).join(',');
                                }
                                if (that.state.value.isQueryable())
                                    that.state.value.$orderby(no);
                                else if (that.state.value) {
                                    that.form.execAction(that.state.value.getJSONPatchPath() + '.$sort', no);
                                }
                            }
                        }
                    }
                    else if (event.target.id === that.id + '_close_ms') {
                        that._closeMultiselectSummary(false, true);
                    }
                    else {
                        var p = _dom.parentByAttr(that.$element.get(0), event.target, 'data-ms-unselect');
                        if (p) {
                            var itemId = _dom.attr(p, 'data-ms-unselect');
                            var item = that._findById(itemId);
                            if (item) {
                                var list = that.state.value;
                                list.selecting(true, opts.expandingProperty);
                                try {
                                    item.select(false, opts.selecting && opts.selecting.row && opts.selecting.multiselect, that.state.value, opts.expandingProperty, opts.expanding && opts.expanding.selectChildren);
                                }
                                finally {
                                    list.selecting(false, opts.expandingProperty);
                                }
                            }
                        }
                        else if (that.toolBar) {
                            var roots = that.toolBar.htmlRoots();
                            for (var ii = 0; ii < roots.length; ii++) {
                                var root = roots[ii];
                                if (_dom.isChildOf(root.element, event.target)) {
                                    that.toolBar.execClick(event);
                                    break;
                                }
                            }
                        }
                    }
                }
            };
            BasicGrid.prototype._setDisabled = function (button, element) {
                var that = this;
                button.disabled = that.state.isDisabled;
            };
            BasicGrid.prototype._showSelected = function (cell, value, editable, mousedown) {
                var that = this;
                if (!cell)
                    return null;
                var coord = that._cell(cell, false);
                if (!coord)
                    return;
                if (coord.td) {
                    if (value) {
                        _dom.addClass(coord.td, "bs-cell-selected");
                        that._inplaceEditRemove(false, false, false);
                        if (editable && (that.focused || mousedown)) {
                            that._inpaceEditShow(coord.td, false);
                        }
                        else {
                            coord.td.tabIndex = 0;
                            if (that.focused || mousedown) {
                                coord.td.focus();
                            }
                        }
                        that._onFrozenFocusScroll(coord.td, that._colByField(cell.col));
                    }
                    else {
                        _dom.removeClass(coord.td, "bs-cell-selected");
                        coord.td.tabIndex = -1;
                    }
                }
            };
            BasicGrid.prototype.canSelect = function (cell, isTab) {
                var that = this;
                var old = that.selectedCell;
                if (old && old.col === cell.col && old.row === cell.row)
                    return false;
                if (!that.fieldOptions.selecting || !that.fieldOptions.selecting.cell)
                    return false;
                var c = that._colByField(cell.col);
                if (c) {
                    if (!isTab)
                        return true;
                    if (c.options && c.options.selecting === false)
                        return false;
                    var item = that._findById(cell.row);
                    if (item) {
                        var st = item.getState(c.$bind);
                        return !st.isDisabled && !st.isHidden;
                    }
                }
                return false;
            };
            BasicGrid.prototype.canEdit = function (cell) {
                var that = this;
                if (!that.fieldOptions.editing || !that.fieldOptions.selecting || !that.fieldOptions.selecting.cell)
                    return false;
                var c = that._colByField(cell.col);
                if (c.options && c.options.editing === false)
                    return false;
                if (c.isLink)
                    return false;
                if (c.options._expandItem)
                    return false;
                var item = that._findById(cell.row);
                var st = item.getState(c.$bind);
                return !st.isReadOnly && !st.isDisabled && !st.isHidden;
            };
            BasicGrid.prototype._selectRow = function (id) {
                var that = this, opts = that.renderOptions;
                if (!that.state.value)
                    return;
                var multiselect = opts.selecting && opts.selecting.row && opts.selecting.multiselect;
                var item = that._findById(id);
                if (item) {
                    var list = that.state.value;
                    list.selecting(true, opts.expandingProperty);
                    try {
                        item.select(true, multiselect, that.state.value, opts.expandingProperty);
                    }
                    finally {
                        list.selecting(false, opts.expandingProperty);
                    }
                }
            };
            BasicGrid.prototype._selectCell = function (cell, target, mousedown, isTab) {
                var that = this;
                if (!that.canSelect(cell, isTab)) {
                    if (mousedown) {
                        var old_1 = that.selectedCell;
                        if (old_1 && old_1.row === cell.row)
                            return false;
                        return that._selectFirstCell('mouseDown', cell.row, isTab, null);
                    }
                    return false;
                }
                var old = that.selectedCell;
                var canEdit = that.canEdit(cell);
                that.selectedCell = cell;
                that._showSelected(cell, true, canEdit, mousedown);
                if (old) {
                    that._showSelected(old, false, true, mousedown);
                }
                else {
                    that._gridParentFocus().tabIndex = -1;
                }
                var opts = that.renderOptions;
                if (opts.selecting && !opts.selecting.multiselect) {
                    that._selectRow(cell.row);
                }
                return true;
            };
            BasicGrid.prototype._selectFirstCellEditable = function (source, rowId, colToSelect) {
                if (!this._selectFirstCell(source, rowId, true, colToSelect)) {
                    this._selectFirstCell(source, rowId, false, colToSelect);
                }
            };
            BasicGrid.prototype._selectFirstCell = function (source, rowId, isTab, col) {
                var that = this;
                var opts = that.fieldOptions;
                if (!opts.selecting || !opts.selecting.cell)
                    return false;
                var pr = _dom.find(that.$element.get(0), that.id + '_rows');
                if (!pr.childNodes.length)
                    return false;
                var cell = null;
                var allCols = that.frozenColumns.concat(that.columns);
                var i = 0;
                if (col) {
                    i = allCols.indexOf(col);
                    if (i >= 0) {
                        if (isTab)
                            isTab = false;
                    }
                    else
                        i = 0;
                }
                for (var len = allCols.length; i < len; i++) {
                    var c = allCols[i];
                    var rid = void 0;
                    if (rowId)
                        rid = rowId;
                    else {
                        if (opts.selecting && opts.selecting.row && !opts.selecting.multiselect) {
                            var selected = that._getMultiselectdItems();
                            if (selected && selected.length)
                                rid = selected[0].$id;
                        }
                        if (!rid) {
                            if (opts.allowFrozenColumns && c.options.frozen)
                                pr = _dom.find(that.$element.get(0), that.id + '_frozen_rows');
                            var tr = pr.firstChild;
                            rid = that._tr2rowId(tr, c);
                        }
                    }
                    cell = { col: c.$bind, row: rid };
                    if (that.canSelect(cell, isTab))
                        break;
                    cell = null;
                }
                if (cell) {
                    return that._selectCell(cell, null, false, isTab);
                }
                return false;
            };
            BasicGrid.prototype._cell = function (cell, addIndex) {
                var that = this;
                var col = that._mapCols[cell.col];
                var cIndex = col.index;
                var tr = that._findTR(cell.row, col.column);
                if (!tr)
                    return null;
                var td = tr.childNodes[cIndex];
                var res = { td: td, tr: tr, rIndex: -1, cIndex: -1 };
                if (addIndex) {
                    res.rIndex = _dom.indexOf(tr.parentNode, tr);
                    res.cIndex = cIndex;
                }
                return res;
            };
            BasicGrid.prototype._moveUpSelectedCell = function (count) {
                var that = this;
                if (!that.selectedCell)
                    return that._selectFirstCell('keydown', null, false, null);
                var col = that._colByField(that.selectedCell.col);
                var pos = that._cell(that.selectedCell, true);
                if (!pos) {
                    that.selectedCell = null;
                    return that._selectFirstCell('keydown', null, false, null);
                }
                var nri = Math.max(pos.rIndex - count, 0);
                if (nri != pos.rIndex) {
                    var pr = that._findtBody(col);
                    var tr = pr.childNodes[nri];
                    return that._selectCell({ row: that._id2rowId(tr.id), col: that.selectedCell.col }, null, false, false);
                }
                return false;
            };
            BasicGrid.prototype.resize = function () {
                var that = this;
                that.form.execLater({
                    id: that.id + '_resize',
                    hnd: function () {
                        that._resize();
                    }
                });
            };
            BasicGrid.prototype._updateFrozenColumnsHeight = function () {
                var that = this;
                var opts = that.renderOptions;
                if (that._scrollableFrozenContent) {
                    if ((!opts.height || opts.height === "auto") && !opts.minHeight)
                        return;
                    var hasHScroll = that._scrollableMaster.scrollWidth > that._scrollableMaster.clientWidth;
                    var ns = void 0;
                    if (hasHScroll)
                        ns = _dom.scrollbar() + 'px';
                    else
                        ns = '0px';
                    if (that._deltaHScrollContent.style.height !== ns) {
                        that._deltaHScrollContent.style.height = ns;
                        that._vscroll();
                    }
                }
            };
            BasicGrid.prototype._resize = function () {
                var that = this;
                var opts = that.renderOptions;
                var vscroll = opts.scrolling && opts.scrolling.vertical;
                if (!vscroll)
                    return;
                if (!that.$element)
                    console.log('Invalid resize call');
                if (!that._scrollableMaster)
                    return;
                var pos = _dom.position(that._scrollableMaster, null);
                if (opts.bottom) {
                    var view = _dom.documentViewSize();
                    if (that._scrollableMaster) {
                        var pos_1 = _dom.position(that._scrollableMaster, null);
                        var e = that.$element.get(0);
                        var nh = Math.max(0, view.height - pos_1.top - opts.bottom);
                        that._scrollableMaster.style.height = nh + 'px';
                        if (that._scrollableFrozenContent)
                            that._scrollableFrozenContent.style.height = nh + 'px';
                    }
                }
                var hasFrozenColumns = _gu.hasFrozenColumns(opts, that.frozenColumns);
                if (!hasFrozenColumns)
                    return;
                var sh = _dom.scrollbar();
                if (sh) {
                    that._updateFrozenColumnsHeight();
                }
                that._vscroll();
            };
            BasicGrid.prototype.syncHeaderAndFrozenScroll = function (e) {
                var that = this;
                if (!that._scroller || that._scroller === 'master') {
                    that._scroller = 'master';
                    that._hscroll();
                    that._vscroll();
                    that._removeScroller();
                }
            };
            BasicGrid.prototype.syncMasterScroll = function (e) {
                var that = this;
                if (!that._scroller || that._scroller === 'frozen') {
                    that._scroller = 'frozen';
                    that._vsmcroll();
                    that._removeScroller();
                }
            };
            BasicGrid.prototype._removeScroller = function () {
                var that = this;
                if (!that.fieldOptions.editing) {
                    that._scroller = null;
                    return;
                }
                if (that._rsTimer)
                    window.clearTimeout(that._rsTimer);
                that._rsTimer = window.setTimeout(function () {
                    that._scroller = null;
                    that._rsTimer = null;
                }, 50);
            };
            BasicGrid.prototype._vscroll = function () {
                var that = this;
                if (that._scrollableFrozenContent) {
                    var contentScrollTop = that._scrollableMaster.scrollTop, fcScrollTop = that._scrollableFrozenContent.scrollTop;
                    if (contentScrollTop !== fcScrollTop) {
                        that._scrollableFrozenContent.scrollTop = contentScrollTop;
                    }
                }
            };
            BasicGrid.prototype._vsmcroll = function () {
                var that = this;
                var contentScrollTop = that._scrollableMaster.scrollTop, fcScrollTop = that._scrollableFrozenContent.scrollTop;
                if (contentScrollTop !== fcScrollTop) {
                    that._scrollableMaster.scrollTop = fcScrollTop;
                }
            };
            BasicGrid.prototype._hscroll = function () {
                var that = this, contentScrollLeft = that._scrollableMaster.scrollLeft, headerScrollLeft = that._scrollableHeaderOfMaster.scrollLeft;
                if (contentScrollLeft !== headerScrollLeft)
                    that._scrollableHeaderOfMaster.scrollLeft = contentScrollLeft;
                if (that._scrollableFooterOfMaster) {
                    var footerScrollLeft = that._scrollableFooterOfMaster.scrollLeft;
                    if (contentScrollLeft !== footerScrollLeft)
                        that._scrollableFooterOfMaster.scrollLeft = contentScrollLeft;
                }
            };
            BasicGrid.prototype._moveDownSelectedCell = function (count) {
                var that = this;
                if (!that.selectedCell)
                    return that._selectFirstCell('keydown', null, false, null);
                var pos = that._cell(that.selectedCell, true);
                if (!pos) {
                    that.selectedCell = null;
                    return that._selectFirstCell('keydown', null, false, null);
                }
                var col = that._colByField(that.selectedCell.col);
                var pr = that._findtBody(col);
                var nri = Math.min(pos.rIndex + count, pr.childNodes.length - 1);
                if (nri != pos.rIndex) {
                    var tr = pr.childNodes[nri];
                    return that._selectCell({ row: that._id2rowId(tr.id), col: that.selectedCell.col }, null, false, false);
                }
                return false;
            };
            BasicGrid.prototype._moveRightSelectedCell = function (isTab) {
                var that = this;
                if (!that.fieldOptions.selecting || !that.fieldOptions.selecting.cell)
                    return false;
                if (!that.selectedCell)
                    return that._selectFirstCell('keydown', null, isTab, null);
                var allCols = that.frozenColumns.concat(that.columns).map(function (col) { return col.$bind; });
                ;
                var si = allCols.indexOf(that.selectedCell.col);
                var item = that._findById(that.selectedCell.row);
                if (!item || si < 0)
                    return false;
                for (var i = si + 1, len = allCols.length; i < len; i++) {
                    var c = allCols[i];
                    var cell = { col: c, row: item.$id };
                    if (that.canSelect(cell, isTab)) {
                        return that._selectCell(cell, null, false, isTab);
                    }
                }
                item = that._findNext(item.$id);
                if (item) {
                    for (var i = 0, len = si; i <= len; i++) {
                        var c = allCols[i];
                        var cell = { col: c, row: item.$id };
                        if (!isTab || that.canSelect(cell, isTab)) {
                            return that._selectCell(cell, null, false, isTab);
                        }
                    }
                }
                return false;
            };
            BasicGrid.prototype._moveLeftSelectedCell = function (isTab) {
                var that = this;
                if (!that.fieldOptions.selecting || !that.fieldOptions.selecting.cell)
                    return false;
                if (!that.selectedCell)
                    return that._selectFirstCell('keydown', null, isTab, null);
                var allCols = that.frozenColumns.concat(that.columns).map(function (col) { return col.$bind; });
                ;
                var si = allCols.indexOf(that.selectedCell.col);
                var item = that._findById(that.selectedCell.row);
                if (!item || si < 0)
                    return false;
                for (var i = si - 1; i >= 0; i--) {
                    var c = allCols[i];
                    var cell = { col: c, row: item.$id };
                    if (that.canSelect(cell, isTab)) {
                        return that._selectCell(cell, null, false, isTab);
                    }
                }
                item = that._findPrev(item.$id);
                if (item) {
                    for (var i = allCols.length - 1; i >= si; i--) {
                        var c = allCols[i];
                        var cell = { col: c, row: item.$id };
                        if (that.canSelect(cell, isTab)) {
                            return that._selectCell(cell, null, false, isTab);
                        }
                    }
                }
                return false;
            };
            // subcontrols 
            BasicGrid.prototype.getSubControls = function () {
                var that = this;
                if (that.toolBar && that.toolBar.getSubControls)
                    return that.toolBar.getSubControls();
                return null;
            };
            BasicGrid.prototype.addSubControls = function (control) {
                this.toolBar.addSubControls(control);
            };
            BasicGrid.prototype.getChildren = function () {
                var that = this;
                return that.toolBar ? that.toolBar.getChildren() : null;
            };
            // end subcontrols
            BasicGrid.prototype._state2UI = function (inRender) {
                var that = this;
                var grid = that._rootElement();
                var element = that.$element ? that.$element.get(0) : null;
                if (grid) {
                    that._setDisabled(grid, element);
                    that.setHidden(element);
                    that._setErrors(grid, element);
                    if (!inRender)
                        that._selectFirstCell('model', null, false, null);
                    that._renderToolbar();
                    if (that._pager) {
                        var $pp = $(_dom.find(element, that.id + '_pagination'));
                        that._pager.render($pp);
                    }
                }
            };
            BasicGrid.prototype.afterAddedInDom = function () {
                this._selectFirstCell('model', null, true, null);
            };
            BasicGrid.prototype._isHidden = function () {
                var that = this;
                return (that.state.isHidden || !that.state.value || (that.renderOptions.hideWhenNoRows && !that.state.value.length));
            };
            BasicGrid.prototype.setHidden = function (element) {
                if (!element)
                    return;
                var that = this;
                if (that._isHidden())
                    _dom.addClass(element, "bs-none");
                else
                    _dom.removeClass(element, "bs-none");
            };
            BasicGrid.prototype.stateChanged = function (propName, cparams, params) {
                var that = this;
                if (!that.$element)
                    return;
                if (that._ignoreNotifications)
                    return false;
                var pp = cparams.origProperty.substr(that.$bind.length);
                if (pp.indexOf('.$selected') >= 0)
                    return;
                if (pp.indexOf('.$links') === 0)
                    return;
                var state = that.form.getState(that.$bind);
                var grid = that._rootElement();
                var element = that.$element ? that.$element.get(0) : null;
                if ((propName === 'columns')) {
                    if (that.state.value)
                        that._setVisiblesColumns(that.state.value.columns);
                }
                if (!propName && cparams.isState) {
                    var instPath = _sutils.parsePath(that.$bind, cparams.property, that.renderOptions.expandingProperty);
                    var item = params[instPath];
                    if (item) {
                        var cp = cparams.property.substr(instPath.length + 1);
                        var stateName = cparams.origProperty.substr(cparams.property.length + 1);
                        that._modifyCell(item, cp, stateName, null);
                    }
                    return;
                }
                else {
                    if (!propName || (propName === 'isHidden')) {
                        if (state.isHidden !== that.state.isHidden) {
                            that.state.isHidden = state.isHidden;
                            if (grid)
                                that.setHidden(element);
                        }
                    }
                    if (!propName || (propName === 'isDisabled')) {
                        if (state.isDisabled != that.state.isDisabled) {
                            that.state.isDisabled = state.isDisabled;
                            if (grid)
                                that._setDisabled(grid, element);
                        }
                    }
                    if (!propName || (propName === 'errors')) {
                        if (_eu.errorChanged(that.state.errors, state.errors)) {
                            that.state.errors = state.errors;
                            that._setErrors(grid, element);
                        }
                    }
                    if (!propName || (propName === 'orderBy')) {
                        that._updateSorting();
                    }
                }
            };
            BasicGrid.prototype.stopProppagation = function (event) {
                var that = this;
                var target = event.target;
                var e = that.$element.get(0);
                var focusParent = this._gridParentFocus();
                if (!_dom.isChildOf(focusParent, event.target))
                    return;
                while (target) {
                    if (target === e)
                        return;
                    if (target.href) {
                        event.preventDefault();
                        event.stopPropagation();
                    }
                    target = target.parentNode;
                }
            };
            BasicGrid.prototype._buildView = function (item, index, level, _view, _viewMap) {
                var that = this;
                var ii = { level: level, value: item };
                _view = _view || that._view;
                _viewMap = _viewMap || that._viewMap;
                _view.push(ii);
                _viewMap[item.$id] = ii;
            };
            BasicGrid.prototype._findById = function (id) {
                var that = this;
                if (!that.state.value)
                    return null;
                if (that._useView) {
                    var item = that._viewMap[id];
                    return item ? item.value : null;
                }
                return that.state.value.findById(id);
            };
            BasicGrid.prototype._findByIdEx = function (id) {
                var that = this;
                if (!that.state.value)
                    return null;
                var res = { index: -1, level: 0, value: null };
                if (that._useView) {
                    var ii = that._viewMap[id];
                    if (ii) {
                        res.index = that._view.indexOf(ii);
                        res.level = ii.level;
                        res.value = ii.value;
                    }
                }
                else {
                    res.value = that.state.value.findById(id);
                    if (res.value) {
                        res.index = that.state.value.indexOf(res.value);
                    }
                }
                return res;
            };
            BasicGrid.prototype._findNext = function (id) {
                var that = this;
                if (!that.state.value)
                    return null;
                if (that._useView) {
                    var ii = that._viewMap[id];
                    if (ii) {
                        var index = that._view.indexOf(ii);
                        if (that._view.length > index + 1)
                            return that._view[index + 1].value;
                    }
                }
                else {
                    var ii = that.state.value.findById(id);
                    if (ii) {
                        var index = that.state.value.indexOf(ii);
                        if (that.state.value.length > index + 1)
                            return that.state.value.get(index + 1);
                    }
                }
                return null;
            };
            BasicGrid.prototype._findPrev = function (id) {
                var that = this;
                if (!that.state.value)
                    return null;
                if (that._useView) {
                    var ii = that._viewMap[id];
                    if (ii) {
                        var index = that._view.indexOf(ii);
                        if (index > 0)
                            return that._view[index - 1].value;
                    }
                }
                else {
                    var ii = that.state.value.findById(id);
                    if (ii) {
                        var index = that.state.value.indexOf(ii);
                        if (index > 0)
                            return that.state.value.get(index - 1);
                    }
                }
                return null;
            };
            BasicGrid.prototype._renderTotalRows = function () {
                var that = this;
                if (that.$element) {
                    var opts = that.renderOptions;
                    var use = void 0;
                    if (that._totalProperty) {
                        var totals = that.form.getValue(that._totalProperty);
                        if (!that._totalIsArray)
                            totals = [totals || {}];
                        var doColSpan = !!that._totalField || !!that._stopField;
                        var pr = void 0, rows = void 0;
                        if (_gu.hasFrozenColumns(that.renderOptions, that.frozenColumns)) {
                            doColSpan = false;
                            pr = _dom.find(that.$element.get(0), that.id + '_frozen_totals');
                            if (pr) {
                                rows = _gu.createRows(that.id, totals, that.frozenColumns, opts, that.options.design, that.form.$locale, true, true, null, null, null);
                                _dom.empty(pr);
                                _dom.append(pr, rows);
                            }
                        }
                        pr = _dom.find(that.$element.get(0), that.id + '_totals');
                        rows = _gu.createRows(that.id, totals, that.columns, opts, that.options.design, that.form.$locale, false, true, null, doColSpan ? that._totalField : null, doColSpan ? that._stopField : null);
                        _dom.empty(pr);
                        _dom.append(pr, rows);
                    }
                }
            };
            BasicGrid.prototype._renderRows = function (allRows, afterRow, values, isCreate) {
                var that = this;
                if (that.$element) {
                    var opts = that.renderOptions;
                    var cb = null;
                    if (allRows) {
                        that._view = [];
                        that._viewMap = {};
                        that._useView = true;
                        cb = that._buildView.bind(that);
                    }
                    var pr = void 0, rows = void 0;
                    that._inplaceEditRemove(false, false, true);
                    that._destroyDetails();
                    if (_gu.hasFrozenColumns(that.renderOptions, that.frozenColumns)) {
                        pr = _dom.find(that.$element.get(0), that.id + '_frozen_rows');
                        if (pr) {
                            if (allRows) {
                                rows = that.state.value ? _gu.createRows(that.id, that.state.value, that.frozenColumns, opts, that.options.design, that.form.$locale, true, false, cb, null, null) : null;
                                cb = null;
                                _dom.empty(pr);
                                if (rows)
                                    _dom.append(pr, rows);
                            }
                            else {
                                rows = _gu.createBulkRows(that.id, values, that.frozenColumns, opts, that.options.design, that.form.$locale, true, false, cb);
                                var pp = _dom.find(pr, afterRow + '_frozen');
                                _dom.after(pp, rows);
                            }
                        }
                    }
                    pr = _dom.find(that.$element.get(0), that.id + '_rows');
                    if (allRows) {
                        rows = that.state.value ? _gu.createRows(that.id, that.state.value, that.columns, opts, that.options.design, that.form.$locale, false, false, cb, null, null) : null;
                        _dom.empty(pr);
                        if (rows)
                            _dom.append(pr, rows);
                    }
                    else {
                        rows = _gu.createBulkRows(that.id, values, that.columns, opts, that.options.design, that.form.$locale, false, false, cb);
                        var pp = _dom.find(pr, afterRow);
                        _dom.after(pp, rows);
                    }
                }
                if (!allRows) {
                    var where = that._viewMap[afterRow];
                    var index = that._view.indexOf(where);
                    that._view.splice(index, 0, values);
                    values.forEach(function (ii) { that._viewMap[ii.value.$id] = ii; });
                }
                that._updateMultiselectSummary(isCreate);
            };
            BasicGrid.prototype.editDetail = function (item) {
                //not compatible with frozenColumns
                var that = this, id = item.$id;
                if (that.$element) {
                    var options = that.renderOptions;
                    var hfc = _gu.hasFrozenColumns(options, that.frozenColumns);
                    if (hfc)
                        return;
                    var pr = _dom.find(that.$element.get(0), that.id + '_rows');
                    var tdetail = _dom.find(pr, id + '_detail');
                    if (tdetail)
                        return;
                    var p = _dom.find(pr, id);
                    if (p) {
                        tdetail = _gu.createDetail(id, p);
                        // prepare layout
                        var rowsOpts = that.renderOptions.rows;
                        if (!rowsOpts || !rowsOpts.detail || !rowsOpts.detail.layout) {
                            throw new Error('Grid options missing: "options.rows.detail.layout".');
                        }
                        var layout = rowsOpts.detail.layout;
                        if (typeof layout === 'string' && that.renderOptions.layouts && that.renderOptions.layouts[layout])
                            layout = that.renderOptions.layouts[layout];
                        if (typeof layout === "object") {
                            layout = $.extend(true, {}, layout);
                            if (layout.name)
                                layout._name = layout.name;
                            layout.name = id;
                        }
                        // prepare schema
                        var ss = item.getSchema();
                        if (typeof ss === "object") {
                            ss.links = ss.links || {};
                            ss.links.$updateChanges = ss.links.$updateChanges || { title: _locale.ui.ApplyDetailChanges };
                        }
                        var fo = {};
                        if (rowsOpts.detail.spacing)
                            fo.verticalSpacing = true;
                        fo.closeButtonHandler = function () {
                            that.closeDetail(id);
                        };
                        if (layout._name) {
                            fo.externalLayout = layout._name;
                            fo.externalSchema = that.form.options.externalSchema;
                            fo.externalLocale = that.form.options.externalLocale;
                        }
                        fo.path = that.$bind;
                        that._details.push(id);
                        _ui.OpenForm($(tdetail.firstChild), layout, that.form.$schema, item.schemaModel(true), that.form.$locale, function (action, model, form) {
                            if (action.operation === 'init') {
                                that.form.execAction('$links.$beforeEdit', model, model);
                            }
                            else {
                                switch (action.property) {
                                    case "$links.$updateChanges":
                                        if (!that.state.value.updateItem(item, model))
                                            return;
                                        item.update(model.schemaModel(false));
                                        that.form.execAction('$links.$afterUpdateChanges', item, item);
                                        that.closeDetail(id);
                                        break;
                                }
                            }
                        }, fo);
                        _dom.after(p, tdetail);
                    }
                }
            };
            BasicGrid.prototype.closeDetail = function (id) {
                //not compatible with rozenColumns
                var that = this;
                that._destroyDetailById(id);
                if (that.$element) {
                    var tdetail = _dom.find(that.$element.get(0), id + '_detail');
                    if (tdetail)
                        _dom.remove(tdetail);
                }
            };
            BasicGrid.prototype._removeRow = function (id) {
                var that = this;
                that._destroyDetailById(id);
                if (that._viewMap) {
                    var ii = that._viewMap[id];
                    if (ii) {
                        delete that._viewMap[id];
                        var i = that._view.indexOf(ii);
                        if (i >= 0)
                            that._view.splice(i, 1);
                    }
                }
                if (that.$element) {
                    var toRemoveList = [];
                    var toRemove = _dom.find(that.$element.get(0), id);
                    if (toRemove)
                        toRemoveList.push({ element: toRemove, columns: that.columns });
                    if (_gu.hasFrozenColumns(that.renderOptions, that.frozenColumns)) {
                        toRemove = _dom.find(that.$element.get(0), id + '_frozen');
                        if (toRemove)
                            toRemoveList.push({ element: toRemove, columns: that.frozenColumns });
                    }
                    toRemoveList.forEach(function (re) {
                        var pr = re.element.parentNode;
                        // remove detail
                        var tdetail = _dom.find(pr, id + '_detail');
                        if (tdetail)
                            _dom.remove(tdetail);
                        if (pr.firstChild === re.element && that.renderOptions.headerIsHidden && !that.renderOptions._useColGrp && pr.childNodes.length > 1) {
                            //no header &&  not useColGrp ==> update cols width on first row
                            var tr = pr.childNodes[1];
                            re.columns.forEach(function (col, index) {
                                var td = tr.childNodes[index];
                                if (col.options.width)
                                    td.style.width = _gu.ensureWidth(col.options.width);
                                if (col.options.minWidth)
                                    td.style.minWidth = _gu.ensureWidth(col.options.minWidth);
                            });
                        }
                        _dom.remove(re.element);
                    });
                }
            };
            BasicGrid.prototype._updOddEven = function () {
                var that = this;
                if (!that.renderOptions._useStripedCss && that.renderOptions.striped) {
                    if (that.$element) {
                        var pr = _dom.find(that.$element.get(0), that.id + '_rows');
                        _gu.updateEvenOdd(pr);
                        pr = _dom.find(that.$element.get(0), that.id + '_frozen_rows');
                        if (pr)
                            _gu.updateEvenOdd(pr);
                    }
                }
            };
            BasicGrid.prototype._updOddEvenLater = function () {
                var that = this;
                that.form.execLater({
                    id: that.id + '_odd_even',
                    hnd: function () {
                        that._updOddEven();
                    }
                });
            };
            BasicGrid.prototype._createRow = function (item) {
                var that = this;
                if (that.$element) {
                    var index = 0;
                    var ii = that._viewMap[item.$id];
                    if (!ii) {
                        //TODO find level when expandingProperty is not null
                        ii = { level: 0, value: item };
                        that._view.push(ii);
                        that._view.push(item.$id);
                        index = that._view.length - 1;
                        that._viewMap[item.$id] = ii;
                    }
                    else {
                        ii = that._viewMap[item.$id];
                    }
                    var pr = void 0, nr = void 0, hasFc = _gu.hasFrozenColumns(that.renderOptions, that.frozenColumns);
                    if (hasFc) {
                        pr = _dom.find(that.$element.get(0), that.id + '_frozen_rows');
                        nr = _gu.createRow(that.id, index, ii.level, ii.value, that.frozenColumns, that.renderOptions, that.options.design, that.form.$locale, pr.childNodes.length % 2 === 1, true, false);
                        _dom.append(pr, nr);
                    }
                    pr = _dom.find(that.$element.get(0), that.id + '_rows');
                    nr = _gu.createRow(that.id, index, ii.level, ii.value, that.columns, that.renderOptions, that.options.design, that.form.$locale, pr.childNodes.length % 2 === 1, false, false);
                    _dom.append(pr, nr);
                }
            };
            BasicGrid.prototype.filtrableColumns = function () {
                var that = this;
                var schema = that.$schema;
                var schemaItems = that.$schemaItems;
                if (schema && schema.type === "array" && schemaItems && schemaItems.type === "object") {
                    return _sutils.filtrableFields(schemaItems, that.form.$rootSchema, that.form.$locale);
                }
                return [];
            };
            BasicGrid.prototype._getColumnsFromSchema = function () {
                var that = this;
                var schema = that.$schema;
                var schemaItems = that.$schemaItems;
                if (schema && schema.type === "array" && schemaItems && schemaItems.type === "object") {
                    return _sutils.columns(schemaItems, that.form.$rootSchema, that.form.$locale);
                }
                return [];
            };
            BasicGrid.prototype._getSelectedColumns = function () {
                var that = this, res = {};
                Object.keys(that._mapCols).forEach(function (key) {
                    var c = that._mapCols[key].column;
                    if (c.options._expandItem && c.options.display)
                        key = c.options.display;
                    res[key] = true;
                });
                return res;
            };
            BasicGrid.prototype._getGroupsFromSchema = function () {
                var that = this;
                var schema = that.$schema;
                var schemaItems = that.$schemaItems;
                if (schema && schema.type === "array" && schemaItems && schemaItems.type === "object" && schemaItems.groups) {
                    return schemaItems.groups;
                }
                return {};
            };
            BasicGrid.prototype.getColumnsForSettings = function () {
                var that = this;
                return {
                    schemaGroups: that._getGroupsFromSchema(),
                    schemaColumns: that._getColumnsFromSchema(),
                    selectedColumns: that._getSelectedColumns(),
                    locale: that.form.$locale
                };
            };
            BasicGrid.prototype.getColumnsForFilter = function (mongoFilter) {
                var that = this;
                var res = {
                    schemaGroups: that._getGroupsFromSchema(),
                    schemaColumns: that.filtrableColumns(),
                    locale: that.form.$locale,
                    mongoFilter: mongoFilter,
                    filters: undefined
                };
                if (mongoFilter && formgrid.glbMongoFilter2Filter) {
                    res.filters = formgrid.glbMongoFilter2Filter(that.state.value.filter, that.filtrableColumns());
                }
                return res;
            };
            BasicGrid.prototype.getColumnsForFilterExpress = function (fields) {
                var that = this;
                var columns;
                if (fields && Array.isArray(fields)) {
                    var allColumns_1 = that._getColumnsFromSchema();
                    columns = [];
                    fields.forEach(function (field) {
                        allColumns_1.every(function (col) {
                            if (field === col.name) {
                                columns.push(col);
                                return false;
                            }
                            return true;
                        });
                    });
                }
                else
                    columns = that._getColumnsFromSchema();
                var formatCols = [];
                columns.forEach(function (col) {
                    var sc = col.schema;
                    var elt = { code: col.name, lib: sc.title || sc.name, type: sc.type, selected: true };
                    if (sc.enum)
                        elt.enum = sc.enum;
                    if (sc.enumNames)
                        elt.enumNames = sc.enumNames;
                    formatCols.push(elt);
                });
                return formatCols;
            };
            BasicGrid.prototype._updateSorting = function () {
                var that = this;
                var opts = that.renderOptions;
                if (!that.$element)
                    return;
                if (opts && opts.sorting && !opts.headerIsHidden) {
                    if (!that.state.value)
                        return;
                    var pc = _dom.find(that.$element.get(0), that.id + '_cols');
                    if (pc)
                        _gu.updSorting(opts, pc, that._colByField.bind(that), that.state.value.$orderby());
                    pc = _dom.find(that.$element.get(0), that.id + '_frozen_cols');
                    if (pc)
                        _gu.updSorting(opts, pc, that._colByField.bind(that), that.state.value.$orderby());
                }
            };
            BasicGrid.prototype._renderColumns = function (opts) {
                var that = this;
                that._inplaceEditRemove(false, false, true);
                if (opts._useColGrp) {
                    // create free columns
                    var vscroll = opts.scrolling && opts.scrolling.vertical;
                    var cg = vscroll && !opts.headerIsHidden ? _dom.find(that.$element.get(0), that.id + '_colgrp_header') : null;
                    if (cg) {
                        _dom.empty(cg);
                        _dom.append(cg, _gu.createColGroup(that.columns, opts, false));
                    }
                    cg = _dom.find(that.$element.get(0), that.id + '_colgrp');
                    _dom.empty(cg);
                    _dom.append(cg, _gu.createColGroup(that.columns, opts, false));
                    // add total
                    if (opts.total && opts.total.property) {
                        cg = _dom.find(that.$element.get(0), that.id + '_colgrp_footer');
                        if (cg) {
                            _dom.empty(cg);
                            _dom.append(cg, _gu.createColGroup(that.columns, opts, true));
                        }
                    }
                    // create frozen columns
                    if (_gu.hasFrozenColumns(opts, that.frozenColumns)) {
                        var cg_1 = vscroll && !opts.headerIsHidden ? _dom.find(that.$element.get(0), that.id + '_colgrp_frozen_header') : null;
                        if (cg_1) {
                            _dom.empty(cg_1);
                            _dom.append(cg_1, _gu.createColGroup(that.frozenColumns, opts, true));
                        }
                        cg_1 = _dom.find(that.$element.get(0), that.id + '_colgrp_frozen');
                        if (cg_1) {
                            _dom.empty(cg_1);
                            _dom.append(cg_1, _gu.createColGroup(that.frozenColumns, opts, true));
                        }
                        // add total
                        if (opts.total && opts.total.property) {
                            cg_1 = _dom.find(that.$element.get(0), that.id + '_colgrp_frozen_footer');
                            if (cg_1) {
                                _dom.empty(cg_1);
                                _dom.append(cg_1, _gu.createColGroup(that.frozenColumns, opts, true));
                            }
                        }
                    }
                }
                if (!opts.headerIsHidden) {
                    var pc = _dom.find(that.$element.get(0), that.id + '_cols');
                    _dom.empty(pc);
                    _dom.append(pc, _gu.createCols(that.id, that.columns, opts, that.options.design, that.form.$locale, that.state.value ? that.state.value.$orderby() : null, false));
                    if (_gu.hasFrozenColumns(opts, that.frozenColumns)) {
                        pc = _dom.find(that.$element.get(0), that.id + '_frozen_cols');
                        if (pc) {
                            _dom.empty(pc);
                            _dom.append(pc, _gu.createCols(that.id, that.frozenColumns, opts, that.options.design, that.form.$locale, that.state.value ? that.state.value.$orderby() : null, true));
                        }
                    }
                }
                if (opts.allowFrozenColumns) {
                    _gu.updateFrozenWidth(that.$element.get(0), that.id, that.frozenColumns);
                }
            };
            BasicGrid.prototype.toggleMultiselect = function () {
                var that = this;
                if (!that.$element)
                    return;
                var opts = that.renderOptions;
                if (opts.selecting && opts.selecting.row) {
                    opts.selecting.multiselect = !!!opts.selecting.multiselect;
                    if (that.state.value) {
                        var list = that.state.value;
                        list.selecting(true, opts.expandingProperty);
                        try {
                            that.state.value.updateSelecting(opts.selecting.multiselect, opts.expandingProperty);
                        }
                        finally {
                            list.selecting(false, opts.expandingProperty);
                        }
                    }
                    that.savePreferences(function () {
                        that._refreshGrid();
                    });
                }
            };
            BasicGrid.prototype.render = function ($parent) {
                var that = this;
                var opts = that._initOptions(_uiutils.utils.defaultOptions);
                if (!that.$element) {
                    if (that.$schema.description)
                        opts.description = _ulocale.tt(that.$schema.description, that.form.$locale);
                    that.$element = $(_gu.gridContainer(that.id, opts, that.options.design, that.$schema.title, that.form.$locale, that.columns, that.frozenColumns));
                    that._renderColumns(opts);
                    that._renderRows(true, '', null, true);
                    that._renderTotalRows();
                    that._state2UI(true);
                    that.setEvents(opts);
                }
                that.appendElement($parent, opts);
                return that.$element;
            };
            return BasicGrid;
        }(Phoenix.ui.AbsField));
        formgrid.BasicGrid = BasicGrid;
        _ui.registerControl(BasicGrid, 'array', false, '', null);
        _ui.registerControl(BasicGrid, 'array', false, 'basicgrid', null);
    })(formgrid = Phoenix.formgrid || (Phoenix.formgrid = {}));
})(Phoenix || (Phoenix = {}));
/// <reference path="../../../core/core-refs.ts" />
/// <reference path="./absfield.control.ts" />
var Phoenix;
(function (Phoenix) {
    var _utils = Phoenix.utils, _ui = Phoenix.ui, _dom = Phoenix.dom, _ulocale = Phoenix.ulocale, _eu = Phoenix.Observable.errorsUtils, _uiutils = Phoenix.uiutils;
    var formcheck;
    (function (formcheck) {
        function _createCheckBox(id, options, authoring, title) {
            var _bootstrap4 = Phoenix.bootstrap4;
            title = title || '';
            options = $.extend({ titleIsHidden: false, placeHolder: false, columns: false }, options);
            var html = [];
            _uiutils.utils.fieldWrapper(html, options, authoring, function () {
                if (options.columns) {
                    html.push('<div class="no-x-padding ml-sm-auto col-sm-' + (12 - options.labelCol) + '">');
                }
                html.push('<div id="{0}_check" class="custom-control custom-checkbox">');
                html.push('<input type="checkbox" id="{0}_input" class="custom-control-input">');
                html.push('<label class="custom-control-label" for="{0}_input"> ');
                html.push(_utils.escapeHtml(title || ''));
                html.push('&nbsp;');
                html.push('</label>');
                html.push('</div>');
                _uiutils.utils.addErrorDiv(html, false);
                if (options.columns) {
                    html.push('</div>');
                }
            });
            return _utils.format(html.join(''), id);
        }
        ;
        var Check = /** @class */ (function (_super) {
            __extends(Check, _super);
            function Check(fp, options, form) {
                var _this = _super.call(this, fp, options, form) || this;
                _this._state();
                return _this;
            }
            Check.prototype._input = function () {
                var that = this;
                if (!that.$element)
                    return null;
                var e = that.$element.get(0);
                return _dom.find(e, that.id + '_input');
            };
            Check.prototype._check = function () {
                var that = this;
                if (!that.$element)
                    return null;
                var e = that.$element.get(0);
                return _dom.find(e, that.id + '_check');
            };
            Check.prototype.click = function (event) {
                var that = this, input = that._input(), value = input.checked || false;
                if (event.target != input)
                    return;
                if (that.state.value != value) {
                    if (that._isBinded) {
                        that.state.value = value;
                        that.form.setValue(that.$bind, value);
                    }
                    else {
                        that.setInternalValue(value, true);
                    }
                }
            };
            Check.prototype._setDisabled = function (input, element) {
                var that = this, check = that._check();
                if (that.state.isDisabled || that.state.isReadOnly)
                    _dom.addClass(check, "disabled");
                else
                    _dom.removeClass(check, "disabled");
                input.disabled = that.state.isDisabled;
            };
            Check.prototype._setReadOnly = function (input, element) {
                this._setDisabled(input, element);
            };
            Check.prototype._setMandatory = function (input, element) { };
            Check.prototype._setErrors = function (element) {
                var that = this;
                var errors = that.state.errors;
                if (element && Phoenix.bootstrap4) {
                    var errorClass = 'is-invalid';
                    if (errors && errors.length)
                        _dom.addClass(element, errorClass);
                    else
                        _dom.removeClass(element, errorClass);
                }
                that.showErrors(element, errors);
            };
            Check.prototype._state2UI = function () {
                var that = this, input = that._input(), element = that.$element ? that.$element.get(0) : null;
                if (input) {
                    input.checked = that.state.value || false;
                    that._setDisabled(input, element);
                    that._setReadOnly(input, element);
                    that.setHidden(element);
                    that._setErrors(element);
                }
            };
            Check.prototype.changed = function (propName, ov, nv, op) {
                var that = this, input = that._input();
                if (that.state.value != nv) {
                    that.state.value = nv;
                    if (input)
                        input.checked = that.state.value || false;
                }
            };
            Check.prototype.stateChanged = function (propName, params) {
                var that = this, state = that._isBinded ? that.form.getState(that.$bind) : that._internalState, input = that._input(), element = that.$element ? that.$element.get(0) : null;
                if (state.isHidden !== that.state.isHidden) {
                    that.state.isHidden = state.isHidden;
                    if (input)
                        that.setHidden(element);
                }
                if (state.isDisabled != that.state.isDisabled) {
                    that.state.isDisabled = state.isDisabled;
                    if (input)
                        that._setDisabled(input, element);
                }
                if (state.isReadOnly != that.state.isReadOnly) {
                    that.state.isReadOnly = state.isReadOnly;
                    if (input)
                        that._setReadOnly(input, element);
                }
                if (state.isMandatory != that.state.isMandatory) {
                    that.state.isMandatory = state.isMandatory;
                    if (input)
                        that._setMandatory(input, element);
                }
                if (!propName || (propName === 'errors')) {
                    if (_eu.errorChanged(that.state.errors, state.errors)) {
                        that.state.errors = state.errors;
                        that._setErrors(element);
                    }
                }
            };
            Check.prototype.render = function ($parent) {
                var that = this;
                var opts = that._initOptions(_uiutils.utils.defaultOptions);
                if (!that.$element) {
                    that.$element = $(_createCheckBox(that.id, opts, that.options.design, _ulocale.tt(that.$schema.title, that.form.$locale)));
                    that._state2UI();
                }
                that.appendElement($parent, opts);
                return that.$element;
            };
            return Check;
        }(Phoenix.ui.AbsField));
        formcheck.Check = Check;
        _ui.registerControl(Check, "boolean", false, '', null);
    })(formcheck || (formcheck = {}));
})(Phoenix || (Phoenix = {}));
/// <reference path="../../../core/core-refs.ts" />
/// <reference path="./absfield.control.ts" />
/// <reference path="../errors.data.ts" />
/// <reference path="./basicgrid.ts" />
/// <reference path="../modalform.control.ts" />
var Phoenix;
(function (Phoenix) {
    var formcolumngrid;
    (function (formcolumngrid) {
        var _utils = Phoenix.utils, _ui = Phoenix.ui, _dom = Phoenix.dom, _uiutils = Phoenix.uiutils, _eu = Phoenix.Observable.errorsUtils, _gridrender = Phoenix.gridrender, _gu = _gridrender.GridUtil, _sutils = Phoenix.Observable.SchemaUtils;
        var ColumnGrid = /** @class */ (function (_super) {
            __extends(ColumnGrid, _super);
            function ColumnGrid(fp, options, form) {
                var _this = _super.call(this, fp, options, form) || this;
                var that = _this;
                var opts = that.fieldOptions;
                that._initAllColumns();
                that._state();
                var fields = opts.columns.header.fields || [];
                opts.columns.header.fields = that.form.afterSettings(that.$bind, "columngrid", { columns: fields }).columns;
                var ctrSettings = that.form.getFieldSettings(that.$bind);
                if (ctrSettings) {
                    that._settings = that.form.afterSettings(that.$bind, "columngrid", ctrSettings);
                }
                that._initRows();
                return _this;
            }
            ColumnGrid.prototype._initSchemaRows = function (rows) {
                var that = this;
                that.rows = [];
                rows.forEach(function (r, index) {
                    that.rows[index] = { name: r.name, canEdit: r.canEdit, check: r.check, schema: _sutils.getSchema(r.name, that.$schemaItems, that.form.$rootSchema, false) || {} };
                });
            };
            ColumnGrid.prototype._colByName = function (rn) {
                var that = this;
                for (var i = 0, len = that.rows.length; i < len; i++) {
                    var r = that.rows[i];
                    if (r.name === rn)
                        return r;
                }
                return null;
            };
            ColumnGrid.prototype.setSettings = function (settings) {
                var that = this;
                that._rrender();
            };
            ColumnGrid.prototype._initRows = function () {
                var that = this;
                if (that.rows)
                    return;
                var opts = that.fieldOptions;
                if (!opts.columns)
                    opts.columns = {};
                if (!opts.columns.header)
                    opts.columns.header = {};
                if (!opts.columns.row)
                    opts.columns.row = {};
                var fields = opts.columns.header.fields || [];
                if (that._settings && that._settings.columns && that._settings.columns.length)
                    fields = that._settings.columns;
                that._initSchemaRows(fields);
            };
            // Create columns
            ColumnGrid.prototype._initCols = function (options) {
                var that = this;
                if (!options.columns)
                    options.columns = {};
                if (!options.columns.header)
                    options.columns.header = {};
                if (!options.columns.row)
                    options.columns.row = {};
                var header = $.extend({}, options.columns.header);
                var row = options.columns.row;
                header.options = header.options || {};
                row.options = row.options || {};
                var headerBind = row.$bind, headerSchema;
                if (!row.$bind) {
                    headerBind = "$index";
                    headerSchema = { type: "integer" };
                }
                else {
                    headerSchema = _sutils.getSchema(row.$bind, that.$schemaItems, that.form.$rootSchema, false);
                }
                var columns = [];
                columns.push(header);
                if (that.state.value) {
                    that.state.value.forEach(function (item) {
                        var title = _uiutils.utils.displayValue(item.getRelativeValue(headerBind), headerSchema, that.form.$locale, { html: false }, item, headerBind).value;
                        var r = $.extend({}, row);
                        r.title = title || '';
                        r.id = item.$id;
                        columns.push(r);
                    });
                }
                return columns;
            };
            ColumnGrid.prototype._modifyRow = function (value, schema, rowIndex, colIndex, opts, item, fieldName) {
                var that = this;
                var pr = _dom.find(that.$element.get(0), that.id + '_rows');
                var tr = pr.childNodes[rowIndex];
                var td = tr.childNodes[colIndex];
                var v = _uiutils.utils.displayValue(value, schema, that.form.$locale, { html: true, useSymbol: false, editable: opts.editable, check: opts.check, tableOptions: that.config.options }, item, fieldName);
                _dom.empty(td);
                if (v.html) {
                    var $c = $(v.value);
                    _dom.append(td, $c.get(0));
                }
                else
                    _dom.append(td, document.createTextNode(v.value));
            };
            ColumnGrid.prototype.changed = function (propName, ov, nv, op, params) {
                var that = this;
                if (op === 'upd') {
                    var item_3 = params && params.$id ? that.state.value.findById(params.$id) : null;
                    if (item_3) {
                        that.rows.forEach(function (row, index) {
                            if (row.name === params.property) {
                                that._modifyRow(item_3.getValue(row.name), row.schema, index, that.state.value.indexOf(item_3) + 1, { editable: row.canEdit, check: row.check }, item_3, row.name);
                            }
                        });
                    }
                }
            };
            ColumnGrid.prototype._grid = function () {
                return this.$element.get(0);
            };
            ColumnGrid.prototype._setErrors = function (grid, element) {
                var that = this;
                var errors = that.state.errors;
                if (element && Phoenix.bootstrap4) {
                    var errorClass = 'is-invalid';
                    if (errors && errors.length)
                        _dom.addClass(element, errorClass);
                    else
                        _dom.removeClass(element, errorClass);
                }
                that.showErrors(element, errors);
            };
            ColumnGrid.prototype.click = function (event) {
                var that = this;
                var td = _dom.parentByTag(that.$element.get(0), event.target, 'td');
                if (td) {
                    var cn = _dom.attr(td, "colId");
                    if (cn) {
                        var col = that._colByName(cn);
                        if (col && col.canEdit && _sutils.isBoolean(col.schema)) {
                            if (_dom.attr(event.target, 'data-clickable')) {
                                var rid = _dom.attr(td, "rowId");
                                var item = rid ? that.state.value.findById(rid) : null;
                                if (item) {
                                    var ov = item.getValue(col.name);
                                    item.setValue(col.name, !ov);
                                }
                            }
                        }
                    }
                }
            };
            ColumnGrid.prototype._setDisabled = function (button, element) { };
            ColumnGrid.prototype._state2UI = function () {
                var that = this;
                var grid = that._grid();
                var element = that.$element ? that.$element.get(0) : null;
                if (grid) {
                    that._setDisabled(grid, element);
                    that.setHidden(element);
                    that._setErrors(grid, element);
                }
            };
            ColumnGrid.prototype.stateChanged = function (propName, params) {
                var that = this;
                var state = that.form.getState(that.$bind);
                var grid = that._grid();
                var element = that.$element ? that.$element.get(0) : null;
                if (!propName || (propName === 'isHidden')) {
                    if (state.isHidden !== that.state.isHidden) {
                        that.state.isHidden = state.isHidden;
                        if (grid)
                            that.setHidden(element);
                    }
                }
                if (!propName || (propName === 'isDisabled')) {
                    if (state.isDisabled != that.state.isDisabled) {
                        that.state.isDisabled = state.isDisabled;
                        if (grid)
                            that._setDisabled(grid, element);
                    }
                }
                if (!propName || (propName === 'errors')) {
                    if (_eu.errorChanged(that.state.errors, state.errors)) {
                        that.state.errors = state.errors;
                        that._setErrors(grid, element);
                    }
                }
            };
            ColumnGrid.prototype._renderRows = function () {
                var that = this;
                if (that.$element) {
                    var pr = _dom.find(that.$element.get(0), that.id + '_rows');
                    _dom.empty(pr);
                    _dom.append(pr, _gu.createGridRows(that.id, that.rows, that.state.value, that.columns, that.renderOptions, that.options.design, that.form.$locale));
                }
            };
            ColumnGrid.prototype._draw = function (opts) {
                var that = this;
                that.columns = that._initCols(that.fieldOptions);
                if (opts._useColGrp) {
                    var colgrp = _dom.find(that.$element.get(0), that.id + '_colgrp');
                    _dom.empty(colgrp);
                    _dom.append(colgrp, _gu.createColGroup(that.columns, opts, false));
                }
                if (!opts.headerIsHidden) {
                    var pc = _dom.find(that.$element.get(0), that.id + '_cols');
                    _dom.empty(pc);
                    _dom.append(pc, _gu.createCols(that.id, that.columns, opts, that.options.design, that.form.$locale, '', false));
                }
                that._renderRows();
                that._state2UI();
            };
            ColumnGrid.prototype._rrender = function () {
                var that = this;
                if (that.$element) {
                    that._draw(that.renderOptions);
                }
            };
            ColumnGrid.prototype.render = function ($parent) {
                var that = this;
                var opts = that._initOptions(_uiutils.utils.defaultOptions);
                if (!that.$element) {
                    that.columns = that._initCols(that.fieldOptions);
                    that.$element = $(_gu.gridContainer(that.id, opts, that.options.design, that.$schema.title, that.form.$locale, that.columns, null));
                    that._draw(opts);
                    that.appendElement($parent, opts);
                    return that.$element;
                }
            };
            ColumnGrid.prototype._createRow = function (index) {
                var that = this;
                if (that.$element) {
                    var pr = _dom.find(that.$element.get(0), that.id + '_rows');
                    var nr = _gu.createRow(that.id, index, 0, that.state.value.get(index), that.columns, that.renderOptions, that.options.design, that.form.$locale, index % 2 === 1, false, false);
                    if (pr.childNodes.length >= index)
                        _dom.append(pr, nr);
                    else
                        _dom.before(pr.childNodes[index], nr);
                }
            };
            ColumnGrid.prototype._initAllColumns = function () {
                var that = this;
                var opts = that.fieldOptions;
                that._allColumns = [];
                that._allColumnsNames = [];
                if (!opts.columns)
                    opts.columns = {};
                if (!opts.columns.header)
                    opts.columns.header = {};
                var selectedColumns = [];
                var allColumns = opts.columns.header.allFields;
                allColumns.forEach(function (col) {
                    that._allColumns.push($.extend({}, col));
                    that._allColumnsNames.push(col.name);
                });
            };
            ColumnGrid.prototype._selectedColumns = function () {
                var that = this;
                var selectedColumns = [];
                var res = [];
                that.rows.forEach(function (col) {
                    selectedColumns.push(col.name);
                });
                that._allColumns.forEach(function (col) {
                    var schema = _sutils.getSchema(col.name, that.$schemaItems, that.form.$rootSchema, false);
                    if (selectedColumns.indexOf(col.name) >= 0) {
                        res.push({ name: col.name, title: schema.title });
                    }
                });
                return res;
            };
            ColumnGrid.prototype._initDataSettings = function () {
                var that = this;
                var layout = {
                    $type: "block",
                    $items: [
                        { $type: "block", $items: [] },
                        {
                            $type: "block",
                            $items: [
                                {
                                    $bind: "columns",
                                    $widget: "basicgrid",
                                    options: {
                                        border: true,
                                        align: "middle",
                                        small: true,
                                        noRowSelectedIndicator: true,
                                        headerIsHidden: true,
                                        selecting: {
                                            row: true,
                                            multiselect: true
                                        },
                                        columns: [
                                            { $bind: "caption", options: { "width": "100%" } }
                                        ]
                                    }
                                }
                            ]
                        },
                        { $type: "block", $items: [] }
                    ]
                };
                var schema = {
                    properties: {
                        columns: {
                            type: "array",
                            items: {
                                type: "object",
                                properties: {
                                    name: { type: "string" },
                                    caption: { type: "string" }
                                }
                            }
                        }
                    }
                };
                var data = { "columns": [] };
                var selectedColumns = [];
                that.rows.forEach(function (col) {
                    selectedColumns.push(col.name);
                });
                that._allColumns.forEach(function (col) {
                    var schema = _sutils.getSchema(col.name, that.$schemaItems, that.form.$rootSchema, false);
                    data.columns.push({ name: col.name, caption: schema.title, $select: selectedColumns.indexOf(col.name) >= 0 });
                });
                return { schema: schema, data: data, layout: layout };
            };
            ColumnGrid.prototype.sendMessage = function (message, params) {
                var that = this;
                switch (message) {
                    case "column-list":
                        that.openColumns(params);
                        break;
                    case "selected-cols":
                        return that._selectedColumns();
                }
            };
            ColumnGrid.prototype.stopProppagation = function (event) {
                var that = this;
                event.preventDefault();
                event.stopPropagation();
            };
            ColumnGrid.prototype.openColumns = function (params) {
                var that = this;
                var opts = that._initDataSettings();
                var fo = { "title": params.title || "Columns ...", "buttons": [{ "type": "success", "title": params.okTitle || "OK", "name": "ok" }] };
                _ui.OpenModalForm(fo, opts.layout, opts.schema, opts.data, {}, function (form, action, model, formControl) {
                    if (action.operation === "modal-action") {
                        switch (action.property) {
                            case "ok":
                                var cd_1 = { columns: [] };
                                model.columns.forEach(function (col) {
                                    if (col.$select) {
                                        var ii = that._allColumnsNames.indexOf(col.name);
                                        if (ii >= 0) {
                                            cd_1.columns.push($.extend({}, that._allColumns[ii]));
                                        }
                                    }
                                });
                                that._settings = cd_1;
                                that.form.setFieldSettings(that.$bind, that._settings);
                                that.form.savePrefs(function () {
                                    that._settings = that.form.afterSettings(that.$bind, "columngrid", cd_1);
                                    that.rows = null;
                                    that._initRows();
                                    form.close();
                                    that._rrender();
                                });
                                break;
                        }
                    }
                });
            };
            return ColumnGrid;
        }(Phoenix.ui.AbsField));
        ;
        _ui.registerControl(ColumnGrid, "array", false, "columngrid", null);
    })(formcolumngrid || (formcolumngrid = {}));
})(Phoenix || (Phoenix = {}));
/// <reference path="../../../core/core-refs.ts" />
/// <reference path="../../../core/modules/locale.ts" />
/// <reference path="./absfield.control.ts" />
/// <reference path="../schema.data.ts" />
/// <reference path="../errors.data.ts" />
var Phoenix;
(function (Phoenix) {
    var formedit;
    (function (formedit) {
        var _p = Phoenix, _serial = _p.serial, _utils = _p.utils, _dom = _p.dom, _locale = _p.locale, _su = _p.Observable.SchemaUtils, _ulocale = _p.ulocale, _ui = _p.ui, _uiutils = _p.uiutils, _eu = _p.Observable.errorsUtils;
        var _createInput = function (html, options, title, tagName) {
            var _bootstrap4 = _p.bootstrap4;
            tagName = tagName || 'input';
            var isTextArea = tagName === "textarea";
            if (options.readOnly) {
                tagName = 'div';
            }
            if (isTextArea) {
                if (options.before || options.after) {
                    delete options.before;
                    delete options.after;
                }
            }
            var isDateTime = options.$format === 'date-time';
            var isDate = options.$format === 'date';
            var isMoney = options.$format === 'money';
            if (isMoney || isDate || isDateTime) {
                if (options.maxWidth === undefined)
                    options.maxWidth = '16em';
            }
            if (options.before || options.after) {
                html.push('<div class="input-group" id="{0}_group"');
                var style = [];
                if (options.minWidth)
                    style.push('min-width: ' + options.minWidth + ';');
                if (options.maxWidth)
                    style.push('max-width: ' + options.maxWidth + ';');
                if (style.length)
                    html.push('  style="' + style.join("") + '"');
                html.push('>');
            }
            if (options.before) {
                html.push('<span class="bs-grp-btn input-group-prepend">');
                html.push('<span class="input-group-text">');
                if (options.before.icon)
                    html.push('<span class="' + _dom.iconClass(options.before.icon) + '"></span>');
                else
                    html.push(options.before.value);
                html.push('</span>');
                html.push('</span>');
            }
            var inputCss = ['form-control'];
            if (options.size && _bootstrap4)
                inputCss.push('form-control-' + options.size);
            if (options.inputClass)
                inputCss.push(options.inputClass);
            if (options.readOnly) {
                inputCss.push('bs-read-only');
            }
            html.push('<' + tagName + ' autocomplete="off"' + (options.readOnly ? '' : ' type="' + (options.type || 'text') + '"') + ' class="' + inputCss.join(' '));
            html.push('" id="{0}_input"');
            if (isTextArea) {
                html.push(' rows="' + (options.rows || 3) + '"');
            }
            if (!options.before && !options.after) {
                var style = [];
                if (options.maxWidth)
                    style.push('max-width: ' + options.maxWidth + ';');
                if (options.minWidth)
                    style.push('min-width: ' + options.minWidth + ';');
                if (isTextArea && options.noResize)
                    style.push('resize: none;');
                if (style.length)
                    html.push('  style="' + style.join('') + '"');
            }
            if (options.maxLength)
                html.push('  maxLength="' + options.maxLength + '"');
            if (options.placeHolder) {
                var phv = options.placeHolder === true ? title : options.placeHolder;
                html.push('  placeholder="' + phv + '"');
            }
            html.push('>');
            if (options.after) {
                html.push('<span  id="{0}_after" tabindex="-1" class="bs-grp-btn input-group-append input-group-addon');
                if (options.after.icon)
                    html.push(' bs-icon-input');
                html.push('">');
                html.push('<span class="input-group-text">');
                if (options.after.icon) {
                    html.push('<span class="' + _dom.iconClass(options.after.icon) + '"></span>');
                }
                else
                    html.push(options.after.value);
                html.push('</span>');
                html.push('</span>');
            }
            if (options.before || options.after)
                html.push('</div>');
            if (isTextArea || options.readOnly) {
                html.push('</' + tagName + '>');
            }
            _uiutils.utils.addErrorDiv(html);
        }, _createEditInput = function (id, options, authoring, title, tagName) {
            title = title || '';
            options = $.extend({ titleIsHidden: false, placeHolder: false, columns: false, labelCol: 3 }, options);
            var html = [];
            if (options.titleIsHidden) {
                options.columns = false;
            }
            if (options.readOnly) {
                delete options.after;
                delete options.before;
            }
            _uiutils.utils.fieldWrapper(html, options, authoring, function () {
                var _bootstrap4 = _p.bootstrap4;
                if (!options.titleIsHidden) {
                    html.push('<label for="{0}_input" id="{0}_label"');
                    var css = ['bs-label'];
                    if (options.columns) {
                        if (_bootstrap4) {
                            css.push('col-form-label');
                        }
                        else {
                            css.push('checkbox-inline bs-cursor-d');
                        }
                        css.push('bs-lib-col col-sm-' + options.labelCol);
                        if (options.labelLeft)
                            css.push('text-left');
                    }
                    if (options.inline) {
                        if (_bootstrap4)
                            css.push('form-check-inline bs-cursor-d no-x-padding');
                        else
                            css.push('checkbox-inline bs-cursor-d no-x-padding');
                    }
                    if (css.length)
                        html.push(' class="' + css.join(' ') + '"');
                    html.push('>');
                    html.push(_utils.escapeHtml(title || '') + (options.inline ? '&nbsp;' : ''));
                    _uiutils.utils.addTooltipAndRule(html, options);
                    html.push('</label>');
                }
                if (options.columns)
                    html.push('<div class="no-x-padding col-sm-' + (12 - options.labelCol) + '" id="{0}_colparent">');
                _createInput(html, options, title, tagName);
                if (options.columns)
                    html.push('</div>');
                if (options.titleIsHidden && options.inline)
                    _uiutils.utils.addTooltipAndRule(html, options);
            });
            return _utils.format(html.join(''), id);
        };
        var BaseEdit = /** @class */ (function (_super) {
            __extends(BaseEdit, _super);
            function BaseEdit(fp, options, form) {
                var _this = _super.call(this, fp, options, form) || this;
                var that = _this;
                that._search = fp && fp.options && fp.options.search;
                if (that._search)
                    that._searchEventBus = new Phoenix.serial.SingleEventBus(500);
                that._state();
                return _this;
            }
            BaseEdit.prototype._input = function () {
                var that = this, e = that.$element ? that.$element.get(0) : null;
                if (!e)
                    return null;
                return _dom.find(e, that.id + '_input');
            };
            BaseEdit.prototype._after = function () {
                var that = this, e = that.$element ? that.$element.get(0) : null;
                if (!e)
                    return null;
                var after = _dom.find(e, that.id + '_after');
                return after ? after.firstChild : null;
            };
            BaseEdit.prototype._colParent = function () {
                var that = this, e = that.$element.get(0);
                if (that.renderOptions.columns)
                    return _dom.find(e, that.id + '_colparent');
                else
                    return null;
            };
            BaseEdit.prototype._value2Text = function () {
                var that = this;
                var input = that._input();
                if (that._isDate()) {
                    if (_uiutils.utils.useDatePicker())
                        return _ulocale.parseISODate(that.state.value || '') || '';
                    else {
                        return _ulocale.shortDate(that.state.value || '');
                    }
                }
                if (that._isDateTime()) {
                    if (_uiutils.utils.useDateTimePicker())
                        return _ulocale.parseISODateTime(that.state.value || '') || '';
                    else
                        return _ulocale.shortDateTime(that.state.value || '');
                }
                else
                    return that.state.value || '';
            };
            BaseEdit.prototype._schemaInput = function () {
                return this.$schema;
            };
            BaseEdit.prototype._isPassword = function () {
                return _su.isPassword(this._schemaInput());
            };
            BaseEdit.prototype._isDate = function () {
                return _su.isDate(this._schemaInput());
            };
            BaseEdit.prototype._isDateTime = function () {
                return _su.isDateTime(this._schemaInput());
            };
            BaseEdit.prototype._isMemo = function () {
                return _su.isText(this._schemaInput());
            };
            BaseEdit.prototype._isNumber = function () {
                var schema = this._schemaInput();
                return !schema.enum && _su.isNumber(schema);
            };
            BaseEdit.prototype.setFocus = function (focusParams) {
                var that = this;
                if (that.renderOptions.readOnly)
                    return;
                var state = that.form.getState(that.$bind);
                if (state.isDisabled || state.isHidden)
                    return;
                var input = that._input();
                if (input)
                    input.focus();
            };
            BaseEdit.prototype._isMoney = function () {
                return _su.isMoney(this._schemaInput());
            };
            BaseEdit.prototype._setDisabled = function (input, element) {
                var that = this;
                if (that.renderOptions.readOnly)
                    return;
                input.disabled = this.state.isDisabled;
            };
            BaseEdit.prototype._setReadOnly = function (input, element) {
                var that = this;
                if (that.renderOptions.readOnly)
                    return;
                input.readOnly = this.state.isReadOnly;
            };
            BaseEdit.prototype._setErrors = function (input, element) {
                var that = this;
                if (that.renderOptions.readOnly)
                    return;
                var errors = that.state.errors;
                var errorClass = Phoenix.bootstrap4 ? 'is-invalid' : 'has-error';
                if (errors && errors.length) {
                    _dom.addClass(element, errorClass);
                    if (Phoenix.bootstrap4)
                        _dom.addClass(input, errorClass);
                }
                else {
                    _dom.removeClass(element, errorClass);
                    if (Phoenix.bootstrap4)
                        _dom.removeClass(input, errorClass);
                }
                that.showErrors(element, errors);
            };
            BaseEdit.prototype._setMandatory = function (input, element) {
                var that = this;
                if (that.renderOptions.readOnly)
                    return;
                var v = this.state.isMandatory;
                input.required = v;
                if (v)
                    _dom.addClass(input, "bs-mandatory");
                else
                    _dom.removeClass(input, "bs-mandatory");
                if (that.renderOptions.placeHolder) {
                    input.placeholder = that.renderOptions.title + (v ? ' *' : '');
                }
                if (!that.renderOptions.titleIsHidden) {
                    var label = _dom.find(element, that.id + '_label');
                    if (label) {
                        _dom.text(label, (that.renderOptions.title || '') + (v ? ' *' : '') + (that.renderOptions.inline ? String.fromCharCode(160) : ''));
                    }
                }
            };
            BaseEdit.prototype._state2UI = function () {
                var that = this;
                var input = that._input();
                var element = that.$element ? that.$element.get(0) : null;
                if (input) {
                    that._value2Input(input);
                    that._setDisabled(input, element);
                    that._setReadOnly(input, element);
                    that.setHidden(element);
                    that._setMandatory(input, element);
                    that._setErrors(input, element);
                    that._setSymbol(element);
                }
            };
            BaseEdit.prototype._setSymbol = function (e) {
                var that = this;
                if (that.renderOptions.readOnly)
                    return;
                if (!that._hasSymbol || !e)
                    return;
                var after = that._after();
                if (after) {
                    if (!that.state.symbol) {
                        _dom.text(after, String.fromCharCode(160));
                    }
                    else {
                        _dom.text(after, that.state.symbol);
                    }
                }
            };
            BaseEdit.prototype._value2Input = function (input) {
                var that = this;
                if (that.renderOptions.readOnly) {
                    if (that._isDate()) {
                        _dom.text(input, _ulocale.shortDate(that.state.value || '') || String.fromCharCode(160));
                    }
                    else if (that._isDateTime()) {
                        _dom.text(input, _ulocale.shortDateTime(that.state.value || '') || String.fromCharCode(160));
                    }
                    else if (that._isNumber()) {
                        _dom.text(input, that._value2Text() || String.fromCharCode(160));
                    }
                    else
                        _dom.text(input, that._value2Text() || String.fromCharCode(160));
                }
                else {
                    if (that._isDate()) {
                        if (_uiutils.utils.useDatePicker())
                            _uiutils.utils.datePickerSetValue(that.$element, that.state.value);
                        else {
                            input.value = _ulocale.shortDate(that.state.value || '');
                        }
                    }
                    else if (that._isDateTime()) {
                        if (_uiutils.utils.useDateTimePicker())
                            _uiutils.utils.dateTimePickerSetValue($(_dom.find(that.$element.get(0), that.id + '_group')), that.state.value);
                        else
                            input.value = _ulocale.shortDateTime(that.state.value || '');
                    }
                    else if (that._isNumber()) {
                        input.value = that._value2Text();
                    }
                    else
                        input.value = that._value2Text();
                }
            };
            BaseEdit.prototype.changed = function (propName, ov, nv, op, params) {
                var that = this;
                if (that.useDisplay && propName === that.$bind)
                    return;
                if (!that.$element) {
                    that.state.value = nv;
                    return;
                }
                var input = that._input();
                nv = that.form.getValue(that.$display);
                if (that.state.value != nv) {
                    that.state.value = nv;
                    that._value2Input(input);
                }
                else {
                    var av = input.value;
                    var cv = that._value2Text();
                    if (av != cv)
                        that._value2Input(input);
                }
            };
            BaseEdit.prototype.stateChanged = function (propName, params) {
                var that = this;
                if (that.useDisplay && propName === that.$display)
                    return;
                var state = that.form.getState(that.$bind);
                var input = that._input();
                var element = that.$element ? that.$element.get(0) : null;
                if (!propName || (propName === 'symbol')) {
                    if (state.symbol !== that.state.symbol) {
                        that.state.symbol = state.symbol;
                        if (input)
                            that._setSymbol(element);
                    }
                }
                if (!propName || (propName === 'decimals')) {
                    if (state.decimals !== that.state.decimals) {
                        that.state.decimals = state.decimals;
                    }
                }
                if (!propName || (propName === 'isHidden')) {
                    if (state.isHidden !== that.state.isHidden) {
                        that.state.isHidden = state.isHidden;
                        if (input)
                            that.setHidden(element);
                    }
                }
                if (!propName || (propName === 'isDisabled')) {
                    if (state.isDisabled !== that.state.isDisabled) {
                        that.state.isDisabled = state.isDisabled;
                        if (input)
                            that._setDisabled(input, element);
                    }
                }
                if (!propName || (propName === 'isReadOnly')) {
                    if (state.isReadOnly !== that.state.isReadOnly) {
                        that.state.isReadOnly = state.isReadOnly;
                        if (input)
                            that._setReadOnly(input, element);
                    }
                }
                if (!propName || (propName === 'isMandatory')) {
                    if (state.isMandatory !== that.state.isMandatory) {
                        that.state.isMandatory = state.isMandatory;
                        if (input)
                            that._setMandatory(input, element);
                    }
                }
                if (!propName || (propName === 'errors')) {
                    if (_eu.errorChanged(that.state.errors, state.errors)) {
                        that.state.errors = state.errors;
                        that._setErrors(input, element);
                    }
                }
            };
            BaseEdit.prototype.destroy = function () {
                var that = this;
                if (that._searchEventBus) {
                    that._searchEventBus.destroy();
                    that._searchEventBus = null;
                }
                _super.prototype.destroy.call(this);
            };
            return BaseEdit;
        }(Phoenix.ui.AbsField));
        formedit.BaseEdit = BaseEdit;
        var Edit = /** @class */ (function (_super) {
            __extends(Edit, _super);
            function Edit(fp, options, form) {
                return _super.call(this, fp, options, form) || this;
            }
            Edit.prototype.beforeAppend = function () { };
            Edit.prototype.mousedown = function (event) {
                var that = this;
                if (that.renderOptions.readOnly)
                    return;
                that._doSelect = false;
                if (!that.$element)
                    return;
                if (that.state.isDisabled)
                    return;
                var ae = window.document.activeElement;
                if (ae !== event.target) {
                    var input = that._input();
                    if (input === event.target) {
                        that._doSelect = true;
                    }
                }
                return true;
            };
            Edit.prototype.stopProppagation = function (event) {
                var that = this;
                if (that.renderOptions.readOnly)
                    return;
                if (that._doSelect) {
                    var input = that._input();
                    _dom.select(input);
                }
            };
            Edit.prototype.click = function (event) {
                var that = this;
                if (that.state.isDisabled || that.state.isReadOnly)
                    return;
                var target = event.target;
                if (that.renderOptions.after && that.renderOptions.after.$bind) {
                    var after = that._after();
                    if (_dom.isChildOf(after, target)) {
                        that._afterEnter();
                        var input = that._input();
                        if (input)
                            input.focus();
                    }
                }
            };
            Edit.prototype.internalRender = function ($parent) {
                var that = this;
                var opts = that._initOptions(_uiutils.utils.defaultOptions);
                if (!that.$element) {
                    opts.title = _ulocale.tt(that.$schema.title, that.form.$locale);
                    if (opts.placeHolder && opts.placeHolder != true)
                        opts.title = _ulocale.tt(opts.placeHolder, that.form.$locale);
                    opts.maxLength = that.$schema.maxLength;
                    if (that.$schema.description)
                        opts.description = _ulocale.tt(that.$schema.description, that.form.$locale);
                    that.$element = $(_createEditInput(that.id, opts, that.options.design, opts.title, opts.tagName));
                    that.beforeAppend();
                    that.setEvents(opts);
                    that._state2UI();
                }
                that.appendElement($parent, opts);
            };
            Edit.prototype.render = function ($parent) {
                var that = this;
                that.internalRender($parent);
            };
            Edit.prototype._text2value = function (textValue) {
                var that = this;
                return _uiutils.utils.text2value(textValue, that.$schema, that.state);
            };
            Edit.prototype._value2Text = function () {
                var that = this;
                if (that._isNumber()) {
                    return _su.value2Text(that.state.value, that.$schema, that.state);
                }
                else
                    return _super.prototype._value2Text.call(this);
            };
            Edit.prototype.customOptions = function (options) {
                var that = this;
                _super.prototype.customOptions.call(this, options);
                if (that._isDate()) {
                    that.customOptionsDate(options);
                }
                else if (that._isDateTime()) {
                    that.customOptionsDateTime(options);
                }
                else if (that._isNumber()) {
                    that.customOptionsNumber(options, that.state.symbol);
                }
                else if (that._isPassword()) {
                    that.customOptionsPassword(options);
                }
                else if (that._isMemo()) {
                    that.customOptionsMemo(options);
                }
            };
            Edit.prototype.customOptionsMemo = function (options) {
                options.tagName = 'textarea';
            };
            Edit.prototype.customOptionsPassword = function (options) {
                options.type = 'password';
            };
            Edit.prototype.customOptionsDate = function (options) {
                var that = this;
                options.$format = 'date';
                if (_uiutils.utils.useDatePicker()) {
                    options.after = { icon: 'calendar' };
                    options.date = true;
                }
                else {
                    options.type = 'date';
                }
            };
            Edit.prototype.customOptionsDateTime = function (options) {
                var that = this;
                options.$format = 'date-time';
                if (_uiutils.utils.useDateTimePicker()) {
                    options.after = { icon: 'calendar' };
                    options.date = true;
                }
            };
            Edit.prototype.customOptionsNumber = function (options, symbol) {
                var that = this;
                options.inputClass = "bs-edit-number";
                var schema = that._schemaInput();
                if (symbol || _su.hasSymbol(schema)) {
                    options.after = { value: symbol };
                    that._hasSymbol = true;
                }
                options.$format = schema.format;
            };
            Edit.prototype._removeEventsDate = function () {
                var that = this;
                if (_uiutils.utils.useDatePicker())
                    _uiutils.utils.datePickerDestroy(that.$element);
            };
            Edit.prototype._setEventsDate = function () {
                var that = this;
                if (that.renderOptions.readOnly)
                    return;
                if (_uiutils.utils.useDatePicker()) {
                    _uiutils.utils.datePickerInitialize(that.$element, { showOnFocus: true }, function (e) {
                        that.focusOut(null);
                    });
                }
            };
            Edit.prototype._removeEventsDateTime = function () {
                var that = this;
                if (that.renderOptions.readOnly)
                    return;
                if (_uiutils.utils.useDateTimePicker())
                    _uiutils.utils.dateTimePickerDestroy($(_dom.find(that.$element.get(0), that.id + '_group')));
            };
            Edit.prototype._setEventsDateTime = function () {
                var that = this;
                if (that.renderOptions.readOnly)
                    return;
                if (_uiutils.utils.useDateTimePicker()) {
                    _uiutils.utils.dateTimePickerInitialize($(_dom.find(that.$element.get(0), that.id + '_group')), {}, function (e) {
                        that.focusOut(null);
                    });
                }
            };
            Edit.prototype.setEvents = function (opts) {
                var that = this;
                if (that._isDate())
                    that._setEventsDate();
                else if (that._isDateTime())
                    that._setEventsDateTime();
            };
            Edit.prototype.removeEvents = function () {
                var that = this;
                if (that._isDate())
                    that._removeEventsDate();
                else if (that._isDateTime())
                    that._removeEventsDateTime();
            };
            Edit.prototype.checkValue = function (value, after) {
                after(value);
            };
            Edit.prototype.paste = function (event) {
                var that = this;
                if (that.renderOptions.readOnly)
                    return;
                var input = that._input();
                if (that.state.isReadOnly || that.state.isDisabled)
                    return true;
                var schema = that._schemaInput();
                if (that._isNumber() && !that.$lookup) {
                    if (_uiutils.utils.doPasteNumber(event, input, { decimalSep: _locale.number.decimal, thousandSep: _locale.number.thousand, places: that.state.decimals, schema: schema }) === false)
                        return false;
                }
                else if (that._isDate()) {
                    if (_uiutils.utils.doPasteDate(event, input, { sep: _locale.date.daySep, format: _locale.date.dateShort, schema: schema }) === false)
                        return false;
                }
                else if (that._isPassword()) {
                    if (_uiutils.utils.doPastePassword(event, input, { schema: schema }) === false)
                        return false;
                }
                return true;
            };
            Edit.prototype._ignoreKeys = function (event, keyPress) {
                if (event.which === _dom.keys.VK_TAB)
                    return true;
                if (event.which === _dom.keys.VK_DELETE)
                    return false;
                if (!keyPress && (event.which === _dom.keys.VK_BACKSPACE))
                    return false;
                if (keyPress) {
                    if (event.which === 0)
                        return true;
                    if (_dom.arrowKeys.indexOf(event.which) >= 0)
                        return true;
                    return false;
                }
                else {
                    if (_dom.ignoreKeys.indexOf(event.which) >= 0 || _dom.arrowKeys.indexOf(event.which) >= 0)
                        return true;
                }
                return false;
            };
            Edit.prototype.keypress = function (event) {
                var that = this;
                if (that.renderOptions.readOnly)
                    return true;
                if (that.state.isReadOnly || that.state.isDisabled)
                    return true;
                var input = that._input();
                if (that._ignoreKeys(event, true))
                    return true;
                var schema = that._schemaInput();
                if (that._isNumber() && !that.$lookup) {
                    if (_uiutils.utils.keyPressNumber(event, input, { decimalSep: _locale.number.decimal, thousandSep: _locale.number.thousand, places: that.state.decimals, schema: schema }) === false)
                        return false;
                }
                else if (that._isDate()) {
                    if (_uiutils.utils.keyPressDate(event, input, { sep: _locale.date.daySep, format: _locale.date.dateShort, schema: schema }) === false)
                        return false;
                }
                else if (that._isPassword()) {
                    if (_uiutils.utils.keyPressPassword(event, input, { schema: schema }) === false)
                        return false;
                }
                return true;
            };
            Edit.prototype._afterEnter = function () {
                var that = this;
                that._input2Model(true);
                if (that.renderOptions && that.renderOptions.after && that.renderOptions.after.$bind) {
                    that.form.execAction(that.renderOptions.after.$bind, that.state.value);
                }
            };
            Edit.prototype.keydown = function (event) {
                var that = this;
                if (that.renderOptions.readOnly)
                    return true;
                if (that.state.isReadOnly || that.state.isDisabled)
                    return true;
                var input = that._input();
                if (that._ignoreKeys(event, false)) {
                    if (event.which === _dom.keys.VK_ENTER) {
                        that._afterEnter();
                    }
                    return true;
                }
                var schema = that._schemaInput();
                if (that._isNumber() && !that.$lookup) {
                    if (_uiutils.utils.keyDownNumber(event, input, { decimalSep: _locale.number.decimal, thousandSep: _locale.number.thousand, places: that.state.decimals, schema: schema }) === false)
                        return false;
                }
                else if (that._isDate()) {
                    if (_uiutils.utils.keyDownDate(event, input, { sep: _locale.date.daySep, format: _locale.date.dateShort, schema: schema }) === false)
                        return false;
                }
                else if (that._isPassword()) {
                    if (_uiutils.utils.keyDownPassword(event, input, { schema: schema }) === false)
                        return false;
                }
                return true;
            };
            Edit.prototype.equals = function (nv) {
                var that = this;
                var res = (that.state.value === nv);
                if (!res && that.state.value === undefined) {
                    if (that.$schema.type === "string") {
                        if (nv === '')
                            return true;
                    }
                }
                return res;
            };
            Edit.prototype.updateModel = function () {
                var that = this;
                that.form.setValue(that.$display, that.state.value);
            };
            Edit.prototype._internalSetValue = function (value, isfocusOut) {
                var that = this;
                if (that._searchEventBus) {
                    that._searchEventBus.push(null, function (ldata) {
                        that.state.value = value;
                        that.updateModel();
                    }, isfocusOut);
                }
                else {
                    that.state.value = value;
                    that.updateModel();
                }
            };
            Edit.prototype._input2Model = function (isFocusOut) {
                var that = this, input = that._input();
                var nv = that._text2value(input.value);
                if (!that.equals(nv)) {
                    that.checkValue(nv, function (cv) {
                        if (that.state.value !== cv) {
                            if (cv === '' && that.$schema.type === "string")
                                cv = undefined;
                            that._internalSetValue(cv, isFocusOut);
                        }
                        else
                            that._value2Input(input);
                    });
                }
                else if (that._isNumber() || that._isDate() || that._isDateTime()) {
                    that._value2Input(input);
                }
            };
            Edit.prototype.focusOut = function (event) {
                var that = this;
                if (that.renderOptions.readOnly)
                    return;
                that._input2Model(true);
            };
            Edit.prototype.destroy = function () {
                _super.prototype.destroy.call(this);
            };
            return Edit;
        }(BaseEdit));
        formedit.Edit = Edit;
        _ui.registerControl(Edit, "string", false, '', null);
        _ui.registerControl(Edit, "number", false, '', null);
        _ui.registerControl(Edit, "integer", false, '', null);
    })(formedit = Phoenix.formedit || (Phoenix.formedit = {}));
})(Phoenix || (Phoenix = {}));
/// <reference path="../../../core/core-refs.ts" />
/// <reference path="./absfield.control.ts" />
/// <reference path="../schema.data.ts" />
/// <reference path="../errors.data.ts" />
var Phoenix;
(function (Phoenix) {
    var _utils = Phoenix.utils, _dom = Phoenix.dom, _ui = Phoenix.ui, _locale = Phoenix.locale, _uiutils = Phoenix.uiutils, _su = Phoenix.Observable.SchemaUtils, _ulocale = Phoenix.ulocale, _eu = Phoenix.Observable.errorsUtils;
    var formenum;
    (function (formenum) {
        var _createEnumsInput = function (id, options, authoring, title) {
            var _bootstrap4 = Phoenix.bootstrap4;
            title = title || '';
            options = $.extend({ titleIsHidden: false, placeHolder: false, columns: false, labelCol: 3 }, options);
            var html = [];
            if (options.titleIsHidden) {
                options.columns = false;
            }
            options.placeHolder = false;
            _uiutils.utils.fieldWrapper(html, options, authoring, function () {
                if (!options.titleIsHidden) {
                    html.push('<label for="{0}_input" id="{0}_label"');
                    var css = ['bs-label'];
                    if (options.columns) {
                        if (_bootstrap4)
                            css.push('col-form-label');
                        else
                            css.push('checkbox-inline bs-cursor-d');
                        css.push('bs-lib-col col-sm-' + options.labelCol);
                        if (options.labelLeft)
                            css.push('text-left');
                    }
                    if (options.inline) {
                        if (_bootstrap4)
                            css.push('form-check-inline');
                        else
                            css.push('checkbox-inline');
                        css.push('no-x-padding bs-cursor-d');
                    }
                    if (css.length)
                        html.push(' class="' + css.join(' ') + '"');
                    html.push('>');
                    html.push(_utils.escapeHtml(title || '') + (options.inline ? '&nbsp;' : ''));
                    _uiutils.utils.addTooltipAndRule(html, options);
                    html.push('</label>');
                }
                if (options.columns)
                    html.push('<div class="no-x-padding col-sm-' + (12 - options.labelCol) + '">');
                html.push('<div class="bs-enum-list-wrap" id="{0}_input">');
                html.push('</div>');
                _uiutils.utils.addErrorDiv(html);
                if (options.columns)
                    html.push('</div>');
            });
            return _utils.format(html.join(''), id);
        }, _createEnums = function (values, disabled, enums, enumsNames) {
            enumsNames = enumsNames || enums;
            var f = document.createDocumentFragment();
            var e = $('<div tabindex="0" class="bs-enum-list-row"><div class="bs-enum-list-check"><a><center><span class="' + _dom.iconClass('square-o') + '"></span></center></a></div><div class="bs-enum-list-title"></div></div>').get(0);
            enums.forEach(function (en, index) {
                var ii = e.cloneNode(true);
                if (disabled) {
                    _dom.attr(ii, "tabindex", "-1");
                    _dom.removeClass(ii, "bs-pointer");
                    _dom.addClass(ii, "bs-cursor-disabled");
                }
                else {
                    _dom.attr(ii, "tabindex", "0");
                    _dom.addClass(ii, "bs-pointer");
                    _dom.removeClass(ii, "bs-cursor-disabled");
                }
                var check = ii.firstChild.firstChild.firstChild.firstChild;
                check.className = (values && values.indexOf(en) >= 0) ? _dom.iconClass("check-square-o") : _dom.iconClass("square-o");
                var tparent = ii.lastChild;
                _dom.append(tparent, document.createTextNode(enumsNames[index])),
                    _dom.append(f, ii);
            });
            return f;
        };
        var EnumList = /** @class */ (function (_super) {
            __extends(EnumList, _super);
            function EnumList(fp, options, form) {
                var _this = _super.call(this, fp, options, form) || this;
                _this._state();
                return _this;
            }
            EnumList.prototype._setDisabled = function (input, element) {
                var that = this;
                for (var i = 0, len = input.childNodes.length; i < len; i++) {
                    var ii = input.childNodes[i];
                    if (that.state.isDisabled) {
                        _dom.attr(ii, "tabindex", "-1");
                        _dom.removeClass(ii, "bs-pointer");
                        _dom.addClass(ii, "bs-cursor-disabled");
                    }
                    else {
                        _dom.attr(ii, "tabindex", "0");
                        _dom.addClass(ii, "bs-pointer");
                        _dom.removeClass(ii, "bs-cursor-disabled");
                    }
                }
            };
            EnumList.prototype._setReadOnly = function (input, element) {
            };
            EnumList.prototype._setErrors = function (input, element) {
                var that = this;
                var errors = that.state.errors;
                if (element && Phoenix.bootstrap4) {
                    var errorClass = 'is-invalid';
                    if (errors && errors.length)
                        _dom.addClass(element, errorClass);
                    else
                        _dom.removeClass(element, errorClass);
                }
                that.showErrors(element, errors);
            };
            EnumList.prototype._setMandatory = function (input, element) {
            };
            EnumList.prototype._input = function () {
                var that = this, e = that.$element.get(0);
                return _dom.find(e, that.id + '_input');
            };
            EnumList.prototype._state2UI = function (isCreate) {
                var that = this;
                var input = that._input();
                var element = that.$element ? that.$element.get(0) : null;
                if (input) {
                    if (!isCreate) {
                        that._setDisabled(input, element);
                    }
                    if (!isCreate) {
                        that._setFilter();
                    }
                    that._setReadOnly(input, element);
                    that.setHidden(element);
                    that._setMandatory(input, element);
                    that._setErrors(input, element);
                }
            };
            EnumList.prototype.mousedown = function (event) {
                var that = this;
                if (!that.$element)
                    return;
                if (that.state.isDisabled || that.state.isReadOnly)
                    return;
                var ae = window.document.activeElement;
                var row = _dom.parentByClass(that.$element.get(0), event.target, "bs-enum-list-row");
                if (!row)
                    return;
                if (ae !== row) {
                    row.focus();
                }
                return true;
            };
            EnumList.prototype._getEnumsNames = function () {
                var that = this;
                if (!that.$schemaItems.enumNames)
                    return null;
                if (that.state.filter) {
                    var enums = that.$schemaItems.filters[that.state.filter];
                    var res_8 = [];
                    enums.forEach(function (en) {
                        res_8.push(that.$schemaItems.enumNames[that.$schemaItems.enum.indexOf(en)]);
                    });
                    return res_8;
                }
                else
                    return that.$schemaItems.enumNames;
            };
            EnumList.prototype._getEnums = function () {
                var that = this;
                return that.state.filter ? that.$schemaItems.filters[that.state.filter] : that.$schemaItems.enum;
            };
            EnumList.prototype._toggleEnumByIndex = function (index) {
                var that = this;
                var enums = that._getEnums();
                if (index >= 0 && index < enums.length) {
                    var en = enums[index];
                    var ii = that.state.value.indexOf(en);
                    if (ii >= 0) {
                        that.state.value.remove(en);
                    }
                    else {
                        that.state.value.push(en);
                    }
                }
            };
            EnumList.prototype.keypress = function (event) {
                var that = this;
                if (event.which == 32) {
                    var row = _dom.parentByClass(that.$element.get(0), event.target, "bs-enum-list-row");
                    if (!row)
                        return;
                    that._toggleEnumByIndex(_dom.indexOf(row.parentNode, row));
                }
            };
            EnumList.prototype.click = function (event) {
                var that = this;
                if (!that.$element)
                    return;
                if (that.state.isDisabled || that.state.isReadOnly)
                    return;
                var row = _dom.parentByClass(that.$element.get(0), event.target, "bs-enum-list-row");
                if (!row)
                    return;
                that._toggleEnumByIndex(_dom.indexOf(row.parentNode, row));
            };
            EnumList.prototype.changed = function (propName, ov, nv, op, params) {
                var that = this;
                if (!that.$element)
                    return;
                var ii = that._input(), ie = -1;
                var enums = that._getEnums();
                var enumsNames = that._getEnumsNames();
                switch (op) {
                    case "add":
                        ie = enums.indexOf(params.$id);
                        if (ie >= 0) {
                            that._setItemValue(ii.childNodes[ie], true);
                        }
                        break;
                    case "remove":
                        ie = enums.indexOf(params.$id);
                        if (ie >= 0) {
                            that._setItemValue(ii.childNodes[ie], false);
                        }
                        break;
                    case "propchange":
                        _dom.empty(ii);
                        if (propName === that.$bind)
                            that.state.value = that.form.getValue(that.$bind);
                        var ff = _createEnums(that.state.value, that.state.isDisabled, enums, enumsNames);
                        _dom.empty(ii);
                        _dom.append(ii, ff);
                        break;
                }
            };
            EnumList.prototype._setFilter = function () {
                var that = this;
                var nf = that.state.filter;
                var enums = that._getEnums();
                var nv = [];
                that.state.value.forEach(function (en) {
                    if (enums.indexOf(en) >= 0)
                        nv.push(en);
                });
                that.form.setValue(that.$bind, nv);
            };
            EnumList.prototype.stateChanged = function (propName, params) {
                var that = this;
                var state = that.form.getState(that.$bind);
                var element = that.$element ? that.$element.get(0) : null;
                var input = element ? that._input() : null;
                if (!propName || (propName === 'isHidden')) {
                    if (state.isHidden !== that.state.isHidden) {
                        that.state.isHidden = state.isHidden;
                        if (element)
                            that.setHidden(element);
                    }
                }
                if (!propName || (propName === 'isDisabled')) {
                    if (state.isDisabled != that.state.isDisabled) {
                        that.state.isDisabled = state.isDisabled;
                        if (element)
                            that._setDisabled(input, element);
                    }
                }
                if (!propName || (propName === 'isReadOnly')) {
                    if (state.isReadOnly != that.state.isReadOnly) {
                        that.state.isReadOnly = state.isReadOnly;
                    }
                }
                if (!propName || (propName === 'filter')) {
                    if (state.filter != that.state.filter) {
                        that.state.filter = state.filter;
                        if (element)
                            that._setFilter();
                    }
                }
                if (!propName || (propName === 'isMandatory')) {
                    if (state.isMandatory != that.state.isMandatory) {
                        that.state.isMandatory = state.isMandatory;
                    }
                }
                if (!propName || (propName === 'errors')) {
                    if (_eu.errorChanged(that.state.errors, state.errors)) {
                        that.state.errors = state.errors;
                        that._setErrors(null, element);
                    }
                }
            };
            EnumList.prototype.render = function ($parent) {
                var that = this;
                var opts = that._initOptions(_uiutils.utils.defaultOptions);
                if (!that.$element) {
                    if (that.$schema.description)
                        opts.description = _ulocale.tt(that.$schema.description, that.form.$locale);
                    that.$element = $(_createEnumsInput(that.id, opts, that.options.design, _ulocale.tt(that.$schema.title, that.form.$locale)));
                    var ff = _createEnums(that.state.value, that.state.isDisabled, that._getEnums(), that._getEnumsNames());
                    var ii = that._input();
                    _dom.append(ii, ff);
                    that._state2UI(true);
                }
                that.appendElement($parent, opts);
                return that.$element;
            };
            EnumList.prototype._setItemValue = function (item, value) {
                var check = item.firstChild.firstChild.firstChild.firstChild;
                check.className = value ? _dom.iconClass("check-square-o") : _dom.iconClass("square-o");
            };
            EnumList.prototype.destroy = function () {
                _super.prototype.destroy.call(this);
            };
            return EnumList;
        }(Phoenix.ui.AbsField));
        _ui.registerControl(EnumList, "array", false, 'enums-list', null);
    })(formenum || (formenum = {}));
})(Phoenix || (Phoenix = {}));
/// <reference path="../../../core/core-refs.ts" />
/// <reference path="../../../ui/layout.control.ts" />
/// <reference path="../schema.data.ts" />
var Phoenix;
(function (Phoenix) {
    var _ui = Phoenix.ui, _uiutils = Phoenix.uiutils, _dom = Phoenix.dom, _ulocale = Phoenix.ulocale;
    /************************
     *** General methods ***
     ************************/
    function getValWithoutSelection(val, selectionStart, selectionEnd) {
        var beforeSelection = val.substr(0, selectionStart);
        var afterSelection = val.substr(selectionEnd, val.length - selectionEnd);
        val = beforeSelection + afterSelection;
        return val;
    }
    function isNegative(val) {
        return val.indexOf('-') != -1;
    }
    function getZeroStr(places) {
        var result = '0.';
        for (var i = 0; i < places; i++)
            result += '0';
        return result;
    }
    function unformatMontant(val, decimalSep, thousandSep) {
        var t1 = replaceAll(val, thousandSep, "");
        var t2 = decimalSep == '.' ? t1 : t1.replace(decimalSep, ".");
        var t3 = replaceAll(t2, '-', '');
        return t2;
    }
    function formatMontant(val, places, decimalSep, thousandSep) {
        if (!val)
            val = '0';
        if (val.indexOf('.') == -1) {
            val += '.' + formatDecimalPart("", places);
        }
        var split = splitFloat(val);
        var entPart = formatEntPart(split[0], thousandSep);
        var decimalPart = split[1];
        if (decimalPart.length > places) {
            decimalPart = decimalPart.substr(0, places);
        }
        if (decimalPart.length < places) {
            decimalPart = formatDecimalPart(decimalPart, places);
        }
        if (places === 0)
            return entPart;
        else
            return entPart + decimalSep + decimalPart;
    }
    function formatDecimalPart(decimalPart, places) {
        var addDecimals = decimalPart.length;
        for (var i = 0; i < places - addDecimals; i++) {
            decimalPart += "0";
        }
        return decimalPart;
    }
    function splitFloat(val) {
        var split = val.split(".");
        if (split[0] == '')
            split[0] = '0';
        return split;
    }
    function formatEntPart(val, thousandSep) {
        // Manage negative values
        var charNegative = '';
        if (val.indexOf('-') == 0) {
            charNegative = '-';
            val = val.substr(1, val.length - 1);
        }
        // Process
        for (var i = 0; i < val.length - 1; i++) {
            var t = val[i];
            if (val[i] != '0')
                break;
        }
        val = val.substr(i, val.length - i);
        // Particular case : val == ''
        if (val == '')
            return '0';
        if (val.length <= 3)
            return charNegative + val;
        var reverseVal = reverseString(val);
        var result = '';
        for (var i = 0; i < reverseVal.length; i++) {
            if (i % 3 == 0 && i > 0)
                result += thousandSep;
            result += reverseVal[i];
        }
        return reverseString(result + charNegative);
    }
    function reverseString(val) {
        var t = val.split("");
        var t2 = t.reverse();
        var t3 = t2.join("");
        return t3;
    }
    function resetSelection(input, val, start, thousandSep, decimalSep, places) {
        var formattedNewVal1 = unformatMontant(val, decimalSep, thousandSep);
        var formattedNewVal2 = formatMontant(formattedNewVal1, places, decimalSep, thousandSep);
        input.value = formattedNewVal2;
        setCaretPos(input, unformatMontant(start, decimalSep, thousandSep).length, thousandSep);
    }
    function replaceAll(val, search, replacement) {
        var result = "";
        for (var i = 0; i < val.length; i++) {
            if (val[i] == search)
                result += replacement;
            else
                result += val[i];
        }
        return result;
    }
    function validNumberEvent(event) {
        if (event.which < 48 || event.which > 57)
            return false;
        return true;
    }
    function limit(val, min, exclusiveMin, max, exclusiveMax, places, decimalSep, thousandSep) {
        if (val === '')
            val = '0';
        var valFloat = parseFloat(val);
        if (exclusiveMin) {
            if (valFloat <= min)
                return formatMontant(min.toString(), places, decimalSep, thousandSep);
        }
        else {
            if (valFloat < min)
                return formatMontant(min.toString(), places, decimalSep, thousandSep);
        }
        if (exclusiveMax) {
            if (valFloat >= max)
                return formatMontant(max.toString(), places, decimalSep, thousandSep);
        }
        else {
            if (valFloat > max)
                return formatMontant(max.toString(), places, decimalSep, thousandSep);
        }
        return formatMontant(valFloat.toString(), places, decimalSep, thousandSep);
    }
    function isInLimits(val, min, exclusiveMin, max, exclusiveMax) {
        var valFloat = parseFloat(val);
        if (exclusiveMin) {
            if (valFloat <= min)
                return false;
        }
        else {
            if (valFloat < min)
                return false;
        }
        if (exclusiveMax) {
            if (valFloat >= max)
                return false;
        }
        else {
            if (valFloat > max)
                return false;
        }
        return true;
    }
    function setCaretPos(input, charsBefore, thousandSep) {
        var val = input.value;
        var posCaret = 0;
        if (charsBefore != 0) {
            for (var i = 0; i < val.length; i++) {
                if (val[i] != thousandSep)
                    charsBefore--;
                if (charsBefore == 0)
                    break;
            }
            posCaret = i + 1;
        }
        _dom.selectRange(input, posCaret);
        return;
    }
    /**********************
     *** Event methods ***
     **********************/
    var _doPasteNumber = function (event, input, opts) {
        var data = parseFloat(unformatMontant(event.originalEvent.clipboardData.getData('Text'), opts.decimalSep, opts.thousandSep));
        //let data: number = parseFloat(unformatMontant(event.clipboardData.getData('Text'), opts.decimalSep, opts.thousandSep));
        var negative = data < 0;
        var charNegative = '';
        if (negative) {
            charNegative = '-';
            data = -data;
        }
        if (isNaN(data)) {
            event.preventDefault();
            return true;
        }
        var dataStr = data.toString();
        // Get selection
        var selectionStart = event.target.selectionStart;
        var selectionEnd = event.target.selectionEnd;
        var selection = selectionEnd - selectionStart > 0;
        // Get context
        var oldVal = selection ? getValWithoutSelection(input.value, selectionStart, selectionEnd) : input.value;
        var start = oldVal.substr(0, selectionStart);
        var end = oldVal.substr(selectionStart, oldVal.length);
        // Process
        var newVal = unformatMontant(start + data + end, opts.decimalSep, opts.thousandSep);
        /*let newValIntervalle: string = limit(charNegative + newVal,
            opts.schema.minimum,
            opts.schema.exclusiveMinimum,
            opts.schema.maximum,
            opts.schema.exclusiveMaximum,
            opts.places,
            opts.decimalSep,
            opts.thousandSep);*/
        if (!isInLimits(charNegative + newVal, opts.schema.minimum, opts.schema.exclusiveMinimum, opts.schema.maximum, opts.schema.exclusiveMaximum)) {
            event.preventDefault();
            return false;
        }
        input.value = formatMontant(charNegative + newVal, opts.places, opts.decimalSep, opts.thousandSep);
        setCaretPos(input, unformatMontant(start, opts.decimalSep, opts.thousandSep).length + dataStr.length, opts.thousandSep);
        event.preventDefault();
    };
    var _keyPressNumber = function (event, input, opts) {
        // Get selection
        var selectionStart = event.target.selectionStart;
        var selectionEnd = event.target.selectionEnd;
        var selection = selectionEnd - selectionStart > 0;
        // Get context
        var oldVal = selection ? getValWithoutSelection(input.value, selectionStart, selectionEnd) : input.value;
        // Manage negative numbers
        var negative = isNegative(oldVal);
        var charNegative = '';
        if (negative) {
            oldVal = oldVal.substr(1, oldVal.length - 1);
            charNegative = '-';
            if (selectionStart != -0) {
                selectionStart--;
                selectionEnd--;
            }
        }
        var start = oldVal.substr(0, selectionStart);
        var end = oldVal.substr(selectionStart, oldVal.length);
        // Check if keypress is "," or "."
        if (event.key === opts.decimalSep || event.key === '.') {
            _dom.selectRange(input, oldVal.indexOf(opts.decimalSep) + 1 + charNegative.length);
            event.preventDefault();
            return true;
        }
        // Check if keypress is "-"
        if (event.key === '-') {
            if (oldVal.indexOf('-') != 0) {
                var nextVal = unformatMontant(oldVal, opts.decimalSep, opts.thousandSep);
                if (nextVal == getZeroStr(opts.places) || nextVal == '') {
                    var nv = formatMontant(nextVal, opts.places, opts.decimalSep, opts.thousandSep);
                    input.value = nv;
                }
                else {
                    if (!isInLimits('-' + nextVal, opts.schema.minimum, opts.schema.exclusiveMinimum, opts.schema.maximum, opts.schema.exclusiveMaximum)) {
                        event.preventDefault();
                        return false;
                    }
                    input.value = formatMontant('-' + nextVal, opts.places, opts.decimalSep, opts.thousandSep);
                }
            }
            _dom.selectRange(input, 1);
            event.preventDefault();
            return true;
        }
        // Check if keypress is number
        if (!validNumberEvent(event)) {
            event.preventDefault();
            return false;
        }
        // Particular case : 0 added to start
        if (event.key === '0' && selectionStart == 0 && !selection) {
            event.preventDefault();
            return true;
        }
        // Process
        var newVal = unformatMontant(start + event.key + end, opts.decimalSep, opts.thousandSep);
        /*let newValIntervalle: string = limit(charNegative + newVal,
            opts.schema.minimum,
            opts.schema.exclusiveMinimum,
            opts.schema.maximum,
            opts.schema.exclusiveMaximum,
            opts.places,
            opts.decimalSep,
            opts.thousandSep);*/
        if (!isInLimits(charNegative + newVal, opts.schema.minimum, opts.schema.exclusiveMinimum, opts.schema.maximum, opts.schema.exclusiveMaximum)) {
            event.preventDefault();
            return false;
        }
        input.value = formatMontant(charNegative + newVal, opts.places, opts.decimalSep, opts.thousandSep);
        var correctionCaret = start == '0' ? 0 : 1;
        setCaretPos(input, unformatMontant(start, opts.decimalSep, opts.thousandSep).length + correctionCaret, opts.thousandSep);
        event.preventDefault();
        return true;
    };
    var _keyDownNumber = function (event, input, opts) {
        // Check if keypress is "delete"
        if (event.which != _dom.keys.VK_BACKSPACE && event.which != _dom.keys.VK_DELETE)
            return true;
        var offsetCaret = 0;
        if (event.which == _dom.keys.VK_BACKSPACE)
            offsetCaret = -1;
        // Get selection
        var selectionStart = event.target.selectionStart;
        var selectionEnd = event.target.selectionEnd;
        var selection = selectionEnd - selectionStart > 0;
        // Get context
        var oldVal = selection ? getValWithoutSelection(input.value, selectionStart, selectionEnd) : input.value;
        var start = oldVal.substr(0, selectionStart);
        var end = oldVal.substr(selectionStart, oldVal.length);
        // Reset selection
        if (selection) {
            resetSelection(input, oldVal, start, opts.thousandSep, opts.decimalSep, opts.places);
            event.preventDefault();
            return true;
        }
        // Particular case : back delete left
        if (event.which == _dom.keys.VK_BACKSPACE && selectionStart == 0) {
            event.preventDefault();
            return true;
        }
        // Particular case : delete decimal separator
        if (event.which == _dom.keys.VK_BACKSPACE) {
            if (oldVal[selectionStart + offsetCaret] == opts.decimalSep) {
                _dom.selectRange(input, selectionStart + offsetCaret);
                event.preventDefault();
                return true;
            }
        }
        else {
            if (oldVal[selectionStart + offsetCaret] == opts.decimalSep) {
                _dom.selectRange(input, selectionStart + offsetCaret + 1);
                event.preventDefault();
                return true;
            }
        }
        // Particular case : delete thousand separator
        if (oldVal[selectionStart + offsetCaret] == opts.thousandSep) {
            _dom.selectRange(input, selectionStart + 1 + offsetCaret * 2);
            event.preventDefault();
            return true;
        }
        else {
            // New values
            var newVal = '';
            if (event.which == _dom.keys.VK_DELETE) {
                newVal = unformatMontant(start + end.substr(1, end.length - 1), opts.decimalSep, opts.thousandSep);
            }
            else if (event.which == _dom.keys.VK_BACKSPACE) {
                newVal = unformatMontant(start.substr(0, start.length - 1) + end, opts.decimalSep, opts.thousandSep);
            }
            var formattedLimitNewVal = limit(newVal, opts.schema.minimum, opts.schema.exclusiveMinimum, opts.schema.maximum, opts.schema.exclusiveMaximum, opts.places, opts.decimalSep, opts.thousandSep);
            input.value = formattedLimitNewVal;
            // Set caret position
            var charsBefore = unformatMontant(start, opts.decimalSep, opts.thousandSep).length + offsetCaret;
            // Particular cases : near decimal separator
            if (event.which == _dom.keys.VK_BACKSPACE && newVal.indexOf(".") == 0 && selectionStart == 1)
                charsBefore = 1;
            if (event.which == _dom.keys.VK_DELETE && newVal.indexOf(".") == 0 && selectionStart == 0)
                charsBefore = 1;
            setCaretPos(input, charsBefore, opts.thousandSep);
        }
        event.preventDefault();
        return true;
    };
    /***********************
     ****** Variables *****
     **********************/
    // Number
    _uiutils.utils.doPasteNumber = _doPasteNumber;
    _uiutils.utils.keyPressNumber = _keyPressNumber;
    _uiutils.utils.keyDownNumber = _keyDownNumber;
})(Phoenix || (Phoenix = {}));
/// <reference path="../../../core/core-refs.ts" />
/// <reference path="../../../core/modules/locale.ts" />
/// <reference path="./absfield.control.ts" />
var Phoenix;
(function (Phoenix) {
    var _p = Phoenix, _utils = _p.utils, _ui = _p.ui, _dom = _p.dom, _uiutils = _p.uiutils;
    var frame;
    (function (frame) {
        var _createFrame = function (id, options, authoring) {
            var html = [];
            _uiutils.utils.fieldWrapper(html, options, authoring, function () {
                html.push('<div id="{0}_parent">');
                if (options.src)
                    html.push('<iframe scrolling="no" width="100%" frameBorder="0" border="0"></iframe>');
                html.push('</div>');
            }, null);
            return _utils.format(html.join(''), id);
        }, _checkIFrameUri = function (uri, options) {
            if (uri.charAt(0) === ':') {
                uri = location.protocol + '//' + location.hostname + uri;
            }
            if (options.noCache) {
                var s = 'cache=' + _utils.allocUuid();
                var sep = '?';
                if (uri.indexOf('?') >= 0)
                    sep = '&';
            }
            return uri;
        };
        var IFrame = /** @class */ (function (_super) {
            __extends(IFrame, _super);
            function IFrame(fp, options, form) {
                var _this = _super.call(this, fp, options, form) || this;
                _this._state();
                _this._msghandler = _this._onmessage.bind(_this);
                return _this;
            }
            IFrame.prototype._setDisabled = function (element) {
            };
            IFrame.prototype._setReadOnly = function (element) {
                this._setDisabled(element);
            };
            IFrame.prototype._setMandatory = function (element) {
            };
            IFrame.prototype._onmessage = function (msg) {
                var that = this;
                var iframe = that._iframe();
                if (!iframe || !iframe.contentWindow)
                    return;
                if (msg.source !== iframe.contentWindow)
                    return;
                if (!msg.data)
                    return;
                if (typeof msg.data === 'string' && msg.data.indexOf('[iFrameSizer]') >= 0) {
                    return;
                }
                if (that.fieldOptions && that.fieldOptions.messages && msg.data.action && that.fieldOptions.messages[msg.data.action]) {
                    that.form.execAction(that.fieldOptions.messages[msg.data.action], msg.data.action, msg.data);
                }
            };
            IFrame.prototype._state2UI = function () {
                var that = this, element = that.$element ? that.$element.get(0) : null;
                if (element) {
                    var iframeElement = that._iframe();
                    if (iframeElement && that.state.value)
                        iframeElement.src = _checkIFrameUri(that.state.value, that.renderOptions);
                    that._setDisabled(element);
                    that._setReadOnly(element);
                    that.setHidden(element);
                }
            };
            IFrame.prototype.changed = function (propName, ov, nv, op) {
                var that = this, iframeElement = that._iframe();
                if (that.state.value !== nv) {
                    that.state.value = nv;
                    var e = that.$element ? that.$element.get(0) : null;
                    if (!iframeElement) {
                        if (that.state.value && e) {
                            // Create iframe
                            var parent_2 = _dom.find(e, that.id + '_parent');
                            var iframeElement_1 = $('<iframe src="' + _checkIFrameUri(that.state.value, that.renderOptions) + '" scrolling="no" width="100%" frameBorder="0" border="0"></iframe>');
                            _dom.append(parent_2, iframeElement_1.get(0));
                            that._applyIResize();
                        }
                    }
                    else {
                        if (iframeElement) {
                            if (that.state.value) {
                                iframeElement.src = _checkIFrameUri(that.state.value, that.renderOptions);
                            }
                            else {
                                // Remove iframe 
                                if (iframeElement.iFrameResizer)
                                    iframeElement.iFrameResizer.close();
                            }
                        }
                    }
                }
            };
            IFrame.prototype._applyIResize = function () {
                var that = this;
                if (that.$element) {
                    var iframe_1 = that._iframe();
                    if (!iframe_1)
                        return;
                    var anyElement = $(that._iframe());
                    if (that.state.value && anyElement.iFrameResize)
                        anyElement.iFrameResize({});
                }
            };
            IFrame.prototype.afterAddedInDom = function () {
                var that = this;
                that._applyIResize();
            };
            IFrame.prototype.stateChanged = function (propName, params) {
                var that = this, state = that.form.getState(that.$bind), element = that.$element ? that.$element.get(0) : null;
                if (state.isHidden !== that.state.isHidden) {
                    that.state.isHidden = state.isHidden;
                    if (element)
                        that.setHidden(element);
                }
                if (state.isDisabled != that.state.isDisabled) {
                    that.state.isDisabled = state.isDisabled;
                    if (element)
                        that._setDisabled(element);
                }
                if (state.isReadOnly != that.state.isReadOnly) {
                    that.state.isReadOnly = state.isReadOnly;
                    if (element)
                        that._setReadOnly(element);
                }
                if (state.isMandatory != that.state.isMandatory) {
                    that.state.isMandatory = state.isMandatory;
                    if (element)
                        that._setMandatory(element);
                }
            };
            IFrame.prototype._iframe = function () {
                var that = this, e = that.$element.get(0), img = e ? e.firstChild.firstChild : null;
                return img;
            };
            IFrame.prototype.setEvents = function (opts) {
                var that = this;
                window.addEventListener('message', that._msghandler);
            };
            IFrame.prototype.resize = function (visibilityChanged) {
                var that = this;
                if (visibilityChanged) {
                    if (that.fieldOptions.refreshOnVisibilityChanged) {
                        var iframeElement = that._iframe();
                        if (iframeElement) {
                            // Refresh iframe
                            if (iframeElement.iFrameResizer)
                                iframeElement.iFrameResizer.close();
                            var nv = that.state.value;
                            that.state.value = '';
                            that.changed(that.$bind, '', nv, null);
                        }
                    }
                }
            };
            IFrame.prototype.removeEvents = function () {
                var that = this;
                var iframeElement = that._iframe();
                if (iframeElement) {
                    // Refresh iframe
                    if (iframeElement.iFrameResizer)
                        iframeElement.iFrameResizer.close();
                }
                window.removeEventListener('message', that._msghandler);
            };
            IFrame.prototype.destroy = function () {
                _super.prototype.destroy.call(this);
                this._msghandler = null;
            };
            IFrame.prototype.render = function ($parent) {
                var that = this;
                var opts = that._initOptions(_uiutils.utils.defaultOptions);
                if (!that.$element) {
                    opts.src = that.state.value;
                    that.$element = $(_createFrame(that.id, opts, that.options.design));
                    that._state2UI();
                    that.setEvents(opts);
                }
                that.appendElement($parent, opts);
                return that.$element;
            };
            return IFrame;
        }(Phoenix.ui.AbsField));
        _ui.registerControl(IFrame, "string", false, 'iframe', {});
    })(frame = Phoenix.frame || (Phoenix.frame = {}));
})(Phoenix || (Phoenix = {}));
/// <reference path="../../../core/core-refs.ts" />
/// <reference path="../../../core/modules/locale.ts" />
/// <reference path="./absfield.control.ts" />
var Phoenix;
(function (Phoenix) {
    var _p = Phoenix, _utils = _p.utils, _ui = _p.ui, _dom = _p.dom, _uiutils = _p.uiutils;
    var gmapsviewer;
    (function (gmapsviewer) {
        var _createFrame = function (id, options, authoring) {
            var html = [];
            _uiutils.utils.fieldWrapper(html, options, authoring, function () {
                options.height = options.height || 450;
                html.push('<div id="{0}_parent"></div>');
            }, null);
            return _utils.format(html.join(''), id);
        }, _checkIFrameUri = function (value) {
            return 'https://www.google.com/maps/embed/v1/place?key=' + encodeURIComponent(_utils.gmapsKey) + '&q=' + encodeURIComponent(value);
        };
        var GMapsView = /** @class */ (function (_super) {
            __extends(GMapsView, _super);
            function GMapsView(fp, options, form) {
                var _this = _super.call(this, fp, options, form) || this;
                _this._state();
                return _this;
            }
            GMapsView.prototype._setDisabled = function (element) {
            };
            GMapsView.prototype._setReadOnly = function (element) {
                this._setDisabled(element);
            };
            GMapsView.prototype._setMandatory = function (element) {
            };
            GMapsView.prototype._state2UI = function () {
                var that = this, element = that.$element ? that.$element.get(0) : null;
                if (element) {
                    that._showaddress();
                    that._setDisabled(element);
                    that._setReadOnly(element);
                    that.setHidden(element);
                }
            };
            GMapsView.prototype._showaddress = function () {
                var that = this, iframeElement = that._iframe();
                var e = that.$element ? that.$element.get(0) : null;
                if (!iframeElement) {
                    if (that.state.value && e) {
                        // Create iframe
                        var parent_3 = _dom.find(e, that.id + '_parent');
                        var iframeElement_2 = $('<iframe id="' + that.id + '_frame" src="' + _checkIFrameUri(that.state.value) + '" scrolling="no" width="100%" height="' + that.renderOptions.height + '"  frameBorder="0" border="0"></iframe>');
                        _dom.append(parent_3, iframeElement_2.get(0));
                    }
                }
                else {
                    if (iframeElement) {
                        if (that.state.value) {
                            iframeElement.src = _checkIFrameUri(that.state.value);
                        }
                        else {
                            // Remove iframe 
                            _dom.remove(iframeElement);
                        }
                    }
                }
            };
            GMapsView.prototype.changed = function (propName, ov, nv, op) {
                var that = this, iframeElement = that._iframe();
                if (that.state.value !== nv) {
                    that.state.value = nv;
                    that._showaddress();
                }
            };
            GMapsView.prototype.stateChanged = function (propName, params) {
                var that = this, state = that.form.getState(that.$bind), element = that.$element ? that.$element.get(0) : null;
                if (state.isHidden !== that.state.isHidden) {
                    that.state.isHidden = state.isHidden;
                    if (element)
                        that.setHidden(element);
                }
                if (state.isDisabled != that.state.isDisabled) {
                    that.state.isDisabled = state.isDisabled;
                    if (element)
                        that._setDisabled(element);
                }
                if (state.isReadOnly != that.state.isReadOnly) {
                    that.state.isReadOnly = state.isReadOnly;
                    if (element)
                        that._setReadOnly(element);
                }
                if (state.isMandatory != that.state.isMandatory) {
                    that.state.isMandatory = state.isMandatory;
                    if (element)
                        that._setMandatory(element);
                }
            };
            GMapsView.prototype._iframe = function () {
                var that = this, e = that.$element.get(0);
                return e ? _dom.find(e, that.id + '_frame') : null;
            };
            GMapsView.prototype.render = function ($parent) {
                var that = this;
                var opts = that._initOptions(_uiutils.utils.defaultOptions);
                if (!that.$element) {
                    opts.src = that.state.value;
                    that.$element = $(_createFrame(that.id, opts, that.options.design));
                    that._state2UI();
                    that.setEvents(opts);
                }
                that.appendElement($parent, opts);
                return that.$element;
            };
            return GMapsView;
        }(Phoenix.ui.AbsField));
        _ui.registerControl(GMapsView, "string", false, 'gmapsview', {});
    })(gmapsviewer = Phoenix.gmapsviewer || (Phoenix.gmapsviewer = {}));
})(Phoenix || (Phoenix = {}));
/// <reference path="../../../core/core-refs.ts" />
/// <reference path="../../page.control.ts" />
/// <reference path="../schema.data.ts" />
/// <reference path="../../page.control.ts" />
/// <reference path="../modalform.control.ts" />
var Phoenix;
(function (Phoenix) {
    var _p = Phoenix, _utils = _p.utils, _dom = _p.dom, _ui = _p.ui, _autoclose = _p.autoclose, _pagecontrol = _p.pagecontrol, _observable = _p.Observable, _data = _p.data, _formgrid = _p.formgrid, _sutils = _observable.SchemaUtils, _locale = _p.locale;
    var gridlookup;
    (function (gridlookup) {
        var mFormLayout = {
            name: '$lookup',
            form: true,
            datasets: {
                //Dataset odata
                list: {
                    $main: true,
                    $type: "odata",
                    $method: "GET",
                    $params: {
                        $entity: 'Country',
                        $module: '',
                        $top: 5,
                        $orderby: '',
                        $searchByFields: undefined,
                        $allData: false
                    }
                }
            },
            $type: 'block',
            $items: [
                {
                    $type: 'block',
                    $items: [
                        {
                            $bind: 'search',
                            $widget: 'search',
                            options: {
                                autofocus: true,
                                search: 'documents'
                            }
                        }
                    ]
                },
                {
                    $type: 'block',
                    $items: [
                        {
                            $bind: 'documents',
                            options: {
                                border: true,
                                scrolling: {
                                    horizontal: true
                                },
                                sorting: true,
                                selecting: {
                                    row: true,
                                    action: 'selectAndClose'
                                },
                                columns: []
                            }
                        }
                    ]
                }
            ]
        };
        var GridItems = /** @class */ (function () {
            function GridItems($parent, $input, options) {
                var that = this;
            }
            GridItems.prototype._modelChanged = function (action, model, form, modalForm) {
                var that = this;
                if (action.operation === 'init') {
                    var docs = model.documents;
                    if (docs.length)
                        docs.selectItem(true, model.documents.get(0), false, '', false);
                }
                else if (action.property === 'form-validate') {
                    if (that._onselect) {
                        var sel_2 = null;
                        var docs = model.documents;
                        docs.enumSelectedItems('', function (ii) {
                            if (!sel_2)
                                sel_2 = ii;
                        });
                        that._onselect(sel_2 ? sel_2.model() : null);
                    }
                    form.autoClose.explicitClose = true;
                    that.hide();
                }
                else if (action.property === 'documents') {
                    if (action.operation === 'propchange') {
                        var docs = model.documents;
                        if (docs.length)
                            docs.selectItem(true, model.documents.get(0), false, '', false);
                    }
                }
                else if (action.property === 'documents.$item.$links.selectAndClose') {
                    if (that._onselect)
                        that._onselect(action.actionParams.model());
                    form.autoClose.explicitClose = true;
                    that.hide();
                }
            };
            GridItems.prototype._checkFormLayout = function (form) {
                var that = this;
                form.$schema.properties.search = {
                    title: _locale.ui.Search,
                    type: 'string'
                };
                form.$schema.properties.documents.$reference = 'list';
                if (!that._lookupColumns) {
                    that._lookupColumns = [];
                    Object.keys(form.$schema.properties.documents.items.properties).forEach(function (fn) {
                        var cs = form.$schema.properties.documents.items.properties[fn];
                        if (cs.title && cs.type !== 'object' && cs.type !== 'array')
                            that._lookupColumns.push(fn);
                    });
                }
                form.$schema.properties.documents.items.links = {
                    selectAndClose: {}
                };
                var cols = form.data.$items[1].$items[0].options.columns;
                that._lookupColumns.forEach(function (item) {
                    var ii = item;
                    if (typeof item === 'string')
                        ii = { $bind: item };
                    if (ii.$bind === that._searchField)
                        cols.splice(0, 0, ii);
                    else
                        cols.push(ii);
                });
            };
            GridItems.prototype._beforeClose = function () {
                var that = this;
                if (that._form) {
                    var cform = that._form;
                    var parentControl = that._parentControl;
                    var focusParams = that._focusParams;
                    that._form = null;
                    if (parentControl && parentControl.focused) {
                        if (cform.autoClose && cform.autoClose.explicitClose) {
                            // focus on control
                            if (parentControl.setFocus)
                                parentControl.setFocus(focusParams);
                        }
                        else {
                            if (parentControl.checkFocus)
                                parentControl.checkFocus(focusParams);
                        }
                    }
                }
            };
            GridItems.prototype._checkPopup = function () {
                var that = this;
            };
            Object.defineProperty(GridItems.prototype, "opened", {
                get: function () {
                    var that = this;
                    return !!that._form;
                },
                enumerable: true,
                configurable: true
            });
            GridItems.prototype.focusInCombo = function (el) {
                var that = this;
                if (that._form && that._form.autoClose) {
                    return that._form.autoClose.inPopup(el);
                }
                return false;
            };
            GridItems.prototype.show = function (ds, parentControl, opts) {
                var that = this;
                that._parentControl = parentControl;
                that._focusParams = opts.focusParams;
                that._lookup = opts.lookup;
                that._lookupColumns = opts.lookupColumns;
                that._onselect = opts.onselect;
                if (!that._lookup.schema) {
                    throw "Invalid lookup definition. Foreign schema is missing.";
                }
                var formLayout = $.extend(true, {}, mFormLayout);
                if (that._lookup.data && that._lookup.data.$params && that._lookup.data.$params.$allData) {
                    formLayout.datasets.list.$params.$allData = true;
                }
                var formSchema = typeof that._lookup.schema === 'string' ? that._lookup.schema : $.extend(true, {}, that._lookup.schema);
                var mds = formLayout.datasets.list;
                var minWidth = opts.minWidth || 0;
                if (opts.alignElementId) {
                    var e = _dom.find(null, opts.alignElementId);
                    if (e)
                        minWidth = Math.max(e.offsetWidth, minWidth);
                    minWidth = Math.max(minWidth, 300);
                }
                $.extend(mds.$params, ds.$params);
                if (ds.$transform)
                    mds.$transform = ds.$transform;
                if (ds.$type)
                    mds.$type = ds.$type;
                mds.$params.$orderby = mds.$params.$orderby || (opts.display ? that._lookup.mapping[opts.display] : '');
                var searchField = opts.display ? that._lookup.mapping[opts.display] : '';
                that._searchField = searchField;
                _ui.loadSchema(formSchema).then(function (schema) {
                    _sutils.expandSchema$Ref(schema);
                    var searchableFields = _sutils.searchableFields(schema.properties.documents.items, schema, null);
                    var sf = [];
                    if (mds.$params.$searchByFields && mds.$params.$searchByFields.fields && mds.$params.$searchByFields.fields.length)
                        sf = mds.$params.$searchByFields.fields;
                    else if (searchField)
                        sf.push(searchField);
                    searchableFields.forEach(function (ii) {
                        if (sf.indexOf(ii.name) < 0)
                            sf.push(ii.name);
                    });
                    mds.$params.$searchByFields = {
                        fields: sf,
                        value: opts.search ? opts.search : ''
                    };
                    _ui.showAutoCloseForm({
                        name: formLayout,
                        meta: schema,
                        controller: {
                            onModelChanged: that._modelChanged.bind(that),
                            checkFormLayout: that._checkFormLayout.bind(that)
                        },
                        autoClose: {
                            align: _autoclose.BOTTOM_LEFT,
                            opener: opts.openerId,
                            parents: opts.openerId ? [opts.openerId] : undefined,
                            alignElementId: opts.alignElementId,
                            beforeClose: that._beforeClose.bind(that),
                            //style: params.style,
                            //parents: params.parents,
                            //width: params.width,
                            //height: params.height,
                            minWidth: minWidth,
                            //minHeight: params.minHeight,
                            showCloseButton: false
                        },
                        parentContext: that._parentControl.form.$model,
                        options: {},
                    }, null, function (form) {
                        that._form = form;
                    });
                });
            };
            GridItems.prototype.hide = function () {
                var that = this;
                if (that._form) {
                    var p = _pagecontrol.Page();
                    p.setPopup(null);
                }
                that._parentControl = null;
                that._focusParams = null;
                that._lookup = null;
                that._onselect = null;
                that._lookupColumns = null;
            };
            GridItems.prototype.destroy = function () {
                var that = this;
                that.hide();
            };
            return GridItems;
        }());
        gridlookup.GridItems = GridItems;
        var _gridPopup = {
            checkGridPopup: function (that, lookup, input, parent) {
                return new GridItems($(parent), input, {
                    primaryKey: lookup.primaryKey
                });
            },
            closeGridLookup: function (that, eventBus, propertyName) {
                if (that[propertyName] && that[propertyName].opened) {
                    eventBus.push(null, function (ldata) {
                        if (that[propertyName] && that[propertyName].opened)
                            that[propertyName].hide();
                    }, true);
                }
            },
            checkGridLookup: function (lookup, model) {
                if (lookup.data.$type === 'relation') {
                    var cl = _utils.copy(lookup);
                    var rootSchema = model.getSchema(null);
                    var schema = _sutils.expand$Ref(model.getSchema(lookup.data.$params.relation), rootSchema);
                    schema.items = _sutils.expand$Ref(schema.items, rootSchema);
                    cl.schema = {
                        type: 'object',
                        properties: {
                            documents: schema
                        }
                    };
                    cl.primaryKey = cl.schema.properties.documents.items.primaryKey;
                    return cl;
                }
                return lookup;
            },
            openGridLookup: function (that, options) {
                var ds = $.extend(true, {}, options.lookup.data);
                var opts = {
                    alignElementId: options.align,
                    openerId: options.openerId,
                    lookup: options.lookup,
                    lookupColumns: options.lookupColumns,
                    display: options.display,
                    onselect: options.onselect,
                    search: options.searchText,
                    minWidth: options.minWidth
                };
                if (ds && ds.$params && ds.$params.$filter)
                    ds.$params.$filter = _data.replaceFilterVars(ds.$params.$filter, options.formControl.getParentModel(options.bind).model(true));
                if (options.containerId)
                    ds.$params.containerId = options.containerId;
                if (options.viewId)
                    ds.$params.viewId = options.viewId;
                if (options.selected)
                    ds.$params.selected = options.selected;
                that[options.propertyName].show(ds, options.parentControl, opts);
            }
        };
        gridlookup.utils = {
            checkGridPopup: _gridPopup.checkGridPopup,
            closeGridLookup: _gridPopup.closeGridLookup,
            openGridLookup: _gridPopup.openGridLookup,
            checkGridLookup: _gridPopup.checkGridLookup
        };
        _formgrid.gridlookup = gridlookup.utils;
    })(gridlookup = Phoenix.gridlookup || (Phoenix.gridlookup = {}));
})(Phoenix || (Phoenix = {}));
/// <reference path="../../../core/core-refs.ts" />
/// <reference path="./absfield.control.ts" />
var Phoenix;
(function (Phoenix) {
    var groupctrl;
    (function (groupctrl) {
        var _utils = Phoenix.utils, _ui = Phoenix.ui, _eu = Phoenix.Observable.errorsUtils, _dom = Phoenix.dom, _ulocale = Phoenix.ulocale;
        var Group = /** @class */ (function (_super) {
            __extends(Group, _super);
            function Group(fp, options, form) {
                var _this = _super.call(this, fp, options, form) || this;
                _this._state();
                return _this;
            }
            Group.prototype._item = function (ii) {
                var that = this;
                if (!that.$element)
                    return null;
                var e = that.$element.get(0);
                return _dom.find(e, that.id + '_item_' + ii);
            };
            Group.prototype.click = function (event) {
                var that = this, target = event.target;
                if (that.state.isReadOnly)
                    return;
                var cid = target.id ? target.id : target.parentNode.id;
                if (cid) {
                    var href = _dom.attr(target, 'data-phoenix-href') || _dom.attr(target, 'href');
                    if (href === '#')
                        event.preventDefault();
                    var prefix = that.id + "_item_";
                    if (cid.indexOf(prefix) === 0) {
                        var index = parseInt(cid.substring(prefix.length), 10);
                        var value = that.$schema.enum[index];
                        var oldIndex = that.$schema.enum.indexOf(that.state.value);
                        if (that.renderOptions.wizard && oldIndex >= 0 && index >= 0 && (index - oldIndex > 0)) {
                            return;
                        }
                        if (value !== that.state.value) {
                            that.form.setValue(that.$bind, value);
                        }
                    }
                }
            };
            Group.prototype._setDisabled = function (element) {
                if (!element)
                    return;
                var that = this;
                that._enumItems(function (btn, value) {
                    btn.disabled = (that.state.isDisabled || that.state.isReadOnly);
                });
            };
            Group.prototype._enumItems = function (cb) {
                var that = this;
                that.$schema.enum.forEach(function (val, index) {
                    var item = that._item(index);
                    cb(item, val);
                });
            };
            Group.prototype._setMandatory = function (element) { };
            Group.prototype._state2UI = function (cb) {
                var that = this, element = that.$element ? that.$element.get(0) : null;
                if (!element)
                    return;
                var ii = that.$schema.enum.indexOf(that.state.value);
                if (ii >= 0) {
                    var item = that._item(ii);
                    if (item)
                        cb(item);
                }
                that._setDisabled(element);
                that.setHidden(element);
                that._setErrors(element);
            };
            Group.prototype._setErrors = function (element) {
                var that = this;
                var errors = that.state.errors;
                if (element && Phoenix.bootstrap4) {
                    var errorClass = 'is-invalid';
                    if (errors && errors.length)
                        _dom.addClass(element, errorClass);
                    else
                        _dom.removeClass(element, errorClass);
                }
                that.showErrors(element, errors);
            };
            Group.prototype._getDefaultItem = function () {
                var that = this, element = that.$element ? that.$element.get(0) : null;
                if (!element)
                    return;
                var ii = that.$schema.enum.indexOf(that.state.value);
                if (ii >= 0) {
                    return that._item(ii);
                }
                else
                    return;
            };
            Group.prototype.stateChanged = function (propName, params) {
                var that = this, state = that.form.getState(that.$bind), element = that.$element ? that.$element.get(0) : null;
                if (state.isHidden !== that.state.isHidden) {
                    that.state.isHidden = state.isHidden;
                    that.setHidden(element);
                }
                if (state.isDisabled != that.state.isDisabled) {
                    that.state.isDisabled = state.isDisabled;
                    that._setDisabled(element);
                }
                if (state.isReadOnly != that.state.isReadOnly) {
                    that.state.isReadOnly = state.isReadOnly;
                    that._setDisabled(element);
                }
                if (state.isMandatory != that.state.isMandatory) {
                    that.state.isMandatory = state.isMandatory;
                    that._setMandatory(element);
                }
                if (!propName || (propName === 'errors')) {
                    if (_eu.errorChanged(that.state.errors, state.errors)) {
                        that.state.errors = state.errors;
                        that._setErrors(element);
                    }
                }
            };
            return Group;
        }(Phoenix.ui.AbsField));
        groupctrl.Group = Group;
    })(groupctrl = Phoenix.groupctrl || (Phoenix.groupctrl = {}));
})(Phoenix || (Phoenix = {}));
/// <reference path="../../../core/core-refs.ts" />
/// <reference path="./group.control.ts" />
var Phoenix;
(function (Phoenix) {
    var groupbtn;
    (function (groupbtn) {
        var _utils = Phoenix.utils, _ui = Phoenix.ui, _dom = Phoenix.dom, _groupctrl = Phoenix.groupctrl, _ulocale = Phoenix.ulocale, _uiutils = Phoenix.uiutils;
        var _createGroupBtns = function (id, options, authoring, title, enums, enumsNames) {
            title = title || '';
            options = $.extend({ titleIsHidden: false, placeHolder: false, columns: false }, options);
            var html = [];
            _uiutils.utils.fieldWrapper(html, options, authoring, function () {
                var _bootstrap4 = Phoenix.bootstrap4;
                //add label: 
                var addDiv = !options.columns && !options.inline;
                if (!options.titleIsHidden) {
                    html.push('<label id="{0}_label" for="{0}_grp" ');
                    var cssLabel = ['bs-label'];
                    if (options.columns) {
                        if (_bootstrap4) {
                            cssLabel.push('col-form-label');
                        }
                        else {
                            cssLabel.push('checkbox-inline bs-cursor-d');
                        }
                        cssLabel.push('bs-lib-col col-sm-' + options.labelCol);
                        if (options.labelLeft)
                            cssLabel.push('text-left');
                    }
                    else if (options.inline) {
                        if (_bootstrap4)
                            cssLabel.push('form-check-inline');
                        else
                            cssLabel.push('checkbox-inline');
                        cssLabel.push('bs-cursor-d no-x-padding');
                    }
                    if (cssLabel.length)
                        html.push(' class="' + cssLabel.join(' ') + '"');
                    html.push('>');
                    html.push(_utils.escapeHtml(title || '') + (options.inline ? '&nbsp;' : ''));
                    html.push('</label>');
                }
                _uiutils.utils.addErrorDiv(html);
                if (options.columns)
                    html.push('<div class="no-x-padding col-sm-' + (12 - options.labelCol) + '">');
                if (addDiv)
                    html.push('<div>');
                var css = ['no-y-margin d-inline-flex pagination'];
                html.push('<ul id="{0}_grp" tabindex="0" class="' + css.join(' ') + '">');
                enums.forEach(function (enumName, index) {
                    html.push('<li id="{0}_item_' + index + '" class="page-item">');
                    html.push('<a tabindex="-1" href="#" class="page-link bs-nowrap"');
                    if (options.width) {
                        html.push(' style="width:' + options.width + '"');
                    }
                    html.push('>');
                    html.push(_utils.escapeHtml(enumsNames[index] || ''));
                    html.push('</a>');
                    html.push('</li>');
                });
                html.push('</div>');
                if (addDiv)
                    html.push('</div>');
            });
            if (options.columns)
                html.push('</div>');
            return _utils.format(html.join(''), id);
        };
        var BtnGroup = /** @class */ (function (_super) {
            __extends(BtnGroup, _super);
            function BtnGroup(fp, options, form) {
                var _this = _super.call(this, fp, options, form) || this;
                _this._state();
                return _this;
            }
            BtnGroup.prototype._state2UI = function () {
                var that = this;
                var pclass = that.renderOptions.binary ? 'bactive' : 'active';
                _super.prototype._state2UI.call(this, function (item) {
                    _dom.addClass(item, pclass);
                });
            };
            BtnGroup.prototype.changed = function (propName, ov, nv, op) {
                var that = this;
                var pclass = that.renderOptions.binary ? 'bactive' : 'active';
                if (that.state.value != nv) {
                    that.state.value = nv;
                    if (!that.$element)
                        return;
                    _super.prototype._enumItems.call(this, function (btn, value) {
                        if (that.state.value === value) {
                            _dom.addClass(btn, pclass);
                        }
                        else {
                            _dom.removeClass(btn, pclass);
                        }
                    });
                }
            };
            BtnGroup.prototype.mousedown = function (event) {
                var that = this;
                if (!that.options.design)
                    event.preventDefault();
                that.setFocus();
            };
            BtnGroup.prototype.focusIn = function (event) {
            };
            BtnGroup.prototype.focusOut = function (event) {
            };
            BtnGroup.prototype.setFocus = function (focusParams) {
                var that = this;
                if (that.renderOptions.readOnly)
                    return;
                var state = that.form.getState(that.$bind);
                if (state.isDisabled || state.isHidden)
                    return;
                if (!that.$element)
                    return;
                var fe = _dom.find(that.$element.get(0), that.id + '_grp');
                fe.focus();
            };
            BtnGroup.prototype.keydown = function ($event) {
                var that = this;
                var preventDefault = false;
                if (that.state.isReadOnly)
                    return;
                if ($event.altKey || $event.ctrlKey || $event.metaKey || $event.shiftKey)
                    return;
                var kc = $event.which || $event.keyCode;
                switch (kc) {
                    case _dom.keys.VK_LEFT:
                        //left
                        var cci = that.$schema.enum.indexOf(that.state.value);
                        if (cci > 0) {
                            var nv = that.$schema.enum[cci - 1];
                            that.form.setValue(that.$bind, nv);
                        }
                        break;
                    case _dom.keys.VK_RIGHT:
                        //right
                        var ci = that.$schema.enum.indexOf(that.state.value);
                        if (ci >= 0 && (ci < that.$schema.enum.length - 1)) {
                            var nv = that.$schema.enum[ci + 1];
                            that.form.setValue(that.$bind, nv);
                        }
                        break;
                    default:
                        break;
                }
                preventDefault && $event.preventDefault() && $event.stopPropagation();
            };
            BtnGroup.prototype.render = function ($parent) {
                var that = this;
                var opts = that._initOptions(_uiutils.utils.defaultOptions);
                if (!that.$element) {
                    var enumNames = that.$schema.enumNames || that.$schema.enum;
                    enumNames = enumNames.map(function (v) { return _ulocale.tt(v, that.form.$locale); });
                    that.$element = $(_createGroupBtns(that.id, opts, that.options.design, _ulocale.tt(that.$schema.title, that.form.$locale), that.$schema.enum, enumNames));
                    that._state2UI();
                }
                that.appendElement($parent, opts);
                return that.$element;
            };
            return BtnGroup;
        }(Phoenix.groupctrl.Group));
        groupbtn.BtnGroup = BtnGroup;
        _ui.registerControl(BtnGroup, '*', true, 'grpbtn', null);
    })(groupbtn || (groupbtn = {}));
})(Phoenix || (Phoenix = {}));
/// <reference path="../../../core/core-refs.ts" />
/// <reference path="./absfield.control.ts" />
var Phoenix;
(function (Phoenix) {
    var _utils = Phoenix.utils, _ui = Phoenix.ui, _dom = Phoenix.dom, _ulocale = Phoenix.ulocale, _uiutils = Phoenix.uiutils;
    var formlabel;
    (function (formlabel) {
        function _createLabel(id, options, authoring, title) {
            var _bootstrap4 = Phoenix.bootstrap4;
            title = title || '';
            options = $.extend({ columns: false }, options);
            var simulateCols = options.columns;
            options.columns = false;
            if (simulateCols) {
                options.styles = 'bs-field-group-labels';
            }
            var html = [];
            var customizer = { formGroup: "form-group" };
            if (simulateCols && !_bootstrap4)
                customizer.formGroup += " form-horizontal";
            _uiutils.utils.fieldWrapper(html, options, authoring, function () {
                html.push('<label id="{0}_label"');
                var css = ['bs-label'];
                if (simulateCols) {
                    if (_bootstrap4)
                        css.push('col-form-label');
                    else
                        css.push('checkbox-inline bs-cursor-d');
                    css.push('col-sm-12 bs-lib-col');
                    if (options.labelLeft)
                        css.push('text-left');
                }
                if (options.inline) {
                    if (_bootstrap4)
                        css.push('form-check-inline');
                    else
                        css.push('checkbox-inline');
                    css.push('bs-cursor-d no-x-padding');
                }
                if (css.length)
                    html.push(' class="' + css.join(' ') + '"');
                if (options.parentId)
                    html.push(' for="' + options.parentId + '_input"');
                html.push('>');
                html.push(_utils.escapeHtml(title || '') + (options.inline ? '&nbsp;' : ''));
                _uiutils.utils.addTooltipAndRule(html, options);
                html.push('</label>');
            }, customizer);
            return _utils.format(html.join(''), id);
        }
        ;
        var Label = /** @class */ (function (_super) {
            __extends(Label, _super);
            function Label(fp, options, form) {
                var _this = _super.call(this, fp, options, form) || this;
                _this._state();
                return _this;
            }
            Label.prototype.isMeta = function () { return true; };
            Label.prototype.setParentId = function (id) { this._parentId = id; };
            Label.prototype.getCustomBind = function () {
                var that = this;
                if (that.config && that.config.options && that.config.options.$bind)
                    return that.config.options.$bind;
                return _super.prototype.getCustomBind.call(this);
            };
            Label.prototype._setDisabled = function (input, element) {
                var that = this;
                // TODO
            };
            Label.prototype._setReadOnly = function (input, element) {
                /* nothing todo */
            };
            Label.prototype._setMandatory = function (input, element) {
                var that = this, v = this.state.isMandatory;
                var label = that._label();
                if (label) {
                    _dom.text(label, that.renderOptions.title + (v ? ' *' : '') + (that.renderOptions.inline ? String.fromCharCode(160) : ''));
                }
            };
            Label.prototype._label = function () {
                var that = this;
                return that.$element ? _dom.find(that.$element.get(0), that.id + '_label') : null;
            };
            Label.prototype._state2UI = function () {
                var that = this, label = that._label(), element = that.$element ? that.$element.get(0) : null;
                if (label) {
                    that._setDisabled(label, element);
                    that._setReadOnly(label, element);
                    that.setHidden(element);
                    that._setMandatory(label, element);
                }
            };
            Label.prototype.stateChanged = function (propName, params) {
                var that = this, state = that.form.getState(that.$bind), label = that._label(), element = that.$element ? that.$element.get(0) : null;
                if (state.isHidden !== that.state.isHidden) {
                    that.state.isHidden = state.isHidden;
                    if (label)
                        that.setHidden(element);
                }
                if (state.isDisabled != that.state.isDisabled) {
                    that.state.isDisabled = state.isDisabled;
                    if (label)
                        that._setDisabled(label, element);
                }
                if (state.isReadOnly != that.state.isReadOnly) {
                    that.state.isReadOnly = state.isReadOnly;
                    if (label)
                        that._setReadOnly(label, element);
                }
                if (state.isMandatory != that.state.isMandatory) {
                    that.state.isMandatory = state.isMandatory;
                    if (label)
                        that._setMandatory(label, element);
                }
            };
            Label.prototype._title = function () {
                var that = this;
                if (that.$schema && that.$schema.title)
                    return that.$schema.title;
                return (that.config && that.config.options && that.config.options.title) ? that.config.options.title : '';
            };
            Label.prototype.render = function ($parent) {
                var that = this;
                var opts = that._initOptions(_uiutils.utils.defaultOptions);
                if (!that.$element) {
                    opts.title = _ulocale.tt(that._title(), that.form.$locale);
                    if (that.$schema.description)
                        opts.description = _ulocale.tt(that.$schema.description, that.form.$locale);
                    if (that._parentId)
                        opts.parentId = that._parentId;
                    that.$element = $(_createLabel(that.id, opts, that.options.design, opts.title));
                    that._state2UI();
                }
                that.appendElement($parent, opts);
                return that.$element;
            };
            return Label;
        }(Phoenix.ui.AbsField));
        formlabel.Label = Label;
        _ui.registerControl(Label, 'meta', false, 'label', null);
    })(formlabel = Phoenix.formlabel || (Phoenix.formlabel = {}));
})(Phoenix || (Phoenix = {}));
/// <reference path="../../../core/core-refs.ts" />
/// <reference path="./absfield.control.ts" />
/// <reference path="../form.control.ts" />
var Phoenix;
(function (Phoenix) {
    var _utils = Phoenix.utils, _ui = Phoenix.ui, _dom = Phoenix.dom, _uiutils = Phoenix.uiutils, _ulocale = Phoenix.ulocale;
    var formlinkbase;
    (function (formlinkbase) {
        var LinkBase = /** @class */ (function (_super) {
            __extends(LinkBase, _super);
            function LinkBase(fp, options, form) {
                var _this = _super.call(this, fp, options, form) || this;
                _this._state();
                return _this;
            }
            LinkBase.prototype._button = function () {
            };
            LinkBase.prototype.click = function (event) {
                var that = this;
                if (that.state.isDisabled)
                    return;
                if (that._isBinded) {
                    that.form.execAction(that.$bind);
                }
                else {
                    if (that.fieldOptions.onChange)
                        that.fieldOptions.onChange();
                }
            };
            LinkBase.prototype._setDisabled = function (button, element) {
                var that = this;
                button.disabled = that.state.isDisabled;
                if (that.state.isDisabled)
                    _dom.addClass(button, 'disabled');
                else
                    _dom.removeClass(button, 'disabled');
            };
            LinkBase.prototype._state2UI = function () {
                var that = this;
                var element = that.$element ? that.$element.get(0) : null;
                var button = that._button();
                if (button) {
                    that._setDisabled(button, element);
                    that.setHidden(element);
                }
            };
            LinkBase.prototype.stateChanged = function (propName, params) {
                var that = this;
                var state = that.form.getState(that.$bind);
                var button = that._button();
                var element = that.$element ? that.$element.get(0) : null;
                if (state.isHidden !== that.state.isHidden) {
                    that.state.isHidden = state.isHidden;
                    if (button)
                        that.setHidden(element);
                }
                if (state.isDisabled != that.state.isDisabled) {
                    that.state.isDisabled = state.isDisabled;
                    if (button)
                        that._setDisabled(button, element);
                }
            };
            LinkBase.prototype._renderButton = function () {
                return null;
            };
            LinkBase.prototype.render = function ($parent) {
                var that = this;
                var opts = that._initOptions(_uiutils.utils.defaultOptions);
                if (!that.$element) {
                    that.$element = that._renderButton();
                    that._state2UI();
                }
                that.appendElement($parent, opts);
                return that.$element;
            };
            return LinkBase;
        }(Phoenix.ui.AbsField));
        formlinkbase.LinkBase = LinkBase;
    })(formlinkbase = Phoenix.formlinkbase || (Phoenix.formlinkbase = {}));
})(Phoenix || (Phoenix = {}));
/// <reference path="../../../core/core-refs.ts" />
/// <reference path="./absfield.control.ts" />
/// <reference path="../form.control.ts" />
/// <reference path="./link-base.control.ts" />
var Phoenix;
(function (Phoenix) {
    var _utils = Phoenix.utils, _ui = Phoenix.ui, _dom = Phoenix.dom, _uiutils = Phoenix.uiutils, _ulocale = Phoenix.ulocale;
    var formlink;
    (function (formlink) {
        function _addDesign(id, options, authoring, html) {
            if (authoring)
                html.push(' draggable="true"');
            html.push(' data-render="{0}"');
        }
        function _createButton(id, options, authoring, title) {
            title = title || '';
            options = $.extend({ right: false, icon: null, type: 'default', size: null }, options);
            if (options.title !== undefined)
                title = options.title;
            var html = [];
            if (!options.inline) {
                var css = ['bs-island', 'bs-field-group'];
                if (authoring)
                    css.push('design');
                html.push('<div class="' + css.join(' ') + '"');
                _uiutils.utils.addContainerId(html, authoring);
                html.push('>');
            }
            html.push('<button type="button"');
            html.push(' class="bs-button btn btn-' + _dom.bootstrapStyles(options.outline || options.type === 'secondary' || options.type === 'default')[options.type]);
            if (options.classButton)
                html.push(' ' + options.classButton.join(''));
            if (options.size)
                html.push(' btn-' + options.size);
            if (!options.inline) {
                html.push(' btn-block');
            }
            else {
                html.push(' bs-btn-inline');
                html.push(' bs-island');
                if (options.right)
                    html.push(' float-right');
                if (authoring)
                    html.push(' design');
            }
            if (options.style)
                html.push(' ' + options.style);
            html.push('"');
            if (options.inline) {
                _uiutils.utils.addContainerId(html, authoring);
            }
            html.push('>');
            if (options.icon && !options.iconRight)
                html.push('<span class="' + _dom.iconClass(options.icon) + '"></span>');
            if (!options.titleIsHidden) {
                if (options.icon && !options.iconRight)
                    html.push('&nbsp;');
                html.push(title || '');
                if (options.icon && options.iconRight)
                    html.push('&nbsp;');
            }
            if (options.icon && options.iconRight)
                html.push('<span class="' + _dom.iconClass(options.icon) + '"></span>');
            html.push('</button>');
            if (!options.inline) {
                html.push('</div>');
            }
            return _utils.format(html.join(''), id);
        }
        ;
        var Link = /** @class */ (function (_super) {
            __extends(Link, _super);
            function Link() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            Link.prototype._button = function () {
                var that = this;
                if (!that.$element)
                    return null;
                return that.renderOptions.inline ? that.$element.get(0) : that.$element.get(0).firstChild;
            };
            Link.prototype._renderButton = function () {
                var that = this;
                return $(_createButton(that.id, that.renderOptions, that.options.design, _ulocale.tt(that.title, that.form.$locale)));
            };
            return Link;
        }(Phoenix.formlinkbase.LinkBase));
        formlink.Link = Link;
        _ui.registerLinkControl(Link, 'button');
    })(formlink = Phoenix.formlink || (Phoenix.formlink = {}));
})(Phoenix || (Phoenix = {}));
/// <reference path="../../../core/core-refs.ts" />
/// <reference path="../../../data/datasets.ts" />
/// <reference path="../schema.data.ts" />
/// <reference path="./absfield.control.ts" />
/// <reference path="./edit.control.ts" />
/// <reference path="./dropitems.control.ts" />
/// <reference path="./gridcombo.control.ts" />
var Phoenix;
(function (Phoenix) {
    var formlookup;
    (function (formlookup) {
        var _p = Phoenix, _serial = _p.serial, _ui = _p.ui, _sutils = _p.Observable.SchemaUtils, _data = _p.data, _utils = _p.utils, _gridlookup = Phoenix.gridlookup, _dom = _p.dom, _formedit = _p.formedit, _locale = _p.locale;
        var withModifier = function ($event) {
            return $event.altKey || $event.ctrlKey || $event.metaKey || $event.shiftKey;
        }, defOptions = {
            autoComplete: false,
            maxItems: -1
        }, _lookupEnumValue2Text = function (value, $lookup) {
            if (value === "" || value === null || value === undefined)
                return '';
            if ($lookup && $lookup.data && $lookup.data.$value) {
                var values = $lookup.data.$value;
                for (var i = 0, len = values.length; i < len; i++) {
                    var item = values[i];
                    if (item.code === value)
                        return item.title;
                }
                return value || '';
            }
            return value || '';
        }, _getInlineData = function (form, ldata) {
            return ldata.$value;
        }, _filterData = function (ldata, filter, context) {
            if (ldata.value)
                ldata = ldata.value;
            if (filter) {
                var res_9 = [];
                var f_1 = _data.compileFilterTree(filter, null, context, null);
                ldata.forEach(function (item) {
                    if (_data.acceptFilter(f_1, item))
                        res_9.push(item);
                });
                return res_9;
            }
            return ldata;
        };
        var Lookup = /** @class */ (function (_super) {
            __extends(Lookup, _super);
            function Lookup(fp, options, form) {
                var _this = _super.call(this, fp, options, form) || this;
                var that = _this;
                that.lookupOptions = defOptions;
                that.eventBus = new Phoenix.serial.SingleEventBus(50);
                that.onselectItemHandler = that._onselectItem.bind(that);
                that.isEnum = (that.$lookup && that.$lookup.data && that.$lookup.data.$type === 'enum');
                return _this;
            }
            Lookup.prototype.customOptions = function (options) {
                var that = this;
                _super.prototype.customOptions.call(this, options);
                options.after = { icon: 'chevron-down' };
                options.paginated = options.paginated !== undefined ? options.paginated : _sutils.supportPagination(that.$lookup);
            };
            Lookup.prototype._value2Text = function () {
                var that = this;
                if (that.isEnum) {
                    return _lookupEnumValue2Text(that.state.value, that.$lookup);
                }
                else
                    return that.state.value || '';
            };
            //TEST
            Lookup.prototype._getSource = function (options) {
                var that = this;
                var pm = that.form.getParentModel(that.$bind);
                //options: {search: '', select: false,  find: false, findFirst: true}
                if (!that.$lookup.data || !that.$lookup.data.$type) {
                    return _utils.dataAsPromise(null);
                }
                if (that.$lookup.data.$type === 'inline' || that.$lookup.data.$type === 'enum') {
                    var value = _getInlineData(that.form, that.$lookup.data);
                    return _utils.dataAsPromise(_filterData(value, (that.$lookup.data && that.$lookup.data.$params ? that.$lookup.data.$params.$filter : null), pm.model(true)));
                }
                if (_sutils.allData(that.$lookup)) {
                    if (that.$lookup.cache && that.hasCachedData)
                        return _utils.dataAsPromise(that.cachedData);
                    else {
                        options.containerId = that.form.syncTransactionId();
                        options.viewId = that.form.syncViewId();
                        return _sutils.executeLookup(that.$lookup, that.form.getParentModel(that.$bind), options);
                    }
                }
                else {
                    options.fieldName = that.$lookup.mapping[that.$display];
                    options.paginated = true;
                    options.containerId = that.form.syncTransactionId();
                    options.viewId = that.form.syncViewId();
                    return _sutils.executeLookup(that.$lookup, that.form.getParentModel(that.$bind), options);
                }
            };
            Lookup.prototype._filterResult = function (ldata, opts) {
                var that = this;
                if (ldata && Array.isArray(ldata)) {
                    ldata = { value: ldata };
                }
                else if (ldata && ldata.documents) {
                    if (opts.findFirst && that.$lookup.data && that.$lookup.data.$params && (that.$lookup.data.$params.$allData || that.$lookup.data.$type === 'relation')) {
                        var lookup = _gridlookup.utils.checkGridLookup(that.$lookup, that.form.$model);
                        var fi = _sutils.findFirst(opts.search, _sutils.remoteSearch(_sutils.lastSegment(that.$bind, that.$display), lookup), ldata.documents);
                        if (fi)
                            return { value: [fi.item] };
                        return null;
                    }
                    else {
                        ldata.value = ldata.documents;
                        delete ldata.documents;
                    }
                }
                if (_sutils.allData(that.$lookup)) {
                    if (that.$lookup.cache && !that.hasCachedData) {
                        that.hasCachedData = true;
                        that.cachedData = ldata;
                    }
                    if (opts.findFirst && !opts.search)
                        return null;
                    if (opts.search && ldata && ldata.value) {
                        if (opts.findFirst) {
                            var lookup = _gridlookup.utils.checkGridLookup(that.$lookup, that.form.$model);
                            var fi = _sutils.findFirst(opts.search, that.isEnum ? 'title' : _sutils.remoteSearch(_sutils.lastSegment(that.$bind, that.$display), lookup), ldata.value);
                            if (fi)
                                return { value: [fi.item] };
                            return null;
                        }
                    }
                }
                return ldata;
            };
            Lookup.prototype._findselected = function (ldata, opts) {
                var that = this;
                if (opts.search && opts.select && ldata && ldata.value) {
                    var lookup = _gridlookup.utils.checkGridLookup(that.$lookup, that.form.$model);
                    var fi = _sutils.findFirst(opts.search, that.isEnum ? 'title' : _sutils.remoteSearch(_sutils.lastSegment(that.$bind, that.$display), lookup), ldata.value);
                    if (fi)
                        return fi.index;
                }
                return -1;
            };
            Lookup.prototype._findValue = function (search, after) {
                var that = this;
                if (!search && search === '') {
                    that.eventBus.push(null, function (ldata) { after(null); }, true);
                    return;
                }
                var opts = { search: search, select: false, findFirst: true, find: false, paginated: that.renderOptions.paginated };
                that.eventBus.push(that._getSource(opts), function (ldata) {
                    ldata = that._filterResult(ldata, opts);
                    if (ldata && ldata.value && ldata.value.length)
                        after(ldata.value[0]);
                    else
                        after(null);
                }, true);
            };
            Lookup.prototype._onselectItem = function (value) {
                var that = this;
                that.eventBus.push(value, function (ldata) {
                    var mapping = Object.keys(that.$lookup.mapping);
                    var base = _sutils.extractBase(that.$bind);
                    var empty = [], changed = false;
                    mapping.forEach(function (key) {
                        if (!that.$lookup.mapping[key]) {
                            empty.push(key);
                        }
                        else {
                            var ov = that.form.getValue(base + key) || '';
                            var nv = ldata ? ldata[that.$lookup.mapping[key]] || '' : '';
                            if (nv !== ov) {
                                that.form.setValue(base + key, nv);
                                changed = true;
                            }
                        }
                    });
                    if (changed)
                        empty.forEach(function (key) {
                            that.form.setValue(base + key, that.$lookup.mapping[key]);
                        });
                    var input = that._input();
                    if (input.value != that._value2Text())
                        that._value2Input(input);
                }, true);
            };
            Lookup.prototype._checkPopupMenu = function () {
                var that = this;
                if (!that.menu) {
                    var input = that._input();
                    var $parent = that.$element;
                    if (that.renderOptions.columns) {
                        $parent = $(that._colParent());
                    }
                    var lookup = _gridlookup.utils.checkGridLookup(that.$lookup, that.form.$model);
                    that.menu = new Phoenix.formdropitems.DropItems($parent, input, {
                        primaryKey: lookup.primaryKey,
                        search: that.isEnum ? 'title' : _sutils.remoteSearch(_sutils.lastSegment(that.$bind, that.$display), lookup),
                        onselect: that.onselectItemHandler
                    });
                }
            };
            Lookup.prototype.mousedown = function (event) {
                var that = this;
                if (that.menu && that.menu.opened && that.menu.inMenu(event.target)) {
                    event.stopPropagation();
                    return false;
                }
                return _super.prototype.mousedown.call(this, event);
            };
            Lookup.prototype.stopProppagation = function (event) {
                var that = this;
                _super.prototype.stopProppagation.call(this, event);
                if (that.menu && that.menu.opened && that.menu.inMenu(event.target)) {
                    event.preventDefault();
                    event.stopPropagation();
                }
            };
            Lookup.prototype.click = function (event) {
                var that = this;
                var input = that._input();
                if (_dom.isChildOf(input.parentNode.lastChild, event.target)) {
                    if (that.renderOptions.paginated)
                        that._toggleGridLookup();
                    else
                        that._toggleMenuLookup();
                }
                else if (that.menu && that.menu.opened && that.menu.inMenu(event.target)) {
                    that.menu.click(event);
                }
            };
            Lookup.prototype.beforeAppend = function () {
                var that = this;
            };
            Lookup.prototype._searchText = function () {
                var that = this, input = that._input();
                var nv = that._text2value(input.value);
                if (that.equals(nv))
                    return '';
                return nv;
            };
            Lookup.prototype._managePreventDefault = function (keyCode, $event) {
                var preventDefault;
                switch (keyCode) {
                    case _dom.keys.VK_UP:
                    case _dom.keys.VK_PGDOWN:
                    case _dom.keys.VK_PGUP:
                    case _dom.keys.VK_HOME:
                    case _dom.keys.VK_END:
                        preventDefault = !withModifier($event);
                        break;
                    case _dom.keys.VK_DOWN:
                        if ($event.ctrlKey) {
                            preventDefault = true;
                            keyCode = _dom.keys.VK_F4;
                        }
                        else
                            preventDefault = !withModifier($event);
                        break;
                    default:
                        preventDefault = false;
                }
                preventDefault && $event.preventDefault() && $event.stopPropagation();
                return keyCode;
            };
            Lookup.prototype._shouldTrigger = function (keyCode, $event) {
                var trigger = false;
                switch (keyCode) {
                    case _dom.keys.VK_TAB:
                        trigger = !withModifier($event);
                        break;
                    default:
                        trigger = true;
                }
                return trigger;
            };
            Lookup.prototype.setEvents = function (opts) {
                var that = this;
                $(that._input()).on('input', function () {
                    that.inputChanged();
                });
            };
            Lookup.prototype.removeEvents = function () {
                var that = this;
                $(that._input()).off('input');
            };
            Lookup.prototype.inputChanged = function () {
                var that = this;
                var input = that._input();
                that.modified = (input.value != that._value2Text());
                that._triggerEvent('inputChanged', null);
            };
            Lookup.prototype.checkValue = function (nv, after) {
                var that = this;
                var input = that._input();
                var modified = (input.value != that._value2Text());
                if (modified) {
                    that._findValue(input.value, function (val) {
                        that._onselectItem(val);
                    });
                }
                else
                    after(that.state.value);
            };
            Lookup.prototype.keydown = function ($event) {
                var that = this, keyCode = $event.which || $event.keyCode;
                keyCode = that._managePreventDefault(keyCode, $event);
                if (keyCode && that._shouldTrigger(keyCode, $event)) {
                    that._triggerKey(keyCode, $event);
                }
                return true;
            };
            Lookup.prototype.focusIn = function (event) {
            };
            Lookup.prototype.focusOut = function (event) {
                var that = this;
                _gridlookup.utils.closeGridLookup(that, that.eventBus, 'gc');
                that._closeMenuLookup();
                _super.prototype.focusOut.call(this, event);
            };
            Lookup.prototype._triggerEvent = function (event, $event) {
                var that = this;
                var input = that._input();
                if (that.menu && that.menu.opened) {
                    switch (event) {
                        case 'inputChanged':
                            var opts = { search: input.value, select: true, find: false, findFirst: false };
                            this.eventBus.push(that._getSource(opts), function (ldata) {
                                if (that.menu && that.menu.opened) {
                                    opts.search = input.value;
                                    ldata = that._filterResult(ldata, opts);
                                    var si = -1;
                                    if (opts.select)
                                        si = that._findselected(ldata, opts);
                                    that.menu.show(ldata, si, true);
                                }
                            }, false);
                            break;
                    }
                }
            };
            Lookup.prototype._checkGridPopup = function () {
                var that = this;
                var input = that._input();
                var parent = that.$element.get(0);
                if (that.renderOptions.columns) {
                    parent = that._colParent();
                }
                that.gc = _gridlookup.utils.checkGridPopup(that, that.$lookup, input, parent);
            };
            Lookup.prototype.focusInControl = function (activeFocusElement) {
                var that = this;
                var p = _super.prototype.focusInControl.call(this, activeFocusElement);
                if (!p && that.gc && that.gc.opened)
                    return that.gc.focusInCombo(activeFocusElement);
                return p;
            };
            Lookup.prototype._openGridLookup = function () {
                var that = this;
                if (!that.gc || !that.gc.opened) {
                    that._checkGridPopup();
                    var lookup = _gridlookup.utils.checkGridLookup(that.$lookup, that.form.$model);
                    _gridlookup.utils.openGridLookup(that, {
                        lookup: lookup,
                        parentControl: that,
                        formControl: that.form,
                        display: that.$display,
                        bind: that.$bind,
                        containerId: that.form.syncTransactionId(),
                        viewId: that.form.syncViewId(),
                        align: that.id + '_group',
                        openerId: that.id + '_after',
                        searchText: that._searchText(),
                        onselect: that.onselectItemHandler,
                        lookupColumns: that.fieldOptions ? that.fieldOptions.lookupColumns : undefined,
                        propertyName: 'gc',
                        minWidth: that.fieldOptions ? that.fieldOptions.lookupMinWidth : 0
                    });
                }
            };
            Lookup.prototype._toggleGridLookup = function () {
                var that = this;
                if (that.gc && that.gc.opened) {
                    _gridlookup.utils.closeGridLookup(that, that.eventBus, 'gc');
                }
                else if (!that.gc || !that.gc.opened) {
                    that._openGridLookup();
                }
            };
            Lookup.prototype._closeMenuLookup = function () {
                var that = this;
                if (that.menu && that.menu.opened) {
                    that.eventBus.push(null, function (ldata) {
                        if (that.menu && that.menu.opened)
                            that.menu.hide(null);
                    }, true);
                }
            };
            Lookup.prototype._toggleMenuLookup = function () {
                var that = this;
                var input = that._input();
                if (!that.menu || !that.menu.opened) {
                    that._checkPopupMenu();
                    var opts = { search: input.value, select: true, find: false, findFirst: false };
                    that.eventBus.push(that._getSource(opts), function (ldata) {
                        ldata = that._filterResult(ldata, opts);
                        var si = -1;
                        if (opts.select)
                            si = that._findselected(ldata, opts);
                        that.menu.show(ldata, si, false);
                    }, true);
                }
                else if (that.menu && that.menu.opened) {
                    that._closeMenuLookup();
                }
            };
            Lookup.prototype._triggerKey = function (key, $event) {
                var that = this;
                if (that.menu && that.menu.opened) {
                    switch (key) {
                        case _dom.keys.VK_ESCAPE:
                            that.eventBus.push(null, function (ldata) { that._closeMenuLookup(); }, true);
                            break;
                        case _dom.keys.VK_ENTER:
                            that.eventBus.push(null, function (ldata) { that.menu.select(); }, true);
                            break;
                        case _dom.keys.VK_UP:
                            that.eventBus.push(null, function (ldata) { that.menu.move(-1); }, true);
                            break;
                        case _dom.keys.VK_DOWN:
                            that.eventBus.push(null, function (ldata) { that.menu.move(1); }, true);
                            break;
                        case _dom.keys.VK_HOME:
                            that.eventBus.push(null, function (ldata) { that.menu.move(-1000); }, true);
                            break;
                        case _dom.keys.VK_END:
                            that.eventBus.push(null, function (ldata) { that.menu.move(1000); }, true);
                            break;
                        case _dom.keys.VK_PGDOWN:
                            that.eventBus.push(null, function (ldata) { that.menu.move(7); }, true);
                            break;
                        case _dom.keys.VK_PGUP:
                            that.eventBus.push(null, function (ldata) { that.menu.move(-7); }, true);
                            break;
                    }
                }
                if (key === _dom.keys.VK_F4) {
                    if (that.renderOptions.paginated)
                        that._toggleGridLookup();
                    else
                        that._toggleMenuLookup();
                }
            };
            Lookup.prototype.destroy = function () {
                var that = this;
                that.onselectItemHandler = null;
                that.cachedData = null;
                if (that.eventBus) {
                    that.eventBus.destroy();
                    that.eventBus = null;
                }
                if (that.menu) {
                    that.menu.destroy();
                    that.menu = null;
                }
                if (that.gc) {
                    that.gc.destroy();
                    that.gc = null;
                }
                _super.prototype.destroy.call(this);
            };
            Lookup.prototype.checkFocus = function (focusParams) {
                var that = this;
                _utils.nextTick(function () {
                    var ae = window.document.activeElement;
                    if (!ae || !that.targetInControl(ae)) {
                        that.focusOut(null);
                        that.focused = false;
                    }
                });
            };
            return Lookup;
        }(Phoenix.formedit.Edit));
        formlookup.Lookup = Lookup;
        _ui.registerControl(Lookup, 'string', false, '', { lookup: true });
        _ui.registerControl(Lookup, 'number', false, '', { lookup: true });
        _ui.registerControl(Lookup, 'integer', false, '', { lookup: true });
    })(formlookup = Phoenix.formlookup || (Phoenix.formlookup = {}));
})(Phoenix || (Phoenix = {}));
/// <reference path="../../../core/core-refs.ts" />
/// <reference path="../../../core/modules/locale.ts" />
/// <reference path="./absfield.control.ts" />
/// <reference path="../schema.data.ts" />
/// <reference path="../errors.data.ts" />
/// <reference path="./edit.control.ts" />
var Phoenix;
(function (Phoenix) {
    // TODO  statechanged / select 
    var multifield;
    (function (multifield) {
        var _ui = Phoenix.ui, _utils = Phoenix.utils, _uiutils = Phoenix.uiutils, _dom = Phoenix.dom, _locale = Phoenix.locale, _su = Phoenix.Observable.SchemaUtils, _ulocale = Phoenix.ulocale, _ui = Phoenix.ui;
        ;
        var _createSelect = function (html, enums, enumsNames) {
            html.push('<div class="input-group-prepend" tabindex="-1">');
            html.push('<button id="{0}_select" class="btn btn-' + _dom.bootstrapStyles(false).info + ' dropdown-toggle" type="button" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false"></button>');
            html.push('<div class="dropdown-menu">');
            enums.forEach(function (value, index) {
                html.push('<a class="dropdown-item" data-select="' + enums[index] + '" href="#">');
                html.push(_utils.escapeHtml(enumsNames[index]));
                html.push('</a>');
            });
            html.push('</div>');
            html.push('</div>');
        }, _createAfter = function (id, afterDef) {
            var html = [];
            html.push('<span  id="{0}_after" tabindex="-1" class="bs-grp-btn input-group-append input-group-addon');
            if (afterDef.icon)
                html.push(' bs-icon-input');
            html.push('">');
            html.push('<span class="input-group-text">');
            if (afterDef.icon) {
                html.push('<span class="' + _dom.iconClass(afterDef.icon) + '"></span>');
            }
            else
                html.push(afterDef.value);
            html.push('</span>');
            html.push('</span>');
            return $(_utils.format(html.join(''), id)).get(0);
        }, _createMultiselectInput = function (id, options, enums, enumsNames, authoring, title) {
            title = title || '';
            options = $.extend({ titleIsHidden: false, placeHolder: false, columns: false, labelCol: 3 }, options);
            var html = [];
            if (options.titleIsHidden) {
                options.columns = false;
            }
            options.placeHolder = false;
            _uiutils.utils.fieldWrapper(html, options, authoring, function () {
                if (!options.titleIsHidden) {
                    html.push('<label for="{0}_input" id="{0}_label"');
                    var css = ['bs-label'];
                    if (options.columns) {
                        css.push('col-form-label');
                        css.push('bs-lib-col col-sm-' + options.labelCol);
                        if (options.labelLeft)
                            css.push('text-left');
                    }
                    if (options.inline) {
                        css.push('form-check-inline');
                        css.push('bs-cursor-d no-x-padding');
                    }
                    if (css.length)
                        html.push(' class="' + css.join(' ') + '"');
                    html.push('>');
                    html.push(_utils.escapeHtml(title || '') + (options.inline ? '&nbsp;' : ''));
                    _uiutils.utils.addTooltipAndRule(html, options);
                    html.push('</label>');
                }
                if (options.columns)
                    html.push('<div class="no-x-padding col-sm-' + (12 - options.labelCol) + '" id="{0}_colparent">');
                html.push('<div class="input-group" id="{0}_group"');
                var style = [];
                if (options.minWidth)
                    style.push('min-width: ' + options.minWidth + ';');
                if (options.maxWidth)
                    style.push('max-width: ' + options.maxWidth + ';');
                if (style.length)
                    html.push('  style="' + style.join("") + '"');
                html.push('>');
                _createSelect(html, enums, enumsNames);
                if (options.readOnly) {
                    html.push('<div id="{0}_input" class="form-control"></div>');
                }
                else {
                    html.push('<input type="text" id="{0}_input" class="form-control">');
                }
                html.push('</div>');
                _uiutils.utils.addErrorDiv(html);
                if (options.columns)
                    html.push('</div>');
                if (options.titleIsHidden)
                    _uiutils.utils.addTooltipAndRule(html, options);
            });
            return _utils.format(html.join(''), id);
        };
        var BaseMultiField = /** @class */ (function (_super) {
            __extends(BaseMultiField, _super);
            function BaseMultiField(fp, options, form) {
                var _this = _super.call(this, fp, options, form) || this;
                var that = _this;
                that._state();
                that._stateOfField();
                if (that.renderOptions.useBind) {
                    that.renderOptions.field = that.form.getValue(that.$bind);
                }
                if (that.renderOptions.field) {
                    that.form.registerListenerFor(that.renderOptions.field, that);
                    that._schemaField = that.form.getSchema(that.renderOptions.field);
                }
                else {
                    that._schemaField = null;
                }
                return _this;
            }
            BaseMultiField.prototype.destroy = function () {
                var that = this;
                that._removePlugins();
                if (that.renderOptions.field)
                    that.form.unRegisterListenerFor(that.renderOptions.field, that);
                _super.prototype.destroy.call(this);
            };
            BaseMultiField.prototype._changeField = function (value) {
                var that = this;
                if (that.renderOptions.field)
                    that.form.unRegisterListenerFor(that.renderOptions.field, that);
                that.renderOptions.field = value;
                if (that.renderOptions.field) {
                    that.form.registerListenerFor(that.renderOptions.field, that);
                    that._schemaField = that.form.getSchema(that.renderOptions.field);
                }
                else {
                    that._schemaField = null;
                }
                that._stateOfField();
                that._afterFieldChanged();
            };
            BaseMultiField.prototype._isDate = function () {
                var that = this;
                return that._schemaField && _su.isDate(that._schemaField);
            };
            BaseMultiField.prototype._isDateTime = function () {
                var that = this;
                return that._schemaField && _su.isDateTime(that._schemaField);
            };
            BaseMultiField.prototype._isMemo = function () {
                var that = this;
                return that._schemaField && _su.isText(that._schemaField);
            };
            BaseMultiField.prototype._isNumber = function () {
                var that = this;
                return that._schemaField && _su.isNumber(that._schemaField);
            };
            BaseMultiField.prototype._schemaInput = function () {
                return this._schemaField;
            };
            BaseMultiField.prototype._afterIcon = function () {
                var that = this;
                if (that._isDate()) {
                    if (that.renderOptions.readOnly)
                        return null;
                    if (_uiutils.utils.useDatePicker())
                        return { icon: 'calendar' };
                }
                else if (that._isDateTime()) {
                    if (that.renderOptions.readOnly)
                        return true;
                    if (_uiutils.utils.useDateTimePicker())
                        return { icon: 'calendar' };
                }
                else if (that._isNumber()) {
                    if (that._stateField.symobol)
                        return { value: that._stateField.symobol };
                }
                return null;
            };
            BaseMultiField.prototype._removePlugins = function () {
                var that = this;
                if (!that.renderOptions.readOnly && that.$element) {
                    // Remove plugins
                    if (_uiutils.utils.useDateTimePicker())
                        _uiutils.utils.dateTimePickerDestroy($(_dom.find(that.$element.get(0), that.id + '_group')));
                    if (_uiutils.utils.useDatePicker())
                        _uiutils.utils.datePickerDestroy(that.$element);
                }
            };
            BaseMultiField.prototype._removeAfter = function () {
                var that = this;
                var e = that.$element ? that.$element.get(0) : null;
                if (e) {
                    var after = _dom.find(e, that.id + '_after');
                    if (after)
                        _dom.remove(after);
                }
            };
            BaseMultiField.prototype._updateType = function () {
                var that = this;
                that._removeAfter();
                var after = that._afterIcon();
                var input = that._input();
                var element = that.$element.get(0);
                if (that._isNumber())
                    _dom.addClass(input, 'bs-edit-number');
                else
                    _dom.removeClass(input, 'bs-edit-number');
                if (after) {
                    var afterElement = _createAfter(that.id, after);
                    _dom.after(input, afterElement);
                }
            };
            BaseMultiField.prototype._setPlugins = function () {
                var that = this;
                if (!that.renderOptions.readOnly && that.$element) {
                    var select_1 = _dom.find(that.$element.get(0), that.id + '_select');
                    if (that._isDate() && _uiutils.utils.useDatePicker()) {
                        if (select_1)
                            _dom.removeClass(select_1, 'btn');
                        _uiutils.utils.datePickerInitialize(that.$element, { showOnFocus: false }, function (e) {
                            that.focusOut(null);
                        });
                        if (select_1)
                            _dom.addClass(select_1, 'btn');
                    }
                    else if (that._isDateTime() && _uiutils.utils.useDateTimePicker()) {
                        if (select_1)
                            _dom.removeClass(select_1, 'btn');
                        _uiutils.utils.dateTimePickerInitialize($(_dom.find(that.$element.get(0), that.id + '_group')), {}, function (e) {
                            that.focusOut(null);
                        });
                        if (select_1)
                            _dom.addClass(select_1, 'btn');
                    }
                }
            };
            BaseMultiField.prototype.focusOut = function (event) {
                var that = this;
                if (!that._schemaField || that.renderOptions.readOnly)
                    return;
                that._input2Model(true);
            };
            BaseMultiField.prototype._text2value = function (textValue) {
                var that = this;
                return _uiutils.utils.text2value(textValue, that._schemaInput(), that._stateField);
            };
            BaseMultiField.prototype.checkValue = function (value, after) {
                after(value);
            };
            BaseMultiField.prototype._input = function () {
                var that = this, e = that.$element ? that.$element.get(0) : null;
                if (!e)
                    return null;
                return _dom.find(e, that.id + '_input');
            };
            BaseMultiField.prototype._input2Model = function (isFocusOut) {
                var that = this, input = that._input();
                var nv = that._text2value(input.value);
                var schema = that._schemaInput();
                if (!that._equals(nv)) {
                    that.checkValue(nv, function (cv) {
                        if (that.state.value !== cv) {
                            if (cv === '' && schema.type === "string")
                                cv = undefined;
                            that._internalSetValue(cv, isFocusOut);
                        }
                        else
                            that._value2Input(input);
                    });
                }
                else if (that._isNumber() || that._isDate() || that._isDateTime()) {
                    that._value2Input(input);
                }
            };
            BaseMultiField.prototype.updateModel = function () {
                var that = this;
                that.form.setValue(that.renderOptions.field, that._stateField.value);
            };
            BaseMultiField.prototype._internalSetValue = function (value, isfocusOut) {
                var that = this;
                if (that._searchEventBus) {
                    that._searchEventBus.push(null, function (ldata) {
                        that._stateField.value = value;
                        that.updateModel();
                    }, isfocusOut);
                }
                else {
                    that._stateField.value = value;
                    that.updateModel();
                }
            };
            BaseMultiField.prototype._afterFieldChanged = function () {
                var that = this;
                that._removePlugins();
                that._updateType();
                that._setPlugins();
                var element = that.$element ? that.$element.get(0) : null;
                var input = that._input();
                if (input) {
                    that._value2Input(input);
                    /*
                    that._setDisabled(input, element);
                    that._setReadOnly(input, element);
                    that.setHidden(element);
                    that._setMandatory(input, element);
                    that._setErrors(input, element);
                    that._setSymbol(element);
                    */
                }
            };
            BaseMultiField.prototype._stateOfField = function () {
                var that = this;
                that._stateField = that._stateField || {};
                if (that.renderOptions.field) {
                    var state_3 = that.form.getState(that.renderOptions.field);
                    that._stateField.value = that.form.getValue(that.renderOptions.field);
                    Object.keys(state_3).forEach(function (pn) { that._stateField[pn] = state_3[pn]; });
                }
                else {
                    that._stateField.value = undefined;
                }
            };
            BaseMultiField.prototype.changed = function (propName, ov, nv, op, params) {
                var that = this;
                if (propName === that.$bind) {
                    if (that.state.value !== nv) {
                        that._changedBind(ov, nv, op, params);
                        that.state.value = nv;
                    }
                }
                else if (that.renderOptions.field && propName === that.renderOptions.field) {
                    if (that._stateField.value !== nv) {
                        that._stateField.value = nv;
                        that._value2Input(that._input());
                    }
                    else if (!that.renderOptions.readOnly && that._schemaField && !that._schemaField.enum) {
                        var input = that._input();
                        var av = input.value;
                        var cv = that._value2Text();
                        if (av !== cv)
                            that._value2Input(input);
                    }
                }
            };
            BaseMultiField.prototype.stateChanged = function (propName, params) {
                // TODO
            };
            BaseMultiField.prototype._changedBind = function (ov, nv, op, params) {
                this._setSelectValue(nv);
            };
            BaseMultiField.prototype._changedField = function (ov, nv, op, params) {
                // TODO
            };
            BaseMultiField.prototype._select = function () {
                var that = this;
                if (that.$element) {
                    return _dom.find(that.$element.get(0), that.id + '_select');
                }
                return null;
            };
            BaseMultiField.prototype.canEdit = function () {
                var that = this;
                var state = that._stateField;
                return (!state.isHidden && !state.isDisabled && !state.isHidden && !that.renderOptions.readOnly);
            };
            BaseMultiField.prototype._setSelectValue = function (value) {
                var that = this;
                var select = that._select();
                if (!select)
                    return;
                if (value === undefined || value === null) {
                    value = '';
                }
                else {
                    var ii = that.$schema.enum.indexOf(value);
                    value = ii >= 0 ? that.$schema.enumNames[ii] : '';
                }
                if (value === '')
                    value = String.fromCharCode(160);
                _dom.text(select, value);
            };
            BaseMultiField.prototype._ignoreKeys = function (event, keyPress) {
                if (event.which === _dom.keys.VK_TAB)
                    return true;
                if (event.which === _dom.keys.VK_DELETE)
                    return false;
                if (!keyPress && (event.which === _dom.keys.VK_BACKSPACE))
                    return false;
                if (keyPress) {
                    if (event.which === 0)
                        return true;
                    if (_dom.arrowKeys.indexOf(event.which) >= 0)
                        return true;
                    return false;
                }
                else {
                    if (_dom.ignoreKeys.indexOf(event.which) >= 0 || _dom.arrowKeys.indexOf(event.which) >= 0)
                        return true;
                }
                return false;
            };
            BaseMultiField.prototype.keypress = function (event) {
                var that = this;
                if (!that._schemaField || that.renderOptions.readOnly)
                    return true;
                var state = that._stateField;
                if (state.isReadOnly || state.isDisabled)
                    return true;
                var input = that._input();
                if (that._ignoreKeys(event, true))
                    return true;
                var schema = that._schemaInput();
                if (that._isNumber() && !that.$lookup) {
                    if (_uiutils.utils.keyPressNumber(event, input, { decimalSep: _locale.number.decimal, thousandSep: _locale.number.thousand, places: that.state.decimals, schema: schema }) === false)
                        return false;
                }
                else if (that._isDate()) {
                    if (_uiutils.utils.keyPressDate(event, input, { sep: _locale.date.daySep, format: _locale.date.dateShort, schema: schema }) === false)
                        return false;
                }
                return true;
            };
            BaseMultiField.prototype._afterEnter = function () {
                var that = this;
                that._input2Model(true);
                if (that.renderOptions && that.renderOptions.after && that.renderOptions.after.$bind) {
                    that.form.execAction(that.renderOptions.after.$bind, that.state.value);
                }
            };
            BaseMultiField.prototype.keydown = function (event) {
                var that = this;
                if (!that._schemaField || that.renderOptions.readOnly)
                    return true;
                var state = that._stateField;
                if (state.isReadOnly || state.isDisabled)
                    return true;
                var input = that._input();
                if (that._ignoreKeys(event, false)) {
                    if (event.which === _dom.keys.VK_ENTER) {
                        that._afterEnter();
                    }
                    return true;
                }
                var schema = that._schemaInput();
                if (that._isNumber() && !that.$lookup) {
                    if (_uiutils.utils.keyDownNumber(event, input, { decimalSep: _locale.number.decimal, thousandSep: _locale.number.thousand, places: that.state.decimals, schema: schema }) === false)
                        return false;
                }
                else if (that._isDate()) {
                    if (_uiutils.utils.keyDownDate(event, input, { sep: _locale.date.daySep, format: _locale.date.dateShort, schema: schema }) === false)
                        return false;
                }
                return true;
            };
            BaseMultiField.prototype._equals = function (nv) {
                var that = this;
                var schema = that._schemaInput();
                var res = (that._stateField.value === nv);
                if (!res && that._stateField.value === undefined) {
                    if (schema.type === 'string') {
                        if (nv === '')
                            return true;
                    }
                }
                return res;
            };
            BaseMultiField.prototype._state2UI = function () {
                // TODO
                var that = this;
                if (!that.$element)
                    return;
                that._setSelectValue(that.state.value);
                that._afterFieldChanged();
            };
            BaseMultiField.prototype.setFocus = function (focusParams) {
                var that = this;
                if (!that.canEdit())
                    return;
                var input = that._input();
                if (input)
                    input.focus();
            };
            BaseMultiField.prototype.click = function (event) {
                var that = this, target = event.target;
                var href = _dom.attr(target, 'data-phoenix-href') || _dom.attr(target, 'href');
                if (href === '#')
                    event.preventDefault();
                var selected = _dom.attr(event.target, 'data-select');
                if (selected) {
                    that.form.setValue(that.$bind, selected);
                    if (that.canEdit())
                        that.setFocus();
                }
                if (!that.canEdit())
                    return;
            };
            BaseMultiField.prototype.render = function ($parent) {
                var that = this;
                var opts = that._initOptions(_uiutils.utils.defaultOptions);
                if (!that.$element) {
                    opts.title = _ulocale.tt(that.$schema.title, that.form.$locale);
                    if (that.$schema.description)
                        opts.description = _ulocale.tt(that.$schema.description, that.form.$locale);
                    var enumNames = that.$schema.enumNames || that.$schema.enum;
                    enumNames = enumNames.map(function (v) { return _ulocale.tt(v + '', that.form.$locale); });
                    that.$element = $(_createMultiselectInput(that.id, opts, that.$schema.enum, enumNames, that.options.design, opts.title));
                    that._state2UI();
                    that.setEvents(opts);
                }
                that.appendElement($parent, opts);
                return that.$element;
            };
            BaseMultiField.prototype._value2Text = function () {
                var that = this;
                var textValue = that._stateField.value;
                var input = that._input();
                if (that._isNumber())
                    return _su.value2Text(textValue, that._schemaField, that._stateField);
                else if (that._isDate()) {
                    if (_uiutils.utils.useDatePicker())
                        return _ulocale.parseISODate(textValue || '') || '';
                    else
                        return _ulocale.shortDate(textValue || '');
                }
                if (that._isDateTime()) {
                    if (_uiutils.utils.useDateTimePicker())
                        return _ulocale.parseISODateTime(textValue || '') || '';
                    else
                        return _ulocale.shortDateTime(textValue || '');
                }
                else
                    return textValue || '';
            };
            BaseMultiField.prototype._value2Input = function (input) {
                var that = this;
                var textValue = that._stateField.value;
                if (that.renderOptions.readOnly) {
                    if (that._isDate()) {
                        _dom.text(input, _ulocale.shortDate(textValue || '') || String.fromCharCode(160));
                    }
                    else if (that._isDateTime()) {
                        _dom.text(input, _ulocale.shortDateTime(textValue || '') || String.fromCharCode(160));
                    }
                    else if (that._isNumber()) {
                        _dom.text(input, that._value2Text() || String.fromCharCode(160));
                    }
                    else
                        _dom.text(input, that._value2Text() || String.fromCharCode(160));
                }
                else {
                    if (that._isDate()) {
                        if (_uiutils.utils.useDatePicker())
                            _uiutils.utils.datePickerSetValue(that.$element, textValue);
                        else {
                            input.value = _ulocale.shortDate(textValue || '');
                        }
                    }
                    else if (that._isDateTime()) {
                        if (_uiutils.utils.useDateTimePicker())
                            _uiutils.utils.dateTimePickerSetValue($(_dom.find(that.$element.get(0), that.id + '_group')), textValue);
                        else
                            input.value = _ulocale.shortDateTime(textValue || '');
                    }
                    else if (that._isNumber()) {
                        input.value = that._value2Text();
                    }
                    else
                        input.value = that._value2Text();
                }
            };
            return BaseMultiField;
        }(Phoenix.ui.AbsField));
        _ui.registerControl(BaseMultiField, '*', true, 'multifield', null);
    })(multifield = Phoenix.multifield || (Phoenix.multifield = {}));
})(Phoenix || (Phoenix = {}));
/// <reference path="../../../core/core-refs.ts" />
/// <reference path="../../../core/modules/locale.ts" />
/// <reference path="./absfield.control.ts" />
/// <reference path="../schema.data.ts" />
/// <reference path="../errors.data.ts" />
/// <reference path="./edit.control.ts" />
var Phoenix;
(function (Phoenix) {
    var multivalue;
    (function (multivalue) {
        var _ui = Phoenix.ui, _utils = Phoenix.utils, _formedit = Phoenix.formedit, _uiutils = Phoenix.uiutils, _dom = Phoenix.dom, _locale = Phoenix.locale, _su = Phoenix.Observable.SchemaUtils, _ulocale = Phoenix.ulocale, _ui = Phoenix.ui;
        ;
        var _createTag = function (item, title, isReadOnly) {
            return $(_utils.format(' <span id="{0}" class="bs-tag badge badge-info">{1}<span data-close-id="{0}" class="bs-tag-close" aria-hidden="true">&times;</span></span>', item.$id, title)).get(0);
        }, _createMultiselectInput = function (id, options, authoring, title) {
            title = title || '';
            options = $.extend({ titleIsHidden: false, placeHolder: false, columns: false, labelCol: 3 }, options);
            var html = [];
            if (options.titleIsHidden) {
                options.columns = false;
            }
            options.placeHolder = false;
            _uiutils.utils.fieldWrapper(html, options, authoring, function () {
                if (!options.titleIsHidden) {
                    html.push('<label for="{0}_input" id="{0}_label"');
                    var css = ['bs-label'];
                    if (options.columns) {
                        css.push('col-form-label');
                        css.push('bs-lib-col col-sm-' + options.labelCol);
                        if (options.labelLeft)
                            css.push('text-left');
                    }
                    if (options.inline) {
                        css.push('form-check-inline');
                        css.push('bs-cursor-d no-x-padding');
                    }
                    if (css.length)
                        html.push(' class="' + css.join(' ') + '"');
                    html.push('>');
                    html.push(_utils.escapeHtml(title || '') + (options.inline ? '&nbsp;' : ''));
                    _uiutils.utils.addTooltipAndRule(html, options);
                    html.push('</label>');
                }
                if (options.columns)
                    html.push('<div class="no-x-padding col-sm-' + (12 - options.labelCol) + '">');
                if (options.readOnly) {
                    html.push('<div class="bs-mv-container form-control bs-read-only');
                    if (options.size)
                        html.push(' form-control-' + options.size);
                    html.push('" id="{0}_array"');
                    var style = [];
                    if (options.maxWidth)
                        style.push('max-width: ' + options.maxWidth + ';');
                    if (options.minWidth)
                        style.push('min-width: ' + options.minWidth + ';');
                    if (style.length)
                        html.push(' style="' + style.join('') + '"');
                    html.push('>');
                    html.push('<input type="text" id="{0}_input" class="bs-tag-input">');
                    html.push('</div>');
                }
                else {
                    if (options.after) {
                        html.push('<div class="input-group" id="{0}_group"');
                        var style_1 = [];
                        if (options.minWidth)
                            style_1.push('min-width: ' + options.minWidth + ';');
                        if (options.maxWidth)
                            style_1.push('max-width: ' + options.maxWidth + ';');
                        if (style_1.length)
                            html.push('  style="' + style_1.join("") + '"');
                        html.push('>');
                    }
                    html.push('<div class="bs-mv-container form-control');
                    if (!options.after) {
                        var style_2 = [];
                        if (options.minWidth)
                            style_2.push('min-width: ' + options.minWidth + ';');
                        if (options.maxWidth)
                            style_2.push('max-width: ' + options.maxWidth + ';');
                        if (style_2.length)
                            html.push('  style="' + style_2.join("") + '"');
                    }
                    if (options.size)
                        html.push(' form-control-' + options.size);
                    html.push('" id="{0}_array"');
                    var style = [];
                    if (options.maxWidth)
                        style.push('max-width: ' + options.maxWidth + ';');
                    if (options.minWidth)
                        style.push('min-width: ' + options.minWidth + ';');
                    if (style.length)
                        html.push(' style="' + style.join('') + '"');
                    html.push('>');
                    html.push('<input type="text" id="{0}_input" class="bs-tag-input">');
                    html.push('</div>');
                    if (options.after) {
                        html.push('<span  id="{0}_after" tabindex="-1" class="bs-grp-btn input-group-append input-group-addon');
                        if (options.after.icon)
                            html.push(' bs-icon-input');
                        html.push('">');
                        html.push('<span class="input-group-text">');
                        if (options.after.icon) {
                            html.push('<span class="' + _dom.iconClass(options.after.icon) + '"></span>');
                        }
                        else
                            html.push(options.after.value);
                        html.push('</span>');
                        html.push('</span>');
                    }
                }
                _uiutils.utils.addErrorDiv(html);
                if (options.columns)
                    html.push('</div>');
                if (options.titleIsHidden)
                    _uiutils.utils.addTooltipAndRule(html, options);
            });
            return _utils.format(html.join(''), id);
        };
        var MultiValue = /** @class */ (function (_super) {
            __extends(MultiValue, _super);
            function MultiValue(fp, options, form) {
                var _this = this;
                if (!fp.options || fp.options.field) {
                    console.log('Invalid multivalue Field options.field is missing');
                }
                _this = _super.call(this, fp, options, form) || this;
                var that = _this;
                that._schemaInputField = form.getSchema(that.$bind + '.' + fp.options.field);
                return _this;
            }
            MultiValue.prototype._setDisabled = function (input, element) {
                input.disabled = this.state.isDisabled || this.state.isReadOnly;
            };
            MultiValue.prototype._setReadOnly = function (input, element) {
                input.disabled = this.state.isDisabled || this.state.isReadOnly;
            };
            MultiValue.prototype.changed = function (propName, ov, nv, op, params) {
                var that = this;
                var forceRender = false;
                if (!that.$element)
                    return;
                var pp = propName.substr(that.$bind.length);
                if (pp.indexOf('.$selected') >= 0)
                    return;
                if (params.checkChildren && op === 'propchange' && propName === that.$bind) {
                    forceRender = true;
                    that.state.value = that.form.getValue(that.$bind);
                }
                if (!that.state.value) {
                    op = 'none';
                }
                switch (op) {
                    case 'propchange':
                        if (propName === that.$bind)
                            forceRender = true;
                        break;
                    case 'add':
                        that._addTag(params.$value);
                        break;
                    case 'remove':
                        that._removeTag(params.$id);
                        break;
                }
                if (forceRender)
                    that._renderAllItems();
            };
            MultiValue.prototype._removeTag = function (id) {
                var that = this;
                var e = _dom.find(that.$element.get(0), id);
                e && _dom.remove(e);
            };
            MultiValue.prototype._addTag = function (item) {
                var that = this;
                var input = that._input();
                var tag = _createTag(item, item[that.renderOptions.field], false);
                _dom.before(input, tag);
            };
            MultiValue.prototype._renderAllItems = function () {
                var that = this;
                var input = that._input();
                var value = this.state.value;
                var p = input.parentNode;
                while (p.firstChild !== input)
                    p.removeChild(p.firstChild);
                value.forEach(function (item, index, level) {
                    var tag = _createTag(item, item[that.renderOptions.field], false);
                    _dom.before(input, tag);
                });
            };
            MultiValue.prototype._state2UI = function () {
                var that = this;
                _super.prototype._state2UI.call(this);
                that._renderAllItems();
            };
            MultiValue.prototype.stateChanged = function (propName, params) {
                var that = this;
                var state = that.form.getState(that.$bind);
                _super.prototype.stateChanged.call(this, propName, params);
            };
            MultiValue.prototype.canEdit = function () {
                var that = this;
                var state = that.state;
                return (!state.isHidden && !state.isDisabled && !state.isHidden && !that.renderOptions.readOnly);
            };
            MultiValue.prototype.mousedown = function (event) {
                this.setFocus();
                return true;
            };
            MultiValue.prototype.setFocus = function (focusParams) {
                var that = this;
                if (!that.canEdit())
                    return;
                var input = that._input();
                if (input) {
                    _utils.nextTick(function () {
                        input.focus();
                    });
                }
            };
            MultiValue.prototype._input2Model = function (isFocusOut) {
                var that = this, input = that._input();
                var nv = that._text2value(input.value).trim() || '';
                if (nv !== '') {
                    that.checkValue(nv, function (cv) {
                        if (nv) {
                            var m = { $create: true };
                            m[that.renderOptions.field] = nv;
                            that.state.value.push(m);
                        }
                        input.value = '';
                    });
                }
            };
            MultiValue.prototype.click = function (event) {
                var that = this;
                if (!that.canEdit())
                    return;
                var closeId = _dom.attr(event.target, 'data-close-id');
                if (closeId) {
                    var list = that.state.value;
                    var tag = list.findById(closeId);
                    if (tag)
                        list.remove(tag);
                    that.setFocus();
                    return;
                }
            };
            MultiValue.prototype.render = function ($parent) {
                var that = this;
                var opts = that._initOptions(_uiutils.utils.defaultOptions);
                if (!that.$element) {
                    opts.title = _ulocale.tt(that.$schema.title, that.form.$locale);
                    if (that.$schema.description)
                        opts.description = _ulocale.tt(that.$schema.description, that.form.$locale);
                    that.$element = $(_createMultiselectInput(that.id, opts, that.options.design, opts.title));
                    that._state2UI();
                    that.setEvents(opts);
                }
                that.appendElement($parent, opts);
                return that.$element;
            };
            MultiValue.prototype._value2Input = function (input) {
                var that = this;
            };
            return MultiValue;
        }(Phoenix.formedit.Edit));
        _ui.registerControl(MultiValue, 'array', false, 'multivalue', null);
    })(multivalue = Phoenix.multivalue || (Phoenix.multivalue = {}));
})(Phoenix || (Phoenix = {}));
/// <reference path="../../../core/core-refs.ts" />
/// <reference path="../../../core/modules/locale.ts" />
/// <reference path="./absfield.control.ts" />
var Phoenix;
(function (Phoenix) {
    var _utils = Phoenix.utils, _ui = Phoenix.ui, _dom = Phoenix.dom, _device = Phoenix.device, _uiutils = Phoenix.uiutils, _observable = Phoenix.Observable, _odata = Phoenix.data.odata, _du = _observable.DataUtils, _ulocale = Phoenix.ulocale;
    var formpicture;
    (function (formpicture) {
        var _createPicture = function (id, options, authoring, title, editable) {
            var html = [];
            title = title || '';
            _uiutils.utils.fieldWrapper(html, options, authoring, function () {
                var _bootstrap4 = Phoenix.bootstrap4;
                if (!options.titleIsHidden) {
                    html.push('<label id="{0}_label"');
                    var css = ['bs-label'];
                    if (options.columns) {
                        if (_bootstrap4) {
                            css.push('col-form-label');
                        }
                        else {
                            css.push('checkbox-inline bs-cursor-d');
                        }
                        css.push('bs-lib-col col-sm-' + options.labelCol);
                        if (options.labelLeft)
                            css.push('text-left');
                    }
                    if (options.inline) {
                        if (_bootstrap4)
                            css.push('form-check-inline');
                        else
                            css.push('checkbox-inline');
                        css.push('bs-cursor-d no-x-padding');
                    }
                    if (css.length)
                        html.push(' class="' + css.join(' ') + '"');
                    html.push('>');
                    html.push(_utils.escapeHtml(title || '') + (options.inline ? '&nbsp;' : ''));
                    _uiutils.utils.addTooltipAndRule(html, options);
                    html.push('</label>');
                }
                if (options.columns)
                    html.push('<div class="no-x-padding col-sm-' + (12 - options.labelCol) + '">');
                if (options.inline)
                    html.push('<span id="{0}_alt" class="bs-no-image">');
                else
                    html.push('<div id="{0}_alt" class="bs-no-image">');
                if (editable)
                    html.push('<input id="{0}_upload" class="bs-hidden-file" accept="image/*" type="file" />');
                var imgCss = ['bs-none bs-relative'];
                if (!options.inline)
                    imgCss.push(_bootstrap4 ? 'img-fluid' : 'img-responsive');
                html.push('<img id="{0}_img" class="');
                html.push(imgCss.join(' '));
                html.push('"/>');
                if (editable)
                    html.push('<div id="{0}_remove" class="bs-rt-button bs-image-remove bs-none"><span class="' + _dom.iconClass('times-circle') + '"></span></div>');
                if (options.inline)
                    html.push('</span>');
                else
                    html.push('</div>');
                if (options.columns)
                    html.push('</div>');
            }, null);
            return _utils.format(html.join(''), id);
        };
        var BasePicture = /** @class */ (function (_super) {
            __extends(BasePicture, _super);
            function BasePicture(fp, options, form) {
                var _this = _super.call(this, fp, options, form) || this;
                _this._state();
                return _this;
            }
            BasePicture.prototype._setDisabled = function (element) {
            };
            BasePicture.prototype._setReadOnly = function (element) {
                this._setDisabled(element);
            };
            BasePicture.prototype._setMandatory = function (element) { };
            BasePicture.prototype._state2UI = function () {
                var that = this, img = that._img(), element = that.$element ? that.$element.get(0) : null;
                if (img) {
                    that._showValue(that.state.value);
                    that._setDisabled(element);
                    that._setReadOnly(element);
                    that.setHidden(element);
                }
            };
            BasePicture.prototype._showValue = function (value) {
            };
            BasePicture.prototype.changed = function (propName, ov, nv, op) {
                var that = this, img = that._img();
                if (that.state.value !== nv) {
                    that.state.value = nv;
                    that._showValue(that.state.value);
                }
            };
            BasePicture.prototype.stateChanged = function (propName, params) {
                var that = this, state = that.form.getState(that.$bind), element = that.$element ? that.$element.get(0) : null;
                if (state.isHidden !== that.state.isHidden) {
                    that.state.isHidden = state.isHidden;
                    if (element)
                        that.setHidden(element);
                }
                if (state.isDisabled != that.state.isDisabled) {
                    that.state.isDisabled = state.isDisabled;
                    if (element)
                        that._setDisabled(element);
                }
                if (state.isReadOnly != that.state.isReadOnly) {
                    that.state.isReadOnly = state.isReadOnly;
                    if (element)
                        that._setReadOnly(element);
                }
                if (state.isMandatory != that.state.isMandatory) {
                    that.state.isMandatory = state.isMandatory;
                    if (element)
                        that._setMandatory(element);
                }
            };
            BasePicture.prototype._img = function () {
                var that = this, e = that.$element.get(0), img = e ? _dom.find(e, that.id + '_img') : null;
                return img;
            };
            BasePicture.prototype._altimg = function () {
                var that = this, e = that.$element.get(0), img = e ? _dom.find(e, that.id + '_alt') : null;
                return img;
            };
            BasePicture.prototype.render = function ($parent) {
                var that = this;
                var opts = that._initOptions(_uiutils.utils.defaultOptions);
                if (!that.$element) {
                    opts.title = _ulocale.tt(that.$schema.title, that.form.$locale);
                    that.$element = $(_createPicture(that.id, opts, that.options.design, opts.title, that.editable));
                    that._state2UI();
                    that.setEvents(opts);
                }
                that.appendElement($parent, opts);
                return that.$element;
            };
            return BasePicture;
        }(Phoenix.ui.AbsField));
        var Picture = /** @class */ (function (_super) {
            __extends(Picture, _super);
            function Picture(fp, options, form) {
                var _this = _super.call(this, fp, options, form) || this;
                _this.editable = true;
                return _this;
            }
            Picture.prototype._createImage = function (event) {
                var that = this;
                var files = event.target.files; // FileList object
                if (files && files.length) {
                    var f = files[0];
                    if (!f.type.match('image.*'))
                        return;
                    var URL_1 = window.URL || window['webkitURL'];
                    if (URL_1) {
                        var nv_2 = {
                            id: that.state.value ? that.state.value.id : undefined,
                            fileName: f.name,
                            value: '',
                            url: that.state.value ? that.state.value.url : undefined,
                            contentType: f.type,
                        };
                        if (f.type === 'image/svg+xml') {
                            var reader_1 = new FileReader();
                            reader_1.onload = function (e) {
                                nv_2.value = reader_1.result;
                                that.form.setValue(that.$bind, nv_2);
                                _dom.processing(false);
                            };
                            _dom.processing(true);
                            reader_1.readAsDataURL(f);
                        }
                        else {
                            var img_1 = document.createElement('img');
                            var canvas_1 = document.createElement("canvas");
                            _dom.processing(true);
                            img_1.src = URL_1.createObjectURL(f);
                            img_1.onload = function () {
                                var div = 1;
                                var v = (img_1.width * img_1.height);
                                if (v > 1200000) {
                                    div = 2;
                                }
                                else if (v > 2400000) {
                                    div = 4;
                                }
                                else if (v > 4000000) {
                                    div = 8;
                                }
                                canvas_1.width = img_1.width / div;
                                canvas_1.height = img_1.height / div;
                                var ctx = canvas_1.getContext("2d");
                                ctx.drawImage(img_1, 0, 0, canvas_1.width, canvas_1.height);
                                nv_2.value = canvas_1.toDataURL();
                                that.form.setValue(that.$bind, nv_2);
                                _dom.processing(false);
                            };
                        }
                    }
                }
            };
            Picture.prototype._removeImage = function () {
                var that = this;
                var nv = {
                    id: that.state.value ? that.state.value.id : undefined,
                    value: ''
                };
                that.form.setValue(that.$bind, nv);
            };
            Picture.prototype.click = function (event) {
                var that = this;
                if (!that.state.isDisabled && !that.state.isReadOnly) {
                    var rId = that.id + '_remove';
                    if (event.target.id === rId || event.target.parentNode.id === rId) {
                        that._removeImage();
                    }
                    else {
                        var upload = that._upload();
                        upload.click();
                    }
                }
            };
            Picture.prototype._upload = function () {
                var that = this, e = that.$element.get(0), input = e ? _dom.find(e, that.id + '_upload') : null;
                return input;
            };
            Picture.prototype.setEvents = function (opts) {
                var that = this;
                var input = that._upload();
                if (input) {
                    $(input).on('change', function (event) {
                        that._createImage(event);
                    });
                }
            };
            Picture.prototype.removeEvents = function () {
                var that = this;
                var input = that._upload();
                if (input)
                    $(input).off('change');
            };
            Picture.prototype._setDisabled = function (element) {
                var that = this, upload = that._upload();
                upload.disabled = that.state.isDisabled || that.state.isReadOnly;
                that._showRemoveImage(that.state.value);
            };
            Picture.prototype._showRemoveImage = function (value) {
                var that = this;
                var isRemoveVisible = (!that.state.isHidden && !that.state.isDisabled && !that.state.isReadOnlyd);
                if (isRemoveVisible)
                    isRemoveVisible = value && (value.url || value.value);
                var tmvElem = that._rmv();
                if (tmvElem) {
                    if (isRemoveVisible)
                        _dom.removeClass(tmvElem, 'bs-none');
                    else
                        _dom.addClass(tmvElem, 'bs-none');
                }
            };
            Picture.prototype._rmv = function () {
                var that = this, e = that.$element.get(0), img = e ? _dom.find(e, that.id + '_remove') : null;
                return img;
            };
            Picture.prototype._showValue = function (value) {
                var that = this, img = that._img(), alt = that._altimg();
                if (img) {
                    var hasImage = false;
                    if (value) {
                        if (value.value !== undefined) {
                            if (value.value) {
                                img.src = value.value;
                                hasImage = true;
                            }
                            else
                                img.src = '';
                        }
                        else if (value.url) {
                            if (value.url.indexOf('{{baseUrl}}') >= 0) {
                                var ds = _du.extractMainDataSource(that.form.$model);
                                if (!ds) {
                                    ds = { $module: that.renderOptions.$module, $context: that.renderOptions.$context };
                                }
                                var baseUrl = _odata.baseUrl(ds);
                                var surl = _utils.execAngularExpression(value.url, { baseUrl: _odata.baseUrl(ds) || '' });
                                img.src = _odata.addImageUrlToken(surl);
                            }
                            else
                                img.src = '';
                            hasImage = true;
                        }
                        else
                            img.src = '';
                    }
                    else
                        img.src = '';
                    if (hasImage) {
                        _dom.removeClass(img, 'bs-none');
                        _dom.removeClass(alt, 'bs-no-image');
                    }
                    else {
                        _dom.addClass(img, 'bs-none');
                        _dom.addClass(alt, 'bs-no-image');
                    }
                    that._showRemoveImage(value);
                }
            };
            return Picture;
        }(BasePicture));
        var ImageUrl = /** @class */ (function (_super) {
            __extends(ImageUrl, _super);
            function ImageUrl(fp, options, form) {
                var _this = _super.call(this, fp, options, form) || this;
                _this.editable = false;
                return _this;
            }
            ImageUrl.prototype._showValue = function (value) {
                var that = this, img = that._img(), alt = that._altimg();
                if (img) {
                    var hasImage = false;
                    if (value) {
                        img.src = value;
                        hasImage = true;
                    }
                    if (hasImage) {
                        _dom.removeClass(img, 'bs-none');
                        _dom.removeClass(alt, 'bs-no-image');
                    }
                    else {
                        _dom.addClass(img, 'bs-none');
                        _dom.addClass(alt, 'bs-no-image');
                    }
                }
            };
            return ImageUrl;
        }(BasePicture));
        _ui.registerControl(Picture, "string", false, '', { format: 'stream' });
        _ui.registerControl(ImageUrl, "string", false, 'imageurl', {});
    })(formpicture = Phoenix.formpicture || (Phoenix.formpicture = {}));
})(Phoenix || (Phoenix = {}));
/// <reference path="../../../core/core-refs.ts" />
/// <reference path="./group.control.ts" />
var Phoenix;
(function (Phoenix) {
    var radiogroup;
    (function (radiogroup) {
        var _utils = Phoenix.utils, _ui = Phoenix.ui, _dom = Phoenix.dom, _groupctrl = Phoenix.groupctrl, _ulocale = Phoenix.ulocale, _uiutils = Phoenix.uiutils;
        var _createRadioGroups = function (id, options, authoring, title, enums, enumsNames) {
            title = title || '';
            options = $.extend({ titleIsHidden: false, placeHolder: false, columns: false, horizontal: false }, options);
            var html = [];
            var customize = null;
            _uiutils.utils.fieldWrapper(html, options, authoring, function () {
                if (!options.titleIsHidden) {
                    html.push('<label for="{0}_input" id="{0}_label"');
                    var css = ['bs-label'];
                    if (options.columns) {
                        css.push('col-form-label');
                        css.push('bs-lib-col col-sm-' + options.labelCol);
                        if (options.labelLeft)
                            css.push('text-left');
                    }
                    if (options.inline) {
                        css.push('form-check-inline');
                        css.push('bs-cursor-d no-x-padding');
                    }
                    if (css.length)
                        html.push(' class="' + css.join(' ') + '"');
                    html.push('>');
                    html.push(_utils.escapeHtml(title || '') + (options.inline ? '&nbsp;' : ''));
                    _uiutils.utils.addTooltipAndRule(html, options);
                    html.push('</label>');
                    if (!options.inline && options.horizontal)
                        html.push('<div></div>'); //line
                }
                if (options.columns)
                    html.push('<div class="no-x-padding  col-sm-' + (12 - options.labelCol) + '">');
                var inline = options.inline || options.horizontal;
                enums.forEach(function (enumName, index) {
                    html.push('<div class="custom-control custom-radio' + (inline ? ' custom-control-inline' : '') + '">');
                    html.push('<input class="custom-control-input" type="radio" name="{0}_input" id="{0}_item_' + index + '" value="' + enumName + '">');
                    html.push('<label class="custom-control-label" for="{0}_item_' + index + '">');
                    html.push(_utils.escapeHtml(enumsNames[index] || ''));
                    html.push('</label>');
                    html.push('</div>');
                });
                _uiutils.utils.addErrorDiv(html);
                if (options.columns)
                    html.push('</div>');
            }, customize);
            return _utils.format(html.join(''), id);
        };
        var RadioGroup = /** @class */ (function (_super) {
            __extends(RadioGroup, _super);
            function RadioGroup(fp, options, form) {
                var _this = _super.call(this, fp, options, form) || this;
                _this._state();
                return _this;
            }
            RadioGroup.prototype._state2UI = function () {
                _super.prototype._state2UI.call(this, function (item) {
                    item.checked = true;
                });
            };
            RadioGroup.prototype.changed = function (propName, ov, nv, op) {
                var that = this;
                if (that.state.value != nv) {
                    that.state.value = nv;
                    var ii = that.$schema.enum.indexOf(that.state.value);
                    var input = _super.prototype._item.call(this, ii);
                    if (input)
                        input.checked = true;
                }
            };
            RadioGroup.prototype.render = function ($parent) {
                var that = this;
                var opts = that._initOptions(_uiutils.utils.defaultOptions);
                if (!that.$element) {
                    var enumNames = that.$schema.enumNames || that.$schema.enum;
                    enumNames = enumNames.map(function (v) { return _ulocale.tt(v, that.form.$locale); });
                    if (that.$schema.description)
                        opts.description = _ulocale.tt(that.$schema.description, that.form.$locale);
                    that.$element = $(_createRadioGroups(that.id, opts, that.options.design, _ulocale.tt(that.$schema.title, that.form.$locale), that.$schema.enum, enumNames));
                    that.setEvents(opts);
                    that._state2UI();
                }
                that.appendElement($parent, opts);
                return that.$element;
            };
            return RadioGroup;
        }(Phoenix.groupctrl.Group));
        _ui.registerControl(RadioGroup, "*", true, "radio", null);
    })(radiogroup = Phoenix.radiogroup || (Phoenix.radiogroup = {}));
})(Phoenix || (Phoenix = {}));
/// <reference path="../../../core/core-refs.ts" />
/// <reference path="./absfield.control.ts" />
var Phoenix;
(function (Phoenix) {
    var readonlyctrl;
    (function (readonlyctrl) {
        var _utils = Phoenix.utils, _ui = Phoenix.ui, _dom = Phoenix.dom, _ulocale = Phoenix.ulocale, _uiutils = Phoenix.uiutils;
        function _createReadOnly(id, options, authoring, title, valuepattern) {
            title = title || '';
            options.styles = options.styles ? options.styles : (Phoenix.bootstrap4 ? 'form-control-plaintext' : 'form-control-static');
            options = $.extend({ titleIsHidden: false }, options);
            var html = [];
            _uiutils.utils.fieldWrapper(html, options, authoring, function () {
                html.push('<div style="background-color: red;">' + title + '</div>');
            });
            return _utils.format(html.join(''), id);
        }
        ;
        var ReadOnlyField = /** @class */ (function (_super) {
            __extends(ReadOnlyField, _super);
            function ReadOnlyField(fp, options, form) {
                var _this = _super.call(this, fp, options, form) || this;
                var that = _this;
                that._map = [];
                if (fp.options && fp.options.$expression) {
                    that.$expression = fp.options.$expression;
                    _utils.extractAngularVars(that.$expression, that._map);
                }
                else {
                    that.$expression = _utils.format('{0}: {{{1}}}', _utils.escapeHtml(_ulocale.tt(that.$schema.title, that.form.$locale)), that.$bind);
                    that._map.push({ name: that.$bind });
                }
                that._map.forEach(function (map) {
                    if (map.name != that.$bind) {
                        map.schema = form.getSchema(map.name);
                        that.form.registerListenerFor(map.name, that);
                    }
                    else
                        map.schema = that.$schema;
                });
                _this._state();
                return _this;
            }
            ReadOnlyField.prototype._state = function () {
                var that = this;
                that.state = that.state || {};
                that.state.values = that.state.values || {};
                that.state.fvalues = that.state.fvalues || {};
                var state = that.form.getState(that.$bind);
                that.state.isHidden = state.isHidden;
                that._refreshValues();
            };
            ReadOnlyField.prototype._refreshValues = function () {
                var that = this;
                that._map.forEach(function (map) {
                    that.state.values[map.name] = that.form.getValue(map.name);
                    var cs = that.form.getState(map.name);
                    that.state.fvalues[map.name] = _uiutils.utils.displayValue(that.state.values[map.name], map.schema, that.form.$locale, { html: false, useSymbol: true, state: cs }, that.state.values, map.name).value;
                });
            };
            ReadOnlyField.prototype._value2UI = function () {
                var that = this, element = that.$element ? that.$element.get(0) : null;
                var nv = _utils.execAngularExpression(that.$expression, that.state.fvalues, true);
                var r = $('<div>' + _utils.escapeHtml(nv) + '</div>').get(0);
                _dom.empty(element);
                while (r.childNodes.length > 0) {
                    element.appendChild(r.childNodes[0]);
                }
            };
            ReadOnlyField.prototype._findMap = function (pn) {
                var that = this;
                for (var i = 0, len = that._map.length; i < len; i++) {
                    var cm = that._map[i];
                    if (cm.name === pn)
                        return cm;
                }
                return null;
            };
            ReadOnlyField.prototype.changed = function (propName, ov, nv, op) {
                var that = this;
                that._refreshValues();
                that._value2UI();
            };
            ReadOnlyField.prototype.stateChanged = function (propName, params) {
                var that = this, state = that.form.getState(that.$bind), element = that.$element ? that.$element.get(0) : null;
                if (state.isHidden !== that.state.isHidden) {
                    that.state.isHidden = state.isHidden;
                    if (element)
                        that.setHidden(element);
                }
                if (state.symbol !== that.state.symbol)
                    state.symbol = that.state.symbol;
                if (state.decimals !== that.state.decimals)
                    state.decimals = that.state.decimals;
            };
            ReadOnlyField.prototype._state2UI = function () {
                var that = this, element = that.$element ? that.$element.get(0) : null;
                if (element) {
                    that.setHidden(element);
                    that._value2UI();
                }
            };
            ReadOnlyField.prototype.render = function ($parent) {
                var that = this;
                var opts = that._initOptions(_uiutils.utils.defaultOptions);
                if (!that.$element) {
                    that.$element = $(_createReadOnly(that.id, opts, that.options.design, _ulocale.tt(that.$schema.title, that.form.$locale), ''));
                    that._state2UI();
                }
                that.appendElement($parent, opts);
                return that.$element;
            };
            ReadOnlyField.prototype.destroy = function () {
                var that = this;
                that._map.forEach(function (map) {
                    if (map.name != that.$bind) {
                        that.form.unRegisterListenerFor(map.name, that);
                    }
                });
                _super.prototype.destroy.call(this);
            };
            return ReadOnlyField;
        }(Phoenix.ui.AbsField));
        readonlyctrl.ReadOnlyField = ReadOnlyField;
        _ui.registerControl(ReadOnlyField, "*", false, '', { readOnly: true });
    })(readonlyctrl || (readonlyctrl = {}));
})(Phoenix || (Phoenix = {}));
/// <reference path="../../../core/core-refs.ts" />
/// <reference path="../../../data/datasets.ts" />
/// <reference path="../schema.data.ts" />
/// <reference path="./absfield.control.ts" />
/// <reference path="./edit.control.ts" />
var Phoenix;
(function (Phoenix) {
    var search;
    (function (search) {
        var _p = Phoenix, _formedit = _p.formedit, _dom = _p.dom, locale = _p.locale, _ui = _p.ui;
        var Search = /** @class */ (function (_super) {
            __extends(Search, _super);
            function Search(fp, options, form) {
                var _this = _super.call(this, fp, options, form) || this;
                var that = _this;
                that._searchField = fp.options.search;
                that._query = that.form.getValue(that._searchField);
                return _this;
            }
            Search.prototype.updateModel = function () {
                var that = this;
                that._query.search = that.state.value;
            };
            Search.prototype.destroy = function () {
                var that = this;
                that._query = null;
                _super.prototype.destroy.call(this);
            };
            Search.prototype.keyup = function (event) {
                var that = this;
                var input = that._input();
                if (that._ignoreKeys(event, true))
                    return true;
                if (that.state.isReadOnly || that.state.isDisabled)
                    true;
                that.customKeyUp(event);
                return true;
            };
            Search.prototype.customKeyUp = function (event) {
                var that = this;
                if (that._incremental) {
                    window.clearTimeout(that._incremental);
                    delete that._incremental;
                }
                that._incremental = window.setTimeout(function () {
                    delete that._incremental;
                    that._input2Model(false);
                }, 0);
            };
            Search.prototype.changed = function (propName, ov, nv, op) {
            };
            Search.prototype._ignoreKeys = function (event, keyPress) {
                var that = this;
                if (!keyPress) {
                    if (event.which === _dom.keys.VK_UP) {
                        that._query.moveSelected(-1, true);
                        return true;
                    }
                    else if (event.which === _dom.keys.VK_DOWN) {
                        that._query.moveSelected(1, true);
                        return true;
                    }
                }
                return _super.prototype._ignoreKeys.call(this, event, keyPress);
            };
            return Search;
        }(Phoenix.formedit.Edit));
        search.Search = Search;
        _ui.registerControl(Search, 'string', false, 'search', null);
    })(search = Phoenix.search || (Phoenix.search = {}));
})(Phoenix || (Phoenix = {}));
/// <reference path="../../../core/core-refs.ts" />
/// <reference path="../../../core/modules/locale.ts" />
/// <reference path="./absfield.control.ts" />
/// <reference path="../schema.data.ts" />
/// <reference path="../errors.data.ts" />
/// <reference path="./edit.control.ts" />
var Phoenix;
(function (Phoenix) {
    var select;
    (function (select) {
        var _ui = Phoenix.ui, _utils = Phoenix.utils, _formedit = Phoenix.formedit, _uiutils = Phoenix.uiutils, _dom = Phoenix.dom, _locale = Phoenix.locale, _su = Phoenix.Observable.SchemaUtils, _ulocale = Phoenix.ulocale, _ui = Phoenix.ui;
        ;
        var _createSelectInput = function (id, options, authoring, title, enums, enumsNames) {
            title = title || '';
            options = $.extend({ titleIsHidden: false, placeHolder: false, columns: false, labelCol: 3 }, options);
            var html = [];
            if (options.titleIsHidden) {
                options.columns = false;
            }
            options.placeHolder = false;
            _uiutils.utils.fieldWrapper(html, options, authoring, function () {
                if (!options.titleIsHidden) {
                    html.push('<label for="{0}_input" id="{0}_label"');
                    var css = ['bs-label'];
                    if (options.columns) {
                        css.push('col-form-label');
                        css.push('bs-lib-col col-sm-' + options.labelCol);
                        if (options.labelLeft)
                            css.push('text-left');
                    }
                    if (options.inline) {
                        css.push('form-check-inline');
                        css.push('bs-cursor-d no-x-padding');
                    }
                    if (css.length)
                        html.push(' class="' + css.join(' ') + '"');
                    html.push('>');
                    html.push(_utils.escapeHtml(title || '') + (options.inline ? '&nbsp;' : ''));
                    _uiutils.utils.addTooltipAndRule(html, options);
                    html.push('</label>');
                }
                if (options.columns)
                    html.push('<div class="no-x-padding col-sm-' + (12 - options.labelCol) + '">');
                if (options.readOnly) {
                    html.push('<div class="form-control bs-read-only');
                    html.push('" id="{0}_input"');
                    var style = [];
                    if (options.maxWidth)
                        style.push('max-width: ' + options.maxWidth + ';');
                    if (options.minWidth)
                        style.push('min-width: ' + options.minWidth + ';');
                    if (style.length)
                        html.push(' style="' + style.join('') + '"');
                    html.push('>');
                    html.push('</div>');
                }
                else {
                    html.push('<select class="form-control custom-select');
                    html.push('" id="{0}_input"');
                    var style = [];
                    if (options.maxWidth)
                        style.push('max-width: ' + options.maxWidth + ';');
                    if (options.minWidth)
                        style.push('min-width: ' + options.minWidth + ';');
                    if (style.length)
                        html.push(' style="' + style.join('') + '"');
                    html.push('>');
                    enums.forEach(function (en, index) {
                        html.push('<option value="' + en + '">' + enumsNames[index] + '</option>');
                    });
                    html.push('</select>');
                }
                _uiutils.utils.addErrorDiv(html);
                if (options.columns)
                    html.push('</div>');
                if (options.titleIsHidden)
                    _uiutils.utils.addTooltipAndRule(html, options);
            });
            return _utils.format(html.join(''), id);
        };
        var Select = /** @class */ (function (_super) {
            __extends(Select, _super);
            function Select(fp, options, form) {
                return _super.call(this, fp, options, form) || this;
            }
            Select.prototype.fillSelect = function (enums) {
                var that = this;
                if (that.renderOptions.readOnly)
                    return;
                _uiutils.utils.fillSelect(enums, that._input(), that.$schema);
            };
            Select.prototype._setDisabled = function (input, element) {
                input.disabled = this.state.isDisabled || this.state.isReadOnly;
            };
            Select.prototype._setReadOnly = function (input, element) {
                input.disabled = this.state.isDisabled || this.state.isReadOnly;
            };
            Select.prototype._state2UI = function () {
                var that = this;
                var input = that._input();
                if (input)
                    that._setFilter(true);
                _super.prototype._state2UI.call(this);
            };
            Select.prototype._setFilter = function (inRender) {
                var that = this;
                var cf = that.state.filter;
                if (inRender && !cf)
                    return;
                var enums = cf ? that.$schema.filters[cf] || [] : that.$schema.enum;
                that.fillSelect(enums);
                if (!inRender) {
                    var ii = enums.indexOf(that.state.value);
                    if (ii < 0) {
                        that.form.setValue(that.$display, enums.length ? enums[0] : null);
                    }
                    else {
                        var input = that._input();
                        if (input)
                            that._value2Input(input);
                    }
                }
            };
            Select.prototype.stateChanged = function (propName, params) {
                var that = this;
                var state = that.form.getState(that.$bind);
                _super.prototype.stateChanged.call(this, propName, params);
                if (!propName || (propName === 'filter')) {
                    if (that.state.filter !== state.filter) {
                        that.state.filter = state.filter;
                        that._setFilter(false);
                    }
                }
            };
            Select.prototype.render = function ($parent) {
                var that = this;
                var opts = that._initOptions(_uiutils.utils.defaultOptions);
                if (!that.$element) {
                    var enumNames = that.$schema.enumNames || that.$schema.enum;
                    enumNames = enumNames.map(function (v) { return _ulocale.tt(v + '', that.form.$locale); });
                    opts.title = _ulocale.tt(that.$schema.title, that.form.$locale);
                    if (that.$schema.description)
                        opts.description = _ulocale.tt(that.$schema.description, that.form.$locale);
                    var cf = that.state.filter;
                    var enums = cf ? that.$schema.filters[cf] || [] : that.$schema.enum;
                    if (cf) {
                    }
                    that.$element = $(_createSelectInput(that.id, opts, that.options.design, opts.title, enums, enumNames));
                    that._state2UI();
                    that.setEvents(opts);
                }
                that.appendElement($parent, opts);
                return that.$element;
            };
            Select.prototype.removeEvents = function () {
                var that = this;
                if (that.renderOptions.readOnly)
                    return;
                var input = that._input();
                $(input).off('change');
            };
            Select.prototype._value2Input = function (input) {
                var that = this;
                if (that.renderOptions.readOnly) {
                    var enumNames = that.$schema.enumNames || that.$schema.enum;
                    enumNames = enumNames.map(function (v) { return _ulocale.tt(v + '', that.form.$locale); });
                    var ii = that.$schema.enum.indexOf(that.state.value);
                    _dom.text(input, enumNames[ii] || String.fromCharCode(160));
                }
                else {
                    input.selectedIndex = that.state.filter ? that.$schema.filters[that.state.filter].indexOf(that.state.value) : that.$schema.enum.indexOf(that.state.value);
                }
            };
            Select.prototype.setEvents = function (opts) {
                var that = this;
                if (that.renderOptions.readOnly)
                    return;
                var input = that._input();
                $(input).on('change', function (event) {
                    var ii = that._input();
                    var iv = that.state.filter ? that.$schema.filters[that.state.filter][ii.selectedIndex] : that.$schema.enum[ii.selectedIndex];
                    if (that.state.value !== iv) {
                        that.state.value = iv;
                        that.form.setValue(that.$display, that.state.value);
                    }
                });
            };
            return Select;
        }(Phoenix.formedit.BaseEdit));
        _ui.registerControl(Select, "*", true, '', null);
    })(select = Phoenix.select || (Phoenix.select = {}));
})(Phoenix || (Phoenix = {}));
/// <reference path="../../../core/core-refs.ts" />
/// <reference path="./group.control.ts" />
var Phoenix;
(function (Phoenix) {
    var wizardctrl;
    (function (wizardctrl) {
        var _utils = Phoenix.utils, _ui = Phoenix.ui, _dom = Phoenix.dom, _groupctrl = Phoenix.groupctrl, _ulocale = Phoenix.ulocale, _uiutils = Phoenix.uiutils;
        var _createWizardSteps = function (id, options, authoring, title, enums, enumsNames) {
            title = title || '';
            options = $.extend({ titleIsHidden: false, placeHolder: false, columns: false }, options);
            var html = [];
            _uiutils.utils.fieldWrapper(html, options, authoring, function () {
                var _bootstrap4 = Phoenix.bootstrap4;
                //add label: 
                var css = ['btn-group'];
                html.push('<div class="' + css.join(' ') + '">');
                enums.forEach(function (enumName, index) {
                    html.push('<button tabindex="-1" type="button" id="{0}_item_' + index + '" class="btn btn-' + _dom.bootstrapStyles(true).secondary + '"');
                    if (options.width) {
                        html.push(' style="width:' + options.width + '"');
                    }
                    html.push('>');
                    html.push(_utils.escapeHtml(enumsNames[index] || ''));
                    html.push('</button>');
                });
                html.push('</div>');
            });
            return _utils.format(html.join(''), id);
        };
        var WizardSteps = /** @class */ (function (_super) {
            __extends(WizardSteps, _super);
            function WizardSteps(fp, options, form) {
                var _this = _super.call(this, fp, options, form) || this;
                _this._state();
                return _this;
            }
            WizardSteps.prototype._state2UI = function () {
                _super.prototype._state2UI.call(this, function (item) {
                    _dom.addClass(item, 'btn-primary');
                    _dom.removeClass(item, 'btn-' + _dom.bootstrapStyles(true).secondary);
                    item.tabIndex = 0;
                });
            };
            WizardSteps.prototype.changed = function (propName, ov, nv, op) {
                var that = this;
                if (that.state.value != nv) {
                    that.state.value = nv;
                    if (!that.$element)
                        return;
                    _super.prototype._enumItems.call(this, function (btn, value) {
                        if (that.state.value === value) {
                            btn.tabIndex = 0;
                            if (that.focused)
                                btn.focus();
                            _dom.addClass(btn, 'btn-' + _dom.bootstrapStyles(false).primary);
                            _dom.removeClass(btn, 'btn-' + _dom.bootstrapStyles(true).secondary);
                        }
                        else {
                            _dom.addClass(btn, 'btn-' + _dom.bootstrapStyles(true).secondary);
                            _dom.removeClass(btn, 'btn-' + _dom.bootstrapStyles(false).primary);
                            btn.tabIndex = -1;
                        }
                    });
                }
            };
            WizardSteps.prototype.render = function ($parent) {
                var that = this;
                var opts = that._initOptions(_uiutils.utils.defaultOptions);
                if (!that.$element) {
                    var enumNames = that.$schema.enumNames || that.$schema.enum;
                    enumNames = enumNames.map(function (v) { return _ulocale.tt(v, that.form.$locale); });
                    that.$element = $(_createWizardSteps(that.id, opts, that.options.design, _ulocale.tt(that.$schema.title, that.form.$locale), that.$schema.enum, enumNames));
                    that._state2UI();
                }
                that.appendElement($parent, opts);
                return that.$element;
            };
            return WizardSteps;
        }(Phoenix.groupctrl.Group));
        wizardctrl.WizardSteps = WizardSteps;
        _ui.registerControl(WizardSteps, '*', true, 'wizardctrl', null);
    })(wizardctrl = Phoenix.wizardctrl || (Phoenix.wizardctrl = {}));
})(Phoenix || (Phoenix = {}));
/// <reference path="../../../core/core-refs.ts" />
/// <reference path="./absfield.control.ts" />
/// <reference path="../form.control.ts" />
/// <reference path="./link-base.control.ts" />
var Phoenix;
(function (Phoenix) {
    var _utils = Phoenix.utils, _ui = Phoenix.ui, _dom = Phoenix.dom, _uiutils = Phoenix.uiutils, _ulocale = Phoenix.ulocale;
    var formlink;
    (function (formlink) {
        function _createButton(id, options, authoring, title) {
            title = title || '';
            options = $.extend({ icon: null, type: 'default', size: null }, options);
            var html = [];
            _uiutils.utils.fieldWrapper(html, options, authoring, function () {
                html.push('<button type="button"');
                html.push(' class="bs-button btn btn-link');
                if (options.size)
                    html.push(' btn-' + options.size);
                html.push('"');
                html.push('>');
                html.push('<span class="' + _dom.iconClass(options.icon) + '"></span>');
                html.push('</button>');
                html.push('<span>' + title + '</span>');
            });
            return _utils.format(html.join(''), id);
        }
        ;
        var LinkTitle = /** @class */ (function (_super) {
            __extends(LinkTitle, _super);
            function LinkTitle() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            LinkTitle.prototype._button = function () {
                var that = this;
                if (!that.$element)
                    return null;
                return that.renderOptions.inline ? that.$element.get(0) : that.$element.get(0).firstChild;
            };
            LinkTitle.prototype._renderButton = function () {
                var that = this;
                return $(_createButton(that.id, that.renderOptions, that.options.design, _ulocale.tt(that.title, that.form.$locale)));
            };
            return LinkTitle;
        }(Phoenix.formlinkbase.LinkBase));
        _ui.registerLinkControl(LinkTitle, 'title-button');
    })(formlink = Phoenix.formlink || (Phoenix.formlink = {}));
})(Phoenix || (Phoenix = {}));
/// <reference path="../../../core/core-refs.ts" />
/// <reference path="./absfield.control.ts" />
var Phoenix;
(function (Phoenix) {
    var togglectrl;
    (function (togglectrl) {
        var _ui = Phoenix.ui, _utils = Phoenix.utils, _dom = Phoenix.dom, _ulocale = Phoenix.ulocale, _uiutils = Phoenix.uiutils;
        function _createToggle(id, options, authoring, title) {
            title = title || '';
            options = $.extend({ titleIsHidden: false, placeHolder: false, columns: false }, options);
            var html = [];
            _uiutils.utils.fieldWrapper(html, options, authoring, function () {
                var _bootstrap4 = Phoenix.bootstrap4;
                if (!options.titleIsHidden) {
                    var css = ['bs-label'];
                    html.push('<label for="{0}_input" id="{0}_label"');
                    if (options.columns) {
                        if (_bootstrap4) {
                            css.push('col-form-label');
                        }
                        else {
                            css.push('checkbox-inline');
                        }
                        css.push('bs-lib-col col-sm-' + options.labelCol);
                        if (options.labelLeft)
                            css.push('text-left');
                    }
                    if (options.inline) {
                        if (_bootstrap4)
                            css.push('form-check-inline');
                        else
                            css.push('checkbox-inline');
                        css.push('bs-cursor-d no-x-padding');
                    }
                    if (css.length)
                        html.push(' class="' + css.join(' ') + '"');
                    html.push('>');
                    html.push(_utils.escapeHtml(title || '') + (options.inline ? '&nbsp;' : ''));
                    _uiutils.utils.addTooltipAndRule(html, options);
                    html.push('</label>');
                }
                if (options.columns)
                    html.push('<div class="no-x-padding col-sm-' + (12 - options.labelCol) + '" id="{0}_colparent">');
                _createInput(html, options, title);
                if (options.columns)
                    html.push('</div>');
                if (options.titleIsHidden)
                    _uiutils.utils.addTooltipAndRule(html, options);
            });
            return _utils.format(html.join(''), id);
        }
        ;
        function _createInput(html, options, title) {
            var classNameInline = options.inline ? 'tgl-btn-inline' : '';
            html.push('<input class="tgl tgl-light" id="{0}_input" type="checkbox">');
            html.push(_utils.format('<label class="tgl-btn {0}" for="{1}_input"></label>', classNameInline, '{0}'));
        }
        ;
        var Toggle = /** @class */ (function (_super) {
            __extends(Toggle, _super);
            function Toggle(fp, options, form) {
                var _this = _super.call(this, fp, options, form) || this;
                _this._state();
                return _this;
            }
            Toggle.prototype._check = function () {
                var that = this;
                if (!that.$element)
                    return null;
                var e = that.$element.get(0);
                return _dom.find(e, that.id + '_input');
            };
            Toggle.prototype.click = function (event) {
                var that = this, input = that._check(), value = input.checked || false;
                if (event.target != input)
                    return;
                if (that.state.value != value) {
                    if (that._isBinded) {
                        that.state.value = value;
                        that.form.setValue(that.$bind, value);
                    }
                    else {
                        that.setInternalValue(value, true);
                    }
                }
            };
            Toggle.prototype._setDisabled = function (input, element) {
                var that = this, check = that._check();
                if (that.state.isDisabled || that.state.isReadOnly)
                    _dom.addClass(check, "disabled");
                else
                    _dom.removeClass(check, "disabled");
                input.disabled = that.state.isDisabled;
            };
            Toggle.prototype._setReadOnly = function (input, element) {
                this._setDisabled(input, element);
            };
            Toggle.prototype._setMandatory = function (input, element) { };
            Toggle.prototype._state2UI = function () {
                var that = this, input = that._check(), element = that.$element ? that.$element.get(0) : null;
                if (input) {
                    input.checked = that.state.value || false;
                    that._setDisabled(input, element);
                    that._setReadOnly(input, element);
                    that.setHidden(element);
                }
            };
            Toggle.prototype.changed = function (propName, ov, nv, op) {
                var that = this, input = that._check();
                if (that.state.value != nv) {
                    that.state.value = nv;
                    input.checked = that.state.value || false;
                }
            };
            Toggle.prototype.stateChanged = function (propName, params) {
                var that = this, state = that._isBinded ? that.form.getState(that.$bind) : that._internalState, input = that._check(), element = that.$element ? that.$element.get(0) : null;
                if (state.isHidden !== that.state.isHidden) {
                    that.state.isHidden = state.isHidden;
                    if (input)
                        that.setHidden(element);
                }
                if (state.isDisabled != that.state.isDisabled) {
                    that.state.isDisabled = state.isDisabled;
                    if (input)
                        that._setDisabled(input, element);
                }
                if (state.isReadOnly != that.state.isReadOnly) {
                    that.state.isReadOnly = state.isReadOnly;
                    if (input)
                        that._setReadOnly(input, element);
                }
                if (state.isMandatory != that.state.isMandatory) {
                    that.state.isMandatory = state.isMandatory;
                    if (input)
                        that._setMandatory(input, element);
                }
            };
            Toggle.prototype.render = function ($parent) {
                var that = this;
                var opts = that._initOptions(_uiutils.utils.defaultOptions);
                if (!that.$element) {
                    if (that.$schema.description)
                        opts.description = _ulocale.tt(that.$schema.description, that.form.$locale);
                    that.$element = $(_createToggle(that.id, opts, that.options.design, _ulocale.tt(that.title, that.form.$locale)));
                    that._state2UI();
                }
                that.appendElement($parent, opts);
                return that.$element;
            };
            return Toggle;
        }(Phoenix.ui.AbsField));
        togglectrl.Toggle = Toggle;
        _ui.registerControl(Toggle, "boolean", false, 'toggle', null);
    })(togglectrl = Phoenix.togglectrl || (Phoenix.togglectrl = {}));
})(Phoenix || (Phoenix = {}));
/// <reference path="../../../core/core-refs.ts" />
/// <reference path="./absfield.control.ts" />
var Phoenix;
(function (Phoenix) {
    var _p = Phoenix, _utils = _p.utils, _ui = _p.ui, _dom = _p.dom, _uiutils = _p.uiutils;
    var wizard;
    (function (wizard) {
        var _arrowHiddenClass = false ? 'bs-none' : 'invisible', _createStep = function (id, stepNumber, stepCode, stepTilte, stepState, isLast) {
            var html = [
                '<div id="{0}_{1}" class="d-inline-block">',
                '<div class="bs-step bs-cursor-p d-table align-middle bs-cursor-pointer">',
                '<span data-step-code="{2}" class="bs-step-icon d-table-cell align-middle">',
                '<span data-step-code="{2}" id="{0}_{1}_icon" class="bs-step-circle text-center d-inline-block' + (stepState === 'A' ? ' active ' + _dom.iconClass('edit') : (stepState === 'V' ? ' validated ' + _dom.iconClass('check') : '')) + '">' + (stepState === 'N' ? stepNumber : '') + '</span>',
                '</span>',
                '<span data-step-code="{2}" id="{0}_{1}_title" class="bs-pointer-p bs-step-title d-table-cell align-middle text-nowrap">' + _utils.escapeHtml(stepTilte) + '</span>',
                '<span id="{0}_{1}_line" class="bs-step-line bs-cursor-d d-table-cell align-middle' + (isLast ? ' bs-none' : '') + '"><span class="bs-step-line-content"></span></span>',
                '</div>',
                '</div>'
            ];
            return $(_utils.format(html.join(''), id, stepNumber, stepCode)).get(0);
        }, _createContainer = function (id, authoring) {
            var html = [];
            _uiutils.utils.fieldWrapper(html, {}, authoring, function () {
                html.push('<div class="bs-step-root">');
                html.push('<span data-action="prev" id="{0}_prev" class="bs-cursor-p bs-arrow-parent d-inline-block align-middle ' + _arrowHiddenClass + '">');
                html.push('<span data-action="prev" class="bs-step-arrow text-center d-inline-block ' + _dom.iconClass('arrow-left') + '"></span>');
                html.push('</span>');
                html.push('<div class="bs-step-parent-parent" id="{0}_root"><div class="bs-step-parent invisible" id="{0}_parent"></div></div>');
                html.push('<span data-action="next" id="{0}_next" class="bs-cursor-p bs-arrow-parent d-inline-block align-middle ' + _arrowHiddenClass + '">');
                html.push('<span data-action="next" class="bs-step-arrow text-center d-inline-block ' + _dom.iconClass('arrow-right') + '"></span>');
                html.push('</span>');
                html.push('</div>');
            });
            return $(_utils.format(html.join(''), id)).get(0);
        };
        var Steppers = /** @class */ (function (_super) {
            __extends(Steppers, _super);
            function Steppers(fp, options, form) {
                var _this = _super.call(this, fp, options, form) || this;
                var that = _this;
                that._step = 1000;
                if (that.fieldOptions.bindStep) {
                    that._step = that.form.getValue(that.fieldOptions.bindStep);
                    form.registerListenerFor(that.fieldOptions.bindStep, that);
                }
                else if (that.fieldOptions.step)
                    that._step = that.fieldOptions.step;
                that._state();
                that._init();
                return _this;
            }
            Steppers.prototype.destroy = function () {
                var that = this;
                that.form.unRegisterListenerFor(that.fieldOptions.bindStep, that);
                _super.prototype.destroy.call(this);
            };
            Steppers.prototype._createSteps = function () {
                var that = this;
                var e = that.$element.get(0);
                var parent = _dom.find(e, that.id + '_parent');
                var lastIndex = that._steps.length - 1;
                that._steps.forEach(function (step, stepIndex) {
                    parent.appendChild(_createStep(that.id, stepIndex + 1, step.code, step.libelle, step.status, stepIndex && stepIndex === lastIndex));
                });
            };
            Steppers.prototype._measure = function (width) {
                var that = this;
                that._measured = true;
                var e = that.$element.get(0);
                var parent = _dom.find(e, that.id + '_parent');
                var lastIndex = that._steps.length - 1;
                that._hlineWidth = 0;
                that._steps.forEach(function (step, stepIndex) {
                    var child = parent.childNodes[stepIndex];
                    var p = _dom.position(child, parent);
                    step.width = p.width;
                    var label = _dom.find(child, that.id + '_' + (stepIndex + 1) + '_title');
                    _dom.addClass(label, 'bs-none');
                    p = _dom.position(child, parent);
                    step.widthNoCaption = p.width;
                    _dom.removeClass(label, 'bs-none');
                    if (stepIndex === 0) {
                        var hline = _dom.find(child, that.id + '_' + (stepIndex + 1) + '_line');
                        p = _dom.position(hline, parent);
                        that._hlineWidth = p.width;
                    }
                });
                that._resizeTo(width);
                _dom.removeClass(parent, 'invisible');
            };
            Steppers.prototype._init = function () {
                var that = this;
                that._steps = [];
                var valueFound = false;
                for (var i = 0; i < that.$schema.enum.length; i++) {
                    var state = 'V';
                    if (valueFound) {
                        state = 'N';
                    }
                    else {
                        if (that.state.value === that.$schema.enum[i]) {
                            valueFound = true;
                            state = 'A';
                        }
                    }
                    that._steps.push({
                        code: that.$schema.enum[i],
                        libelle: that.$schema.enumNames[i],
                        status: state,
                        width: 0,
                        widthNoCaption: 0
                    });
                }
            };
            Steppers.prototype.stateChanged = function (propName, params) {
                var that = this;
                that._state();
                if (that.$element) {
                    if (propName === 'isHidden') {
                        that.setHidden(that.$element.get(0));
                        if (!that.state.isHidden)
                            that.resize();
                    }
                }
            };
            Steppers.prototype.click = function (event) {
                var that = this;
                if (that._step === 0)
                    return;
                var code;
                if (that.state.isDisabled)
                    return;
                var action = _dom.attr(event.target, 'data-action');
                if (action === 'next') {
                    var oi = that.$schema.enum.indexOf(that.state.value);
                    if (oi >= 0 && (oi + 1) < that.$schema.enum.length)
                        code = that.$schema.enum[oi + 1];
                }
                else if (action === 'prev') {
                    var oi = that.$schema.enum.indexOf(that.state.value);
                    if (oi > 0)
                        code = that.$schema.enum[oi - 1];
                }
                else
                    code = _dom.attr(event.target, 'data-step-code');
                if (code) {
                    if (that._step === 1) {
                        var cv = that.state.value;
                        var oi = that.$schema.enum.indexOf(that.state.value);
                        if (oi >= 0) {
                            var ni = that.$schema.enum.indexOf(code);
                            if (ni) {
                                if (ni > oi)
                                    code = that.$schema.enum[oi + 1];
                            }
                        }
                        else
                            code = that.state.value;
                    }
                    that.form.setValue(that.$bind, code);
                }
            };
            Steppers.prototype.changed = function (propName, ov, nv, op) {
                var that = this;
                if (propName === that.$bind) {
                    that.state.value = nv;
                    var valueFound = false;
                    if (that._steps && that._steps.length) {
                        for (var i = 0; i < that._steps.length; i++) {
                            var step = that._steps[i];
                            var state = 'V';
                            if (valueFound) {
                                state = 'N';
                            }
                            else {
                                if (that.state.value === step.code) {
                                    valueFound = true;
                                    state = 'A';
                                }
                            }
                            if (step.status !== state) {
                                step.status = state;
                                var icon = _dom.find(that.$element.get(0), that.id + '_' + (i + 1) + '_icon');
                                var css = ['bs-step-circle text-center d-inline-block'];
                                var isIcon = true;
                                if (state === 'A') {
                                    isIcon = true;
                                    css.push(_dom.iconClass('edit'));
                                    css.push('active');
                                }
                                else if (state === 'V') {
                                    isIcon = true;
                                    css.push(_dom.iconClass('check'));
                                    css.push('validated');
                                }
                                else {
                                    isIcon = false;
                                }
                                icon.className = css.join(' ');
                                _dom.text(icon, isIcon ? '' : ((i + 1) + ''));
                            }
                        }
                    }
                    that.resize();
                }
                else if (propName && propName === that.fieldOptions.bindStep) {
                    var nv_3 = that.form.getValue(that.fieldOptions.bindStep);
                    if (nv_3 !== that._step) {
                        var doResize = (nv_3 === 0) || (that._step === 0);
                        that._step = nv_3;
                        if (doResize)
                            that.resize();
                    }
                }
            };
            Steppers.prototype._resizeTo = function (width) {
                var that = this;
                var e = that.$element.get(0);
                var parent = _dom.find(e, that.id + '_parent');
                var totalWidth = 0;
                var mediumWidth = 0;
                var minWidth = 0;
                var stepCount = that._steps.length;
                that._steps.forEach(function (step, stepIndex) {
                    totalWidth += step.width;
                    switch (step.status) {
                        case 'A':
                            mediumWidth += step.width;
                            minWidth += step.width;
                            break;
                        case 'V':
                            var nextStep = that._steps[stepIndex + 1];
                            if (nextStep && nextStep.status === 'A')
                                mediumWidth += step.width;
                            else
                                mediumWidth += step.widthNoCaption;
                            minWidth += step.widthNoCaption;
                            break;
                        case 'N':
                            var prevStep = that._steps[stepIndex - 1];
                            if (prevStep && prevStep.status === 'A')
                                mediumWidth += step.width;
                            else
                                mediumWidth += step.widthNoCaption;
                            minWidth += step.widthNoCaption;
                            break;
                    }
                });
                var total = 0;
                var showAll = false;
                var medium = false;
                var min = false;
                if (totalWidth <= width) {
                    showAll = true;
                    total = width - totalWidth;
                }
                else if (mediumWidth <= width) {
                    showAll = true;
                    medium = true;
                    total = width - mediumWidth;
                }
                else if (minWidth <= width) {
                    showAll = true;
                    min = true;
                    total = width - minWidth;
                }
                if (showAll) {
                    var hLines = that._steps.length > 1 ? that._steps.length - 1 : 1;
                    var hLinesWidth = Math.floor(total / hLines) + that._hlineWidth;
                    var lines = _dom.queryAll(parent, '.bs-step-line');
                    for (var i = 0, len = lines.length; i < len; i++) {
                        var cl = lines[i];
                        if (!_dom.hasClass(cl, 'bs-none')) {
                            cl.style.width = hLinesWidth + 'px';
                        }
                    }
                    that._steps.forEach(function (step, stepIndex) {
                        var child = parent.childNodes[stepIndex];
                        var label = _dom.find(child, that.id + '_' + (stepIndex + 1) + '_title');
                        if (stepIndex && stepIndex === stepCount - 1) {
                            var hline = _dom.find(child, that.id + '_' + (stepIndex + 1) + '_line');
                            if (!_dom.hasClass(hline, 'bs-none'))
                                _dom.addClass(hline, 'bs-none');
                        }
                        if (medium) {
                            switch (step.status) {
                                case 'A':
                                    _dom.removeClass(label, 'bs-none');
                                    break;
                                case 'V':
                                    var nextStep = that._steps[stepIndex + 1];
                                    if (nextStep && nextStep.status === 'A')
                                        _dom.removeClass(label, 'bs-none');
                                    else if (!_dom.hasClass(label, 'bs-none'))
                                        _dom.addClass(label, 'bs-none');
                                    break;
                                case 'N':
                                    var prevStep = that._steps[stepIndex - 1];
                                    if (prevStep && prevStep.status === 'A') {
                                        _dom.removeClass(label, 'bs-none');
                                    }
                                    else if (!_dom.hasClass(label, 'bs-none'))
                                        _dom.addClass(label, 'bs-none');
                                    break;
                            }
                        }
                        else if (min) {
                            if (step.status === 'A')
                                _dom.removeClass(label, 'bs-none');
                            else if (!_dom.hasClass(label, 'bs-none'))
                                _dom.addClass(label, 'bs-none');
                        }
                        else {
                            _dom.removeClass(label, 'bs-none');
                        }
                        _dom.removeClass(child, 'bs-none');
                    });
                }
                else {
                    that._steps.forEach(function (step, stepIndex) {
                        var child = parent.childNodes[stepIndex];
                        var label = _dom.find(child, that.id + '_' + (stepIndex + 1) + '_title');
                        if (step.status === 'A') {
                            var hline = _dom.find(child, that.id + '_' + (stepIndex + 1) + '_line');
                            if (stepIndex === stepCount - 1)
                                _dom.removeClass(hline, 'bs-none');
                            hline.style.width = Math.max(0, width - step.width + that._hlineWidth) + 'px';
                            _dom.removeClass(label, 'bs-none');
                            _dom.removeClass(child, 'bs-none');
                        }
                        else if (!_dom.hasClass(child, 'bs-none'))
                            _dom.addClass(child, 'bs-none');
                    });
                }
            };
            Steppers.prototype.resize = function () {
                var that = this;
                var e = that.$element.get(0);
                var rootParent = _dom.find(e, that.id + '_root');
                var parent = _dom.find(e, that.id + '_parent');
                var ci = that.$schema.enum.indexOf(that.state.value);
                var nextVisible = that._step !== 0 && (ci + 1 < that.$schema.enum.length);
                var prevVisible = that._step !== 0 && ci > 0;
                var next = _dom.find(e, that.id + '_next');
                var prev = _dom.find(e, that.id + '_prev');
                if (nextVisible)
                    _dom.removeClass(next, _arrowHiddenClass);
                else if (!_dom.hasClass(next, _arrowHiddenClass))
                    _dom.addClass(next, _arrowHiddenClass);
                if (prevVisible)
                    _dom.removeClass(prev, _arrowHiddenClass);
                else if (!_dom.hasClass(prev, _arrowHiddenClass))
                    _dom.addClass(prev, _arrowHiddenClass);
                var width = _dom.position(rootParent, null).width;
                if (!width)
                    return;
                if (!that._measured) {
                    window.setTimeout(function () {
                        that._measure(width);
                    }, 10);
                }
                else {
                    that._resizeTo(width);
                }
            };
            Steppers.prototype.render = function ($parent) {
                var that = this;
                var opts = that._initOptions(_uiutils.utils.defaultOptions);
                if (!that.$element) {
                    that.$element = $(_createContainer(that.id, that.options.design));
                    that._createSteps();
                }
                that.setHidden(that.$element.get(0));
                that.appendElement($parent, opts);
                return that.$element;
            };
            return Steppers;
        }(Phoenix.ui.AbsField));
        _ui.registerControl(Steppers, "*", true, "steppers");
    })(wizard = Phoenix.wizard || (Phoenix.wizard = {}));
})(Phoenix || (Phoenix = {}));
/// <reference path="../../core/core-refs.ts" />
/// <reference path="./schema.data.ts" />
/// <reference path="./controls/absfield.control.ts" />
var Phoenix;
(function (Phoenix) {
    var _render = Phoenix.render, _ui = Phoenix.ui, _observable = Phoenix.Observable, _sutils = Phoenix.Observable.SchemaUtils;
    var uiregister;
    (function (uiregister) {
        var _controlFactory = function (fd, schema, lookup) {
            if (_sutils.isLink(fd.$bind)) {
                return _ui.getRegisteredLinkControl(fd.$widget);
            }
            var meta = _sutils.isMeta(fd.$bind);
            if (meta) {
                return _ui.getRegisteredControl('meta', false, meta.widget, '', {});
            }
            if (!schema)
                return null;
            var options;
            if (fd.$readOnly) {
                options = options || {};
                options.readOnly = true;
            }
            if (lookup) {
                options = options || {};
                options.lookup = true;
            }
            return _ui.getRegisteredControl(schema.type, schema.enum ? true : false, fd.$widget, schema.format, options);
        };
        _render.register("javascript", 'field.control', _controlFactory);
        _render.register("angular", 'field.control', _controlFactory);
    })(uiregister || (uiregister = {}));
})(Phoenix || (Phoenix = {}));
/// <reference path="../core/core-refs.ts" />
/// <reference path="../ui/form/modalform.control.ts" />
var Phoenix;
(function (Phoenix) {
    var _p = Phoenix, _locale = _p.locale, _ui = _p.ui, _utils = _p.utils, schema = {
        type: "object",
        properties: {
            message: {
                type: "string"
            }
        }
    }, layout = {
        name: "alert",
        $type: "block",
        $items: [{ $bind: "message", $readOnly: true, options: { $expression: "{{message}}" } }]
    };
    var _alert = function (title, message, after) {
        title = title || _locale.ui.Info;
        var opt = {
            title: title,
            noClose: true,
            buttons: [
                {
                    type: "primary",
                    title: _locale.ui.Ok,
                    name: "ok"
                }
            ]
        };
        var ldata = { message: message };
        _ui.OpenModalForm(opt, layout, schema, ldata, null, function (modal, action, data, formcontrol) {
            if (action.operation === "modal-action") {
                switch (action.property) {
                    case "ok":
                        modal.close();
                        if (after)
                            after();
                        break;
                }
            }
        });
    };
    _utils.alert = function (title, message, after) {
        _alert(title, message, after);
    };
})(Phoenix || (Phoenix = {}));
/// <reference path="../core/core-refs.ts" />
/// <reference path="../ui/form/modalform.control.ts" />
/// <reference path="../ui/datasets-plugin.ts" />
var Phoenix;
(function (Phoenix) {
    var _p = Phoenix, _locale = _p.locale, _utils = _p.utils, _external = _p.external, _application = _p.application, _dsPlugin = _p.DatasetPlugin, _dom = _p.dom, _ui = _p.ui;
    var layoutPassword = {
        "name": "form",
        "$type": "block",
        "$items": [
            {
                "$bind": "oldPwd"
            },
            {
                "$bind": "newPwd"
            },
            {
                "$bind": "$$newPwd"
            }
        ]
    };
    var _changePasswordHandler = function (after) {
        var schemaPassword = {
            "type": "object",
            "properties": {
                "oldPwd": { "title": _locale.ui.password.oldPassword, "type": "string", "format": "password", "capabilities": { noConfirming: true } },
                "newPwd": { "title": _locale.ui.password.newPassword, "type": "string", "format": "password", "minLength": 8 }
            },
            "states": {
                "oldPwd": { "isMandatory": true },
                "newPwd": { "isMandatory": true }
            }
        };
        var fo = { "title": _locale.ui.password.change, "buttons": [{ "pattern": "validate" }] };
        _ui.OpenModalForm(fo, layoutPassword, schemaPassword, {}, {}, function (form, action, model, formControl) {
            switch (action.property) {
                case "validate":
                    if (!model.validate())
                        return;
                    var result = {};
                    var ds = _application.configuration && _application.configuration.application &&
                        _application.configuration.application.authentication ? _application.configuration.application.authentication.changePasswordDs : null;
                    if (!ds) {
                        form.close();
                        return;
                    }
                    _dom.processing(true);
                    var toSend = {
                        oldPwd: model.oldPwd,
                        newPwd: model.newPwd
                    };
                    ds.name = "data";
                    _dsPlugin.executeDatasets([ds], toSend, result, [], function (sended, ex) {
                        if (!ex) {
                            _dom.processing(false);
                            form.close();
                            if (after)
                                after();
                        }
                        else {
                            model.addAjaxException(ex);
                            _dom.processing(false);
                        }
                    });
                    break;
            }
        });
    };
    _external.changePasswordHandler = _changePasswordHandler;
})(Phoenix || (Phoenix = {}));
/// <reference path="../core/core-refs.ts" />
/// <reference path="../ui/form/modalform.control.ts" />
var Phoenix;
(function (Phoenix) {
    var _p = Phoenix, _locale = _p.locale, _ui = _p.ui, _utils = _p.utils, schema = {
        type: "object",
        properties: {
            message: {
                type: "string"
            }
        }
    }, layout = {
        name: "confirm",
        $type: "block",
        $items: [{ $bind: "message", $readOnly: true, options: { $expression: "{{message}}" } }]
    };
    var _confirm = function (title, message, onsuccess, oncancel) {
        title = title || _locale.ui.Warning;
        var opt = {
            title: title,
            noClose: true,
            buttons: [
                {
                    type: "default",
                    title: _locale.ui.No,
                    name: "no"
                },
                {
                    type: "primary",
                    title: _locale.ui.Yes,
                    name: "yes"
                }
            ]
        };
        var ldata = { message: message };
        _ui.OpenModalForm(opt, layout, schema, ldata, null, function (modal, action, data, formcontrol) {
            if (action.operation === "modal-action") {
                switch (action.property) {
                    case "yes":
                        modal.close();
                        if (onsuccess)
                            onsuccess();
                        break;
                    case "no":
                        modal.close();
                        if (oncancel)
                            oncancel();
                        break;
                }
            }
        });
    };
    Phoenix.confirmDlg = _confirm;
    _utils.confirm = function (title, message, success, cancel) {
        _confirm(title, message, success, cancel);
    };
})(Phoenix || (Phoenix = {}));
/// <reference path="../core/core-refs.ts" />
var Phoenix;
(function (Phoenix) {
    var ui;
    (function (ui) {
        var _p = Phoenix, _dom = _p.dom, _link = _p.link, _utils = _p.utils, _application = _p.application, _ulocale = _p.ulocale, _locale = _p.locale;
        var _createImage = function (options) {
            var _bootstrap4 = _p.bootstrap4;
            var html = [];
            var imgCss = ['bs-relative bs-image-mi-image'];
            imgCss.push(_bootstrap4 ? 'img-fluid' : 'img-responsive');
            html.push('<div id="{0}" class="bs-image-mi bs-cursor-d">');
            html.push('<div class="bs-image-mi-border"');
            if (options.link)
                html.push('href="click://navigate"');
            html.push('>');
            var styles = ['max-width:' + options.maxWidth + 'px;'];
            html.push('<img id="{0}_img" class="');
            html.push(imgCss.join(' '));
            html.push('" src="' + options.imageSrc + '"');
            if (styles.length)
                html.push(' style="' + styles.join('') + '"');
            html.push(' />');
            html.push('<span class="bs-image-mi-title">' + options.title + '</span>');
            html.push('</div>');
            html.push('</div>');
            return html.join('');
        };
        var ImageMenuItem = /** @class */ (function () {
            function ImageMenuItem(data, options) {
                var that = this;
                that.$id = _utils.allocID();
                options.maxWidth = options.maxWidth || 128;
                that._options = options;
            }
            ImageMenuItem.prototype._setEvents = function () {
                var that = this;
                if (that.$element) {
                    if (that._options.authoring)
                        return;
                    var e = that.$element.get(0);
                    that.$element.on('click', function (event) {
                        var c = _link.isCustomLink(e, event);
                        if (c && c.protocol === "click") {
                            var link_3 = that._options.link;
                            var ctx = _link.context();
                            if (typeof link_3 === 'string') {
                                if (that.module && that.module.links && that.module.links[link_3])
                                    _link.execLink(that.module.links[link_3], ctx, null);
                                else
                                    _link.execLink({ $page: link_3 }, ctx, null);
                            }
                            else if (link_3.$page) {
                                _link.execLink(link_3, ctx, null);
                            }
                        }
                    });
                }
            };
            ImageMenuItem.prototype._removeEvents = function () {
                var that = this;
                if (that._options.authoring)
                    return;
                if (that.$element)
                    that.$element.off('click');
            };
            ImageMenuItem.prototype.render = function ($parent) {
                var that = this;
                if (!that.$element) {
                    that.$element = $(_utils.format(_createImage(that._options), that.$id));
                    that._setEvents();
                }
                if ($parent) {
                    if (that._options.replaceParent)
                        $parent.replaceWith(that.$element);
                    else
                        $parent.append(that.$element);
                }
            };
            ImageMenuItem.prototype.destroy = function () {
                var that = this;
                that.module = null;
                that._removeEvents();
                that.$element = null;
                that._options = null;
            };
            return ImageMenuItem;
        }());
        ui.ImageMenuItem = ImageMenuItem;
        ;
    })(ui = Phoenix.ui || (Phoenix.ui = {}));
})(Phoenix || (Phoenix = {}));
/// <reference path="../core/core-refs.ts" />
/// <reference path="../data/odata-provider.ts" />
var Phoenix;
(function (Phoenix) {
    var data;
    (function (data) {
        var _p = Phoenix, _data = _p.data, _utils = _p.utils;
        var OdataEnumManager = /** @class */ (function () {
            function OdataEnumManager(moduleName, entity, enumTypeField, enumCodeField, enumTitleField, enumOrderByField, fields) {
                var that = this;
                that._enums = {};
                that._entity = entity;
                that._module = moduleName;
                that._typeField = enumTypeField;
                that._codeField = enumCodeField;
                that._titleField = enumTitleField;
                that._orderByField = enumOrderByField;
                that._fields = fields;
            }
            OdataEnumManager.prototype.promise = function (enums, enumType) {
                var res = {};
                var missedEnums = [];
                var that = this;
                var odataFilter = [];
                Object.keys(enums).forEach(function (enumName) {
                    var ce = enums[enumName];
                    if (!that._enums[enumName]) {
                        missedEnums.push({ name: enumName, config: ce });
                        var tff = that._typeField + ' eq \'' + enumName + '\'';
                        if (ce.filter)
                            tff = '(' + tff + ' and ' + ce.filter + ')';
                        odataFilter.push(tff);
                    }
                    else {
                        res[enumName] = that._enums[enumName];
                    }
                });
                if (!missedEnums.length)
                    return new _utils.Promise(function (resolve, reject) {
                        resolve({ type: enumType, enums: res });
                    });
                var params = {
                    "$top": 1000,
                    "nocount": true,
                    "$entity": that._entity,
                    "$module": that._module,
                    "$filter": odataFilter.join(' or '),
                    "$orderby": that._typeField + "," + that._orderByField
                };
                return _data.odata.getRessources(params, function (ldata) {
                    ldata.documents && ldata.documents.forEach(function (item) {
                        var code = item[that._codeField];
                        var title = item[that._titleField];
                        var type = item[that._typeField];
                        if (!res[type]) {
                            res[type] = { enum: [], enumNames: [] };
                            that._enums[type] = res[type];
                        }
                        if (that._fields) {
                            res[type].fields = res[type].fields || [];
                            var ff_1 = [];
                            var fv_1 = {};
                            that._fields.forEach(function (fn) {
                                if (item[fn])
                                    ff_1.push(item[fn]);
                                fv_1[fn] = item[fn];
                            });
                            res[type].fields.push(fv_1);
                            if (ff_1.length) {
                                var fn = ff_1.join('$');
                                res[type].filters = res[type].filters || {};
                                res[type].filters[fn] = res[type].filters[fn] || [];
                                res[type].filters[fn].push(code);
                            }
                        }
                        res[type].enum.push(code);
                        res[type].enumNames.push(title);
                    });
                    return { type: enumType, enums: res };
                });
            };
            return OdataEnumManager;
        }());
        data.OdataEnumManager = OdataEnumManager;
    })(data = Phoenix.data || (Phoenix.data = {}));
})(Phoenix || (Phoenix = {}));
/// <reference path="../core/core-refs.ts" />
/// <reference path="../core/modules/locale.ts" />
/// <reference path="../ui/form/modalform.control.ts" />
var Phoenix;
(function (Phoenix) {
    var _p = Phoenix, _locale = _p.locale, _utils = _p.utils, _ui = _p.ui, schema = {
        type: "object",
        properties: {
            value: {
                type: "string"
            }
        }
    }, layout = {
        name: "prompt",
        $type: "block",
        $items: [{ $bind: "value", options: { titleIsHidden: true } }]
    };
    var _prompt = function (title, defaultValue, onsuccess) {
        title = title || _locale.ui.Warning;
        var opt = {
            title: title,
            buttons: [
                {
                    type: "primary",
                    title: _locale.ui.Ok,
                    name: "ok"
                }
            ]
        };
        var ldata = { value: defaultValue || '' };
        _ui.OpenModalForm(opt, layout, schema, ldata, null, function (modal, action, data, formcontrol) {
            if (action.operation === "modal-action") {
                switch (action.property) {
                    case "ok":
                        var nv = data.value;
                        modal.close();
                        if (onsuccess)
                            onsuccess(nv);
                        break;
                }
            }
        });
    };
    _utils.prompt = function (title, defaultValue, success) {
        _prompt(title, defaultValue, success);
    };
})(Phoenix || (Phoenix = {}));
/// <reference path="../core/core-refs.ts" />
var Phoenix;
(function (Phoenix) {
    var _p = Phoenix, _application = Phoenix.application, _external = Phoenix.external, _ajax = Phoenix.ajax, _utils = Phoenix.utils;
    var _defRuleLoader = function (names) {
        var cfg = _application.configuration;
        if (cfg && cfg.rules && cfg.rules.odataEntity) {
            var uri = cfg.rules.odataEntity + '?$filter=' + encodeURIComponent('clientSide eq \'true\'') + '&$expand=' +
                encodeURIComponent('entities($filter=entity in (' + names.map(function (cn) { return '\'' + cn + '\''; }).join(',') + '))');
            var opts = _ajax.getDefaultAjaxOptions(null);
            return _ajax.get(uri, opts, function (data) {
                return data.value;
            });
        }
        else
            return _utils.Promise.resolve([]);
    };
    _external.ruleLoaderHandler = _defRuleLoader;
})(Phoenix || (Phoenix = {}));
/// <reference path="../core/core-refs.ts" />
var Phoenix;
(function (Phoenix) {
    var _p = Phoenix, _autoclose = Phoenix.autoclose, _external = Phoenix.external, _ui = Phoenix.ui;
    var _showRules = function (rules) {
        var opts = {
            name: {
                name: 'rule-list-viewer',
                form: true,
                $type: 'block',
                $items: [
                    {
                        $type: 'block',
                        $title: {
                            value: "Rules",
                            size: 4
                        },
                        $items: [
                            {
                                $bind: 'rules',
                                $widget: 'basicgrid',
                                options: {
                                    border: true,
                                    height: 400,
                                    scrolling: {
                                        horizontal: true,
                                        vertical: true,
                                    },
                                    columns: [
                                        {
                                            $bind: "ruleType",
                                            options: { width: 70 }
                                        },
                                        {
                                            $bind: "name",
                                            options: { width: 100 }
                                        },
                                        {
                                            $bind: "description",
                                            options: { width: 150 }
                                        },
                                        {
                                            $bind: "expression",
                                            options: { width: 200 }
                                        }
                                    ]
                                }
                            }
                        ]
                    }
                ]
            },
            meta: {
                type: 'object',
                properties: {
                    rules: {
                        type: 'array',
                        items: {
                            type: 'object',
                            properties: {
                                name: {
                                    type: 'string',
                                    title: 'Name'
                                },
                                description: {
                                    type: 'string',
                                    title: 'Description'
                                },
                                ruleType: {
                                    type: 'string',
                                    title: 'Type'
                                },
                                expression: {
                                    type: 'string',
                                    title: 'Expression'
                                }
                            }
                        }
                    }
                }
            },
            controller: {
                onModelChanged: function () {
                }
            },
            autoClose: {
                align: _autoclose.SCREEN_CENTER,
                minWidth: 300,
                showCloseButton: true
            },
            options: {},
        };
        _ui.showAutoCloseForm(opts, { rules: rules }, null);
    };
    _external.ruleViewer = _showRules;
})(Phoenix || (Phoenix = {}));
/// <reference path="../core/core-refs.ts" />
/// <reference path="../data/datasets.ts" />
/// <reference path="../ui/form/schema.data.ts" />
var Phoenix;
(function (Phoenix) {
    var Data;
    (function (Data) {
        var _p = Phoenix, _ulocale = _p.ulocale, _application = _p.application, _ajax = _p.ajax, _data = _p.data, _utils = _p.utils, _su = _p.Observable.SchemaUtils, _dom = _p.dom, _schema = {
            getRessources: function (schemaName, ondata) {
                var _after = function (cd) {
                    if (ondata)
                        cd = ondata(cd);
                    return cd;
                };
                var config = _application.config(_application.name);
                if (!config)
                    throw "Application configuration not found.";
                var lurl = config.current.prototypes + '/' + schemaName;
                var p1 = _ajax.get(lurl, {}, function (ldata) {
                    return ldata;
                });
                return new _utils.Promise(function (resolve, reject) {
                    p1.then(function (schema) {
                        _dom.processing(true);
                        _su.loadEnumsPromise(schema).then(function (schema) {
                            _dom.processing(false);
                            resolve(_after(schema));
                        }).catch(function (ex) {
                            _dom.processing(false);
                            reject(ex);
                        });
                    }).catch(function (ex) {
                        reject(ex);
                    });
                });
            }
        }, _execLoadSchema = function (config, lurl, context, callerObject) {
            return _schema.getRessources(config.$params.$url, function (ldata) {
                return ldata;
            });
        };
        _data.registerDataProvider("form-meta", _execLoadSchema);
    })(Data = Phoenix.Data || (Phoenix.Data = {}));
})(Phoenix || (Phoenix = {}));
/// <reference path="../core/core-refs.ts" />
var Phoenix;
(function (Phoenix) {
    var iframe;
    (function (iframe) {
        var _p = Phoenix, _dom = _p.dom, _utils = _p.utils, _locale = _p.locale;
        var IFrame = /** @class */ (function () {
            function IFrame(options) {
                var that = this, defOptions = {
                    src: 'https://www.google.com'
                };
                that._options = $.extend(defOptions, options || {});
            }
            IFrame.prototype._setEvents = function () {
                var that = this;
                if (that.$element) {
                    var anyElement = that.$element;
                    if (anyElement.iFrameResize)
                        anyElement.iFrameResize(that._options);
                }
            };
            IFrame.prototype._removeEvents = function () {
            };
            IFrame.prototype.render = function ($parent) {
                var that = this;
                if (!that.$element) {
                    that.$element = $('<iframe src="' + that._options.src + '" scrolling="no" width="100%" frameBorder="0" border="0"></iframe>');
                    that._setEvents();
                }
                if ($parent) {
                    if (that._options.replaceParent)
                        $parent.replaceWith(that.$element);
                    else
                        $parent.append(that.$element);
                }
            };
            IFrame.prototype.destroy = function () {
                var that = this;
                that._removeEvents();
                that.$element = null;
                that._options = null;
            };
            return IFrame;
        }());
        iframe.IFrame = IFrame;
        ;
    })(iframe = Phoenix.iframe || (Phoenix.iframe = {}));
})(Phoenix || (Phoenix = {}));
var Phoenix;
(function (Phoenix) {
    var ui;
    (function (ui) {
        var _ulocale = Phoenix.ulocale, _utils = Phoenix.utils, _ajax = Phoenix.ajax, _dom = Phoenix.dom, _link = Phoenix.link;
        var RenderFiltreExpress = /** @class */ (function () {
            function RenderFiltreExpress(fields, callback, options) {
                var that = this;
                that._fieldList = fields || [];
                that._oldFilter = [];
                that._cb = callback || null;
                that._options = options || {};
                that._nodeMain = $("<div class='form-inline bs-filterexpress' id='" + that._options.id + "'></div>");
            }
            Object.defineProperty(RenderFiltreExpress.prototype, "fields", {
                get: function () {
                    return this._fieldList;
                },
                set: function (value) {
                    var that = this;
                    that._fieldList = value && Array.isArray(value) && value.length ? value : that._fieldList;
                    that.renderFieldsList();
                    that.renderSelectedFields();
                },
                enumerable: true,
                configurable: true
            });
            RenderFiltreExpress.prototype._getFieldByCode = function (code) {
                var that = this;
                var result = null;
                that._fieldList.forEach(function (field) {
                    if (field.code === code)
                        result = field;
                });
                return result;
            };
            RenderFiltreExpress.prototype._getEditField = function (field) {
                var textNode;
                switch (field.format) {
                    case FilterExpress.FORMAT_INTEGER:
                        textNode = "<input type='number' class='form-control' aria-label='...'>";
                        break;
                    case FilterExpress.FORMAT_STRING:
                        textNode = "<input type='text' class='form-control' aria-label='...'>";
                        break;
                    case FilterExpress.FORMAT_ENUM:
                        textNode = "<select class='form-control'>";
                        if (field.enum) {
                            field.enum.forEach(function (option, index) {
                                var elib = field.enumNames && field.enumNames[index] ? field.enumNames[index] : option;
                                textNode += "<option value='" + option + "'>" + elib + "</option>";
                            });
                        }
                        textNode += "</select>";
                        break;
                }
                return $(textNode);
            };
            RenderFiltreExpress.prototype._getOpField = function (field) {
                var op;
                switch (field.format) {
                    case FilterExpress.FORMAT_INTEGER:
                        op = FilterExpress.OP_INTEGER;
                        break;
                    case FilterExpress.FORMAT_STRING:
                        op = FilterExpress.OP_STRING;
                        break;
                    case FilterExpress.FORMAT_ENUM:
                        op = FilterExpress.OP_ENUM;
                        break;
                    default:
                        op = "";
                        break;
                }
                return op;
            };
            RenderFiltreExpress.prototype._checkFilter = function (filter) {
                if (!filter)
                    return true;
                if (filter.code == "")
                    return false;
                if (filter.op == "")
                    return false;
                return true;
            };
            RenderFiltreExpress.prototype.destroy = function () {
                // Events
                var that = this;
                that._nodeValidate.off("click");
                that._nodeMain.off("blur");
                //supprimer les events du render focus, keyup, change
                // Nodes
                // Variables
                that._fieldList = null;
                that._cb = null;
                //that._selectedField = null;
                that._nodeMain = null;
                that._nodeValidate = null;
                that._options = null;
            };
            RenderFiltreExpress.prototype.renderFieldsList = function () { };
            RenderFiltreExpress.prototype.renderSelectedFields = function () { };
            RenderFiltreExpress.prototype.validerFilter = function () { };
            ;
            RenderFiltreExpress.prototype.setEvents = function () {
                var that = this;
                that._nodeValidate.click(function () {
                    that.validerFilter();
                });
            };
            return RenderFiltreExpress;
        }());
        var RenderFiltreExpressOne = /** @class */ (function (_super) {
            __extends(RenderFiltreExpressOne, _super);
            function RenderFiltreExpressOne(fields, callback, options) {
                var _this = _super.call(this, fields, callback, options) || this;
                var that = _this;
                var _bootstrap4 = Phoenix.bootstrap4;
                var nodeGroup = $('<div class="input-group"></div>');
                var nodeGroupBtn = $('<div class="input-group-prepend"></div>');
                var txtNodeButton = '<button type="button" ';
                txtNodeButton += 'class="bs-button btn btn-' + _dom.bootstrapStyles(true).secondary + ' dropdown-toggle" data-toggle="dropdown" ';
                txtNodeButton += 'aria-haspopup="true" aria-expanded="false"></button>';
                var nodeSelectButton = $(txtNodeButton);
                that._nodeSelectButtonTxt = $('<span>' + FilterExpress.FIELD_SELECT_TEXT_DEFAULT + '</span>');
                var nodeSelectButtonGlyph = $('<span class="caret"></span>');
                that._nodeSelectList = _bootstrap4 ? $('<div class="dropdown-menu"></div>') : $('<ul class="dropdown-menu"></ul>');
                // Add editNode
                that._nodeEdit = $('<input type="text" class="form-control" aria-label="...">');
                // Add validateNode
                var nodeGroupBtnValidate = $("<div class='input-group-apppend'></div>");
                that._nodeValidate = $('<button class="bs-button btn btn-' + _dom.bootstrapStyles(true).secondary + '" type="button"><span class="' + _dom.iconClass(FilterExpress.VALIDATE_ICON_DEFAULT) + '"></span> ' + FilterExpress.VALIDATE_TEXT_DEFAULT + '</button>');
                // Append nodes to mainNode
                that._nodeMain.append(nodeGroup);
                nodeGroup.append(nodeGroupBtn);
                nodeGroup.append(that._nodeEdit);
                nodeGroup.append(nodeGroupBtnValidate);
                nodeGroupBtn.append(nodeSelectButton);
                nodeGroupBtn.append(that._nodeSelectList);
                nodeSelectButton.append(that._nodeSelectButtonTxt);
                nodeSelectButton.append(nodeSelectButtonGlyph);
                nodeGroupBtnValidate.append(that._nodeValidate);
                that.renderFieldsList();
                that.renderSelectedFields();
                that.setEvents();
                return _this;
            }
            RenderFiltreExpressOne.prototype.renderSelectedFields = function () {
                var that = this;
                var field = null;
                var _bootstrap4 = Phoenix.bootstrap4;
                that._fieldList.every(function (item) {
                    if (item.selected) {
                        field = item;
                        return false;
                    }
                    return true;
                });
                if (!field && that._fieldList && that._fieldList.length) {
                    that._fieldList[0].selected = true;
                    field = that._fieldList[0];
                }
                if (field) {
                    that._nodeSelectButtonTxt.text(field.lib + " ");
                    that._changeEditField(field);
                }
                // Style changed
                if (that._nodeSelectedLi)
                    that._nodeSelectedLi.removeClass("active");
                if (field) {
                    var liNode = _dom.query(that._nodeSelectList.get(0), (_bootstrap4 ? "a[data-value='" : "li[data-value='") + field.code + "']");
                    if (liNode) {
                        that._nodeSelectedLi = $(liNode);
                        that._nodeSelectedLi.addClass("active");
                    }
                }
            };
            RenderFiltreExpressOne.prototype._changeEditField = function (field) {
                var that = this;
                that._removeEvents();
                var oldHTMLNodeEdit;
                var newHTMLNodeEdit;
                newHTMLNodeEdit = that._getEditField(field).get(0);
                oldHTMLNodeEdit = that._nodeEdit.get(0);
                var parent = oldHTMLNodeEdit.parentNode;
                parent.replaceChild(newHTMLNodeEdit, oldHTMLNodeEdit);
                that._nodeEdit = $(newHTMLNodeEdit);
                newHTMLNodeEdit.focus();
                // events 
                if (field.enum) {
                    _dom.addClass(that._nodeValidate.get(0), "bs-none");
                    that._nodeEdit.change(function (e) {
                        if (e.target === that._nodeEdit.get(0))
                            that.validerFilter();
                    });
                    that._nodeEdit.get(0).style.borderTopRightRadius = "4px";
                    that._nodeEdit.get(0).style.borderBottomRightRadius = "4px";
                }
                else {
                    _dom.removeClass(that._nodeValidate.get(0), "bs-none");
                    // touch enter event
                    that._nodeEdit.keyup(function (e) {
                        if (e.keyCode == 13)
                            that.validerFilter();
                    });
                    // input focus event
                    that._nodeEdit.focus(function (e) {
                        that._nodeEdit.get(0).select();
                    });
                }
            };
            RenderFiltreExpressOne.prototype._removeEvents = function () {
                var that = this;
                that._nodeEdit.off("focus");
                that._nodeEdit.off("keyup");
                that._nodeEdit.off("change");
            };
            RenderFiltreExpressOne.prototype.renderFieldsList = function () {
                var that = this;
                var _bootstrap4 = Phoenix.bootstrap4;
                _dom.empty(that._nodeSelectList.get(0));
                that._fieldList.forEach(function (field) {
                    if (_bootstrap4)
                        that._nodeSelectList.append('<a class="bs-cursor-p dropdown-item" data-value="' + field.code + '">' + field.lib + '</a>');
                    else
                        that._nodeSelectList.append("<li class='bs-cursor-p' data-value='" + field.code + "'><a>" + field.lib + "</a></li>");
                });
            };
            RenderFiltreExpressOne.prototype.setEvents = function () {
                var that = this;
                _super.prototype.setEvents.call(this);
                // Change field event
                that._nodeSelectList.click(function (e) {
                    var targetParent = _dom.findByAttribute(e.target, that._nodeSelectList.get(0), "data-value");
                    if (!targetParent)
                        return;
                    var code = targetParent.attributes["data-value"].value;
                    if (!code)
                        return;
                    var field = that._getFieldByCode(code);
                    that._fieldList = that._fieldList.map(function (item) {
                        item.selected = (item.code == code);
                        return item;
                    });
                    if (field)
                        that.renderSelectedFields();
                });
                var blurevent = false;
                that._nodeMain.get(0).addEventListener("focusout", function (e) {
                    blurevent = true;
                    var parent = false;
                    var src = e["relatedTarget"];
                    if (src) {
                        var node = src;
                        do {
                            if (!node)
                                break;
                            if (_dom.hasClass(node, "bs-filterexpress")) {
                                parent = true;
                                break;
                            }
                            node = node.parentNode;
                        } while (node && !parent);
                    }
                    if (!parent && e.target == that._nodeEdit.get(0) && that._oldFilter && that._oldFilter.length && that._oldFilter[0]["code"]) {
                        var selected = that._getSelected();
                        if (selected && selected.code !== that._oldFilter[0]["code"]) {
                            that._fieldList = that._fieldList.map(function (item) {
                                item.selected = item.code == that._oldFilter[0]["code"];
                                return item;
                            });
                            that.renderSelectedFields();
                        }
                        that._nodeEdit.val(that._oldFilter[0]["values"][0]);
                    }
                }, true);
                that._nodeMain.get(0).addEventListener("blur", function (e) {
                    if (blurevent)
                        return;
                    var parent = false;
                    var src = e["relatedTarget"] || e["explicitOriginalTarget"];
                    if (src) {
                        var node = src;
                        do {
                            if (!node)
                                break;
                            if (_dom.hasClass(node, "bs-filterexpress")) {
                                parent = true;
                                break;
                            }
                            node = node.parentNode;
                        } while (node && !parent);
                    }
                    if (!parent && e.target == that._nodeEdit.get(0) && that._oldFilter && that._oldFilter.length && that._oldFilter[0]["code"]) {
                        var selected = that._getSelected();
                        if (selected && selected.code !== that._oldFilter[0]["code"]) {
                            that._fieldList = that._fieldList.map(function (item) {
                                item.selected = item.code == that._oldFilter[0]["code"];
                                return item;
                            });
                            that.renderSelectedFields();
                        }
                        that._nodeEdit.val(that._oldFilter[0]["values"][0]);
                    }
                }, true);
            };
            RenderFiltreExpressOne.prototype.validerFilter = function () {
                var that = this;
                if (!that._cb)
                    return;
                var selected = that._getSelected();
                var filter = that._nodeEdit.val() ? { code: selected.code, op: that._getOpField(selected), values: [that._nodeEdit.val()] } : null;
                if (filter && !that._checkFilter(filter))
                    filter = null;
                that._oldFilter.splice(0);
                if (filter)
                    that._oldFilter.push(filter);
                that._cb(filter);
            };
            RenderFiltreExpressOne.prototype._getSelected = function () {
                var that = this;
                var selected = null;
                that._fieldList.every(function (field) {
                    if (field.selected) {
                        selected = field;
                        return false;
                    }
                    return true;
                });
                return selected;
            };
            return RenderFiltreExpressOne;
        }(RenderFiltreExpress));
        var RenderFiltreExpressMultiple = /** @class */ (function (_super) {
            __extends(RenderFiltreExpressMultiple, _super);
            function RenderFiltreExpressMultiple(fields, callback, options) {
                var _this = _super.call(this, fields, callback, options) || this;
                var that = _this;
                var _bootstrap4 = Phoenix.bootstrap4;
                that.leftTools = $('<div class="input-group-prepend"></div>');
                that.rightTools = $('<div class="input-group-append"></div>');
                that._nodeValidate = $("<button class='btn btn-default' type='button'><span class='" + _dom.iconClass(FilterExpress.VALIDATE_ICON_DEFAULT) + "'></span> " + FilterExpress.VALIDATE_TEXT_DEFAULT + "</button>");
                var nodeSelectBtn = $('<button type="button" class="btn btn-default dropdown-toggle" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false"><span class="caret"></span>&nbsp;<span class="sr-only">Toggle Dropdown</span></button>');
                that._nodeSelectList = _bootstrap4 ? $('<div class="dropdown-menu dropdown-menu-left"></div>') : $('<ul class="dropdown-menu dropdown-menu-left"></ul>');
                that.rightTools.append(that._nodeValidate);
                that.leftTools.append(nodeSelectBtn);
                that.leftTools.append(that._nodeSelectList);
                that.renderFieldsList();
                that.renderSelectedFields();
                that.setEvents();
                return _this;
            }
            RenderFiltreExpressMultiple.prototype.renderSelectedFields = function () {
                var that = this;
                _dom.empty(that._nodeMain.get(0));
                that._fieldList.forEach(function (field) {
                    if (field.selected)
                        that.addField(field);
                });
                var lleftTools;
                var lrightTools;
                if (that._nodeMain.get(0).childNodes.length) {
                    lleftTools = $(that._nodeMain.get(0).firstChild);
                    lrightTools = $(that._nodeMain.get(0).lastChild);
                }
                else {
                    lleftTools = $('<div class="input-group"></div>');
                    lrightTools = lleftTools;
                    that._nodeMain.append(lleftTools);
                }
                lrightTools.append(that.rightTools);
                $(lleftTools.get(0).firstChild).before(that.leftTools);
            };
            RenderFiltreExpressMultiple.prototype.addField = function (field) {
                var that = this;
                field.composant = {
                    label: $('<span class="input-group-prepend" id="sizing-addon2"><span class="input-group-text">' + (field.lib || field.libelle || field.code) + '</span></span>'),
                    value: that._getEditField(field)
                };
                var container = $('<div class="input-group"></div>');
                container.append(field.composant.label);
                container.append(field.composant.value);
                that._nodeMain.append(container);
                field.selected = true;
            };
            RenderFiltreExpressMultiple.prototype.renderFieldsList = function () {
                var that = this;
                var _bootstrap4 = Phoenix.bootstrap4;
                _dom.empty(that._nodeSelectList.get(0));
                that._fieldList.forEach(function (field) {
                    if (_bootstrap4)
                        that._nodeSelectList.append('<a href="#" tabIndex="-1" class="bs-cursor-p dropdown-item" data-value="' + field.code + '"><input type="checkbox" ' + (field.selected ? "checked" : "") + ' />&nbsp;' + (field.lib || field.libelle || field.code) + '</a></li>');
                    else
                        that._nodeSelectList.append('<li class="bs-cursor-p" data-value="' + field.code + '"><a href="#" tabIndex="-1"><input type="checkbox" ' + (field.selected ? "checked" : "") + ' />&nbsp;' + (field.lib || field.libelle || field.code) + '</a></li>');
                });
            };
            RenderFiltreExpressMultiple.prototype.setEvents = function () {
                var that = this;
                _super.prototype.setEvents.call(this);
                that._nodeSelectList.on('click', function (event) {
                    var targetParent = _dom.findByAttribute(event.target, that._nodeSelectList.get(0), "data-value");
                    if (!targetParent)
                        return;
                    var target = $(targetParent);
                    var code = target.attr('data-value');
                    if (!code)
                        return;
                    var checkboxView = target.find('input');
                    var field = that._getFieldByCode(target.attr('data-value'));
                    if (field) {
                        if (field.selected) {
                            setTimeout(function () { checkboxView.prop('checked', false); }, 0);
                            field.selected = false;
                        }
                        else {
                            setTimeout(function () { checkboxView.prop('checked', true); }, 0);
                            field.selected = true;
                        }
                        that.renderSelectedFields();
                    }
                    $(event.target).blur();
                    return false;
                });
            };
            RenderFiltreExpressMultiple.prototype.validerFilter = function () {
                var that = this;
                if (!that._cb)
                    return;
                var filters = [];
                that._fieldList.forEach(function (field) {
                    if (!field.selected)
                        return;
                    var value = field.composant.value.val();
                    if (value) {
                        var filter_1 = { code: field.code, op: that._getOpField(field), values: [value] };
                        if (that._checkFilter(filter_1))
                            filters.push(filter_1);
                    }
                });
                that._oldFilter.splice(0);
                that._oldFilter = filters;
                that._cb(filters.length ? filters : null);
            };
            return RenderFiltreExpressMultiple;
        }(RenderFiltreExpress));
        var FilterExpress = /** @class */ (function () {
            /*******************************
            ************ METHODS
            *******************************/
            function FilterExpress(fieldList, cb, options) {
                var that = this;
                fieldList = that._completeFieldList($.extend(true, [], fieldList));
                that._cb = cb;
                var defaultOptions = {
                    id: _utils.allocID(),
                    multiple: false
                };
                that._options = $.extend(true, defaultOptions, options);
                if (that._options.multiple)
                    that._render = new RenderFiltreExpressMultiple(fieldList, that._cb, that._options);
                else
                    that._render = new RenderFiltreExpressOne(fieldList, that._cb, that._options);
            }
            Object.defineProperty(FilterExpress.prototype, "fields", {
                get: function () {
                    return this._render.fields;
                },
                set: function (values) {
                    var that = this;
                    that._render.fields = values && Array.isArray(values) ? that._completeFieldList($.extend(true, [], values)) : [];
                },
                enumerable: true,
                configurable: true
            });
            FilterExpress.prototype.destroy = function () {
                var that = this;
                // Events
                that._render.destroy();
                _dom.find(this._nodeParent[0], that._options.id).remove();
                that._render = null;
                that._cb = null;
                that._options = null;
            };
            // Called at instanciation of component
            FilterExpress.prototype.render = function ($parent) {
                var that = this;
                that._nodeParent = $parent;
                $parent.append(that._render._nodeMain);
            };
            FilterExpress.prototype._completeFieldList = function (fields) {
                fields.forEach(function (field) {
                    if (field.enum && Array.isArray(field.enum)) {
                        field.format = "enum";
                        field.enum.splice(0, 0, "");
                        if (field.enumNames)
                            field.enumNames.splice(0, 0, "");
                    }
                    else
                        field.format = field.type === "number" ? "integer" : field.type;
                });
                return fields;
            };
            // Constants
            FilterExpress.FIELD_SELECT_TEXT_DEFAULT = "Choix du champ";
            FilterExpress.VALIDATE_TEXT_DEFAULT = ""; // "Valider"
            FilterExpress.VALIDATE_ICON_DEFAULT = "search";
            FilterExpress.FORMAT_STRING = "string";
            FilterExpress.FORMAT_INTEGER = "integer";
            FilterExpress.FORMAT_ENUM = "enum";
            FilterExpress.OP_STRING = "like";
            FilterExpress.OP_INTEGER = "in";
            FilterExpress.OP_ENUM = "in";
            return FilterExpress;
        }());
        ui.FilterExpress = FilterExpress;
    })(ui = Phoenix.ui || (Phoenix.ui = {}));
})(Phoenix || (Phoenix = {}));
/// <reference path="../../js/core/core-refs.ts" />
var Phoenix;
(function (Phoenix) {
    var ui;
    (function (ui) {
        var dsPlugin = Phoenix.DatasetPlugin, _dom = Phoenix.dom;
        var DsLookup = /** @class */ (function () {
            function DsLookup(ds, options) {
                var that = this;
                that._init = false;
                that._options = options || {};
                that._notify = options.notify;
                that._ds = ds || {};
                that._ds.mapping = that._ds.mapping || {};
                that._ds.mapping.code = that._ds.mapping.code || "code";
                that._ds.mapping.libelle = that._ds.mapping.libelle || that._ds.mapping.lib || "lib";
                var $params = ds.data.$params || {};
                that._pageSize = $params.$top || null;
                that.searchText = null;
                that._count = 0;
                that._page = 0;
                that._items = [];
                that._initData();
            }
            DsLookup.prototype._initData = function () {
                var that = this, res = {};
                var _ds = that._ds.data || {};
                var ds = {
                    "name": "dataset",
                    "$type": _ds.$type || "odata",
                    "$params": {
                        "$entity": _ds.$params.$entity,
                        "$module": _ds.$params.$module,
                        "$top": 1
                    }
                };
                _dom.processing(true);
                dsPlugin.executeDatasets([ds], {}, res, null, function (sended, ex) {
                    _dom.processing(false);
                    if (!ex) {
                        that._init = true;
                        var data_4 = res.dataset;
                        that._count = data_4.count;
                        that._notify(null, { inited: true, updated: true });
                    }
                }, false);
            };
            Object.defineProperty(DsLookup.prototype, "items", {
                get: function () {
                    return this._items;
                },
                set: function (value) {
                    if (value) {
                        this._items = value;
                        this._notifyChange("items");
                    }
                },
                enumerable: true,
                configurable: true
            });
            DsLookup.prototype._notifyChange = function (propName) {
                var that = this;
                switch (propName) {
                    case "items":
                        that._notify(that.items, {});
                        break;
                }
            };
            DsLookup.prototype.getNbPages = function () {
                var that = this;
                return Math.ceil(that._count / that._pageSize);
            };
            DsLookup.prototype._getSkip = function (page) {
                var that = this;
                return that._pageSize ? page * that._pageSize : 0;
            };
            DsLookup.prototype._getPage = function (page, context) {
                var that = this;
                if (!that._init)
                    return;
                var ds = $.extend(true, {}, that._ds.data), res = {};
                ds.name = "dataset";
                ds.$params = ds.$params || {};
                ds.$params.$skip = that._getSkip(page);
                context = context || {};
                if (that.searchText)
                    context.$searchText = that.searchText;
                _dom.processing(true);
                dsPlugin.executeDatasets([ds], context, res, null, function (sended, ex) {
                    _dom.processing(false);
                    if (!ex) {
                        var data_5 = res.dataset;
                        if (data_5 && that._count != data_5.count) {
                            that._count = data_5.count;
                            that._page = 0;
                            that._notify(null, { updated: true });
                        }
                        if (data_5.documents) {
                            data_5.documents = data_5.documents.map(function (item) {
                                return { code: item[that._ds.mapping.code], libelle: item[that._ds.mapping.libelle] || item[that._ds.mapping.code] };
                            });
                            that.items = data_5.documents;
                        }
                    }
                }, false);
            };
            DsLookup.prototype.currentPage = function () {
                return this._page;
            };
            DsLookup.prototype.toPage = function (page) {
                var that = this;
                if (page >= 0 && page < that.getNbPages()) {
                    that._page = page;
                    that._getPage(page);
                }
            };
            DsLookup.prototype.nextPage = function () {
                var that = this;
                var page = that._page + 1;
                if (page < that.getNbPages()) {
                    that._page = page;
                    that._getPage(page);
                }
            };
            DsLookup.prototype.prevPage = function () {
                var that = this;
                var page = that._page - 1;
                if (page >= 0) {
                    that._page = page;
                    that._getPage(page);
                }
            };
            DsLookup.prototype.firthPage = function () {
                var that = this;
                that._page = 0;
                that._getPage(0);
            };
            DsLookup.prototype.lastPage = function () {
                var that = this;
                var page = that.getNbPages() - 1;
                that._page = page;
                that._getPage(page);
            };
            DsLookup.prototype.search = function (searchText) {
                var that = this;
                that.searchText = searchText ? searchText : null;
                if (that._ds.data.$params.$search)
                    that._getPage(0);
            };
            DsLookup.prototype.remove = function () {
            };
            return DsLookup;
        }());
        ui.DsLookup = DsLookup;
    })(ui = Phoenix.ui || (Phoenix.ui = {}));
})(Phoenix || (Phoenix = {}));
/// <reference path="../../js/core/core-refs.ts" />
/// <reference path="../../js/ui/form/form.control.ts" />
/// <reference path="../../js/ui/form/controls/absfield.control.ts" />
/// <reference path="./filter-lookup.ts" />
var Phoenix;
(function (Phoenix) {
    var ui;
    (function (ui) {
        var _ui = ui, _utils = Phoenix.utils, _filters = Phoenix.filters, _uiutils = Phoenix.uiutils, _locale = Phoenix.locale, _ulocale = Phoenix.ulocale, _dom = Phoenix.dom, _sutils = Phoenix.Observable.SchemaUtils;
        var OPERATORS = _filters.OPERATORS;
        var TYPES = _filters.TYPES;
        var ListeOperateurs = /** @class */ (function () {
            function ListeOperateurs() {
                this.liste = [];
            }
            ListeOperateurs.prototype.add = function (code, lib, isBinary, options) {
                var that = this;
                var op = {
                    code: code,
                    libelle: lib || code,
                    isBinary: isBinary,
                    options: options || {}
                };
                op.options.symbol = options.symbol || lib || code;
                if (isBinary) {
                    op.options.liaison = op.options.liaison || "et";
                }
                that.liste.push(op);
            };
            ListeOperateurs.prototype.gets = function () {
                return this.liste;
            };
            ListeOperateurs.prototype.get = function (code) {
                return this.liste.find(function (item) { return item.code == code; });
            };
            ListeOperateurs.prototype.remove = function (code) {
                var index = this.liste.findIndex(function (item) { return item.code == code; });
                if (index >= 0)
                    this.liste.splice(index, 1);
            };
            return ListeOperateurs;
        }());
        ui.ListeOperateurs = ListeOperateurs;
        var ListeChamps = /** @class */ (function () {
            function ListeChamps() {
                this.liste = [];
            }
            ListeChamps.prototype.add = function (code, lib, type, options) {
                var that = this;
                that.liste.push({
                    code: code,
                    libelle: lib || code,
                    type: type || "string",
                    options: options || {}
                });
            };
            ListeChamps.prototype.get = function (code) {
                return this.liste.find(function (item) { return item.code == code; });
            };
            ListeChamps.prototype.gets = function () {
                return this.liste;
            };
            ListeChamps.prototype.remove = function (code) {
                var index = this.liste.findIndex(function (item) { return item.code == code; });
                if (index >= 0)
                    this.liste.splice(index, 1);
            };
            return ListeChamps;
        }());
        ui.ListeChamps = ListeChamps;
        var Filter = /** @class */ (function () {
            function Filter(id, code, op, values) {
                var that = this;
                that.id = id;
                that.code = code;
                that.op = op;
                that.values = values || [];
            }
            Filter.prototype.getValues = function () {
                return this.values.map(function (item) {
                    if (item && item.code)
                        return item.code;
                    return item;
                });
            };
            Filter.prototype.getValueNames = function () {
                return this.values.map(function (item) {
                    if (item && item.lib)
                        return item.lib;
                    return item;
                });
            };
            return Filter;
        }());
        ui.Filter = Filter;
        var ListeFilters = /** @class */ (function () {
            function ListeFilters(filters) {
                this.liste = [];
                this.filters = filters;
                this.compteur = 0;
            }
            ListeFilters.prototype.add = function (champCode, opCode, values) {
                var that = this;
                var filter = new Filter(that.compteur++, champCode, opCode, values);
                that.liste.push(filter);
                that.filters.push(filter);
                return filter;
            };
            ListeFilters.prototype.add2 = function (champCode, opCode, values) {
                var that = this;
                var filter = new Filter(that.compteur++, champCode, opCode, values);
                that.liste.push(filter);
                return filter;
            };
            ListeFilters.prototype.set = function (id, data) {
                var that = this;
                var filter;
                var index = -1;
                that.liste.forEach(function (item, i) {
                    if (item.id == id) {
                        filter = item;
                        index = i;
                    }
                });
                if (filter) {
                    filter.op = data.op;
                    filter.values = data.values || [];
                }
                if (index >= 0 && index < that.filters.length) {
                    var f = that.filters.get(index);
                    if (f) {
                        f.code = filter.code;
                        f.op = filter.op;
                        f.values = filter.values;
                    }
                }
                return filter;
            };
            ListeFilters.prototype.get = function (id) {
                return this.liste.find(function (item) { return item.id == id; });
            };
            ListeFilters.prototype.getByIndex = function (index) {
                return this.liste[index];
            };
            ListeFilters.prototype.gets = function () {
                return this.liste;
            };
            ListeFilters.prototype.getsByChamp = function (codeChamp) {
                var filters = [];
                this.liste.forEach(function (item) {
                    if (item.code == codeChamp)
                        filters.push(item);
                });
                return filters;
            };
            ListeFilters.prototype.remove = function (id) {
                var that = this;
                var index = that.liste.findIndex(function (item) { return item.id == id; });
                if (index >= 0) {
                    that.liste.splice(index, 1);
                    that.filters.remove(that.filters.get(index));
                }
            };
            ListeFilters.prototype.removeAll = function () {
                var that = this;
                that.liste.splice(0);
                that.filters.forEach(function (item, index) { that.filters.remove(that.filters.get(index)); });
            };
            ListeFilters.prototype.removeAllByChamp = function (champCode) {
                var that = this;
                that.liste.forEach(function (item, index) {
                    if (item.code == champCode) {
                        that.liste.splice(index, 1);
                        that.filters.remove(that.filters.get(index));
                    }
                });
            };
            return ListeFilters;
        }());
        ui.ListeFilters = ListeFilters;
        var ListeTypes = /** @class */ (function () {
            function ListeTypes() {
                this.liste = [];
            }
            ListeTypes.prototype.addType = function (code, lib, operateurs) {
                this.liste.push({
                    code: code,
                    libelle: lib || code,
                    operateurs: operateurs || []
                });
            };
            ListeTypes.prototype.get = function (type) {
                return this.liste.find(function (item) { return item.code == type; });
            };
            ListeTypes.prototype.addOperateur = function (codeType, codeOp) {
                this.liste.find(function (item) { return item.code == codeType; }).operateurs.push(codeOp);
            };
            ListeTypes.prototype.getOperateurs = function (codeType) {
                return this.liste.find(function (item) { return item.code == codeType; }).operateurs;
            };
            return ListeTypes;
        }());
        ui.ListeTypes = ListeTypes;
        var FilterListView = /** @class */ (function () {
            function FilterListView(listeChamps, listeFilters, listeOperateurs, callBack, options, filter) {
                this.listeChamps = listeChamps;
                this.listeFilters = listeFilters;
                this.listeOperateurs = listeOperateurs;
                this.filter = filter;
                this.callBack = callBack;
                this.options = options || {};
                this.data = {};
                this.init();
            }
            FilterListView.prototype.init = function () {
                var that = this;
                that.model = {
                    type: "object",
                    properties: {
                        filters: {
                            type: "array",
                            items: {
                                type: "object",
                                properties: {
                                    code: { type: "string" },
                                    libelle: { type: "string" },
                                    selected: { type: "string" }
                                }
                            }
                        }
                    },
                    links: {
                        validate: {
                            title: _locale.ui.Validate,
                            isHidden: that.options.btnValidate != true
                        }
                    }
                };
                that.layout = {
                    name: "form",
                    $type: "block",
                    $items: [
                        {
                            $type: "block",
                            $items: [
                                {
                                    $type: "block",
                                    $items: [
                                        { $bind: "filters", "$widget": "tagview" }
                                    ]
                                },
                                {
                                    $type: "block",
                                    $inline: true,
                                    $items: [
                                        {
                                            $bind: "$links.validate",
                                            options: {
                                                type: "success",
                                                right: true
                                            }
                                        }
                                    ]
                                }
                            ],
                            $title: {
                                value: _locale.ui.selectedFilters,
                                size: 5,
                                style: ""
                            }
                        }
                    ]
                };
                that.data.filters = that.listeFilters.gets().map(function (item) {
                    var op = that.listeOperateurs.get(item.op);
                    var champ = that.listeChamps.get(item.code);
                    var lib = champ.libelle + " " + op.options.symbol + " ";
                    if (op.isBinary)
                        lib += item.values[0] + " " + op.options.liaison + " " + item.values[1];
                    else {
                        lib += item.getValueNames().join(", ");
                    }
                    return {
                        code: item.id,
                        libelle: lib,
                        selected: that.filter && that.filter.id == item.id ? true : false
                    };
                });
            };
            FilterListView.prototype.render = function (parent) {
                var that = this;
                if (parent)
                    _ui.OpenForm($(parent), that.layout, that.model, that.data, {}, function (action, data, formControl) {
                        switch (action.property) {
                            case "upd":
                                that.callBack("EDIT", { id: action.actionParams.code });
                                break;
                            case "remove":
                                that.callBack("REMOVE", { id: action.actionParams.code });
                                break;
                            case "$links.validate":
                                that.callBack("VALIDE", {});
                                break;
                        }
                    });
            };
            return FilterListView;
        }());
        var ValueModel = /** @class */ (function () {
            function ValueModel(type, op, options) {
                this.valueModel = null;
                var that = this;
                that.type = type;
                that.op = op;
                that.options = $.extend(true, {}, options);
                that.valueModel = that.getInstance();
            }
            ValueModel.prototype.getInstance = function () {
                var that = this;
                var options = that.addDefaultOptions(that.options);
                if (that.op.isBinary)
                    return new ModelTwoVal(options);
                else if (that.op.code === OPERATORS.empty || that.op.code === OPERATORS.nempty)
                    return new ModelVideVal(options);
                else if (that.type === "enum")
                    return new ModelEnumVal(options);
                else if (that.type === "lookup")
                    return new ModelLookupVal(options);
                else if ((that.op.code === OPERATORS.in || that.op.code === OPERATORS.nin) && that.type != "decimal" && that.type != "money" && that.type != "date" && that.type != "date-time")
                    return new ModelMultiVal(options);
                else
                    return new ModelOneVal(options);
            };
            ValueModel.prototype.init = function (after) {
                this.valueModel.init(after);
            };
            ValueModel.prototype.addDefaultOptions = function (options) {
                var that = this;
                switch (that.type) {
                    case "integer":
                        options.type = "number";
                        break;
                    case "decimal":
                        options.type = "number";
                        // "symbol": "jours",
                        // "decimals": 0
                        options.decimals = options.decimals || 5;
                        break;
                    case "money":
                        options.type = "number";
                        options.format = "money";
                        break;
                    case "date":
                        options.type = "string";
                        options.format = "date";
                        options.title = "Date";
                        break;
                    case "time":
                        options.type = "string";
                        options.format = "time";
                        options.title = "Time";
                        break;
                    case "date-time":
                        options.type = "string";
                        options.format = "date-time";
                        options.title = "Date";
                        break;
                    default:
                        options.type = that.type || "string";
                }
                return options;
            };
            ValueModel.prototype.getModel = function () {
                if (this.valueModel)
                    return this.valueModel.getModel();
                return null;
            };
            ValueModel.prototype.getLayout = function () {
                if (this.valueModel)
                    return this.valueModel.getLayout();
                return null;
            };
            ValueModel.prototype.getData = function () {
                if (this.valueModel)
                    return this.valueModel.getData();
                return null;
            };
            ValueModel.prototype.getValues = function () {
                if (this.valueModel)
                    return this.valueModel.getValues();
                return null;
            };
            ValueModel.prototype.setValues = function (data, $type) {
                if (this.valueModel)
                    return this.valueModel.setValues(data, $type);
                return null;
            };
            ValueModel.prototype.setValuesByFilter = function (data) {
                if (this.valueModel)
                    this.valueModel.setValuesByFilter(data);
            };
            return ValueModel;
        }());
        var ModelVal = /** @class */ (function () {
            function ModelVal(options) {
            }
            ModelVal.prototype.init = function (after) {
                if (after)
                    after();
            };
            ModelVal.prototype.getModel = function () {
                return this.model;
            };
            ModelVal.prototype.getLayout = function () {
                return this.layout;
            };
            ModelVal.prototype.getData = function () {
                return this.data;
            };
            ModelVal.prototype.getValues = function () { };
            ModelVal.prototype.setValues = function (data, type) { };
            ModelVal.prototype.setValuesByFilter = function (data) { };
            return ModelVal;
        }());
        var ModelVideVal = /** @class */ (function (_super) {
            __extends(ModelVideVal, _super);
            function ModelVideVal(options) {
                return _super.call(this, options) || this;
            }
            ModelVideVal.prototype.getValues = function () {
                return [""];
            };
            return ModelVideVal;
        }(ModelVal));
        var ModelOneVal = /** @class */ (function (_super) {
            __extends(ModelOneVal, _super);
            function ModelOneVal(options) {
                var _this = _super.call(this, options) || this;
                var that = _this;
                that.options = options || {};
                that.model = {
                    type: "object",
                    properties: {
                        value: {
                            title: that.options.title || "Valeur",
                            type: that.options.type || "string"
                        }
                    },
                    states: {
                        value: {
                            isMandatory: true
                        }
                    }
                };
                if (that.options.format)
                    that.model.properties.value.format = that.options.format;
                if (that.options.decimals)
                    that.model.properties.value.decimals = that.options.decimals;
                that.layout = {
                    name: "filter-value",
                    $type: "block",
                    $items: [
                        {
                            $items: [{ $bind: "value", options: { titleIsHidden: true, placeHolder: true } }],
                            $colSize: 12
                        }
                    ]
                };
                that.data = { value: null };
                return _this;
            }
            ModelOneVal.prototype.getValues = function () {
                if (this.data.value != null)
                    return [this.data.value];
                return null;
            };
            ModelOneVal.prototype.setValues = function (data) {
                this.data.value = data["value"];
            };
            ModelOneVal.prototype.setValuesByFilter = function (data) {
                this.data.value = data[0];
            };
            return ModelOneVal;
        }(ModelVal));
        var ModelTwoVal = /** @class */ (function (_super) {
            __extends(ModelTwoVal, _super);
            function ModelTwoVal(options) {
                var _this = _super.call(this, options) || this;
                var that = _this;
                that.options = options || {};
                that.model = {
                    type: "object",
                    properties: {
                        value1: {
                            title: (options.title || "Valeur") + " 1",
                            type: options.type || "string"
                        },
                        value2: {
                            title: (options.title || "Valeur") + " 2",
                            type: options.type || "string"
                        }
                    },
                    states: {
                        value1: {
                            isMandatory: true
                        },
                        value2: {
                            isMandatory: true
                        }
                    }
                };
                if (that.options.format) {
                    that.model.properties.value1.format = that.options.format;
                    that.model.properties.value2.format = that.options.format;
                }
                if (that.options.decimals) {
                    that.model.properties.value1.decimals = that.options.decimals;
                    that.model.properties.value2.decimals = that.options.decimals;
                }
                that.layout = {
                    name: "filter-value",
                    $type: "block",
                    $items: [
                        {
                            $type: "row",
                            $items: [
                                {
                                    $items: [{ $bind: "value1", options: { titleIsHidden: true, placeHolder: true } }],
                                    $colSize: 6
                                },
                                {
                                    $items: [{ $bind: "value2", options: { titleIsHidden: true, placeHolder: true } }],
                                    $colSize: 6
                                }
                            ]
                        }
                    ]
                };
                that.data = { value1: null, value2: null };
                return _this;
            }
            ModelTwoVal.prototype.getValues = function () {
                var that = this;
                if (that.data.value1 != null && that.data.value2 != null)
                    return [that.data.value1, that.data.value2];
                return null;
            };
            ModelTwoVal.prototype.setValues = function (data) {
                this.data.value1 = data["value1"];
                this.data.value2 = data["value2"];
            };
            ModelTwoVal.prototype.setValuesByFilter = function (data) {
                this.data.value1 = data[0];
                this.data.value2 = data[1];
            };
            return ModelTwoVal;
        }(ModelVal));
        var ModelMultiVal = /** @class */ (function (_super) {
            __extends(ModelMultiVal, _super);
            function ModelMultiVal(options) {
                var _this = _super.call(this, options) || this;
                var that = _this;
                that.options = options || {};
                that.model = {
                    type: "object",
                    properties: {
                        value: {
                            title: 'Valeur',
                            type: "string"
                        }
                    },
                    states: {
                        value: {
                            isMandatory: true
                        }
                    }
                };
                if (that.options.format)
                    that.model.properties.value.format = that.options.format;
                that.layout = {
                    name: "filter-value",
                    $type: "block",
                    $items: [
                        {
                            $items: [{ $bind: "value", options: { titleIsHidden: true, placeHolder: 'Une ou plusieurs valeurs (séparées par un ";" : val1;val2;...)' } }],
                            $colSize: 12
                        }
                    ]
                };
                that.data = { value: null };
                return _this;
            }
            ModelMultiVal.prototype.getValues = function () {
                var that = this;
                if (that.data.value == null)
                    return null;
                var vals = that.data.value.split(";");
                var vs = [];
                if (that.options.type == "number")
                    vals.forEach(function (item) {
                        var v = parseInt(item, 10);
                        if (!isNaN(v))
                            vs.push(v);
                    });
                else
                    vs = vals;
                return vs;
            };
            ModelMultiVal.prototype.setValues = function (data) {
                var that = this;
                if (!data["value"])
                    return;
                var values = data["value"].split(";");
                values = values.map(function (item) {
                    return item.replace(/\"/g, "");
                });
                var vals = [];
                values.forEach(function (item) {
                    if (that.options.type == "number") {
                        if ((new RegExp('^[0-9]+$')).test(item))
                            vals.push(item);
                    }
                    else
                        vals.push(item);
                });
                that.data.value = vals.join(";");
            };
            ModelMultiVal.prototype.setValuesByFilter = function (data) {
                this.data.value = data.join(";");
            };
            return ModelMultiVal;
        }(ModelVal));
        var ModelEnumVal = /** @class */ (function (_super) {
            __extends(ModelEnumVal, _super);
            function ModelEnumVal(options) {
                var _this = _super.call(this, options) || this;
                var that = _this;
                that.options = options || {};
                that.options.enumName = that.options.enumName || that.options.champName;
                that.model = {
                    type: "object",
                    properties: {
                        value: {
                            title: "List",
                            type: "array",
                            items: {
                                type: "string",
                                enums: {},
                                $enumref: "list"
                            }
                        }
                    },
                    states: {
                        value: {
                            isMandatory: true
                        }
                    }
                };
                that.model.properties.value.items.enums[that.options.enumName] = {
                    type: "default",
                    enum: [],
                    enumNames: []
                };
                that.model.properties.value.items.$enumref = that.options.enumName;
                that.layout = {
                    name: "filter-value",
                    $type: "block",
                    $items: [
                        {
                            $items: [{
                                    $bind: "value",
                                    $widget: "enums-list",
                                    options: {
                                        titleIsHidden: true
                                    }
                                }],
                            $colSize: 12
                        }
                    ]
                };
                that.options.enum && that.options.enum.forEach(function (item) {
                    that.model.properties.value.items.enums[that.options.enumName].enum.push(item.code);
                    that.model.properties.value.items.enums[that.options.enumName].enumNames.push(item.libelle || item.code);
                });
                that.data = { value: [] };
                return _this;
            }
            ModelEnumVal.prototype.getValues = function () {
                var that = this;
                if (that.data.value && that.data.value.length) {
                    return that.data.value.map(function (item) {
                        var elt = null;
                        that.options.enum.forEach(function (it, i) {
                            if (item == it.code) {
                                elt = it;
                                return false;
                            }
                        });
                        return { code: item, lib: elt.libelle || elt.lib || item };
                    });
                }
                return [];
            };
            ModelEnumVal.prototype.setValues = function (data) {
                this.data.value = data["value"];
            };
            ModelEnumVal.prototype.setValuesByFilter = function (data) {
                this.data.value = data.map(function (item) {
                    return item.code;
                });
            };
            return ModelEnumVal;
        }(ModelVal));
        var ModelLookupVal = /** @class */ (function (_super) {
            __extends(ModelLookupVal, _super);
            function ModelLookupVal(options) {
                var _this = _super.call(this, options) || this;
                var that = _this;
                that.options = options || {};
                that.model = {
                    type: "object",
                    properties: {
                        value: {
                            title: "List",
                            type: "array",
                            ds: that.options.lookupSchema || null,
                            items: {
                                type: "object",
                                properties: {
                                    code: {
                                        type: "string"
                                    },
                                    lib: {
                                        type: "string"
                                    }
                                }
                            }
                        }
                    },
                    states: {
                        value: {
                            isMandatory: true
                        }
                    }
                };
                that.layout = {
                    name: "filter-value",
                    $type: "block",
                    $items: [
                        {
                            $items: [{
                                    $bind: "value",
                                    $widget: "lookup-list",
                                    options: {
                                        titleIsHidden: true
                                    }
                                }],
                            $colSize: 12
                        }
                    ]
                };
                that.data = { value: [] };
                return _this;
            }
            ModelLookupVal.prototype.getValues = function () {
                var that = this;
                if (that.data.value && that.data.value.length)
                    return that.data.value;
                return [];
            };
            ModelLookupVal.prototype.setValues = function (data) {
                this.data.value = data["value"];
            };
            ModelLookupVal.prototype.setValuesByFilter = function (data) {
                this.data.value = data;
            };
            return ModelLookupVal;
        }(ModelVal));
        var FilterEditView = /** @class */ (function () {
            function FilterEditView(champ, listeFilters, listeOperateurs, listeTypes, callBack, filter, options) {
                this.champ = champ;
                this.filter = filter;
                this.listeFilters = listeFilters;
                this.listeOperateurs = listeOperateurs;
                this.listeTypes = listeTypes;
                this.callBack = callBack;
                this.options = options || {};
                this.data = { operateur: null, values: [] };
            }
            FilterEditView.prototype.renderOperateur = function () {
                var that = this;
                var model = {
                    type: "object",
                    properties: {
                        champ: {
                            title: "Filtre",
                            type: "string"
                        },
                        operateur: {
                            title: "Opérateur",
                            type: "string",
                            enum: [],
                            enumNames: []
                        }
                    },
                    states: {
                        champ: {
                            isReadOnly: true,
                            isHidden: that.options.showLabel == false
                        },
                        operateur: {
                            isHidden: that.options.showOperateur == false
                        }
                    }
                };
                var layout = {
                    name: "filter-operateur",
                    $type: "block",
                    $items: [
                        {
                            $type: "block",
                            $items: [
                                {
                                    $bind: "champ",
                                    $readOnly: true,
                                    options: {
                                        $expression: "{{champ}}"
                                    }
                                },
                                { $bind: "operateur", options: { titleIsHidden: true } }
                            ]
                        }
                    ]
                };
                var properties = model.properties;
                var states = model.states;
                // Champ
                that.data.champ = that.champ.libelle;
                // Opérateurs
                var unType = that.champ.options.format || that.champ.type;
                properties.operateur.enum = that.listeTypes.getOperateurs(unType);
                properties.operateur.enum.forEach(function (item) {
                    properties.operateur.enumNames.push(that.listeOperateurs.get(item).libelle);
                });
                if (that.filter)
                    that.data.operateur = that.filter.op;
                else
                    that.data.operateur = properties.operateur.enum[0];
                if (that.options.showLabel == false && that.options.showOperateur == false)
                    return;
                var parent = _dom.query(that.container, ".operateur");
                if (parent) {
                    var oldForm = _ui.formManager().formByName('filter-operateur');
                    _ui.removeForm(oldForm);
                    _ui.OpenForm($(parent), layout, model, that.data, {}, function (action, data, formControl) {
                        var model;
                        switch (action.property) {
                            case "operateur":
                                if (action.operation == "propchange") {
                                    var op = that.listeOperateurs.get(data.model().operateur);
                                    that.data.operateur = data.model().operateur;
                                    that.renderValue(op);
                                }
                                break;
                        }
                    });
                }
            };
            FilterEditView.prototype.renderValue = function (op) {
                var that = this;
                var parent = _dom.query(that.container, ".value");
                if (parent) {
                    var oldForm = _ui.formManager().formByName('filter-value');
                    _ui.removeForm(oldForm);
                    var options = that.champ.options || {};
                    options.champName = that.champ.code;
                    that.modelType = new ValueModel(that.champ.options.format || that.champ.type, op, options);
                    that.modelType && that.modelType.init(function () {
                        var model = that.modelType.getModel();
                        var layout = that.modelType.getLayout();
                        if (model && layout) {
                            if (that.filter)
                                that.modelType.setValuesByFilter(that.filter.values);
                            var ldata = that.modelType.getData();
                            _ui.OpenForm($(parent), layout, model, ldata, {}, function (action, data, formControl) {
                                switch (action.operation) {
                                    case "propchange":
                                        that.modelType.setValues(data.model());
                                        that.data.values = that.modelType.getValues();
                                        break;
                                    default:
                                        that.modelType.setValues(data.model());
                                        that.data.values = that.modelType.getValues();
                                        break;
                                }
                            });
                        }
                        else
                            that.data.values = that.modelType.getValues();
                    });
                }
            };
            FilterEditView.prototype.renderButton = function () {
                var that = this;
                var model = {
                    type: "object",
                    properties: {},
                    links: {
                        add: {
                            title: _locale.ui.Add
                        }
                    }
                };
                var layout = {
                    name: "filter-link",
                    $type: "block",
                    $items: [
                        {
                            $inline: true,
                            $items: [
                                {
                                    $bind: "$links.add",
                                    options: {
                                        type: "primary",
                                        icon: "plus",
                                        right: true
                                    }
                                }
                            ],
                            $colSize: 12
                        }
                    ]
                };
                var parent = _dom.query(that.container, ".link");
                if (parent) {
                    var oldForm = _ui.formManager().formByName('filter-link');
                    _ui.removeForm(oldForm);
                    _ui.OpenForm($(parent), layout, model, that.data, {}, function (action, data, formControl) {
                        switch (action.property) {
                            case "$links.add":
                                var fm = _ui.formManager();
                                var fvalue = fm.formByName('filter-value');
                                if (!data.validate() || (fvalue && !fvalue.$model.validate()))
                                    return;
                                var model_1 = data.model();
                                if (that.data.values && that.data.values.length) {
                                    that.callBack({ code: that.champ.code, op: that.data.operateur, values: that.data.values });
                                }
                                break;
                        }
                    });
                }
            };
            FilterEditView.prototype.render = function (parent) {
                var that = this;
                var _html = [
                    '<div>',
                    '<div class="operateur">',
                    '</div>',
                    '<div class="value">',
                    '</div>',
                    '<div class="link">',
                    '</div>',
                    '</div>'
                ];
                if (parent) {
                    that.container = parent;
                    _dom.empty(parent);
                    _dom.append(parent, $(_html.join("")).get(0));
                    that.renderOperateur();
                    that.renderValue(that.listeOperateurs.get(that.data.operateur));
                    that.renderButton();
                }
            };
            return FilterEditView;
        }());
        var RenderModel1 = /** @class */ (function () {
            function RenderModel1(listeChamps, listeChampsArbre, listeFilters, listeOperateurs, listeTypes, options) {
                this.listeChamps = listeChamps;
                this.listeChampsArbre = listeChampsArbre;
                this.listeFilters = listeFilters;
                this.listeOperateurs = listeOperateurs;
                this.listeTypes = listeTypes;
                this.options = options || {};
            }
            RenderModel1.prototype.createContainer = function () {
                var that = this;
                var _html = [
                    '<div class="row">',
                    '<div class="col-sm-5 bs-champ-list">',
                    '</div>',
                    '<div class="col-sm-7 filter-edit">',
                    '</div>',
                    '</div>',
                    '<div class="row">',
                    '<div class="col-sm-12 bs-filter-list">',
                    '</div>',
                    '</div>'
                ];
                that.container = document.createElement("div");
                _dom.addClass(that.container, "bs-filter-view");
                that.container.innerHTML = _html.join("");
                that.champListView = _dom.query(that.container, ".bs-champ-list");
                that.filterListView = _dom.query(that.container, ".bs-filter-list");
                that.filterEditView = _dom.query(that.container, ".filter-edit");
            };
            RenderModel1.prototype.render = function () {
                var that = this;
                that.createContainer();
                if (that.listeChamps.gets().length) {
                    that.showChampList();
                    that.selecteChamp(that, that.listeChamps.gets()[0].code);
                }
                return that.container;
            };
            RenderModel1.prototype.showChampList = function () {
                // let that = this;
                // let list = $('<div class="list-group"></div>').get(0);
                // list.addEventListener("click", function (event) {
                //     item = <HTMLLinkElement>event.target;
                //     if (item["href"]) {
                //         var href = _dom.attr(item, 'href');
                //         if (href === '#') {
                //             event.preventDefault();
                //             event.stopPropagation();
                //         }
                //     }
                //     let champCode = _dom.attr(item, "data-code");
                //     if (champCode)
                //         that.selecteChamp(that, champCode);
                // }, false);
                // let listHeightSize = 70 * (that.options.listSize || 7);
                // let containerScroll = $('<div style="overflow-y:auto;max-height:' + listHeightSize + 'px;"></div>').get(0);
                // _dom.append(containerScroll, list);
                // _dom.append(that.champListView, containerScroll);
                // let item = $('<a href="#" class="list-group-item"></a>').get(0);
                // that.listeChamps && that.listeChamps.gets().forEach(function (champ, key) {
                //     let itemClone = <HTMLLinkElement>item.cloneNode(true);
                //     _dom.attr(itemClone, "data-code", champ.code);
                //     _dom.text(itemClone, champ.libelle);
                //     _dom.append(list, itemClone);
                // });
                var that = this;
                that._multiSelectList = new ui.MultiSelectList(this.listeChampsArbre, { maxHeight: "auto" }, function (data) {
                    if (data && data.data.name)
                        that.selecteChamp(that, data.data.name);
                });
                var listHeightSize = 70 * (that.options.listSize || 7);
                var containerScroll = $('<div class="bs-field-list-border" style="max-height:' + listHeightSize + 'px;"></div>').get(0);
                that._multiSelectList.render(containerScroll);
                _dom.append(that.champListView, containerScroll);
            };
            RenderModel1.prototype.selecteChamp = function (that, codeChamp) {
                // let oldItem = _dom.query(that.champListView, ".active");
                // let newItem = _dom.query(that.champListView, 'a[data-code="' + codeChamp + '"]');
                // if (oldItem)
                //     _dom.removeClass(oldItem, "active");
                // if (newItem)
                //     _dom.addClass(newItem, "active");
                that._multiSelectList.addItem(codeChamp);
                that.updateFilter(that, codeChamp);
                var filters = that.listeFilters.getsByChamp(codeChamp);
                var filter = null;
                if (filters && filters.length)
                    filter = filters[0];
                that.showFilterList(that, filter);
            };
            RenderModel1.prototype.showFilterList = function (that, filter) {
                var editView = new FilterListView(that.listeChamps, that.listeFilters, that.listeOperateurs, function (action, data) {
                    if (action == "EDIT") {
                        var filter_2 = that.listeFilters.get(data.id);
                        if (filter_2)
                            that.selecteChamp(that, filter_2.code);
                    }
                    else if (action == "REMOVE")
                        that.removeFilter(that, data.id);
                    else if (action == "VALIDE")
                        that.valideFilters();
                }, that.options, filter);
                _dom.empty(that.filterListView);
                editView.render(that.filterListView);
            };
            RenderModel1.prototype.updateFilter = function (that, codeChamp) {
                var champ = that.listeChamps.get(codeChamp);
                var filters = that.listeFilters.getsByChamp(codeChamp);
                var filter = null;
                if (filters && filters.length)
                    filter = filters[0];
                var editView = new FilterEditView(champ, that.listeFilters, that.listeOperateurs, that.listeTypes, function (data) {
                    that.addFilter(that, data);
                }, filter, that.options);
                _dom.empty(that.filterEditView);
                editView.render(that.filterEditView);
            };
            RenderModel1.prototype.addFilter = function (that, data) {
                var filters = that.listeFilters.getsByChamp(data.code);
                var filter;
                if (!that.options.multiple && filters && filters.length)
                    filter = that.listeFilters.set(filters[0].id, data);
                else
                    filter = that.listeFilters.add(data.code, data.op, data.values);
                that.showFilterList(that, filter);
            };
            RenderModel1.prototype.removeFilter = function (that, codeFilter) {
                var codeChamp = that.listeFilters.get(codeFilter).code;
                that.listeFilters.remove(codeFilter);
                that.selecteChamp(that, codeChamp);
            };
            RenderModel1.prototype.valideFilters = function () { };
            return RenderModel1;
        }());
        var RenderModel2 = /** @class */ (function (_super) {
            __extends(RenderModel2, _super);
            function RenderModel2(listeChamps, listeChampsArbre, listeFilters, listeOperateurs, listeTypes, options, callback) {
                var _this = this;
                var defaultOptions = {
                    btnValidate: true
                };
                _this = _super.call(this, listeChamps, listeChampsArbre, listeFilters, listeOperateurs, listeTypes, $.extend(true, defaultOptions, options)) || this;
                _this._callback = callback;
                return _this;
            }
            RenderModel2.prototype.createContainer = function () {
                var that = this;
                var _bootstrap4 = Phoenix.bootstrap4;
                var _html = [
                    '<div class="row">',
                    '<div class="col' + (_bootstrap4 ? '' : '-xs') + '-12 bs-filter-list">',
                    '</div>',
                    '</div>',
                    '<div class="row">',
                    '<div class="col' + (_bootstrap4 ? '' : '-xs') + '-12">',
                    '<h5 class="bs-block-title" data-ignore="true">' + (that.options.title || "Filtre") + '</h5>',
                    '</div>',
                    '</div>',
                    '<div class="row">',
                    '<div class="col-sm-4 bs-champ-list">',
                    '</div>',
                    '<div class="col-sm-8 filter-edit">',
                    '</div>',
                    '</div>'
                ];
                that.container = document.createElement("div");
                _dom.addClass(that.container, "bs-filter-view");
                that.container.innerHTML = _html.join("");
                that.champListView = _dom.query(that.container, ".bs-champ-list");
                that.filterListView = _dom.query(that.container, ".bs-filter-list");
                that.filterEditView = _dom.query(that.container, ".filter-edit");
            };
            RenderModel2.prototype.valideFilters = function () {
                this._callback("VALIDE");
            };
            return RenderModel2;
        }(RenderModel1));
        var TagView = /** @class */ (function (_super) {
            __extends(TagView, _super);
            function TagView(fp, options, form) {
                var _this = _super.call(this, fp, options, form) || this;
                var that = _this;
                form.registerListenerFor(that.$bind + ".$item", that);
                _this._state();
                return _this;
            }
            TagView.prototype._state = function () {
                var that = this;
                that.state = that.state || {};
                var state = that.form.getState(that.$bind);
                Object.keys(state).forEach(function (pn) {
                    that.state[pn] = state[pn];
                });
                that.state.value = that.form.getValue(that.$bind);
            };
            TagView.prototype.click = function (event) {
                var that = this;
                var target = event.target;
                if (target.nodeName.toUpperCase() == "LI" || target.nodeName.toUpperCase() == "SPAN") {
                    var tag = target;
                    if (target.nodeName.toUpperCase() == "SPAN")
                        tag = _dom.parentByTag(that.$element.get(0), target, "LI");
                    var tagId_1 = -1;
                    if (tag)
                        tagId_1 = parseInt(_dom.attr(tag, "data-id"), 10);
                    if (tagId_1 < 0)
                        return;
                    tag = null;
                    var model_2 = null;
                    that.state.value.forEach(function (item, index) {
                        if (item.code == tagId_1) {
                            model_2 = item.model();
                            return false;
                        }
                    });
                    if (!model_2)
                        return;
                    var btnType = _dom.attr(target, "data-id");
                    if (btnType == "REMOVE")
                        that.form.execAction("remove", model_2);
                    else
                        that.form.execAction("upd", model_2);
                }
            };
            TagView.prototype._state2UI = function () {
                var that = this;
                that.createContainer(that.id);
                that.state.value && that.state.value.forEach(function (tag) {
                    that.addTag(tag);
                });
            };
            TagView.prototype.destroy = function () {
                var that = this;
                that.form.unRegisterListenerFor(that.$bind + ".$item", that);
                _super.prototype.destroy.call(this);
            };
            TagView.prototype.changed = function (propName, ov, nv, op, obj) {
                var that = this;
                if (op == "add") {
                    that.addTag(nv);
                }
                else if (op == "remove") {
                    that.removeTag(obj.$value.code);
                }
            };
            TagView.prototype.stateChanged = function (propName, params) {
                var that = this, state = that.form.getState(that.$bind), element = that.$element ? that.$element.get(0) : null;
                if (element && state.isHidden !== that.state.isHidden) {
                    that.state.isHidden = state.isHidden;
                    that.setHidden(element);
                }
            };
            TagView.prototype.addTag = function (tag) {
                var that = this;
                var item = document.createElement("li");
                _dom.addClass(item, "item");
                _dom.addClass(item, "bs-boxed-tags-item");
                _dom.addClass(item, "bs-cursor-p");
                _dom.addClass(item, "btn-primary");
                if (tag.selected)
                    _dom.addClass(item, "focus");
                _dom.attr(item, "data-id", tag.code);
                item.innerHTML = tag.libelle + ' <span data-id="REMOVE" class="' + _dom.iconClass("remove") + '" ></span>';
                _dom.append(that.$element.get(0), item);
            };
            TagView.prototype.removeTag = function (id) {
                var that = this;
                var tag = _dom.query(that.$element.get(0), 'li[data-id="' + id + '"]');
                _dom.remove(tag);
            };
            TagView.prototype.createContainer = function (id) {
                var that = this;
                that.$element = $(_utils.format('<ul id="{0}" data-render="{0}" class="bs-boxed-tags" draggable="true"></ul>', id));
            };
            TagView.prototype.render = function ($parent) {
                var that = this;
                var opts = that._initOptions(_uiutils.utils.defaultOptions);
                if (!that.$element) {
                    that.setEvents(null);
                    that._state2UI();
                }
                that.appendElement($parent, opts);
                return that.$element;
            };
            return TagView;
        }(ui.AbsField));
        _ui.registerControl(TagView, "array", false, 'tagview');
        var CheckBoxList = /** @class */ (function () {
            function CheckBoxList(options) {
                var that = this;
                that.options = options || {};
                that._elements = [];
                that._values = [];
            }
            Object.defineProperty(CheckBoxList.prototype, "elements", {
                get: function () {
                    return this._elements;
                },
                set: function (value) {
                    if (value) {
                        this._elements = value;
                        this._notifyChange("elements");
                    }
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(CheckBoxList.prototype, "values", {
                get: function () {
                    return this._values;
                },
                set: function (value) {
                    if (value) {
                        this._values = value;
                        this._notifyChange("values");
                    }
                },
                enumerable: true,
                configurable: true
            });
            CheckBoxList.prototype._notifyChange = function (propName) {
                var that = this;
                switch (propName) {
                    case "elements":
                        _dom.empty(that.$element.get(0));
                        that.renderElements(that.elements || [], that.values || [], that.options || {});
                        break;
                }
            };
            CheckBoxList.prototype.findVal = function (val) {
                var index = -1;
                this.values.forEach(function (item, i) {
                    if (item == val) {
                        index = i;
                        return false;
                    }
                });
                return index;
            };
            CheckBoxList.prototype.render = function ($parent) {
                var that = this;
                if (!that.$element) {
                    that.$element = $('<div class="row bs-checkboxlist"></div>');
                    that.renderElements(that.elements, that.values, that.options);
                    that.setEvents(null);
                }
                if ($parent) {
                    if (that.options.replaceParent)
                        $parent.replaceWith(that.$element);
                    else
                        $parent.append(that.$element);
                }
                return that.$element;
            };
            CheckBoxList.prototype.destroy = function () {
                var that = this;
                that._removeEvents();
                that.$element = null;
                that.options = null;
            };
            CheckBoxList.prototype.removeVal = function (val) {
                var that = this;
                var index = that.findVal(val);
                if (index >= 0)
                    that.values.splice(index, 1);
            };
            CheckBoxList.prototype.addVal = function (val) {
                this.values.push(val);
            };
            CheckBoxList.prototype.setEvents = function (opts) {
                var that = this;
                if (that.$element) {
                    that.$element.on('click', function (event) {
                        if (that.options.isDisabled || that.options.isReadOnly)
                            return;
                        var row = _dom.parentByClass(that.$element.get(0), event.target, "bs-checkboxlist-list");
                        if (!row)
                            return;
                        that._toggleEnumByIndex(_dom.indexOf(row.parentNode, row));
                    });
                }
            };
            CheckBoxList.prototype._removeEvents = function () {
                var that = this;
                if (that.$element)
                    that.$element.off('click');
            };
            CheckBoxList.prototype.renderElements = function (elements, values, options) {
                var that = this;
                var _bootstrap4 = Phoenix.bootstrap4;
                var f = document.createDocumentFragment();
                if (!elements.length) {
                    var e = $('<center><div class="bs-lv-nodata">Aucun résultat trouvé ...</div></center>').get(0);
                    _dom.append(f, e);
                }
                else {
                    options = options || {};
                    //let e: HTMLElement = $('<div tabindex="0" class="bs-checkboxlist-list checkbox-inline"><div class="bs-checkboxlist-list-check"><a><center><span class="' + _dom.iconClass('square-o') + '"></span></center></a></div><div class="bs-checkboxlist-list-title"></div></div>').get(0);
                    var e_2 = $('<div tabindex="0" class="bs-checkboxlist-list col-lg-6 col' + (_bootstrap4 ? '' : '-xs') + '-12 checkbox-inline"><div class="bs-checkboxlist-list-check"><a><span class="' + _dom.iconClass('square-o') + '"></span></a></div><div class="bs-checkboxlist-list-title"></div></div>').get(0);
                    elements.forEach(function (en, index) {
                        var ii = e_2.cloneNode(true);
                        if (options.disabled) {
                            _dom.attr(ii, "tabindex", "-1");
                            _dom.removeClass(ii, "bs-pointer");
                            _dom.addClass(ii, "bs-cursor-disabled");
                        }
                        else {
                            _dom.attr(ii, "tabindex", "0");
                            _dom.addClass(ii, "bs-pointer");
                            _dom.removeClass(ii, "bs-cursor-disabled");
                        }
                        var check = ii.firstChild.firstChild.firstChild;
                        check.className = (values && values.indexOf(en.code) >= 0) ? _dom.iconClass("check-square-o") : _dom.iconClass("square-o");
                        var tparent = ii.lastChild;
                        _dom.append(tparent, document.createTextNode(en.libelle)),
                            _dom.append(f, ii);
                    });
                }
                _dom.append(that.$element.get(0), f);
            };
            CheckBoxList.prototype._inputs = function () {
                return this.$element.get(0);
            };
            CheckBoxList.prototype._setItemValue = function (item, value) {
                var check = item.firstChild.firstChild.firstChild;
                check.className = value ? _dom.iconClass("check-square-o") : _dom.iconClass("square-o");
            };
            CheckBoxList.prototype._toggleEnumByIndex = function (index) {
                var that = this;
                if (index >= 0 && index < that.elements.length) {
                    var e = that.elements[index];
                    var ii = that.findVal(e.code);
                    var inputs = that._inputs();
                    if (ii >= 0) {
                        that._setItemValue(inputs.childNodes[index], false);
                        that.removeVal(e.code);
                        if (that.options.onSelectItem)
                            that.options.onSelectItem("remove", { id: index, value: e, data: e });
                    }
                    else {
                        that._setItemValue(inputs.childNodes[index], true);
                        that.addVal(e.code);
                        if (that.options.onSelectItem)
                            that.options.onSelectItem("add", { id: index, value: e, data: e });
                    }
                }
            };
            return CheckBoxList;
        }());
        ui.CheckBoxList = CheckBoxList;
        var LookupList = /** @class */ (function (_super) {
            __extends(LookupList, _super);
            function LookupList(fp, options, form) {
                var _this = _super.call(this, fp, options, form) || this;
                var that = _this;
                //form.registerListenerFor(that.$bind + ".$item", that);
                _this._state();
                return _this;
            }
            LookupList.prototype._state = function () {
                var that = this;
                that.state = that.state || {};
                var state = that.form.getState(that.$bind);
                Object.keys(state).forEach(function (pn) {
                    that.state[pn] = state[pn];
                });
                that.state.value = that.form.getValue(that.$bind);
            };
            LookupList.prototype.click = function (event) {
            };
            LookupList.prototype._state2UI = function () {
            };
            LookupList.prototype.destroy = function () {
                var that = this;
                //that.form.unRegisterListenerFor(that.$bind + ".$item", that);
                _super.prototype.destroy.call(this);
            };
            LookupList.prototype.changed = function (propName, ov, nv, op, obj) {
                //let that = this;
                //that._list.values = that._getValues();
            };
            LookupList.prototype.stateChanged = function (propName, params) {
            };
            LookupList.prototype._createContainer = function (id, authoring, title, options) {
                var that = this;
                var html = [
                    '<div id="{0}" data-render="{0}">',
                    '<label for="{0}_input" id="{0}_label" class="' + (!title ? "bs-none" : "") + '">' + (title || '') + '</label>',
                    '<div id="{0}_toolbar"></div>',
                    '<br />',
                    '<div id="{0}_list"></div>',
                    '<center id="{0}_paginer"></center>',
                    '</div>'
                ];
                return _utils.format(html.join(''), id);
            };
            LookupList.prototype._onSelectToolElement = function (toolElement) {
                var that = this;
                if (toolElement.name === "search")
                    that._lookup.search(toolElement.value);
            };
            LookupList.prototype.createToolBar = function (id, options) {
                var that = this;
                if (!that.$element)
                    return;
                if (!that._toolbar) {
                    var toolElements = [{
                            "name": "search",
                            "type": "search",
                            "right": false
                        }];
                    options = $.extend(true, {}, { selectToolElement: that._onSelectToolElement.bind(that) });
                    that._toolbar = new _ui.ToolBar(toolElements, options);
                    var container = _dom.query(that.$element.get(0), "#" + id + "_toolbar");
                    if (!container)
                        return;
                    that._toolbar.render($(container));
                }
            };
            LookupList.prototype._onSelectPaginer = function (page) {
                var that = this;
                switch (page) {
                    case "next":
                        that._lookup.nextPage();
                        break;
                    case "prev":
                        that._lookup.prevPage();
                        break;
                    case "first":
                        that._lookup.firthPage();
                        break;
                    case "last":
                        that._lookup.lastPage();
                        break;
                    default:
                        that._lookup.toPage(page - 1);
                        break;
                }
            };
            LookupList.prototype.createPaginer = function (id, options) {
                var that = this;
                if (!that.$element)
                    return;
                if (!that._pager) {
                    options = $.extend({ size: "default", boundaryLinks: true, selectPage: that._onSelectPaginer.bind(that) }, options);
                    that._pager = new _ui.Pager(options);
                    var container = _dom.query(that.$element.get(0), "#" + id + "_paginer");
                    if (!container)
                        return;
                    that._pager.render($(container));
                }
                var p = that._pager;
                p.props.totalPages = that._lookup.getNbPages();
                p.props.currentPage = that._lookup.currentPage() + 1;
            };
            LookupList.prototype._onSelectCheckBoxList = function (action, data) {
                var that = this;
                if (action === "add")
                    that.state.value.push({ code: data.value.code, lib: data.value.libelle });
                else if (action === "remove")
                    that.state.value.remove(that.state.value.find("code", data.value.code));
            };
            LookupList.prototype._getValues = function () {
                var that = this;
                var ld = $.extend(true, {}, that.state.value);
                ld._items = ld._items.map(function (item) {
                    return item.code;
                });
                return ld._items;
            };
            LookupList.prototype.createList = function (id, options) {
                var that = this;
                if (!that.$element)
                    return;
                if (!that._list) {
                    that._list = new _ui.CheckBoxList({ onSelectItem: that._onSelectCheckBoxList.bind(that) });
                    that._list.values = that._getValues();
                    var container = _dom.query(that.$element.get(0), "#" + id + "_list");
                    if (!container)
                        return;
                    that._list.render($(container));
                }
            };
            LookupList.prototype.createLookup = function (options) {
                var that = this;
                if (that.$schema.ds) {
                    var notify = function (data, options) {
                        options = options || {};
                        if (options.inited && options.updated)
                            that._lookup.firthPage();
                        else if (data) {
                            if (that.$schema.ds.data.$params.$search)
                                that.createToolBar(that.id, {});
                            that.createList(that.id, {});
                            that._list.elements = data;
                            that.createPaginer(that.id, that.renderOptions.pager);
                        }
                    };
                    that._lookup = new _ui.DsLookup(that.$schema.ds, { notify: notify });
                }
            };
            LookupList.prototype.render = function ($parent) {
                var that = this;
                var opts = that._initOptions(_uiutils.utils.defaultOptions);
                if (!that.$element) {
                    that.setEvents(null);
                    that.$element = $(that._createContainer(that.id, _ulocale.tt(that.$schema.title, that.form.$locale), that.options.design, opts));
                    that.createLookup({});
                    that._state2UI();
                }
                that.appendElement($parent, opts);
                return that.$element;
            };
            return LookupList;
        }(ui.AbsField));
        _ui.registerControl(LookupList, "array", false, 'lookup-list', null);
        var ComposantFilter = /** @class */ (function (_super) {
            __extends(ComposantFilter, _super);
            function ComposantFilter(fp, options, form) {
                var _this = _super.call(this, fp, options, form) || this;
                _this.renderInternal = function (context, options) {
                    var that = this;
                    if (!that.$element)
                        return;
                    var view;
                    switch (options["renderModel"]) {
                        case "model2":
                            view = new RenderModel2(that.listeChamps, that.listeChampsArbre, that.listeFilters, that.listeOperateurs, that.listeTypes, options, function (action, data) {
                                if (action == "VALIDE")
                                    that.form.execAction("validate", {});
                            });
                            break;
                        default:
                            view = new RenderModel1(that.listeChamps, that.listeChampsArbre, that.listeFilters, that.listeOperateurs, that.listeTypes, options);
                    }
                    _dom.append(that.$element.get(0), view.render());
                };
                _this.createContainer = function (id) {
                    return _utils.format('<div id="{0}" data-render="{0}" class="bs-filter"></div>', id);
                };
                _this._state();
                _this._options = options || {};
                _this.initData();
                return _this;
            }
            ComposantFilter.prototype.initData = function () {
                var that = this;
                // reporter sur un fichier json les labels
                that.listeOperateurs = new ListeOperateurs();
                Object.keys(OPERATORS).forEach(function (key) {
                    var op = _locale.operators[key];
                    that.listeOperateurs.add(key, op.title, op.binary, { symbol: op.symbol });
                });
                that.listeTypes = new ListeTypes();
                Object.keys(TYPES).forEach(function (key) {
                    var ctype = _locale.types[key];
                    that.listeTypes.addType(key, ctype.title, ctype.operators);
                });
                that._updateData();
            };
            ComposantFilter.prototype._updateData = function () {
                var that = this;
                that.listeChamps = new ListeChamps();
                var lookups = that.state.value && that.state.value.lookups ? that.state.value.lookups._model : {};
                var champs = that.state.value && that.state.value.champs ? that.state.value.champs : [];
                champs.forEach(function (item) {
                    var options = {};
                    if (item.lookup) {
                        options["lookupSchema"] = lookups[item.lookup] || _sutils.getLookup(that.$bind, item.lookup, that.$schema, that.form.$rootSchema);
                        options["lookup"] = item.lookup;
                        options["format"] = "lookup";
                    }
                    else if (item.enum && item.enum.length) {
                        options["enum"] = item.enum;
                        options["enumName"] = item.enumName;
                        options["format"] = "enum";
                    }
                    else if (item.type === "boolean") {
                        options["enum"] = [{ code: true, libelle: _locale.ui.true }, { code: false, libelle: _locale.ui.false }];
                        options["format"] = "enum";
                    }
                    else {
                        options["decimals"] = item.decimals;
                        options["format"] = item.format && that.listeTypes.get(item.format) ? item.format : null;
                    }
                    if (item.type && that.listeTypes.get(item.type))
                        that.listeChamps.add(item.code, item.libelle, item.type, options);
                });
                var filters = that.state.value && that.state.value.filters ? that.state.value.filters : [];
                that.listeFilters = new ListeFilters(filters);
                filters.forEach(function (item) {
                    var values = [];
                    item.values.forEach(function (value) {
                        values.push(value);
                    });
                    var values2 = [];
                    if (item.values2) {
                        item.values2.forEach(function (value) {
                            values2.push(value);
                        });
                    }
                    that.listeFilters.add2(item.code, item.op, values2.length ? values2 : values);
                });
                that.listeChampsArbre = that.state.value && that.state.value.entree && that.state.value.entree.length ? that.state.value.model().entree : null;
                if (!that.listeChampsArbre)
                    that.listeChampsArbre = that.listeChamps.gets().map(function (item) {
                        return { name: item.code, title: item.libelle };
                    });
                else
                    that.listeChampsArbre.forEach(function (item) {
                        if (item.items && !item.items.length)
                            delete item.items;
                    });
            };
            ComposantFilter.prototype.refresh = function () {
                var that = this;
                that._updateData();
                _dom.empty(that.$element.get(0));
                that.renderInternal({ data: that.state.value }, that._options);
            };
            ComposantFilter.prototype._state = function () {
                var that = this;
                that.state = that.state || {};
                var state = that.form.getState(that.$bind);
                Object.keys(state).forEach(function (pn) {
                    that.state[pn] = state[pn];
                });
                that.state.value = that.form.getValue(that.$bind);
            };
            ComposantFilter.prototype.render = function ($parent) {
                var that = this;
                var opts = that._initOptions(_uiutils.utils.defaultOptions);
                if (!that.$element) {
                    that.$element = $(that.createContainer(that.id));
                    _dom.empty(that.$element.get(0));
                    opts.id = that.id;
                    opts.title = that.$schema.title || "";
                    opts = $.extend(true, opts, that.renderOptions);
                    that._options = opts;
                    that.renderInternal({ data: that.state.value }, opts);
                }
                that.appendElement($parent, opts);
                return that.$element;
            };
            ComposantFilter.prototype.destroy = function () {
                _super.prototype.destroy.call(this);
            };
            return ComposantFilter;
        }(ui.AbsField));
        ui.ComposantFilter = ComposantFilter;
        _ui.registerControl(ComposantFilter, "object", false, 'filter');
    })(ui = Phoenix.ui || (Phoenix.ui = {}));
})(Phoenix || (Phoenix = {}));
/// <reference path="../../js/core/core-refs.ts" />
/// <reference path="../../js/ui/form/modalform.control.ts" />
var Phoenix;
(function (Phoenix) {
    var ui;
    (function (ui) {
        var _ui = ui, _filters = Phoenix.filters, _locale = Phoenix.locale;
        var OPERATORS = _filters.OPERATORS;
        var _addField2 = function (fieldList, code, libelle, type, options) {
            options = options || {};
            var champ = {
                code: code,
                libelle: libelle,
                type: type,
                format: options.format || null,
                decimals: options.decimals,
                enum: options.enum,
                enumName: options.enumName,
                lookup: options.lookup
            };
            fieldList.push(champ);
        }, _addField = function (fieldList, code, libelle, type, decimals, enums, enumName) {
            var options = {};
            options["decimals"] = decimals;
            options["enum"] = enums;
            options["enumName"] = enumName;
            _addField2(fieldList, code, libelle, type, options);
        }, _buildMDBFilter = function (filter, fields) {
        }, _escaperegex = function (value) {
            return value.replace(/[\\^$*+?.()|[\]{}]/g, '\\$&');
        }, _unescaperegex = function (value) {
            return value.replace(/\\\$/g, "$").replace(/\\\?/g, "?").replace(/\\\*/g, "*")
                .replace(/\\\+/g, "+").replace(/\\\./g, ".").replace(/\\\^/g, "^")
                .replace(/\\\[/g, "[").replace(/\\\]/g, "]").replace(/\\\{/g, "{")
                .replace(/\\\}/g, "}").replace(/\\\(/g, "(").replace(/\\\)/g, ")").replace(/\\\|/g, "|");
        }, _removeFilterExpress = function (filter, expressFilters, fields) {
            return filter;
        }, _addFilterExpress = function (filter, expressFilters, filterExpress) {
            return expressFilters;
        }, _toMongoDbFilter2Filter = function (filter, fields) {
            if (!filter)
                return null;
            if (filter && filter.$and) {
                var filters_1 = [];
                filter.$and.forEach(function (item) {
                    var a = Object.keys(item);
                    var fieldName = a[0];
                    var field = fields.find(function (fieldName) { return item.code == fieldName; });
                    item = item[fieldName];
                    var ii = { op: '', values: [], code: fieldName };
                    if (typeof item === 'object') {
                        var hasNot = false;
                        if (item.$not) {
                            hasNot = true;
                            item = item.$not;
                        }
                        if (item.$gte != undefined && item.$lte != undefined) {
                            // between or n between
                            ii.op = hasNot ? OPERATORS.nbetween : OPERATORS.between;
                            ii.values.push(item.$gte);
                            ii.values.push(item.$lte);
                        }
                        else if (item.$in) {
                            ii.op = OPERATORS.in;
                            ii.values = item.$in;
                        }
                        else if (item.$nin) {
                            ii.op = OPERATORS.nin;
                            ii.values = item.$nin;
                        }
                        else if (item.$ne) {
                            ii.op = OPERATORS.nin;
                            ii.values.push(item.$ne);
                        }
                        else if (item.$gt) {
                            ii.op = OPERATORS.gt;
                            ii.values.push(item.$gt);
                        }
                        else if (item.$gte) {
                            ii.op = OPERATORS.ge;
                            ii.values.push(item.$gte);
                        }
                        else if (item.$lt) {
                            ii.op = OPERATORS.lt;
                            ii.values.push(item.$lt);
                        }
                        else if (item.$lte) {
                            ii.op = OPERATORS.le;
                            ii.values.push(item.$lte);
                        }
                        else if (item.$exists != undefined) {
                            ii.op = item.$exists ? OPERATORS.nempty : OPERATORS.empty;
                        }
                        else if (item.$regex) {
                            ii.op = hasNot ? OPERATORS.nlike : OPERATORS.like;
                            ii.values.push(_unescaperegex(item.$regex));
                        }
                        else {
                            ii = null;
                        }
                    }
                    else {
                        ii.op = OPERATORS.in;
                        ii.values.push(item);
                    }
                    if (ii)
                        filters_1.push(ii);
                });
                if (filters_1 && filters_1.length)
                    return filters_1;
            }
            return null;
        }, _toMongoDbFilter = function (fields, filters) {
            if (!fields || !filters)
                return null;
            var oFilters = [];
            //filters
            filters.forEach(function (filter) {
                var field = fields.find(function (item) { return item.code == filter.code; });
                var cf = {}, val = null;
                var values = filter.values.map(function (item) {
                    if (item.code !== undefined)
                        return item.code;
                    return item;
                });
                switch (filter.op) {
                    case OPERATORS.between:
                        val = { $gte: values[0], $lte: values[1] };
                        break;
                    case OPERATORS.nbetween:
                        val = { $not: { $gte: values[0], $lte: values[1] } };
                        break;
                    case OPERATORS.in:
                        if (values.length > 1)
                            val = { $in: values };
                        else
                            val = values[0];
                        break;
                    case OPERATORS.nin:
                        if (values.length > 1)
                            val = { $nin: values };
                        else
                            val = { $ne: values[0] };
                        break;
                    case OPERATORS.gt:
                        val = { $gt: values[0] };
                        break;
                    case OPERATORS.ge:
                        val = { $gte: values[0] };
                        break;
                    case OPERATORS.lt:
                        val = { $lt: values[0] };
                        break;
                    case OPERATORS.le:
                        val = { $lte: values[0] };
                        break;
                    case OPERATORS.like:
                        val = { $regex: _escaperegex(values[0]), $options: 'i' };
                        break;
                    case OPERATORS.nlike:
                        val = { $not: { $regex: _escaperegex(values[0]), $options: 'i' } };
                        break;
                    case OPERATORS.empty:
                        val = { $exists: false };
                        break;
                    case OPERATORS.nempty:
                        val = { $exists: true };
                        break;
                }
                if (val !== null && val !== undefined) {
                    cf[filter.code] = val;
                    oFilters.push(cf);
                }
            });
            if (oFilters.length)
                return { $and: oFilters.map(function (item) { return item; }) };
            return null;
        }, _toPhenix = function (champs, filters) {
            if (!champs || !filters)
                return null;
            var constructeOdata = function (oFilters, op) {
                var tmpFilters = [];
                var isImpair = oFilters.length % 2 != 0;
                var length = isImpair ? oFilters.length - 1 : oFilters.length;
                for (var i = 0; i < length; i += 2) {
                    tmpFilters.push({ $left: oFilters[i], $op: op, $right: oFilters[i + 1] });
                }
                if (isImpair)
                    tmpFilters.push(oFilters[oFilters.length - 1]);
                if (tmpFilters.length >= 2)
                    tmpFilters = constructeOdata(tmpFilters, op);
                return tmpFilters;
            };
            var constructeFilter = function (filter) {
                var champ = champs.find(function (item) { return item.code == filter.code; });
                var op = filter.op == OPERATORS.in ? "eq" : filter.op;
                op = op == OPERATORS.nin ? "ne" : op;
                var values = filter.values.map(function (item) {
                    if (item.code !== undefined)
                        return item.code;
                    return item;
                });
                if (op == OPERATORS.between || op == OPERATORS.nbetween) {
                    if (op == OPERATORS.between)
                        return between(filter.code, champ.type, values[0], values[1]);
                    else
                        return { $op: "not", $right: between(filter.code, champ.type, values[0], values[1]) };
                }
                else {
                    values = values.map(function (item) {
                        var value = null;
                        switch (op) {
                            case OPERATORS.like:
                                value = like(filter.code, champ.type, item);
                                break;
                            case OPERATORS.nlike:
                                value = { $op: "not", $right: like(filter.code, champ.type, item) };
                                break;
                            case OPERATORS.empty:
                                value = { $left: filter.code, $op: "eq", $right: { type: "string", value: '' } };
                                break;
                            case OPERATORS.nempty:
                                value = { $left: filter.code, $op: "ne", $right: { type: "string", value: '' } };
                                break;
                            default:
                                value = { $left: filter.code, $op: op, $right: { type: champ.type, value: item } };
                        }
                        return value;
                    });
                    return constructeOdata(values, "or")[0];
                }
                function between(code, type, value1, value2) {
                    return {
                        $left: { $left: code, $op: OPERATORS.ge, $right: { type: type, value: value1 } },
                        $op: "and",
                        $right: { $left: code, $op: OPERATORS.le, $right: { type: type, value: value2 } }
                    };
                }
                function like(code, type, value) {
                    return {
                        $left: 'contains(' + code + ',\'' + value + '\')',
                        $op: null,
                        $right: null
                    };
                }
            };
            var oFilters = [];
            filters.forEach(function (filter) {
                oFilters.push(constructeFilter(filter));
            });
            return constructeOdata(oFilters, "and")[0];
        }, _toTitle = function (filters, champs) {
            var tooltip = [];
            filters.forEach(function (item) {
                champs.forEach(function (champ) {
                    if (item.code === champ.code) {
                        item.lib = champ.libelle;
                        return false;
                    }
                });
                var format = (item.lib || item.code) + " " + getSymbol(item.op);
                if (item.op === OPERATORS.empty || item.op === OPERATORS.nempty)
                    format += " vide";
                else if (item.op === OPERATORS.between || item.op === OPERATORS.nbetween)
                    format += " " + item.values[0] + " et " + item.values[1];
                else {
                    if (item.getValueNames)
                        format += " " + item.getValueNames().join(",");
                    else
                        format += " " + item.values.join(",");
                }
                if (tooltip.length)
                    tooltip.push(" et ");
                tooltip.push(format);
            });
            function getSymbol(op) {
                return _locale.operators[op].symbol || '';
            }
            return tooltip.join("");
        }, _transformPropsToFilterFormat = function (champs, columns) {
            columns.forEach(function (item) {
                var sc = $.extend(true, {}, item.schema);
                switch (sc.type) {
                    case "number":
                        if (sc.decimals > 0)
                            sc.type = "decimal";
                        else
                            sc.type = "integer";
                        break;
                }
                if (item.schema.enum) {
                    sc.enum = item.schema.enum.map(function (en, i) {
                        return { code: en, libelle: item.schema.enumNames ? item.schema.enumNames[i] : en };
                    });
                }
                _ui.filter.addField2(champs, item.name, sc.title, sc.type, { decimals: sc.decimals, enum: sc.enum, format: sc.format });
            });
        };
        ui.filter = {
            format: {
                toPhenix: _toPhenix,
                toMongoDbFilter: _toMongoDbFilter,
                toTitle: _toTitle
            },
            removeMdbFilterExpress: _removeFilterExpress,
            addMdbFilterExpress: _addFilterExpress,
            addField: _addField,
            addField2: _addField2,
            transformPropsToFilterFormat: _transformPropsToFilterFormat,
            toTitle: _toTitle,
            mongoDbFilter2Filter: _toMongoDbFilter2Filter
        };
        var FilterManager = /** @class */ (function () {
            function FilterManager() {
                this.filterComplex = null;
                this.filterExpress = null;
            }
            FilterManager.prototype.constructeFilter = function () {
                var that = this;
                if (that.filterComplex && that.filterComplex.value && that.filterExpress && that.filterExpress.value)
                    return { title: that.filterComplex.title + " et " + that.filterExpress.title, value: { $left: that.filterComplex.value, $op: "AND", $right: that.filterExpress.value } };
                else if (that.filterComplex && that.filterComplex.value)
                    return that.filterComplex;
                else if (that.filterExpress && that.filterExpress.value)
                    return that.filterExpress;
                return { title: "", value: null };
            };
            return FilterManager;
        }());
        ui.FilterManager = FilterManager;
        ui.filterManagerFactory = function () {
            return new FilterManager();
        };
    })(ui = Phoenix.ui || (Phoenix.ui = {}));
})(Phoenix || (Phoenix = {}));
/// <reference path="../../js/core/core-refs.ts" />
/// <reference path="../../js/ui/form/modalform.control.ts" />
var Phoenix;
(function (Phoenix) {
    var ui;
    (function (ui) {
        var _ui = ui;
        var _transformPropsToMultiselectFormat = function (columns, groups, columnsLimited) {
            var gs = groups && groups.items ? groups.items : [];
            var fields = groups && groups.fields ? groups.fields : [];
            var items = groups && groups.items ? $.extend(true, [], gs) : [];
            if (columnsLimited)
                constructeLimitItems(items, fields, columns);
            else
                constructeItems(items, columns);
            function constructeLimitItems(items, fields, columns) {
                items.forEach(function (item) {
                    item.items = item.items || [];
                    constructeLimitItems(item.items, item.fields || [], columns);
                });
                fields.forEach(function (field) {
                    columns.every(function (column) {
                        if (field.name === column.name) {
                            field.title = column.schema.title || column.name;
                            return false;
                        }
                        return true;
                    });
                    items.push(field);
                });
            }
            function constructeItems(groups, columns) {
                columns.forEach(function (column) {
                    var item = {
                        name: column.name,
                        title: column.schema.title || column.name
                    };
                    var g = getGroup(groups, column.schema.group);
                    if (g) {
                        g.items = g.items || [];
                        g.items.push(item);
                    }
                    else
                        groups.push(item);
                });
                function getGroup(groups, name) {
                    var that = this;
                    var item = null;
                    groups.every(function (g) {
                        if (g.name === name) {
                            item = g;
                            return false;
                        }
                        else if (g.items) {
                            item = getGroup(g.items, name);
                            if (item)
                                return false;
                        }
                        return true;
                    });
                    return item;
                }
            }
            return items;
        }, _transformMultiSelectColumnsToGridColumnsFormat = function (columns) {
            var cols = [];
            columns.forEach(function (col) {
                cols.push({ $bind: col.name, options: {} });
            });
            return cols;
        }, _transformSelectedColumnsToMultiSelectFormat = function (columns, selectedColumns, groups, columnsLimited) {
            groups = groups && groups.items ? groups.items : [];
            var cols = [];
            Object.keys(selectedColumns).forEach(function (name) {
                var isSelected = !columnsLimited ? true : (getColumn(groups || [], name) ? true : false);
                if (isSelected)
                    columns.every(function (col) {
                        if (col.name === name) {
                            if (selectedColumns[name])
                                cols.push({ name: name, title: col.schema.title || col.name });
                            return false;
                        }
                        return true;
                    });
            });
            function getColumn(groups, name) {
                var column = null;
                groups.every(function (group) {
                    if (group.name === name)
                        column = group;
                    if ((group.items || group.fields) && !column)
                        column = getColumn(group.fields || group.items, name);
                    if (column)
                        return false;
                    return true;
                });
                return column;
            }
            return cols;
        };
        ui.multiSelectUtils = {
            transformPropsToMultiselectFormat: _transformPropsToMultiselectFormat,
            transformMultiSelectColumnsToGridColumnsFormat: _transformMultiSelectColumnsToGridColumnsFormat,
            transformSelectedColumnsToMultiSelectFormat: _transformSelectedColumnsToMultiSelectFormat
        };
    })(ui = Phoenix.ui || (Phoenix.ui = {}));
})(Phoenix || (Phoenix = {}));
/// <reference path="../../js/core/modules/locale.ts" />
/// <reference path="../../js/ui/form/form.control.ts" />
/// <reference path="../../js/ui/form/controls/absfield.control.ts" />
var Phoenix;
(function (Phoenix) {
    var ui;
    (function (ui) {
        var _ui = ui, _utils = Phoenix.utils, _ulocale = Phoenix.ulocale, _dom = Phoenix.dom, _sutils = Phoenix.Observable.SchemaUtils;
        var MultiSelectList = /** @class */ (function () {
            function MultiSelectList(data, options, callback) {
                var that = this;
                var defaultOptions = {
                    mapping: {
                        id: "name",
                        lib: "title"
                    },
                    expandIcon: "plus-circle",
                    collapseIcon: "minus-circle",
                    checkedIcon: 'check-square-o',
                    uncheckedIcon: 'square-o',
                    itemIcon: "",
                    groupIcon: "",
                    multiSelect: false,
                    showTags: false,
                    groupLink: false,
                    itemLink: true,
                    border: false,
                    maxHeight: "300px"
                };
                that._options = $.extend(true, defaultOptions, options);
                that._name = that._options.mapping.id;
                that._title = that._options.mapping.libelle || that._options.mapping.lib;
                that._data = data || [];
                that._callback = callback || null;
                that._nodes = $.extend(true, [], data);
                that._selectedItems = [];
                that._init();
            }
            Object.defineProperty(MultiSelectList.prototype, "items", {
                get: function () {
                    return this._data;
                },
                set: function (value) {
                    var that = this;
                    that._data = value || [];
                    that._nodes = $.extend(true, [], value);
                    that._selectedItems = [];
                    that._constructeNodes(that._nodes, that._options);
                    if (that._container)
                        that._renderItems(that._nodes);
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(MultiSelectList.prototype, "selectedItems", {
                get: function () {
                    return this._selectedItems;
                },
                set: function (value) {
                    var that = this;
                    that._selectedItems = $.extend(true, [], value);
                    if (that._container)
                        that._selectedItems.forEach(function (item) {
                            that.addItem(item[that._name]);
                        });
                },
                enumerable: true,
                configurable: true
            });
            MultiSelectList.prototype._init = function () {
                var that = this;
                that._constructeNodes(that._nodes, that._options);
            };
            MultiSelectList.prototype._getGroupNode = function (groups, name) {
                var that = this;
                var group = null;
                groups.every(function (node) {
                    if (node.items) {
                        group = node[that._name] === name ? node : null;
                        if (!group)
                            group = that._getGroupNode(node.items, name);
                    }
                    if (group)
                        return false;
                    return true;
                });
                return group;
            };
            MultiSelectList.prototype._getItemNode = function (items, name) {
                var that = this;
                var item = null;
                items.every(function (node) {
                    item = (!node.items && node[that._name] === name) ? node : null;
                    if (!item && node.items)
                        item = that._getItemNode(node.items, name);
                    if (item)
                        return false;
                    return true;
                });
                return item;
            };
            MultiSelectList.prototype._getItem = function (items, name) {
                var that = this;
                var item = null;
                items.every(function (elt) {
                    if (elt[that._name] === name) {
                        item = elt;
                        return false;
                    }
                    if (elt.items) {
                        item = that._getItem(elt.items, name);
                        if (item)
                            return false;
                    }
                    return true;
                });
                return item;
            };
            MultiSelectList.prototype._getSelectedItemIndex = function (name) {
                var that = this;
                var index = -1;
                that._selectedItems.every(function (elt, i) {
                    if (elt[that._name] === name) {
                        index = i;
                        return false;
                    }
                    return true;
                });
                return index;
            };
            MultiSelectList.prototype._itemsIsSelected = function (items) {
                var that = this;
                var isOk = true;
                items.every(function (item) {
                    var trouve = false;
                    that._selectedItems.every(function (elt) {
                        if (elt[that._name] == item[that._name]) {
                            trouve = true;
                            return false;
                        }
                        return true;
                    });
                    if (!trouve) {
                        isOk = false;
                        return false;
                    }
                    return true;
                });
                return isOk;
            };
            MultiSelectList.prototype._itemsIsUnselected = function (items) {
                var that = this;
                var isOk = true;
                items.every(function (item) {
                    that._selectedItems.every(function (elt) {
                        if (elt[that._name] == item[that._name]) {
                            isOk = false;
                            return false;
                        }
                        return true;
                    });
                    if (!isOk)
                        return false;
                    return true;
                });
                return isOk;
            };
            MultiSelectList.prototype._constructeNodes = function (items, options) {
                var that = this;
                if (Array.isArray(items) && items.length) {
                    constructeItems(items, null, 0, true, options);
                    if (options.showTags) {
                        that._addTags(that._nodes);
                    }
                }
                function constructeItems(items, parent, level, show, options) {
                    var html = $(that._template().item).get(0);
                    if (!that._options.border)
                        _dom.addClass(html, "border-0");
                    items.forEach(function (item) {
                        if (!item[that._name])
                            return;
                        item.level = level || 0;
                        item.show = (show == true);
                        item.parent = parent || null;
                        item.component = html.cloneNode();
                        if (item.items) {
                            item.tagsSize = 0;
                            constructeItems(item.items, item, (item.level + 1), false, options);
                        }
                        var pr = item.parent;
                        while (pr) {
                            pr.tagsSize++;
                            pr = pr.parent;
                        }
                        for (var i = 1; i <= item.level; i++)
                            _dom.append(item.component, $(that._template().indent).get(0));
                        if (item.items) {
                            var iconDisplay = that._createIcon(item.component, options.expandIcon, "icon-group bs-cursor-p");
                            _dom.attr(iconDisplay, "data-event", "click");
                            _dom.attr(iconDisplay, "data-action", "expand");
                            if (options.multiSelect) {
                                var iconCheck = that._createIcon(item.component, options.uncheckedIcon, "icon-check bs-cursor-p");
                                _dom.attr(iconCheck, "data-event", "click");
                                _dom.attr(iconCheck, "data-action", "uncheckG");
                            }
                            else if (options.groupLink) {
                                _dom.attr(item.component, "data-event", "click");
                                _dom.attr(item.component, "data-action", "selectitem");
                                _dom.addClass(item.component, "bs-cursor-p");
                            }
                            that._createIcon(item.component, options.groupIcon);
                        }
                        else {
                            var iconDisplay = that._createIcon(item.component);
                            _dom.addClass(iconDisplay, "icon-exist");
                            if (options.multiSelect && options.itemLink) {
                                var iconCheck = that._createIcon(item.component, options.uncheckedIcon, "icon-check bs-cursor-p");
                                _dom.attr(iconCheck, "data-event", "click");
                                _dom.attr(iconCheck, "data-action", "uncheck");
                            }
                            else if (options.itemLink) {
                                _dom.attr(item.component, "data-event", "click");
                                _dom.attr(item.component, "data-action", "selectitem");
                                _dom.addClass(item.component, "bs-cursor-p");
                            }
                            that._createIcon(item.component, options.itemIcon);
                        }
                        _dom.append(item.component, $('<span>' + (item[that._title] || item[that._name]) + '</span>').get(0));
                        _dom.attr(item.component, "data-id", item[that._name]);
                    });
                }
            };
            MultiSelectList.prototype._addTags = function (nodes) {
                var that = this;
                nodes.forEach(function (node) {
                    if (node.items) {
                        var badge = $(that._template().badge).get(0);
                        _dom.append(badge, document.createTextNode("" + node.tagsSize));
                        _dom.append(node.component, badge);
                        that._addTags(node.items);
                    }
                });
            };
            MultiSelectList.prototype._template = function () {
                return {
                    list: '<ul class="list-group bs-treeview"></ul>',
                    item: '<li class="list-group-item"></li>',
                    indent: '<span class="indent"></span>',
                    icon: '<span class="icon"></span>',
                    link: '<a href="#" style="color:inherit;"></a>',
                    badge: '<span class="badge badge-pill badge-secondary float-right"></span>'
                };
            };
            MultiSelectList.prototype._createIcon = function (elt, icon, autre) {
                var that = this;
                var iconItem = $(that._template().icon).get(0);
                if (icon)
                    that._addIcon(iconItem, icon, autre);
                _dom.append(elt, iconItem);
                return iconItem;
            };
            MultiSelectList.prototype._addIcon = function (elt, icon, autre) {
                var that = this;
                _dom.attr(elt, "class", "icon icon-exist " + _dom.iconClass(icon) + (autre ? " " + autre : ""));
            };
            MultiSelectList.prototype._setEvents = function () {
                var that = this;
                if (that._container)
                    that._container.addEventListener("click", function (event) {
                        var target = event.target;
                        var itemHTML = null;
                        if (_dom.attr(target, "data-event") === "click")
                            itemHTML = target;
                        else
                            itemHTML = _dom.parentByTag(that._container, target, "LI");
                        if (itemHTML && _dom.attr(itemHTML, "data-event") === "click") {
                            var parentHTML = _dom.parentByTag(that._container, itemHTML, "LI");
                            var name_2 = _dom.attr(parentHTML, "data-id");
                            var action = _dom.attr(itemHTML, "data-action");
                            if (action === "expand")
                                that._display(name_2, true);
                            else if (action === "collapse")
                                that._display(name_2, false);
                            else if (action === "selectitem")
                                that._select(name_2, that._callback);
                            else if (action === "check" && that._options.multiSelect)
                                that._checkF(name_2, false, that._callback);
                            else if (action === "uncheck" && that._options.multiSelect)
                                that._checkF(name_2, true, that._callback);
                            else if (action === "checkG" && that._options.multiSelect)
                                that._checkG(name_2, false, that._callback, true);
                            else if (action === "uncheckG" && that._options.multiSelect)
                                that._checkG(name_2, true, that._callback, true);
                        }
                    });
            };
            MultiSelectList.prototype._display = function (name, show) {
                var that = this;
                var group = that._getGroupNode(that._nodes, name);
                if (group) {
                    var displayItem_1 = function (items, open) {
                        items.forEach(function (item) {
                            item.show = open;
                            if (item.items) {
                                displayItem_1(item.items, false);
                                var ic = _dom.query(item.component, ".icon-group");
                                if (ic) {
                                    that._addIcon(ic, that._options.expandIcon, "icon-group bs-cursor-p");
                                    _dom.attr(ic, "data-action", "expand");
                                }
                            }
                        });
                    };
                    displayItem_1(group.items, show);
                    var gHTML = _dom.query(group.component, ".icon-group");
                    that._addIcon(gHTML, show ? that._options.collapseIcon : that._options.expandIcon, "icon-group bs-cursor-p");
                    _dom.attr(gHTML, "data-action", show ? "collapse" : "expand");
                    that._renderItems(that._nodes);
                }
            };
            MultiSelectList.prototype._select = function (name, callback) {
                var that = this;
                var oldHTML = _dom.query(that._container, ".active");
                if (oldHTML)
                    _dom.removeClass(oldHTML, "active");
                that._selectedItems.splice(0);
                var item = that._getItem(that._nodes, name);
                if (!item)
                    return;
                that._showItem(name);
                _dom.addClass(item.component, "active");
                item = that._getItem(that._data, name);
                if (item) {
                    that._selectedItems.push(item);
                    if (callback)
                        callback({ action: "add", data: item });
                }
            };
            MultiSelectList.prototype._unSelect = function (name, callback) {
                var that = this;
                var oldHTML = _dom.query(that._container, ".active");
                if (oldHTML)
                    _dom.removeClass(oldHTML, "active");
                var item = that._getItem(that._selectedItems, name);
                if (item) {
                    that._selectedItems.splice(0);
                    if (callback)
                        callback({ action: "remove", data: item });
                }
            };
            MultiSelectList.prototype._checkF = function (name, isCheck, callback) {
                var that = this;
                that._check(name, isCheck, callback);
                var item = that._getItem(that._nodes, name);
                if (item && item.parent) {
                    var parent_4 = that._getItem(that._data, item.parent[that._name]);
                    if (!parent_4)
                        return;
                    if (isCheck && that._itemsIsSelected(parent_4.items))
                        that._checkG(parent_4[that._name], isCheck, callback, false);
                    else if (!isCheck && that._itemsIsUnselected(parent_4.items))
                        that._checkG(parent_4[that._name], isCheck, callback, false);
                }
            };
            MultiSelectList.prototype._check = function (name, isCheck, callback) {
                var that = this;
                var item = that._getItem(that._data, name);
                if (item) {
                    var gHTML = that._getItem(that._nodes, name).component;
                    var cHTML = _dom.query(gHTML, ".icon-check");
                    that._addIcon(cHTML, isCheck ? that._options.checkedIcon : that._options.uncheckedIcon, "icon-check bs-cursor-p");
                    _dom.attr(cHTML, "data-action", isCheck ? "check" : "uncheck");
                    var action = void 0;
                    var selectedItemIndex = that._getSelectedItemIndex(name);
                    if (isCheck) {
                        if (selectedItemIndex < 0) {
                            that._selectedItems.push(item);
                            action = "add";
                        }
                    }
                    else {
                        if (selectedItemIndex >= 0) {
                            that._selectedItems.splice(selectedItemIndex, 1);
                            action = "remove";
                        }
                    }
                    if (callback && action)
                        callback({ action: action, data: item });
                }
            };
            MultiSelectList.prototype._checkG = function (name, isCheck, callback, children) {
                var that = this;
                var group = that._getItem(that._data, name);
                if (group) {
                    var gHTML = that._getItem(that._nodes, name).component;
                    var cHTML = _dom.query(gHTML, ".icon-check");
                    that._addIcon(cHTML, isCheck ? that._options.checkedIcon : that._options.uncheckedIcon, "icon-check bs-cursor-p");
                    _dom.attr(cHTML, "data-action", isCheck ? "checkG" : "uncheckG");
                    if (children)
                        group.items.forEach(function (item) {
                            if (item.items)
                                that._checkG(item.name, isCheck, callback, children);
                            else
                                that._check(item.name, isCheck, callback);
                        });
                }
            };
            MultiSelectList.prototype._showItem = function (name) {
                var that = this;
                var item = that._getItem(that._nodes, name);
                if (item) {
                    var parent_5 = item.parent;
                    while (parent_5) {
                        displayItem(parent_5.items, true);
                        var gHTML = _dom.query(parent_5.component, ".icon-group");
                        that._addIcon(gHTML, that._options.collapseIcon, "icon-group bs-cursor-p");
                        _dom.attr(gHTML, "data-action", "collapse");
                        parent_5 = parent_5.parent;
                    }
                    that._renderItems(that._nodes);
                }
                function displayItem(items, open) {
                    items.forEach(function (item) {
                        item.show = open;
                        if (item.items) {
                            displayItem(item.items, false);
                            var ic = _dom.query(item.component, ".icon-group");
                            if (ic) {
                                that._addIcon(ic, that._options.expandIcon, "icon-group bs-cursor-p");
                                _dom.attr(ic, "data-action", "expand");
                            }
                        }
                    });
                }
                ;
            };
            MultiSelectList.prototype.addItem = function (name) {
                var that = this;
                if (that._options.multiSelect)
                    that._checkF(name, true);
                else
                    that._select(name);
            };
            MultiSelectList.prototype.removeItem = function (name) {
                var that = this;
                if (that._options.multiSelect)
                    that._checkF(name, false);
                else
                    that._unSelect(name);
            };
            MultiSelectList.prototype._renderItems = function (nodes) {
                var that = this;
                _dom.empty(that._container);
                var frag = document.createDocumentFragment();
                render(nodes, frag);
                _dom.append(that._container, frag);
                function render(nodes, frag) {
                    nodes.forEach(function (node) {
                        if (node.show)
                            _dom.append(frag, node.component);
                        if (node.items)
                            render(node.items, frag);
                    });
                }
            };
            MultiSelectList.prototype.render = function (parent) {
                var that = this;
                if (!that._container) {
                    that._container = $(that._template().list).get(0);
                    that._container.style.maxHeight = that._options.maxHeight;
                    if (!that._options.border)
                        _dom.addClass(that._container, "noborder");
                    that._renderItems(that._nodes);
                    that.selectedItems = that._selectedItems;
                    that._setEvents();
                }
                if (parent)
                    _dom.append(parent, that._container);
                return that._container;
            };
            return MultiSelectList;
        }());
        ui.MultiSelectList = MultiSelectList;
    })(ui = Phoenix.ui || (Phoenix.ui = {}));
})(Phoenix || (Phoenix = {}));
/// <reference path="../../js/ui/form/form.control.ts" />
/// <reference path="../../js/ui/form/controls/absfield.control.ts" />
var Phoenix;
(function (Phoenix) {
    var ui;
    (function (ui) {
        var _ui = ui, _utils = Phoenix.utils, _ulocale = Phoenix.ulocale, _dom = Phoenix.dom, _drag = Phoenix.drag, _uiutils = Phoenix.uiutils, _events = Phoenix.events, _sutils = Phoenix.Observable.SchemaUtils;
        function _createPillboxContainer(id, options, authoring, title) {
            title = title || '';
            options = $.extend({ titleIsHidden: false, placeHolder: false, columns: false }, options);
            var html = [];
            _uiutils.utils.fieldWrapper(html, options, authoring, function () {
                html.push('<ul id="{0}" class="pillbox bs-boxed-tags"></ul>');
            });
            return _utils.format(html.join(''), id);
        }
        ;
        var PillBox = /** @class */ (function () {
            function PillBox(data, options, callback) {
                var that = this;
                var defaultOptions = {
                    mapping: {
                        id: "name",
                        lib: "title"
                    },
                    removeIcon: "remove",
                    border: false
                };
                that._options = $.extend(true, defaultOptions, options);
                that._name = that._options.mapping.id;
                that._title = that._options.mapping.libelle || that._options.mapping.lib;
                that._data = data || [];
                that._callback = callback || null;
                that._nodes = $.extend(true, [], data);
                that._selectedItems = [];
                that._init();
            }
            Object.defineProperty(PillBox.prototype, "items", {
                get: function () {
                    return this._data;
                },
                set: function (value) {
                    var that = this;
                    that._data = value || [];
                    that._nodes = $.extend(true, [], value);
                    that._selectedItems = [];
                    that._constructeNodes(that._nodes, that._options);
                    if (that._container)
                        that._renderItems();
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(PillBox.prototype, "selectedItems", {
                get: function () {
                    return this._selectedItems;
                },
                set: function (value) {
                    var that = this;
                    that._selectedItems = $.extend(true, [], value);
                    if (that._container)
                        that._renderItems();
                },
                enumerable: true,
                configurable: true
            });
            PillBox.prototype._init = function () {
                var that = this;
                that._constructeNodes(that._nodes, that._options);
            };
            PillBox.prototype._constructeNodes = function (items, options) {
                var that = this;
                var htmlItem = $(that._template().itemTag).get(0);
                var htmlIcon = $(that._template().icon).get(0);
                items.forEach(function (item) {
                    if (!item[that._name])
                        return;
                    item.component = htmlItem.cloneNode();
                    _dom.append(item.component, document.createTextNode(item[that._title] || item[that._name]));
                    _dom.attr(item.component, "data-id", item[that._name]);
                    _dom.append(item.component, htmlIcon.cloneNode());
                    item.filter = true;
                });
                that._input = that._input || $(that._template().itemInput).get(0);
            };
            PillBox.prototype._getItem = function (items, name) {
                var that = this;
                var elt = null;
                items.every(function (item) {
                    if (item[that._name] === name) {
                        elt = item;
                        return false;
                    }
                    return true;
                });
                return elt;
            };
            PillBox.prototype._getItemIndex = function (items, name) {
                var that = this;
                var index = -1;
                items.every(function (item, i) {
                    if (item[that._name] === name) {
                        index = i;
                        return false;
                    }
                    return true;
                });
                return index;
            };
            PillBox.prototype._addTag = function (name, callback) {
                var that = this;
                var item = that._getItem(that._selectedItems, name);
                if (!item) {
                    item = that._getItem(that._data, name);
                    if (item) {
                        that._selectedItems.push(item);
                        that._getItem(that._nodes, name).filter = false;
                        that._renderItems();
                        if (callback)
                            callback({ action: "add", data: item });
                    }
                }
            };
            PillBox.prototype._removeTag = function (name, callback) {
                var that = this;
                var index = that._getItemIndex(that._selectedItems, name);
                if (index >= 0) {
                    that._selectedItems.splice(index, 1);
                    that._getItem(that._nodes, name).filter = true;
                    that._renderItems();
                    if (callback)
                        callback({ action: "remove", data: that._getItem(that._data, name) });
                }
            };
            PillBox.prototype._filterList = function (chaine) {
                var that = this;
                chaine.toLowerCase();
                that._nodes.forEach(function (n) {
                    n.filter = (n[that._title].toLowerCase().indexOf(chaine) >= 0 && that._getItem(that._selectedItems, n[that._name]) == null);
                });
                var filters = [];
                that._nodes.forEach(function (node) {
                    if (node.filter)
                        filters.push(node);
                });
                that._menu.show({ value: filters }, 0, true);
            };
            PillBox.prototype._setEvents = function (parent) {
                var that = this;
                if (that._container) {
                    that._container.addEventListener("click", function (event) {
                        var target = event.target;
                        if (target["href"]) {
                            var href = _dom.attr(target, 'href');
                            if (href === '#') {
                                event.preventDefault();
                                event.stopPropagation();
                            }
                        }
                        if (target && _dom.attr(target, "data-event") === "click") {
                            var action = _dom.attr(target, "data-action");
                            if (action === "remove") {
                                var parentHTML = _dom.parentByTag(that._container, target, "LI");
                                var name_3 = _dom.attr(parentHTML, "data-id");
                                that._removeTag(name_3, that._callback);
                            }
                        }
                        else if (that._menu && that._menu.opened && that._menu.inMenu(event.target)) {
                            that._menu.click(event);
                        }
                        var input = _dom.query(that._input, "input");
                        if (input)
                            input.focus();
                    });
                    that._container.addEventListener("keyup", function (event) {
                        if (event.keyCode === 13 && that._menu && that._menu.opened)
                            that._menu.select();
                        var input = _dom.query(that._input, "input");
                        if (input)
                            input.focus();
                    });
                }
                if (that._input) {
                    var menuShow_1 = true;
                    that._input.addEventListener("keyup", function (event) {
                        var target = event.target;
                        if (event.keyCode === 38 || event.keyCode === 40) {
                        }
                        else if (event.keyCode === 8) {
                            var input_1 = target;
                            if (menuShow_1)
                                that._filterList(target.value);
                            else if (that._menu && that._menu.opened)
                                that._menu.hide(target);
                        }
                        else if (event.keyCode === 13 && target && _dom.attr(target, "data-event") === "keyup") {
                            var input_2 = target;
                            that._addTag(input_2.value, that._callback);
                            input_2.value = "";
                        }
                        else {
                            that._filterList(target.value);
                            var tagFocus = _dom.query(that._container, ".bs-pillbox-item-tag.focus");
                            if (tagFocus)
                                _dom.removeClass(tagFocus, "focus");
                        }
                        var input = _dom.query(that._input, "input");
                        if (input)
                            input.focus();
                    });
                    that._input.addEventListener("keydown", function (event) {
                        var target = event.target;
                        if (event.keyCode == 40 && that._menu && that._menu.opened) {
                            that._menu.move(1);
                        }
                        else if (event.keyCode === 38 && that._menu && that._menu.opened) {
                            that._menu.move(-1);
                        }
                        else if (event.keyCode === 8) {
                            var input_3 = target;
                            if (input_3.value.length <= 0 && that._selectedItems.length && _dom.attr(target, "data-event") === "keyup") {
                                var item = that._selectedItems[that._selectedItems.length - 1];
                                var n = that._getItem(that._nodes, item[that._name]);
                                if (_dom.hasClass(n.component, "focus")) {
                                    _dom.removeClass(n.component, "focus");
                                    that._removeTag(item[that._name], that._callback);
                                }
                                else
                                    _dom.addClass(n.component, "focus");
                                menuShow_1 = false;
                            }
                            else
                                menuShow_1 = true;
                        }
                        else if (event.keyCode == 9 || event.keyCode == 27) {
                            if (that._menu && that._menu.opened)
                                that._menu.hide(target);
                        }
                        var input = _dom.query(that._input, "input");
                        if (input)
                            input.focus();
                    });
                }
                that._drag = _drag.dragManager.addDrag([that._container]);
                that._drag.canStartDragHandler = that._canStartDrag.bind(that);
                that._drag.onDragStart = that._onDragStart.bind(that);
                that._drag.onDrag = that._onDrag.bind(that);
                that._drag.onDragEnd = that._onDragEnd.bind(that);
            };
            PillBox.prototype._template = function () {
                var that = this;
                return {
                    list: '<ul class="bs-pillbox noborder"></ul>',
                    itemTag: '<li class="bs-pillbox-item bs-pillbox-item-tag" data-drag="move"></li>',
                    icon: '<span class="icon float-right ' + _dom.iconClass(that._options.removeIcon) + ' icon-remove bs-cursor-p" data-event="click" data-action="remove"></span>',
                    itemInput: '<li class="bs-pillbox-item bs-pillbox-item-edit"><input autocomplete="off" autofocus="true" placeholder="..." data-event="keyup" data-action="add,remove" /></li>'
                };
            };
            PillBox.prototype.addItem = function (name) {
                this._addTag(name);
            };
            PillBox.prototype.removeItem = function (name) {
                this._removeTag(name);
            };
            PillBox.prototype._canStartDrag = function (event) {
                var that = this;
                var target = event.target;
                var tag = _dom.parentByTag(that._container, target, 'LI');
                if (!tag)
                    return;
                var opDrag = _dom.attr(tag, 'data-drag');
                if (!opDrag)
                    return false;
                if (!tag.id)
                    tag.id = _utils.allocID();
                var drag = that._drag;
                drag.coverDocument = true;
                drag.data.op = opDrag;
                drag.data.cloneId = tag.id;
                drag.data.column = _dom.attr(tag, 'data-id');
                if (!drag.data.column)
                    return false;
                var cloned = _dom.find(that._container, drag.data.cloneId);
                drag.cursor = 'move';
                drag.moveX = true;
                drag.moveY = true;
                drag.startOffset = _dom.position(cloned, null);
                var children;
                var copts = {
                    top: 0,
                    height: cloned.offsetHeight
                };
                var nodesSelected = [];
                that.selectedItems.forEach(function (item) {
                    var nodeHTML = _dom.query(that._container, "li[data-id='" + item[that._name] + "']");
                    if (nodeHTML) {
                        if (!nodeHTML.id)
                            nodeHTML.id = _utils.allocID();
                        nodesSelected.push({ htmlId: nodeHTML.id, info: item });
                    }
                });
                drag.data.childrenPositions = _dom.childrenPositions(that._container, nodesSelected, false, 'free', copts);
                return true;
            };
            PillBox.prototype._onDragStart = function (event) {
                var that = this;
                var drag = that._drag;
                if (!drag.data.op)
                    return false;
                var eltHTML = _dom.find(that._container, drag.data.cloneId);
                var cloneHTML = eltHTML.cloneNode(true);
                var p = _dom.position(eltHTML, null);
                cloneHTML.style.top = p.top + "px";
                cloneHTML.style.left = p.left + "px";
                cloneHTML.style.width = eltHTML.offsetWidth + "px";
                cloneHTML.style.height = eltHTML.offsetHeight + "px";
                cloneHTML.style.zIndex = '5000';
                cloneHTML.style.position = 'absolute';
                cloneHTML.style.cursor = "move";
                drag.floatElement = cloneHTML;
                _dom.append(document.body, drag.floatElement);
                return true;
            };
            PillBox.prototype._onDrag = function (event) {
                var that = this;
                var drag = that._drag;
                if (!drag.data.op)
                    return false;
                var p = _events.point(event);
                var best = _dom.findNearest(p.x, p.y, drag.data.childrenPositions);
                if (drag.data.best != best) {
                    var pos = {
                        left: best.left,
                        top: best.top,
                        width: best.width,
                        height: best.height
                    };
                    drag.data.mdiv = _dom.showMove(drag.data.mdiv, best.vertical, pos, 'bs-drag-color-info');
                }
                drag.data.best = best;
                return true;
            };
            PillBox.prototype._onDragEnd = function (cancel, event) {
                var that = this;
                var drag = that._drag;
                if (!drag.data.op)
                    return false;
                if (drag.floatElement) {
                    _dom.remove(drag.floatElement);
                    drag.floatElement = null;
                }
                if (drag.data.mdiv) {
                    _dom.remove(drag.data.mdiv);
                    drag.data.mdiv = null;
                }
                if (cancel)
                    return;
                if (drag.data.best && drag.data.column) {
                    var info = drag.data.best.info;
                    if (drag.data.best.position === 'empty' || info[that._name] === drag.data.column)
                        return;
                    var src = that._getItem(that._selectedItems, drag.data.column);
                    var srcIndex = that._getItemIndex(that._selectedItems, drag.data.column);
                    that.selectedItems.splice(srcIndex, 1);
                    var destIndex = that._getItemIndex(that._selectedItems, info[that._name]);
                    destIndex = drag.data.best.position === 'after' ? destIndex + 1 : destIndex;
                    that.selectedItems.splice(destIndex, 0, src);
                    if (that._callback)
                        that._callback({ action: "drag", srcIndex: srcIndex, destIndex: destIndex, data: src });
                }
                that._renderItems();
                var input = _dom.query(that._input, "input");
                if (input)
                    input.focus();
            };
            PillBox.prototype._onMenuSelectItemHandler = function (v) {
                var that = this;
                if (v) {
                    that._addTag(v[that._name], that._callback);
                    var input = _dom.query(that._input, "input");
                    if (input)
                        input.value = "";
                }
            };
            PillBox.prototype._includeDropDownMenu = function () {
                var that = this;
                if (!that._input)
                    return;
                var input = _dom.query(that._input, "input");
                $(that._input).get(0).style.zIndex = "3000";
                that._menu = new Phoenix.formdropitems.DropItems($(that._input), input, {
                    primaryKey: that._name,
                    search: that._title,
                    onselect: that._onMenuSelectItemHandler.bind(that)
                });
            };
            PillBox.prototype._renderItems = function () {
                var that = this;
                _dom.empty(that._container);
                var frag = document.createDocumentFragment();
                renderTag(that._selectedItems, frag);
                if (that._input)
                    _dom.append(frag, that._input);
                _dom.append(that._container, frag);
                function renderTag(nodes, frag) {
                    nodes.forEach(function (node) {
                        var n = that._getItem(that._nodes, node[that._name]);
                        if (n) {
                            n.filter = false;
                            _dom.append(frag, n.component);
                        }
                    });
                }
            };
            PillBox.prototype.render = function (parent) {
                var that = this;
                if (!that._container) {
                    that._container = $(that._template().list).get(0);
                    that._renderItems();
                    that._includeDropDownMenu();
                    that._setEvents(parent);
                }
                if (parent)
                    _dom.append(parent, that._container);
                return that._container;
            };
            PillBox.prototype.remove = function () {
                var that = this;
                that._menu = null;
                if (that._drag) {
                    _drag.dragManager.rmvDrag(that._drag);
                    that._drag = null;
                }
            };
            return PillBox;
        }());
        ui.PillBox = PillBox;
    })(ui = Phoenix.ui || (Phoenix.ui = {}));
})(Phoenix || (Phoenix = {}));
/// <reference path="../../js/ui/form/form.control.ts" />
/// <reference path="../../js/ui/form/controls/absfield.control.ts" />
/// <reference path="./multiselect.ts" />
/// <reference path="./pillbox.ts" />
var Phoenix;
(function (Phoenix) {
    var ui;
    (function (ui) {
        var _ui = ui, _utils = Phoenix.utils, _uiutils = Phoenix.uiutils, _ulocale = Phoenix.ulocale, _dom = Phoenix.dom, _uiutils = Phoenix.uiutils, _sutils = Phoenix.Observable.SchemaUtils;
        var ComposantMultiSelect = /** @class */ (function (_super) {
            __extends(ComposantMultiSelect, _super);
            function ComposantMultiSelect(fp, options, form) {
                var _this = _super.call(this, fp, options, form) || this;
                var that = _this;
                that._state();
                var optionsParDefaut = {
                    mapping: {
                        id: "name",
                        lib: "title"
                    },
                    multiSelect: true,
                    pillBox: true,
                    renderModel: "top",
                    maxHeight: "300px"
                };
                var entree = that.state.value.model().entree || [];
                entree = entree.map(function (v) {
                    if (v.items && !v.items.length)
                        delete v.items;
                    return v;
                });
                that._sortie = that.state.value.sortie || [];
                that._options = $.extend(true, optionsParDefaut, that.renderOptions);
                that._name = that._options.mapping.id;
                that._title = that._options.mapping.libelle || that._options.mapping.lib;
                if (Array.isArray(entree)) {
                    that._initMultiSelectList(entree, that.state.value.model().sortie);
                    if (that._options.pillBox)
                        that._initPillBox(that._extractItems(entree, false), that.state.value.model().sortie);
                }
                return _this;
            }
            ComposantMultiSelect.prototype._initMultiSelectList = function (entree, sortie) {
                var that = this;
                if (!that.multiSelectList)
                    that.multiSelectList = new ui.MultiSelectList(entree, that._options, function (data) {
                        if (data.action === "add") {
                            if (that.pillBox)
                                that.pillBox.addItem(data.data[that._name]);
                            that._sortie.push(data.data);
                        }
                        else if (data.action === "remove") {
                            if (that.pillBox)
                                that.pillBox.removeItem(data.data[that._name]);
                            var item = that._getSortieItem(that._sortie, data.data[that._name]);
                            if (item)
                                that._sortie.remove(item.data);
                        }
                    });
                that.multiSelectList.selectedItems = sortie || [];
            };
            ComposantMultiSelect.prototype._initPillBox = function (entree, sortie) {
                var that = this;
                that.pillBox = new ui.PillBox(entree, that._options, function (data) {
                    if (data.action === "add") {
                        that.multiSelectList.addItem(data.data[that._name]);
                        that._sortie.push(data.data);
                    }
                    else if (data.action === "remove") {
                        that.multiSelectList.removeItem(data.data[that._name]);
                        var item = that._getSortieItem(that._sortie, data.data[that._name]);
                        if (item)
                            that._sortie.remove(item.data);
                    }
                    else if (data.action === "drag") {
                        var elt = that._getSortieItem(that._sortie, data.data[that._name]);
                        that._sortie.remove(elt.data);
                        that._sortie.splice(data.destIndex, 0, data.data);
                    }
                });
                that.pillBox.selectedItems = sortie || [];
            };
            ComposantMultiSelect.prototype._getSortieItem = function (items, name) {
                var that = this;
                var elt = null;
                items.forEach(function (item, i) {
                    if (item[that._name] === name) {
                        elt = { id: i, data: item };
                        return false;
                    }
                    return true;
                });
                return elt;
            };
            ComposantMultiSelect.prototype._extractItems = function (liste, groupIsItem) {
                var that = this;
                var items = [];
                extract(liste, items, groupIsItem);
                function extract(oldListe, newList, groupIsItem) {
                    oldListe.forEach(function (item) {
                        if (item.items) {
                            if (groupIsItem)
                                newList.push(item);
                            extract(item.items, newList, groupIsItem);
                        }
                        else
                            newList.push(item);
                    });
                }
                return items;
            };
            ComposantMultiSelect.prototype._state = function () {
                var that = this;
                that.state = that.state || {};
                var state = that.form.getState(that.$bind);
                Object.keys(state).forEach(function (pn) {
                    that.state[pn] = state[pn];
                });
                that.state.value = that.form.getValue(that.$bind);
            };
            ComposantMultiSelect.prototype._state2UI = function () {
                var that = this;
            };
            ComposantMultiSelect.prototype.changed = function (propName, ov, nv, op, params) {
                var that = this;
                that._sortie = that.state.value.sortie || [];
                var entree = that.state.value.model().entree || [];
                entree = entree.map(function (v) {
                    if (v.items && !v.items.length)
                        delete v.items;
                    return v;
                });
                var sortie = that.state.value.model().sortie || [];
                if (that.multiSelectList) {
                    that.multiSelectList.items = entree;
                    that.multiSelectList.selectedItems = sortie;
                }
                if (that.pillBox) {
                    that.pillBox.items = that._extractItems(entree, false);
                    that.pillBox.selectedItems = sortie;
                }
            };
            ComposantMultiSelect.prototype._template = function (id) {
                var that = this;
                var html;
                switch (that._options.renderModel) {
                    case "left":
                        html = [
                            '<div id="{0}" data-render="{0}">',
                            '<div class="row">',
                            '<div id="{0}_multiselect" class="col-sm-8">',
                            '<h5 class="bs-block-title">Choix de colonnes</h5>',
                            '<div data-id="pillbox"></div>',
                            '</div>',
                            '<div id="{0}_pillbox" class="col-sm-4">',
                            '<h5 class="bs-block-title">Liste de champs</h5>',
                            '<div data-id="multiselect" style="overflow-y:auto;max-height:' + that._options.maxHeight + ';border: 1px solid #dddddd;"></div>',
                            '</div>',
                            '</div>',
                            '</div>'
                        ];
                        break;
                    case "right":
                        html = [
                            '<div id="{0}" data-render="{0}">',
                            '<div class="row">',
                            '<div id="{0}_pillbox" class="col-sm-4">',
                            '<h5 class="bs-block-title">Liste de champs</h5>',
                            '<div data-id="multiselect" style="overflow-y:auto;max-height:' + that._options.maxHeight + ';border: 1px solid #dddddd;"></div>',
                            '</div>',
                            '<div id="{0}_multiselect" class="col-sm-8">',
                            '<h5 class="bs-block-title">Choix de colonnes</h5>',
                            '<div data-id="pillbox"></div>',
                            '</div>',
                            '</div>',
                            '</div>'
                        ];
                        break;
                    case "bottom":
                        html = [
                            '<div id="{0}" data-render="{0}">',
                            '<div id="{0}_multiselect">',
                            '<h5 class="bs-block-title">Liste de champs</h5>',
                            '<div data-id="multiselect" style="overflow-y:auto;max-height:' + that._options.maxHeight + ';border: 1px solid #dddddd;"></div>',
                            '</div>',
                            '<div id="{0}_pillbox">',
                            '<h5 class="bs-block-title">Choix de colonnes</h5>',
                            '<div data-id="pillbox"></div>',
                            '</div>',
                            '</div>'
                        ];
                        break;
                    default:
                        // top
                        html = [
                            '<div id="{0}" data-render="{0}">',
                            '<div id="{0}_pillbox">',
                            '<h5 class="bs-block-title">Choix de colonnes</h5>',
                            '<div data-id="pillbox"></div>',
                            '</div>',
                            '<div id="{0}_multiselect">',
                            '<h5 class="bs-block-title">Liste de champs</h5>',
                            '<div data-id="multiselect" style="overflow-y:auto;max-height:' + that._options.maxHeight + ';border: 1px solid #dddddd;"></div>',
                            '</div>',
                            '</div>'
                        ];
                }
                return _utils.format(html.join(""), id);
            };
            ComposantMultiSelect.prototype.render = function ($parent) {
                var that = this;
                var opts = that._initOptions(_uiutils.utils.defaultOptions);
                if (!that.$element) {
                    that.$element = $(that._template(that.id));
                    var e = that.$element.get(0);
                    if (!that._options.pillBox) {
                        var pillBoxView = _dom.find(e, that.id + "_pillbox");
                        if (pillBoxView)
                            _dom.addClass(pillBoxView, "bs-none");
                    }
                    if (that.pillBox) {
                        var pillBoxHTML = _dom.query(e, 'div[data-id="pillbox"]');
                        that.pillBox.render(pillBoxHTML);
                    }
                    if (that.multiSelectList) {
                        var multiselectHTML = _dom.query(e, 'div[data-id="multiselect"]');
                        that.multiSelectList.render(multiselectHTML);
                    }
                }
                that.appendElement($parent, opts);
                return that.$element;
            };
            return ComposantMultiSelect;
        }(ui.AbsField));
        ui.ComposantMultiSelect = ComposantMultiSelect;
        _ui.registerControl(ComposantMultiSelect, "object", false, "multiselectlist", null);
    })(ui = Phoenix.ui || (Phoenix.ui = {}));
})(Phoenix || (Phoenix = {}));
/// <reference path="../../js/core/core-refs.ts" />
/// <reference path="../filter-express/filter-express.control.ts" />
var Phoenix;
(function (Phoenix) {
    var _formgrid = Phoenix.formgrid, _ui = Phoenix.ui;
    var gridHandlers;
    (function (gridHandlers) {
        function _onSelectToolElement(toolElement) {
            var that = this;
            var toolName = toolElement.name || toolElement.id;
            if (toolElement.type === 'filter' && Phoenix.formgrid.glbGridFilter) {
                var isComposition_1 = !that.state.value.isQuery;
                return Phoenix.formgrid.glbGridFilter(that.getColumnsForFilter(isComposition_1), function (filter) {
                    if (isComposition_1) {
                        if (that.state.value) {
                            that.state.value.filterManager.filterExpress = null;
                            that.state.value.filter = filter.value;
                        }
                    }
                    else {
                        that.state.value.filterManager.filterComplex = filter;
                        that.state.value.filter = that.state.value.filterManager.constructeFilter();
                    }
                });
            }
            else if (toolElement.type === 'filterexpress') {
                var isComposition = !that.state.value.isQuery;
                if (isComposition) {
                    var cfg = that.getColumnsForFilter(isComposition);
                    var oldFilterExpress = that.state.value.filterManager.filterExpress ? that.state.value.filterManager.filterExpress.value : null;
                    var filterExpress = toolElement.value.value;
                    var oldFilter = that.state.value.filter;
                    if (oldFilter)
                        oldFilter = _ui.filter.removeMdbFilterExpress(oldFilter, oldFilterExpress, cfg.schemaColumns);
                    that.state.value.filterManager.filterExpress = toolElement.value;
                    oldFilter = _ui.filter.addMdbFilterExpress(oldFilter, filterExpress, cfg.schemaColumns);
                    that.state.value.filter = oldFilter;
                }
                else {
                    that.state.value.filterManager.filterExpress = toolElement.value;
                    that.state.value.filter = that.state.value.filterManager.constructeFilter();
                }
            }
            else if (toolElement.type === 'settings' && Phoenix.formgrid.glbGridSettings) {
                var params = that.getColumnsForSettings();
                params.options = toolElement.toolData;
                return Phoenix.formgrid.glbGridSettings(params, function (columns) {
                    that.setColumns(columns);
                });
            }
            else if (toolElement.type === 'multiselect') {
                that.toggleMultiselect();
            }
            else
                that.form.execAction(that.$bind + ".$toolbar." + toolName, { toolElement: toolElement, control: that });
        }
        function toolbarRenderHandler($parent, toolbar, $parentBottom) {
            toolbar.render($parent, $parentBottom);
        }
        function toolBarFactoryHandler(grid) {
            var toolbar = null;
            var opts = grid.fieldOptions;
            var toolElements = [];
            if (opts.toolbar && opts.toolbar.items) {
                var toolbarOptions = $.extend(true, {}, opts.toolbar);
                toolbarOptions.items.forEach(function (te) {
                    te.name = te.name || te.type;
                    if (te.lookup) {
                        var dsLookup_1 = null;
                        var notify = function (data, options) {
                            options = options || {};
                            if (options.inited && options.updated)
                                dsLookup_1.firthPage();
                            else if (data) {
                                te.value = te.value || {};
                                var value = { default: te.value.default, items: [], upd: true };
                                value.items = data || [];
                                grid.toolBar.setValue(te.name, value);
                            }
                        };
                        dsLookup_1 = new _ui.DsLookup(grid.$schemaItems.lookups[te.lookup], { notify: notify });
                    }
                    if (te.type === 'count')
                        te = $.extend({ right: true, value: grid.state.value.totalCount() }, te);
                    else if (te.type === 'filter') {
                        te = $.extend({ value: "", icon: 'filter' }, te);
                        grid.state.value.filterManager = grid.state.value.filterManager || (_ui.filterManagerFactory ? _ui.filterManagerFactory() : null);
                    }
                    else if (te.type === 'multiselect') {
                        var cv = !!(opts.selecting && opts.selecting.row && opts.selecting.multiselect);
                        te = $.extend(te, { style: "default", icon: 'check', value: cv });
                    }
                    else if (te.type === 'filterexpress') {
                        te = $.extend(te, { fields: grid.getColumnsForFilterExpress(te.fields) });
                        grid.state.value.filterManager = grid.state.value.filterManager || (_ui.filterManagerFactory ? _ui.filterManagerFactory() : null);
                    }
                    toolElements.push(te);
                });
            }
            if (toolElements.length) {
                var toptions = { selectToolElement: _onSelectToolElement.bind(grid), gridControl: grid, composition: !grid.state.value.isQuery, schema: grid.$schema, form: grid.form, bind: grid.$bind, schemaItems: grid.$schemaItems };
                toolbar = new _ui.ToolBar(toolElements, toptions);
            }
            return toolbar;
        }
        var filterData = {
            filter: {
                champs: [],
                filters: [],
                entree: []
            }
        };
        function toolBarFilterComplexe(params, callback, locale) {
            if (!params.schemaColumns.length)
                return;
            if (params.filters !== undefined)
                filterData.filter.filters = params.filters;
            var layout = {
                "name": "filtre",
                "$type": "block",
                "$items": [
                    {
                        "$type": "block",
                        "$items": [
                            {
                                "$bind": "filter",
                                "$widget": "filter",
                                "options": {
                                    "renderModel": "model1"
                                }
                            }
                        ]
                    }
                ],
                "form": true
            };
            var model = {
                "type": "object",
                "properties": {
                    "filter": {
                        "type": "object",
                        "title": "Filtre",
                        "properties": {
                            "champs": {
                                "type": "array",
                                "items": {
                                    "type": "object",
                                    "properties": {
                                        "code": { "type": "string" },
                                        "libelle": { "type": "string" },
                                        "type": { "type": "string" },
                                        "format": { "type": "string" },
                                        "decimals": { "type": "number" },
                                        "enumName": { "type": "string" },
                                        "enum": {
                                            "type": "array",
                                            "items": {
                                                "type": "object",
                                                "properties": {
                                                    "code": { "type": "string" },
                                                    "libelle": { "type": "string" }
                                                }
                                            }
                                        },
                                        "lookup": {
                                            "type": "string"
                                        }
                                    }
                                }
                            },
                            "filters": {
                                "type": "array",
                                "items": {
                                    "type": "object",
                                    "properties": {
                                        "code": { "type": "string" },
                                        "op": { "type": "string" },
                                        "values": {
                                            "type": "array",
                                            "items": {
                                                "type": "string"
                                            }
                                        },
                                        "values2": {
                                            "type": "array",
                                            "items": {
                                                "type": "object",
                                                "properties": {
                                                    "code": {
                                                        "type": "string"
                                                    },
                                                    "lib": {
                                                        "type": "string"
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            },
                            "entree": {
                                "type": "array",
                                "items": {
                                    "type": "object",
                                    "properties": {
                                        "title": {
                                            "type": "string"
                                        },
                                        "name": {
                                            "type": "string"
                                        },
                                        "items": {
                                            "type": "array",
                                            "items": {
                                                "type": "object",
                                                "properties": {}
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "definitions": {}
            };
            if (filterData.filter.champs.length)
                filterData.filter.champs.splice(0);
            _ui.filter.transformPropsToFilterFormat(filterData.filter.champs, params.schemaColumns);
            if (filterData.filter.entree)
                filterData.filter.entree = _ui.multiSelectUtils.transformPropsToMultiselectFormat(params.schemaColumns, params.schemaGroups);
            var opts = { "title": "Filtre", "buttons": [{ "pattern": "validate" }] };
            _ui.OpenModalForm(opts, layout, model, filterData, locale, function (form, action, model, formControl) {
                switch (action.property) {
                    case "validate":
                        if (!model.validate())
                            return;
                        filterData = model.model();
                        var $filter = null;
                        if (filterData.filter.filters.length) {
                            if (params.mongoFilter)
                                $filter = _ui.filter.format.toMongoDbFilter(filterData.filter.champs, filterData.filter.filters);
                            else
                                $filter = _ui.filter.format.toPhenix(filterData.filter.champs, filterData.filter.filters);
                        }
                        if (callback)
                            callback({ value: $filter, title: Phoenix.ui.filter.toTitle(filterData.filter.filters, filterData.filter.champs) });
                        form.close();
                        break;
                }
            });
        }
        ;
        function tooBarSettings(params, callback, locale) {
            var layout = {
                "name": "settings",
                "$type": "block",
                "$items": [
                    {
                        "$type": "block",
                        "$items": [
                            {
                                "$bind": "mselect",
                                "$widget": "multiselectlist",
                                "options": {
                                    multiSelect: true
                                }
                            }
                        ]
                    }
                ],
                "form": true
            };
            var model = {
                "type": "object",
                "properties": {
                    "mselect": {
                        "type": "object",
                        "properties": {
                            "entree": {
                                "type": "array",
                                "items": { "$ref": "#/definitions/elt" }
                            },
                            "sortie": {
                                "type": "array",
                                "items": {
                                    "type": "object",
                                    "properties": {
                                        "title": {
                                            "type": "string"
                                        },
                                        "name": {
                                            "type": "string"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "definitions": {
                    "elt": {
                        "type": "object",
                        "properties": {
                            "title": {
                                "type": "string"
                            },
                            "name": {
                                "type": "string"
                            },
                            "items": {
                                "type": "array",
                                "items": { "type": "object", "properties": {} }
                            }
                        }
                    }
                }
            };
            params.options = params.options || {};
            var ldata = {
                mselect: {
                    entree: _ui.multiSelectUtils.transformPropsToMultiselectFormat(params.schemaColumns, params.schemaGroups, params.options.columnsLimited),
                    sortie: _ui.multiSelectUtils.transformSelectedColumnsToMultiSelectFormat(params.schemaColumns, params.selectedColumns, params.schemaGroups, params.options.columnsLimited)
                }
            };
            var opts = { "title": params.locale && params.locale.settingsTitle ? params.locale.settingsTitle : "Options", "buttons": [{ "pattern": "validate" }] };
            _ui.OpenModalForm(opts, layout, model, ldata, locale, function (form, action, model, formControl) {
                switch (action.property) {
                    case "validate":
                        if (!model.validate())
                            return;
                        var sortie = model.model().mselect.sortie;
                        if (sortie <= 0)
                            return;
                        var columns = _ui.multiSelectUtils.transformMultiSelectColumnsToGridColumnsFormat(sortie);
                        if (callback)
                            callback(columns);
                        form.close();
                        break;
                }
            });
        }
        ;
        _formgrid.toolBarFactory = toolBarFactoryHandler;
        _formgrid.toolBarRender = toolbarRenderHandler;
        _formgrid.glbGridFilter = toolBarFilterComplexe;
        _formgrid.glbGridSettings = tooBarSettings;
        _formgrid.glbMongoFilter2Filter = _ui.filter.mongoDbFilter2Filter;
    })(gridHandlers = Phoenix.gridHandlers || (Phoenix.gridHandlers = {}));
})(Phoenix || (Phoenix = {}));
/// <reference path="../../js/core/core-refs.ts" />
/// <reference path="../filter-express/filter-express.control.ts" />
var Phoenix;
(function (Phoenix) {
    var ui;
    (function (ui) {
        var _dom = Phoenix.dom, _ui = ui, _utils = Phoenix.utils, _locale = Phoenix.locale, _uiutils = Phoenix.uiutils, _observable = Phoenix.Observable, _sutils = _observable.SchemaUtils, _link = Phoenix.link;
        var ToolElement = /** @class */ (function () {
            function ToolElement(config, options) {
                var that = this;
                that.id = _utils.allocID();
                that.config = config || {};
                that.options = options || {};
            }
            ToolElement.prototype.getValue = function () {
                return this.config.value;
            };
            ToolElement.prototype.setValue = function (value) {
                var that = this;
                that.config.value = value;
                that.update();
            };
            ToolElement.prototype.setOptions = function (value) {
                var that = this;
                that.options = $.extend(true, that.options, value);
                that.updateRender();
            };
            ToolElement.prototype.createElement = function (index, config, data) {
                return _utils.format('<div data-tool-id="{0}" class="bs-toolbar-item">A</div>', this.id);
            };
            ToolElement.prototype.refresh = function () {
                var that = this;
                this.update();
                that.updateRender();
            };
            ToolElement.prototype.beforeAppend = function () { };
            ToolElement.prototype.after = function () { };
            ToolElement.prototype.render = function ($parent) {
                var that = this;
                if (!that.$element) {
                    that.$element = $(that.createElement(that.config.id, that.config, that.config.value));
                    that._setEvents();
                    that.beforeAppend();
                }
                if ($parent)
                    _dom.append($parent.get(0), that.$element.get(0));
                return that.$element;
            };
            ToolElement.prototype.destroy = function () {
                var that = this;
                that._removeEvents();
                that.$element = null;
                that.options = null;
                that.config = null;
            };
            ToolElement.prototype._setEvents = function () { };
            ToolElement.prototype._removeEvents = function () { };
            ToolElement.prototype.update = function () { };
            ToolElement.prototype.updateRender = function () { };
            return ToolElement;
        }());
        ui.ToolElement = ToolElement;
        var ToolElementTitle = /** @class */ (function (_super) {
            __extends(ToolElementTitle, _super);
            function ToolElementTitle(config, options) {
                return _super.call(this, config, options) || this;
            }
            ToolElementTitle.prototype.createElement = function (index, config, data) {
                var css = [];
                if (config.style)
                    css.push(config.style);
                var balise = config.widget = config.widget || "h4";
                var html = [
                    '<div data-tool-id="{0}" class="bs-toolbar-item">',
                    '<' + balise + ' class="' + css.join(' ') + '" style="display:inline-block" data-id="title">',
                    config.value || "",
                    '</' + balise + '>',
                    '</div>'
                ];
                return _utils.format(html.join(''), this.id);
            };
            ToolElementTitle.prototype.update = function () {
                var that = this;
                if (!that.$element)
                    return;
                var titleElement = _dom.query(that.$element.get(0), that.config.widget + '[data-id="title"]');
                _dom.text(titleElement, that.config.value);
            };
            return ToolElementTitle;
        }(ToolElement));
        ui.ToolElementTitle = ToolElementTitle;
        var ToolElementIcon = /** @class */ (function (_super) {
            __extends(ToolElementIcon, _super);
            function ToolElementIcon(config, options) {
                return _super.call(this, config, options) || this;
            }
            ToolElementIcon.prototype.createElement = function (index, config, data) {
                var css = [];
                if (config.style)
                    css.push(config.style);
                var balise = config.widget = config.widget || "h4";
                var html = [
                    '<div data-tool-id="{0}" class="bs-toolbar-item">',
                    '<span class="' + css.join(' ') + ' ' + (config.value || "") + '"></span>',
                    '</div>'
                ];
                return _utils.format(html.join(''), this.id);
            };
            return ToolElementIcon;
        }(ToolElement));
        ui.ToolElementIcon = ToolElementIcon;
        var ToolElementButton = /** @class */ (function (_super) {
            __extends(ToolElementButton, _super);
            function ToolElementButton(config, options) {
                return _super.call(this, config, options) || this;
            }
            ToolElementButton.prototype.createElement = function (index, config, data) {
                var css = ["bs-button btn"];
                var style = _dom.bootstrapStyles().secondary;
                config.style = config.style.trim();
                if (config.style) {
                    style = config.style;
                    style = _dom.bootstrapStyles(true).secondary;
                    if (style === 'default')
                        style = _dom.bootstrapStyles(true).secondary;
                }
                css.push('btn-' + style);
                var html = [
                    '<div data-tool-id="{0}" class="bs-toolbar-item">',
                    '<button id="toolbar-item' + (config.name ? "-" + config.name : "") + '" toolClick="' + index + '" type="button" class="' + css.join(" ") + '">',
                    (config.icon ? '<span class="' + _dom.iconClass(config.icon) + '" toolClick="' + index + '" ></span>' : ''),
                    (config.title ? '&nbsp;' + config.title : ''),
                    '</button>',
                    '</div>'
                ];
                return _utils.format(html.join(''), this.id);
            };
            return ToolElementButton;
        }(ToolElement));
        ui.ToolElementButton = ToolElementButton;
        var ToolElementCount = /** @class */ (function (_super) {
            __extends(ToolElementCount, _super);
            function ToolElementCount(config, options) {
                return _super.call(this, config, options) || this;
            }
            ToolElementCount.prototype.createElement = function (index, config, data) {
                var css = ['badge-secondary', 'form-control-plaintext', 'bs-toolbar-item', "bs-toolbar-item-count"];
                var html = ['<span data-tool-id="{0}" tool="' + index + '" class="' + css.join(' ') + '">' + data + '</span>'];
                return _utils.format(html.join(''), this.id);
            };
            ToolElementCount.prototype.update = function () {
                var that = this;
                if (!that.$element)
                    return;
                _dom.text(that.$element.get(0), that.config.value);
            };
            return ToolElementCount;
        }(ToolElement));
        ui.ToolElementCount = ToolElementCount;
        var ToolElementDropdownAction = /** @class */ (function (_super) {
            __extends(ToolElementDropdownAction, _super);
            function ToolElementDropdownAction(config, options) {
                return _super.call(this, config, options) || this;
            }
            ToolElementDropdownAction.prototype.createElement = function (index, config, data) {
                var css = ["bs-toolbar-item dropdown"];
                var actionsView = [];
                // action : {name, events}
                config.actions && config.actions.forEach(function (action) {
                    if (Phoenix.bootstrap4)
                        actionsView.push('<a href="#" class="dropdown-item" data-id="' + action.code + '">' + (action.lib || action.code) + '</a>');
                    else
                        actionsView.push('<li data-id="' + action.code + '"><a href="#" data-id="' + action.code + '">' + (action.lib || action.code) + '</a></li>');
                });
                var title = [];
                if (!config.title && !config.icon)
                    title.push('<span class="' + _dom.iconClass("bars") + '"></span> ');
                if (config.icon)
                    title.push('<span class="' + _dom.iconClass(config.icon) + '"></span> ');
                if (config.title)
                    title.push(' ' + config.title + " ");
                var html = [
                    '<div  data-tool-id="{0}" tabindex="' + index + '" class="' + css.join(" ") + '">',
                    '<button class="bs-button btn btn-' + _dom.bootstrapStyles(true).secondary + ' dropdown-toggle" id="tooltip-dropdown-' + index + '" type="button" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">',
                    title.join(''),
                    '</button>',
                    Phoenix.bootstrap4 ? '<div class="dropdown-menu dropdown-menu-right" aria-labelledby="tooltip-dropdown-' + index + '" data-id="toolCommands">'
                        : '<ul class="dropdown-menu dropdown-menu-right" aria-labelledby="tooltip-dropdown-' + index + '" data-id="toolCommands">',
                    actionsView.join(''),
                    Phoenix.bootstrap4 ? '</div>' : '</ul>',
                    '</div>'
                ];
                return _utils.format(html.join(''), this.id);
            };
            ToolElementDropdownAction.prototype.click = function (event) {
                var that = this;
                var target = event.target;
                var commandCode = _dom.attr(target, "data-id");
                if (commandCode && that.options.callback)
                    that.options.callback({ id: that.config.id, name: that.config.name, type: that.config.type, value: commandCode, toolData: that.config });
            };
            return ToolElementDropdownAction;
        }(ToolElement));
        ui.ToolElementDropdownAction = ToolElementDropdownAction;
        var ToolElementArrayAction = /** @class */ (function (_super) {
            __extends(ToolElementArrayAction, _super);
            function ToolElementArrayAction(config, options) {
                var _this = _super.call(this, config, options) || this;
                var that = _this;
                that._form = that.options.form;
                that._schema = that.options.schema;
                that._schemaItems = that.options.schemaItems;
                that._bind = that.options.bind;
                that._grid = that.options.gridControl;
                that._selected = [];
                config.links = config.links || [];
                config.title = config.title || _locale.ui.Actions;
                config.options = config.options || {};
                if (config.options.caret === undefined)
                    config.options.caret = true;
                config.options.type = config.options.type || 'secondary';
                if (config.options.titleIsHidden) {
                    config.options.icon = config.options.icon || config.right ? 'ellipsis-v' : 'bars';
                }
                var schemaLinks = that._schema.links || {};
                config.links.forEach(function (link) {
                    link.id = _utils.allocID();
                    if (!schemaLinks[link.name]) {
                        console.log('Invalid link name: ' + link.name);
                        return;
                    }
                    link.options = link.options || {};
                    link.options.type = link.options.type || 'secondary';
                    link.schema = schemaLinks[link.name];
                    link.bind = that._bind + '.$links.' + link.name;
                    link.isHidden = false;
                    that._form.registerListenerFor(link.bind, that);
                });
                that._form.registerListenerFor(that._bind, that);
                that._updateselected();
                that._state();
                return _this;
            }
            ToolElementArrayAction.prototype.beforeAppend = function () {
                this._state2Ui();
            };
            ToolElementArrayAction.prototype._state2Ui = function () {
                var that = this;
                var actionsVisible = 0;
                that.config.links.forEach(function (link) {
                    var isVisible = !link.state.isHidden;
                    if (isVisible) {
                        if (link.schema.select) {
                            if (that._selected.length) {
                                if (!link.schema.select.multiselect)
                                    isVisible = that._selected.length === 1;
                            }
                            else
                                isVisible = false;
                        }
                    }
                    if (isVisible && !link.important)
                        actionsVisible++;
                    if (that.$element) {
                        var ei = _dom.find(that.$element.get(0), link.id);
                        if (isVisible)
                            _dom.removeClass(ei, 'bs-none');
                        else if (!_dom.hasClass(ei, 'bs-none'))
                            _dom.addClass(ei, 'bs-none');
                        if (isVisible) {
                            if (link.state.isDisabled) {
                                if (!_dom.hasClass(ei, 'disabled'))
                                    _dom.addClass(ei, 'disabled');
                            }
                            else {
                                _dom.removeClass(ei, 'disabled');
                            }
                        }
                    }
                });
                if (that.$element) {
                    var ei = _dom.find(that.$element.get(0), 'actions_' + that.id);
                    if (actionsVisible)
                        _dom.removeClass(ei, 'bs-none');
                    else if (!_dom.hasClass(ei, 'bs-none'))
                        _dom.addClass(ei, 'bs-none');
                }
            };
            ToolElementArrayAction.prototype._updateselected = function () {
                var that = this;
                var value = that._form.getValue(that._bind);
                if (value)
                    that._selected = value.getSelectedItems(that._grid.renderOptions.expandingProperty);
            };
            ToolElementArrayAction.prototype._stateOfLink = function (link) {
                var that = this;
                var state = that._form.getState(link.bind);
                link.state = link.state || {};
                Object.keys(state).forEach(function (pn) { link.state[pn] = state[pn]; });
            };
            ToolElementArrayAction.prototype._state = function () {
                var that = this;
                that.config.links.forEach(function (link) {
                    that._stateOfLink(link);
                });
            };
            ToolElementArrayAction.prototype.findLinkByBind = function (bind) {
                var that = this;
                for (var i = 0; i < that.config.links.length; i++) {
                    if (that.config.links[i].bind === bind)
                        return that.config.links[i];
                }
                return null;
            };
            ToolElementArrayAction.prototype.findLinkById = function (id) {
                var that = this;
                for (var i = 0; i < that.config.links.length; i++) {
                    if (that.config.links[i].id === id)
                        return that.config.links[i];
                }
                return null;
            };
            ToolElementArrayAction.prototype.stateChanged = function (propName, params) {
                var that = this;
                if (propName && params && params.property && params.property.indexOf('.$links') >= 0) {
                    var link_4 = that.findLinkByBind(params.property);
                    if (link_4) {
                        that._stateOfLink(link_4);
                        that._state2Ui();
                    }
                }
            };
            ToolElementArrayAction.prototype.changed = function (propName, ov, nv, op, params) {
                var that = this;
                if (!that.$element)
                    return;
                var pp = propName.substr(that._bind.length);
                if (pp.indexOf('.$selected') >= 0)
                    return;
                if (pp.indexOf('.$links') >= 0)
                    return;
                if (op === 'propchange' || op === 'add' || op === 'remove') {
                    if (propName === that._bind) {
                        that._updateselected();
                        that._state2Ui();
                    }
                    else {
                        var prop = propName;
                        var instPath = _sutils.parsePath(that._bind, prop, that._grid.renderOptions.expandingProperty);
                        var item = params[instPath];
                        if (item) {
                            var cp = propName.substr(instPath.length + 1);
                            if (!cp)
                                return;
                            if (_sutils.isSelectField(cp)) {
                                that._updateselected();
                                that._state2Ui();
                            }
                        }
                    }
                }
            };
            ToolElementArrayAction.prototype._createImportantActions = function (html) {
                var that = this;
                that.config.links.forEach(function (link) {
                    if (link.important) {
                        html.push('<div id="' + link.id + '" class="bs-toolbar-item' + (that.config.right ? ' right' : '') + ' " title="' + _utils.escapeHtml(link.schema.title) + '">');
                        var outline = false;
                        if (link.options.outline !== undefined)
                            outline = link.options.outline;
                        else if (['default', 'info', 'secondary', 'danger'].indexOf(link.options.type) >= 0)
                            outline = true;
                        html.push('<button data-action-id="' + link.id + '" class="bs-button btn btn-' + _dom.bootstrapStyles(outline)[link.options.type] + '" type="button">');
                        var hasIcon = false;
                        if (link.options.icon) {
                            hasIcon = true;
                            html.push('<span data-action-id="' + link.id + '" class="' + _dom.iconClass(link.options.icon) + '"></span>');
                        }
                        if (!link.options.titleIsHidden && link.schema.title) {
                            html.push('<span data-action-id="' + link.id + '" ' + (hasIcon ? 'class="d-none d-md-inline-block">&nbsp;' : '>') + _utils.escapeHtml(link.schema.title) + '</span>');
                        }
                        html.push('</button>');
                        html.push('</div>');
                    }
                });
            };
            ToolElementArrayAction.prototype._createMenuActions = function (html) {
                var that = this;
                that.config.links.forEach(function (link) {
                    if (!link.important) {
                        html.push('<a id="' + link.id + '" data-action-id="' + link.id + '" href="#" class="dropdown-item">' + _utils.escapeHtml(link.schema.title) + '</a>');
                    }
                });
            };
            ToolElementArrayAction.prototype.createElement = function (index, config, data) {
                var that = this;
                var html = [];
                html.push('<div  data-tool-id="{0}" tabindex="{1}" class="bs-toolbar-item ' + (that.config.right ? ' right' : '') + (that.config.bottom ? ' bottom' : '') + '">');
                that._createImportantActions(html);
                html.push('<div class="dropdown">');
                html.push('<button id="actions_{0}" title="' + _utils.escapeHtml(config.title) + '" class="bs-button btn btn-' + _dom.bootstrapStyles(true)[config.options.type] + (config.options.caret ? ' dropdown-toggle' : '') + '" id="tooltip-dropdown-{1}" type="button" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">');
                if (config.options.icon)
                    html.push('<span class="' + _dom.iconClass(config.options.icon) + '"></span>');
                if (!config.options.titleIsHidden)
                    html.push('<span class="d-none d-md-inline-block">&nbsp;' + _utils.escapeHtml(config.title) + ' </span>');
                html.push('</button>');
                html.push('<div class="dropdown-menu dropdown-menu-right" aria-labelledby="tooltip-dropdown-{1}" data-id="toolCommands">');
                that._createMenuActions(html);
                html.push('</div>');
                html.push('</div>');
                html.push('</div>');
                return _utils.format(html.join(''), that.id, index);
            };
            ToolElementArrayAction.prototype.destroy = function () {
                var that = this;
                if (that._bind) {
                    that._form.unRegisterListenerFor(that._bind, that);
                    that._bind = null;
                }
                if (that.config) {
                    that.config.links.forEach(function (link) {
                        that._form.unRegisterListenerFor(link.bind, that);
                    });
                }
                that._grid = null;
                that._form = null;
                that._schema = null;
                that._schemaItems = null;
                _super.prototype.destroy.call(this);
            };
            ToolElementArrayAction.prototype.click = function (event) {
                var that = this;
                var target = event.target;
                if (target.href) {
                    event.preventDefault();
                }
                var actionId = _dom.attr(target, 'data-action-id');
                if (actionId) {
                    var link_5 = that.findLinkById(actionId);
                    if (link_5) {
                        if (!link_5.isHidden && !link_5.state.isDisabled && !link_5.state.isHidden)
                            that._form.execAction(link_5.bind, link_5.schema.select ? that._selected : null);
                        if (that._grid)
                            that._grid.setFocus();
                    }
                }
            };
            return ToolElementArrayAction;
        }(ToolElement));
        ui.ToolElementArrayAction = ToolElementArrayAction;
        var ToolElementSelect = /** @class */ (function (_super) {
            __extends(ToolElementSelect, _super);
            function ToolElementSelect(config, options) {
                var _this = _super.call(this, config, options) || this;
                var that = _this;
                config.value = config.value || {};
                // Test
                config.value.default = _link.context().$url.idTra;
                // Test
                config.value.items = config.value.items || [];
                return _this;
            }
            ToolElementSelect.prototype.createElement = function (index, config, data) {
                var css = ["bs-toolbar-item"];
                var actionsView = [];
                // action : {name, events}
                config.value.items && config.value.items.forEach(function (action) {
                    actionsView.push('<option value="' + action.code + '" ' + (config.value.default == action.code ? "selected" : "") + '>' + (action.lib || action.code) + '</option>');
                });
                var html = [
                    '<div data-tool-id="{0}" tabindex="' + index + '" class="' + css.join(" ") + '">',
                    '<div class="input-group">',
                    '<span class="input-group-prepend">',
                    '<span class="input-group-text">',
                    (config.title || ""),
                    '</span>',
                    '</span>',
                    '<select class="form-control" data-id="toolSelect">',
                    actionsView.join(""),
                    '</select>',
                    '</div>',
                    '</div>'
                ];
                return _utils.format(html.join(''), this.id);
            };
            ToolElementSelect.prototype._select = function () {
                var that = this;
                if (that.$element) {
                    var e = that.$element.get(0);
                    if (e) {
                        return _dom.query(that.$element.get(0), "select[data-id='toolSelect']");
                    }
                }
            };
            ToolElementSelect.prototype.update = function () {
                var that = this;
                if (!that.$element)
                    return;
                var frag = document.createDocumentFragment();
                that.config.value.items && that.config.value.items.forEach(function (action) {
                    _dom.append(frag, $('<option value="' + action.code + '" ' + (that.config.value.default == action.code ? "selected" : "") + '>' + (action.lib || action.libelle || action.code) + '</option>').get(0));
                });
                var selectView = that._select();
                if (selectView) {
                    _dom.empty(selectView);
                    _dom.append(selectView, frag);
                }
            };
            ToolElementSelect.prototype._setEvents = function () {
                var that = this;
                var selectView = that._select();
                if (selectView)
                    $(selectView).change(function (event) {
                        var target = event.target;
                        var optionView = target.options[target.selectedIndex];
                        if (that.options.callback)
                            that.options.callback({ id: that.config.id, name: that.config.name, type: that.config.type, value: optionView.value, toolData: that.config });
                    });
            };
            ToolElementSelect.prototype._removeEvents = function () {
                var that = this;
                var selectView = that._select();
                if (selectView)
                    $(selectView).off('change');
            };
            return ToolElementSelect;
        }(ToolElement));
        ui.ToolElementSelect = ToolElementSelect;
        var ToolElementSearch = /** @class */ (function (_super) {
            __extends(ToolElementSearch, _super);
            function ToolElementSearch(config, options) {
                var _this = _super.call(this, config, options) || this;
                _this.config.value = "";
                _this.oldValue = "";
                return _this;
            }
            ToolElementSearch.prototype.createElement = function (index, config, data) {
                var css = [];
                var html = [
                    '<div data-tool-id="{0}" tabindex="' + index + '" class="bs-toolbar-item input-group' + css.join(" ") + '">',
                    '<input toolKeyup="' + index + '" type="text" class="form-control" placeholder="' + (config.title || "Recherche") + '" />',
                    '<span class="input-group-append">',
                    '<button toolClick="' + index + '" class="bs-button btn btn-' + _dom.bootstrapStyles(true).secondary + '" type="button">',
                    '<span toolClick="' + index + '" class="' + _dom.iconClass(config.icon || "search") + '"> </span>',
                    '</button>',
                    '</span>',
                    '</div>'
                ];
                return _utils.format(html.join(''), this.id);
            };
            ToolElementSearch.prototype.update = function () {
                var that = this;
                if (!that.$element)
                    return;
                var input = _dom.query(that.$element.get(0), "input");
                if (input)
                    input.value = that.config.value;
            };
            ToolElementSearch.prototype.getValue = function () {
                var that = this;
                that.oldValue = that._getInputValue();
                return that.oldValue;
            };
            ToolElementSearch.prototype._getInputValue = function () {
                var that = this;
                if (!that.$element)
                    return;
                var input = _dom.query(that.$element.get(0), "input");
                if (input)
                    return input.value;
                return null;
            };
            ToolElementSearch.prototype._setEvents = function () {
                var that = this;
                if (!that.$element)
                    return;
                var div = that.$element.get(0);
                if (div) {
                    var input_4 = _dom.query(div, "input");
                    var btn_1 = _dom.query(div, "button");
                    input_4.addEventListener('focus', function (event) {
                        input_4.select();
                    });
                    div.addEventListener('blur', function (event) {
                        var isNotBtnSearch = event.explicitOriginalTarget && event.explicitOriginalTarget != btn_1 && event.relatedTarget == null;
                        isNotBtnSearch = isNotBtnSearch || (event.relatedTarget == null || (event.relatedTarget && event.relatedTarget != btn_1)) && event.explicitOriginalTarget == undefined;
                        if (event.target == input_4 && isNotBtnSearch) {
                            //if (!that._getInputValue() && that.filtering){
                            that.config.value = " ";
                            that.setValue(that.oldValue);
                        }
                    }, true);
                }
            };
            return ToolElementSearch;
        }(ToolElement));
        ui.ToolElementSearch = ToolElementSearch;
        var ToolElementFilterExpress = /** @class */ (function (_super) {
            __extends(ToolElementFilterExpress, _super);
            function ToolElementFilterExpress(config, options) {
                var _this = _super.call(this, config, options) || this;
                var that = _this;
                that.config.value = config.fields || that.config.value;
                that._init();
                return _this;
            }
            ToolElementFilterExpress.prototype._init = function () {
                var that = this;
                var options = that.options || {};
                that.filterExpress = new _ui.FilterExpress(that.config.fields || [], function (filters) {
                    if (that.options.callback) {
                        filters = filters ? (Array.isArray(filters) ? filters : [filters]) : null;
                        var lfilter = null;
                        if (filters && filters.length) {
                            lfilter = that.options.mongoDbFilter ? ui.filter.format.toMongoDbFilter(that.config.fields, filters) : _ui.filter.format.toPhenix(that.config.fields, filters);
                        }
                        var ltitle = "";
                        if (lfilter)
                            ltitle = that._formatTitle(that.config.fields, filters);
                        that.options.callback({ id: that.config.id, name: that.config.name, type: that.config.type, value: { title: ltitle, value: lfilter }, toolData: that.config });
                    }
                }, options);
            };
            ToolElementFilterExpress.prototype.createElement = function (index, config, data) {
                var css = [];
                return Phoenix.utils.format('<div data-tool-id="{0}" class="bs-toolbar-item ' + css.join(" ") + '"></div>', this.id);
            };
            ToolElementFilterExpress.prototype.render = function ($parent) {
                var that = this;
                if (!that.$element) {
                    that.$element = $(that.createElement(that.config.id, that.config, that.config.value));
                    if (that.filterExpress)
                        that.filterExpress.render(that.$element);
                }
                if ($parent)
                    _dom.append($parent.get(0), that.$element.get(0));
                return that.$element;
            };
            ToolElementFilterExpress.prototype.updateRender = function () {
                var that = this;
                _dom.empty(that.$element.get(0));
                that._init();
                if (that.filterExpress)
                    that.filterExpress.render(that.$element);
            };
            ToolElementFilterExpress.prototype._formatTitle = function (fields, filters) {
                return ui.filter.format.toTitle(filters, fields);
            };
            ToolElementFilterExpress.prototype.update = function () {
                var that = this;
                if (!that.$element)
                    return;
                that.config.value = that.config.fields || that.config.value || [];
                that.filterExpress.fields = that.config.value;
            };
            return ToolElementFilterExpress;
        }(ToolElement));
        ui.ToolElementFilterExpress = ToolElementFilterExpress;
        var ToolElementFilter = /** @class */ (function (_super) {
            __extends(ToolElementFilter, _super);
            function ToolElementFilter(config, options) {
                return _super.call(this, config, options) || this;
            }
            ToolElementFilter.prototype.createElement = function (index, config, data) {
                var css = ["bs-button btn btn-" + _dom.bootstrapStyles(true).secondary];
                var html = [
                    '<div data-tool-id="{0}" class="bs-toolbar-item">',
                    '<button toolClick="' + index + '" type="button" class="' + css.join(" ") + '">',
                    (config.icon ? '<span toolClick="' + index + '" class="' + _dom.iconClass(config.icon) + '"></span>' : ''),
                    (config.title ? '&nbsp;' + config.title : ''),
                    '</button>',
                    '<span class="bs-toolbar-item-filter ' + (Phoenix.bootstrap4 ? 'form-control-plaintext' : 'form-control-static') + ' bs-cursor-h"></span>',
                    '</div>'
                ];
                return _utils.format(html.join(''), this.id);
            };
            ToolElementFilter.prototype.addTooltip = function (data) {
                var that = this;
                var tooltip = $('<span data-toggle="tooltip" data-phoenix-tooltip="true" data-placement="auto" title= "' + data + '"> ' + data + ' </span>');
                var tt = _dom.query(that.$element.get(0), ".bs-toolbar-item-filter");
                _dom.empty(tt);
                _dom.append(tt, tooltip.get(0));
                if (tooltip["tooltip"])
                    tooltip["tooltip"]({
                        html: true,
                        container: 'body',
                        template: '<div class="tooltip bs-tooltip-help" role="tooltip"><div class="tooltip-arrow"></div><div class="tooltip-inner" style="text-align:left"></div></div>'
                    });
            };
            ToolElementFilter.prototype.update = function () {
                var that = this;
                if (!that.$element)
                    return;
                that.addTooltip(that.config.value);
            };
            ToolElementFilter.prototype.render = function ($parent) {
                _super.prototype.render.call(this, $parent);
                var that = this;
                that.addTooltip(that.config.value);
            };
            return ToolElementFilter;
        }(ToolElement));
        ui.ToolElementFilter = ToolElementFilter;
        var ToolBar = /** @class */ (function () {
            function ToolBar(toolElements, options) {
                var that = this;
                that.id = _utils.allocID();
                that.options = options || {};
                that._map = {};
                that.toolElements = toolElements || [];
                that._schema = options.schema;
                that._form = options.form;
                that._schemaItems = options.schemaItems;
                that._bind = options.bind;
            }
            // subcontrols
            ToolBar.prototype.getSubControls = function () {
                var that = this;
                var res = null;
                that.toolElements.forEach(function (item) {
                    if (item.type === 'control') {
                        res = res || [];
                        item.options = item.options || {};
                        item.options.inline = true;
                        item.options._parentId = _utils.allocID();
                        res.push(item);
                    }
                });
                return res;
            };
            ToolBar.prototype.addSubControls = function (control) {
                var that = this;
                that._subcontrols = that._subcontrols || [];
                that._subcontrols.push(control);
            };
            ToolBar.prototype.getChildren = function () {
                var that = this;
                if (!that._subcontrols) {
                    return null;
                }
                var res = [];
                that._subcontrols.forEach(function (item) {
                    res.push({ control: item, parent: item.fieldOptions._parentId });
                });
                that._subcontrols = null;
                return res;
            };
            Object.defineProperty(ToolBar.prototype, "form", {
                // end subcontrols
                get: function () {
                    return this._form;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(ToolBar.prototype, "schema", {
                get: function () {
                    return this._schema;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(ToolBar.prototype, "schemaItems", {
                get: function () {
                    return this._schemaItems;
                },
                enumerable: true,
                configurable: true
            });
            ToolBar.prototype.htmlRoots = function () {
                var that = this;
                var res = [];
                if (that.$elementTop)
                    res.push({ position: 'top', element: that.$elementTop.get(0) });
                if (that.$elementBottom)
                    res.push({ position: 'bottom', element: that.$elementBottom.get(0) });
                return res;
            };
            ToolBar.prototype.execClick = function (event) {
                var that = this;
                var index = _dom.attr(event.target, "toolClick");
                if (index !== null)
                    that._onToolElement('click', index);
                else {
                    var control = that._idComponent(event.target);
                    if (control && control.click)
                        control.click(event);
                }
            };
            ToolBar.prototype._idComponent = function (el) {
                var that = this;
                if (!that.$elementTop)
                    return null;
                var t = el, root = that.$elementTop.get(0), id;
                while (t) {
                    if (!t.getAttribute)
                        return null;
                    id = t.getAttribute('data-tool-id');
                    if (id)
                        return that._map[id];
                    t = (t === root || t === document.body) ? null : t.parentNode;
                }
                if (that.$elementTop)
                    return null;
            };
            ToolBar.prototype.getToolElement = function (indexOrName) {
                var e = null;
                this.toolElements.forEach(function (item, i) {
                    if (i == indexOrName || item.name === indexOrName) {
                        e = item.$component;
                        return false;
                    }
                });
                return e;
            };
            ToolBar.prototype.setValue = function (name, value) {
                var that = this;
                var te = that.getToolElement(name);
                if (te)
                    te.setValue(value);
            };
            ToolBar.prototype.getValue = function (name) {
                var that = this;
                var te = that.getToolElement(name);
                if (te)
                    return te.getValue();
                return;
            };
            ToolBar.prototype.refresh = function () {
                this.toolElements.forEach(function (item) {
                    var te = item.$component;
                    if (te)
                        te.refresh();
                });
            };
            ToolBar.prototype.setOptions = function (name, value) {
                var that = this;
                var te = that.getToolElement(name);
                if (te)
                    te.setOptions(value);
            };
            ToolBar.prototype.getOptions = function (name) {
                var that = this;
                var te = that.getToolElement(name);
                if (te)
                    return te.getOptions();
                return;
            };
            ToolBar.prototype._onToolElement = function (action, id) {
                var that = this;
                if (id >= 0) {
                    var toolData = that.getToolElement(id);
                    if (toolData && that.options.selectToolElement) {
                        var value = toolData.getValue();
                        toolData.after();
                        that.options.selectToolElement({ id: toolData.config.id, type: toolData.config.type, name: toolData.config.name, value: value, toolData: toolData.config }, action);
                    }
                }
            };
            ToolBar.prototype._setEvents = function () {
                var that = this;
                if (that.$elementTop && !that.options.gridControl) {
                    that.$elementTop.on('click', function (event) {
                        that.execClick(event);
                    });
                }
                if (that.$elementTop) {
                    that.$elementTop.on('keyup', function (event) {
                        if (event.keyCode == 13) {
                            var index = _dom.attr(event.target, "toolKeyup");
                            that._onToolElement("keyup", index);
                        }
                    });
                }
                if (that.$elementBottom && !that.options.gridControl) {
                    that.$elementBottom.on('click', function (event) {
                        that.execClick(event);
                    });
                }
            };
            ToolBar.prototype._controlById = function (id) {
                return this._map[id];
            };
            ToolBar.prototype._removeEvents = function () {
                var that = this;
                if (that.$elementTop)
                    that.$elementTop.off('click');
                if (that.$elementBottom)
                    that.$elementBottom.off('click');
            };
            ToolBar.prototype._renderToolElements = function (toolElements) {
                var that = this;
                if (!toolElements.length)
                    return;
                if (!that.$elementTop)
                    return;
                var e = that.$elementTop.get(0);
                var eLeft = _dom.find(e, that.id + '_top_left');
                var eRight = _dom.find(e, that.id + '_top_right');
                var eb = that.$elementBottom ? that.$elementBottom.get(0) : null;
                var eBottomLeft = eb ? _dom.find(eb, that.id + '_bottom_left') : null;
                var eBottomRight = eb ? _dom.find(eb, that.id + '_bottom_right') : null;
                that._map = {};
                toolElements.forEach(function (item, index) {
                    item.id = index;
                    var type = item.type;
                    var options = $.extend(true, { callback: that.options.selectToolElement }, item.options || {});
                    options.form = that._form;
                    options.schema = that._schema;
                    options.schemaItems = that._schemaItems;
                    options.bind = that._bind;
                    options.gridControl = that.options.gridControl;
                    switch (type.toLowerCase()) {
                        case 'control':
                            break;
                        case "count":
                            item.$component = new ToolElementCount(item, options);
                            break;
                        case "filter":
                            item.$component = new ToolElementFilter(item, options);
                            break;
                        case "search":
                            item.$component = new ToolElementSearch(item, options);
                            break;
                        case "filterexpress":
                            options.mongoDbFilter = that.options.composition;
                            item.$component = new ToolElementFilterExpress(item, options);
                            break;
                        case "dropdownaction":
                            item.$component = new ToolElementDropdownAction(item, options);
                            break;
                        case "links":
                            item.$component = new ToolElementArrayAction(item, options);
                            break;
                        case "select":
                            item.$component = new ToolElementSelect(item, options);
                            break;
                        case "title":
                            item.$component = new ToolElementTitle(item, options);
                            break;
                        case "icon":
                            item.$component = new ToolElementIcon(item, options);
                            break;
                        default:
                            item.style = item.style || item.type;
                            item.$component = new ToolElementButton(item, options);
                            break;
                    }
                    if (item.$component) {
                        that._map[item.$component.id] = item.$component;
                        var $p = item.bottom ? (eb ? (item.right ? $(eBottomRight) : $(eBottomLeft)) : null) : (item.right ? $(eRight) : $(eLeft));
                        if ($p)
                            item.$component.render($p);
                    }
                    else if (type.toLowerCase() === 'control') {
                        var $p = item.bottom ? (eb ? (item.right ? $(eBottomRight) : $(eBottomLeft)) : null) : (item.right ? $(eRight) : $(eLeft));
                        if ($p) {
                            $p.append($(_utils.format('<div id="{0}" class="bs-toolbar-item"></div>', item.options._parentId)));
                        }
                    }
                });
            };
            ToolBar.prototype.render = function ($parentTop, $parentBottom) {
                var that = this;
                var doRender = false;
                var _bootstrap4 = Phoenix.bootstrap4;
                var html = [
                    '<div class="container-fluid no-x-padding no-x-margin">',
                    '<div class="bs-island bs-toolbar" data-render="{2}">',
                    '<div class="bs-toolbar-left mr-auto form-inline" id="{0}_{1}_left"></div>',
                    '<div class="bs-toolbar-right form-inline" id="{0}_{1}_right"></div>',
                    '</div>',
                    '</div>'
                ];
                if ($parentTop && !that.$elementTop) {
                    that.$elementTop = $(_utils.format(html.join(''), that.id, 'top', that.options.gridControl ? that.options.gridControl.id : that.id));
                    doRender = true;
                }
                if ($parentBottom && !that.$elementBottom) {
                    that.$elementBottom = $(_utils.format(html.join(''), that.id, 'bottom', that.options.gridControl ? that.options.gridControl.id : that.id));
                    doRender = true;
                }
                if (doRender) {
                    that._renderToolElements(that.toolElements);
                    if ($parentTop) {
                        var parent_6 = $parentTop;
                        if (that.options.replaceParent) {
                            parent_6 = $("<div></div>");
                            parent_6.append(that.$elementTop);
                            $parentTop.replaceWith(parent_6);
                        }
                        else
                            parent_6.append(that.$elementTop);
                    }
                    if ($parentBottom) {
                        $parentBottom.append(that.$elementBottom);
                    }
                    that._setEvents();
                }
            };
            ToolBar.prototype.destroy = function () {
                var that = this;
                that._removeEvents();
                that.$elementTop = null;
                that.options = null;
                that.toolElements = null;
                that._map = null;
                if (that.toolElements) {
                    that.toolElements.forEach(function (item) {
                        if (item.$component) {
                            item.$component.destroy();
                            item.$component = null;
                        }
                    });
                    that.toolElements = null;
                }
                that._form = null;
                that._schema = null;
                that._schemaItems = null;
                that._subcontrols = null;
            };
            return ToolBar;
        }());
        ui.ToolBar = ToolBar;
        var ToolbarForm = /** @class */ (function (_super) {
            __extends(ToolbarForm, _super);
            function ToolbarForm(fp, options, form) {
                var _this = _super.call(this, fp, options, form) || this;
                _this._state();
                return _this;
            }
            ToolbarForm.prototype.getValue = function (name) {
                return this._toolbar.getValue(name);
            };
            ToolbarForm.prototype.setValue = function (name, value) {
                this._toolbar.setValue(name, value);
            };
            ToolbarForm.prototype.refresh = function () {
                this._toolbar.refresh();
            };
            ToolbarForm.prototype.getOptions = function (name) {
                return this._toolbar.getOptions(name);
            };
            ToolbarForm.prototype.setOptions = function (name, value) {
                this._toolbar.setOptions(name, value);
            };
            ToolbarForm.prototype.changed = function (propName, ov, nv, op) {
                var that = this;
                that.refresh();
            };
            ToolbarForm.prototype.destroy = function () {
                var that = this;
                _super.prototype.destroy.call(this);
            };
            ToolbarForm.prototype.click = function (event) { };
            ToolbarForm.prototype._createContainer = function (id) {
                var style = this.renderOptions.style || "";
                return _utils.format('<div id="{0}" data-render="{0}" class="bs-tile ' + style + '"></div>', id);
            };
            ToolbarForm.prototype._onSelectToolElement = function (toolElement) {
                var that = this;
                var toolName = toolElement.name || toolElement.id;
                that.form.execAction(that.$bind + ".$toolbar." + toolName, { toolElement: toolElement, control: that });
            };
            ToolbarForm.prototype.render = function ($parent) {
                var that = this;
                var opts = that._initOptions(_uiutils.utils.defaultOptions);
                if (!that.$element) {
                    that.$element = $(that._createContainer(that.id));
                    var toolElements = that.state.value || [];
                    toolElements.forEach(function (item) {
                        item = $.extend(true, item, item.data, { options: item.options });
                        delete item.data;
                        delete item.options;
                        return item;
                    });
                    var toptions = { selectToolElement: that._onSelectToolElement.bind(that) };
                    that._toolbar = new _ui.ToolBar(toolElements, toptions);
                    that._toolbar.render(that.$element);
                }
                that.appendElement($parent, opts);
                return that.$element;
            };
            return ToolbarForm;
        }(ui.AbsField));
        ui.ToolbarForm = ToolbarForm;
        _ui.registerControl(ToolbarForm, "array", false, "toolbar");
    })(ui = Phoenix.ui || (Phoenix.ui = {}));
})(Phoenix || (Phoenix = {}));
